package nc.impl.uap.itfcheck;

import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.regex.Pattern;

import org.dom4j.DocumentException;

import nc.bs.dao.BaseDAO;
import nc.bs.dao.DAOException;
import nc.itf.uap.itfcheck.IInterfaceCheck;
import nc.net.sf.json.JSONArray;
import nc.net.sf.json.JSONObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.SuperVO;
import nc.vo.pub.lang.UFDouble;
import nc.vo.uap.itfcheck.SENDMESSAGEVO;
import nc.vo.uap.itfcheck.XbusRestRequestEntity;
import nc.vo.uap.itfcheck.XmlAggEntity;
import nc.vo.uap.itfcheck.XmlBEntity;
import nc.vo.uap.itfcheck.XmlHEntity;


/**
 * 组装、拆解、发送  电文 实现类
 * 
 * */
public class InterfaceCheckImpl implements IInterfaceCheck {

	/**
	 * 组装
	 * */
	public JSONObject assembleItfData(JSONObject json, String hname,String bname) {
		XmlAggEntity hxml = null;
		XmlAggEntity bxml = null;
		if(!isEmpty(hname)){
			return returnMsg(false, "未获取到接口配置文档编号，请检查", null);
		}
		//获取xml配置文件
		ReadItfConfigXml cfgxml = new ReadItfConfigXml();
		XmlAggEntity xmlcfg = null;
		try {
			hxml = cfgxml.getConfigXml(hname);
			if(isEmpty(bname)){
				bxml = cfgxml.getConfigXml(bname);
			}
		} catch (DocumentException e) {
			//e.printStackTrace();
			return returnMsg(false, "获取接口配置文件异常，请检查", e.getMessage());
		}
		
		//解析配置文件
		XmlHEntity hhvo = hxml.getParentVO();
		String hdatatype = hhvo.getDatatype();
		ArrayList<XbusRestRequestEntity> istr = null;
		if("JSON".equals(hdatatype)){
			try {
				istr = assembleJson(hxml,json);
			} catch (BusinessException e) {
				//e.printStackTrace();
				return returnMsg(false, "JSON接口转化失败，请检查！", e.getMessage());
			}
		}else{
			try {
				istr = assembleXbus(hxml,bxml,json);
			} catch (BusinessException e) {
				//e.printStackTrace();
				return returnMsg(false,"XBUS接口转化失败，请检查！", e.getMessage());
			}
		}
		
		if(istr!=null){
			JSONArray jrr = new JSONArray();
			for (int i = 0; i < istr.size(); i++) {
				XbusRestRequestEntity xe = istr.get(i);
				JSONObject job = new JSONObject();
				job.put("url", xe.getUrl());
				job.put("msgSendTime", xe.getMsgSendTime());
				job.put("msgToken", xe.getMsgToken());
				job.put("password", xe.getPassword());
				job.put("serviceId", xe.getServiceId());
				job.put("sourceAppCode", xe.getSourceAppCode());
				job.put("tempField", xe.getTempField());
				job.put("version", xe.getVersion());
				job.put("msgBody", xe.getMsgBody());
				job.put("version", xe.getVersion());
				jrr.add(job);
			}
			return returnMsg(true,"接口转化完成", jrr.toString());
		}else{
			return returnMsg(false,"接口转化失败，请检查！",null);
		}
		
	}

	/**
	 * 拆解xbus 回执的电文字符串
	 * @return JSONObject
	 * */
	public JSONObject disassembleItfData(String str, String itfcode) {
		// 获取xml配置文件
		ReadItfConfigXml cfgxml = new ReadItfConfigXml();
		XmlAggEntity xmlcfg = null;
		try {
			xmlcfg = cfgxml.getConfigXml(itfcode);
		} catch (DocumentException e) {
			//e.printStackTrace();
			return returnMsg(false, "获取接口配置文件" + itfcode + ".xml异常，请检查！",e.getMessage());
		}
		//非空校验
		if(!isEmpty(str)){
			return returnMsg(false, "未获取到需要解析电文字符，请检查！",null);
		}
		
		//edit by zwx 2019-10-10 xbus中文占两个字节
//		int flen = str.length();
		int flen= str.getBytes().length;
		int xlen = getXbusLen(xmlcfg);
		
		if(xlen!=flen){
			return returnMsg(false, "传入电文长度【"+flen+"】与接口配置长度【"+xlen+"】不等，请检查！",null);
		}
		
		
		//截取字符
		JSONObject jdata = xbusSubString(xmlcfg, str);
		if(jdata.size()>0){
			return returnMsg(true, "电文解析完成", jdata.toString());
		}else{
			return returnMsg(false, "电文截取失败", jdata.toString());
		}
	}
	
	/**
	 * 发送HTTP请求
	 * @param type== JSON/XBUS
	 * */
	public JSONObject sendRequest(JSONObject j, String type) {
		//json  -->
		XbusRestRequestEntity xre = new XbusRestRequestEntity();
		xre.setUrl(j.getString("url"));
		xre.setMsgToken(j.getString("msgToken"));
		xre.setPassword(j.getString("password"));
		xre.setServiceId(j.getString("serviceId"));
		xre.setSourceAppCode(j.getString("sourceAppCode"));
		xre.setTempField(j.getString("tempField"));
		xre.setVersion(j.getString("version"));
		xre.setMsgBody(j.getString("msgBody"));
		xre.setMsgSendTime(getServiceTime());
		
		SENDMESSAGEVO svo = null;
		HttpRequest hr = new HttpRequest();
		JSONObject rjson = null;
		if ("JSON".equals(type)) {
			rjson = hr.sendXbus(xre, "JSON");
		} else {
			rjson = hr.sendXbus(xre, "XBUS");
		}
		String s = (String) rjson.get("states");
		if ("success".equals(s)) {
			String message = (String) rjson.get("message");
			String data = (String) rjson.get("data");
			svo = recordInsertVO(xre.getServiceId(), xre.getMsgBody(),new Integer(0), message + data);
			InsertVO(svo);//存储记录
			return returnMsg(true, "请求发送成功", message + data);
		} else {
			String message = (String) rjson.get("message");
			String data = (String) rjson.get("data");
			svo = recordInsertVO(xre.getServiceId(), xre.getMsgBody(),new Integer(-1), message + data);
			InsertVO(svo);
			return returnMsg(false, "请求发送失败", message + data);
		}

	}
	
	/**
	 * 向数据库插入记录
	 * */
	private void InsertVO(SuperVO svo) {
		BaseDAO base = new BaseDAO();
		try {
			base.insertVO(svo);
		} catch (DAOException e) {
			e.printStackTrace();
		}
	}


	/**
	 * @param billcode 单据号
	 * @param val 消息体
	 * @param in 0==成功   1==失败
	 * @param mess 执行消息
	 * */
	private SENDMESSAGEVO recordInsertVO(String billcode, String val, Integer in,String mess) {
		long lt = new Date().getTime();
		SENDMESSAGEVO svo = new SENDMESSAGEVO();
		svo.setMessage_body(val);
		svo.setMessage_code(lt+"");
		svo.setMessage_state(in);
		svo.setMessage_group_name(billcode);
		svo.setMessage_operate_version(new UFDouble(0.00));
		svo.setMessage_operate_info(mess);
		svo.setPk_corp("0001");
		svo.setDr(new Integer(0));
		return svo;
	}





	
	/**
	 * 按配置文档截取字符
	 * */
	private JSONObject xbusSubString(XmlAggEntity xmlcfg,String str) {
		JSONObject json = new JSONObject();
		if(xmlcfg==null){
			return json;
		}
		int sumn = 0;
		XmlBEntity[] xbs = xmlcfg.getChildrenVO();
		if(xbs.length>0){
			for (int i = 0; i < xbs.length; i++) {
				String fcode = xbs[i].getFieldcode();
				int flen = xbs[i].getFieldlength();
				String ftype = xbs[i].getFieldtype();
//				String v = str.substring(0, flen);
//				str = str.substring(flen, str.length());
				//edit by zwx  2019-10-10 按照长度截取
				byte[] by = str.getBytes();
				String v = getByteCut(by,sumn,flen);				
				//end by zwx
				if("C".equals(ftype)){
					json.put(fcode, v.trim());					
				}else if("N".equals(ftype)){
//					json.put(fcode, v.trim());
					//add by zwx 2019-10-11 根据小数点位数移动小数点
					Integer precise = xbs[i].getFieldprecise()==null?new Integer(0):xbs[i].getFieldprecise();
					if(precise.intValue()==0){
						json.put(fcode, v.trim());
					}else{
						if(new Integer(v.trim()).intValue()==0){//为0不需要小数点移动
							json.put(fcode, v.trim());
						}else{
							StringBuffer plen = new StringBuffer();
							plen.append("1");
							for(int j=0;j<precise.intValue();j++){
								plen.append("0");
							}
							UFDouble afterV = new UFDouble(v.trim()).div(new UFDouble(plen.toString()));
							json.put(fcode, afterV);
						}
						
					}
					//end by zwx
					
				}else if("D".equals(ftype)){
					json.put(fcode, v.trim());
				}
				sumn= sumn+flen;
			}
		}
		return json;
	}
	
	/**
	 * 电文中的数值解析
	 * */
	private String xbusStrToVal(XmlBEntity b,String s) {
		String vs = "";
		int flen = b.getFieldlength();
		int fpre = b.getFieldprecise();
		String ftype = b.getFieldtype();
		if("N".equals(ftype)){
			String zs = s.substring(0, flen-fpre);
			String xs = s.substring(flen-fpre);
			int izs = Integer.parseInt(zs); 
			int ixs = Integer.parseInt("0."+xs); 
			UFDouble nv = new UFDouble(0);
			nv.add(izs);
			nv.add(ixs);
			vs = nv.toString();
		}else if("D".equals(ftype)){
			DateFormat format1 = new SimpleDateFormat("yyyyMMdd");  
			DateFormat format2= new SimpleDateFormat("yyyy-MM-dd"); 
			try {
				Date d = format1.parse(s);
				vs = format2.format(d);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}else if("C".equals(ftype)){
			vs = s;
		}
		
		return vs;
	}
	
	/**
	 * 获取配置文件中接口字段总长度
	 * */
	private int getXbusLen(XmlAggEntity xmlcfg) {
		int sumn = 0;
		if(xmlcfg==null){
			return sumn;
		}
		XmlBEntity[] xbs = xmlcfg.getChildrenVO();
		if(xbs.length>0){
			for (int i = 0; i < xbs.length; i++) {
				int flen = xbs[i].getFieldlength();
				sumn= sumn+flen;
			}
		}
		return sumn;
	}
	
	
	/**
	 * 获取服务器时间
	 * 为应用系统发送消息的时间，格式为YYYYMMDDHHMMSSsss（精确到毫秒，共17位）
	 * */
	private String getServiceTime() {
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		String dt =formatter.format(new Date());
		dt = dt.replace("-", "");
		dt = dt.replace("/", "");
		dt = dt.replace(" ", "");
		dt = dt.replace(":", "");
		dt = dt.replace(".", "");
		return dt;
	}
	
	/**
	 * 组装回执
	 * */
	private JSONObject returnMsg(boolean b,String m,String c) {
		JSONObject json = new JSONObject();
		if(b){
			json.put("state", "success");
			json.put("message", m);
			json.put("content", c);
		}else{
			json.put("state", "error");
			json.put("message", m);
			json.put("content", c);
		}
		return json;
	}
	
	/**
	 * 组装---JSON格式数据
	 * @param json 
	 * @param xmlbs 
	 * @return 
	 * @throws BusinessException 
	 * */
	private ArrayList<XbusRestRequestEntity> assembleJson(XmlAggEntity hxml, JSONObject json) throws BusinessException {
		XmlHEntity xmlh = hxml.getParentVO();
		XmlBEntity[] xmlbs = hxml.getChildrenVO();
		ArrayList<XbusRestRequestEntity> rstr = new ArrayList<XbusRestRequestEntity>();
		JSONObject rjson = new JSONObject();
		boolean existbody = false;//是否有表体
		//表头循环校验
		for (int i = 0; i < xmlbs.length; i++) {
			XmlBEntity b = xmlbs[i];
			String tab = b.getHeadorbady();
			String field = b.getFieldcode();
			Integer flength = b.getFieldlength();
			Integer fprecise = b.getFieldprecise();//精度
			if("H".equals(tab)){
				Object of = json.get(field);
				if(of==null){
					throw new BusinessException("表头接口缺少【"+field+"】字段的值");
				}else{
					String jfval = of.toString();
					String ms = checkDataType(b,jfval);//数据类型校验
					if(ms!=null){
						throw new BusinessException(ms);
					}
					Integer jfvlen = jfval.length();
					if(jfvlen.compareTo(flength)==1){
						throw new BusinessException("表头接口字段【"+field+"】长度的值大于规定长度"+flength);
					}
					rjson.put(field, jfval);
				}
			}else{
				existbody = true;
			}
		}
		//表体循环校验
		if(existbody){
			JSONArray bodylist = json.getJSONArray("bodylist");
			if (bodylist==null) {
				throw new BusinessException("接口缺少表体【bodylist】的值");
			}
			JSONArray jarr = new JSONArray();
			for (int i = 0; i < bodylist.size(); i++) {
				JSONObject bjson = new JSONObject();
				JSONObject body = bodylist.getJSONObject(i);
				for (int j = 0; j < xmlbs.length; j++) {
					XmlBEntity b = xmlbs[j];
					String tb = b.getHeadorbady();
					String fb = b.getFieldcode();
					Integer fl = b.getFieldlength();
					if("B".equals(tb)){
						Object ojf = body.get(fb);
						if(ojf==null){
							throw new BusinessException("表体接口缺少【"+fb+"】字段的值");
						}else{
							String jfv = ojf.toString();
							String ms = checkDataType(b,jfv);//数据类型校验
							if(ms!=null){
								throw new BusinessException(ms);
							}
							Integer jfvlen = jfv.length();
							if(jfvlen.compareTo(fl)==1){
								throw new BusinessException("表体接口字段【"+fb+"】长度的值大于规定长度"+jfvlen);
							}
							bjson.put(fb, jfv);
						}
					}
				}
				jarr.add(bjson);
			}
			rjson.put("bodylist", jarr);
		}
		XbusRestRequestEntity he = new XbusRestRequestEntity(xmlh.getItfaddress(), rstr.toString(), null, xmlh.getMsgtoken(), xmlh.getPassword(), xmlh.getServiceid(), xmlh.getSourceappcode(), xmlh.getTempfield(), xmlh.getVersion(), null);
		rstr.add(he);
		return rstr;
	}
	
	/**
	 * 组装---电文格式数据
	 * @param json 
	 * @param xmlbs 
	 * @return 
	 * @throws BusinessException 
	 * */
	private ArrayList<XbusRestRequestEntity> assembleXbus(XmlAggEntity hxml,XmlAggEntity bxml, JSONObject json) throws BusinessException {
		XmlHEntity hxmlh = hxml.getParentVO();
		XmlBEntity[] hxmlbs = hxml.getChildrenVO();
		ArrayList<XbusRestRequestEntity> rstr = new ArrayList<XbusRestRequestEntity>();
		// 表头循环校验
		StringBuffer hstr = new StringBuffer();
		for (int i = 0; i < hxmlbs.length; i++) {
			XmlBEntity b = hxmlbs[i];
			//String tab = b.getHeadorbady();
			String field = b.getFieldcode();
			String ismustenter = b.getIsMustEnter();
			if("".equals(ismustenter)||ismustenter==null){
				ismustenter = "N";
			}
			String fisnull = b.getIsNull();
			if("".equals(fisnull)||fisnull==null){
				ismustenter = "N";
			}
			Integer flength = b.getFieldlength();
			Integer fprecise = b.getFieldprecise();// 精度
			Object of = json.get(field);
			if (of == null) {
				if("Y".equals(ismustenter)){
					throw new BusinessException("表头接口缺少【" + field + "】字段的值");
				}else{
					if("Y".equals(fisnull)){
						String rval = fieldMakeUp(b, "");	
						hstr.append(rval);
					}else{
						throw new BusinessException("表头接口【" + field + "】不可为空");
					}
				}
			} else {
				String jfval = of.toString();
				String ms = checkDataType(b,jfval);//数据类型校验
				if(ms!=null){
					throw new BusinessException(ms);
				}
				String rval = fieldMakeUp(b, jfval);
				Integer jfvlen = rval.length();
				if (jfvlen.compareTo(flength) == 1) {
					throw new BusinessException("表头接口字段【" + field+ "】长度的值大于规定长度" + flength);
				}
				if("N".equals(fisnull)){
					if(jfvlen.intValue()<=0){
						throw new BusinessException("表头接口字段【" + field + "】长度小于零，不符合规范");
					}
				}
				hstr.append(rval);
			}
		}
		XbusRestRequestEntity he = new XbusRestRequestEntity(hxmlh.getItfaddress(), hstr.toString(), null, hxmlh.getMsgtoken(), hxmlh.getPassword(), hxmlh.getServiceid(), hxmlh.getSourceappcode(), hxmlh.getTempfield(), hxmlh.getVersion(), null);
		rstr.add(he);
		if (!json.has("bodylist")) {
			if(bxml!=null){
				throw new BusinessException("未获取到JSON数据表体bodylist信息，表体信息需要【JSONObject.put('bodylist', JSONArray)】，请检查");
			}
			return rstr;
		}else{
			JSONArray bodylist = json.getJSONArray("bodylist");
			if(bxml==null){
				throw new BusinessException("JSON数据存在表体，但配置文件未获取到表体，请检查");
			}
			
			XmlHEntity bxmlh = bxml.getParentVO();
			XmlBEntity[] bxmlbs = bxml.getChildrenVO();
			
			for (int i = 0; i < bodylist.size(); i++) {
				JSONObject bjson = new JSONObject();
				JSONObject body = bodylist.getJSONObject(i);
				StringBuffer bstr = new StringBuffer();
				for (int j = 0; j < bxmlbs.length; j++) {
					XmlBEntity b = bxmlbs[j];
					//String tb = b.getHeadorbady();
					String fb = b.getFieldcode();
					Integer fl = b.getFieldlength();
					Object ojf = body.get(fb);
					if(ojf==null){
						throw new BusinessException("表体接口缺少【"+fb+"】字段的值");
					}else{
						String jfval = ojf.toString();
						String ms = checkDataType(b,jfval);//数据类型校验
						if(ms!=null){
							throw new BusinessException(ms);
						}
						String rval = fieldMakeUp(b, jfval);
						
						Integer jfvlen = rval.length();
						if (jfvlen.compareTo(fl) == 1) {
							throw new BusinessException("表体接口字段【"+fb+"】长度的值大于规定长度"+jfvlen);
						}
						bstr.append(rval);
					}
				}
				XbusRestRequestEntity be = new XbusRestRequestEntity(bxmlh.getItfaddress(), bstr.toString(), null, bxmlh.getMsgtoken(), bxmlh.getPassword(), bxmlh.getServiceid(), bxmlh.getSourceappcode(), bxmlh.getTempfield(), bxmlh.getVersion(), null);
				rstr.add(be);
			}
			return rstr;
		}
	}
	
	/**
	 * 数据类型校验
	 * 
	 * */
	private String checkDataType(XmlBEntity b, String jfval) {
		String ms = null;
		String fd = b.getFieldcode();
		String dt = b.getFieldtype();
		if("N".equals(dt)){
			if(!isNum1(jfval)){
				ms = "字段【"+fd+"】类型为N(数值)中存在非法数据，请检查";
			}else{
				Integer nxs = b.getFieldprecise();//小数
				if(nxs==null){
					nxs = 0;
				}
				Integer nzs = b.getFieldlength()-nxs;//整数
				//加入小数、整数位校验
				String[] ns = jfval.split("\\.");//以小数点分割
				String zs = ns[0];
				String xs = null;
				if(ns.length>1){
					xs = ns[1];
				}
				//判断整数
				if(zs!=null){
					if(nzs<zs.length()){
						ms = "字段【"+fd+"】类型为N(数值)中整数部分超过长度【"+nzs+"】，请检查";
					}else{
						if(xs!=null){
							if(nxs<xs.length()){
								ms = "字段【"+fd+"】类型为N(数值)中精度超过【"+nxs+"】位，请检查";
							}							
						}
					}
				}
			}
			
		}else if("D".equals(dt)){
			if(!isValidDate(jfval)){
				ms = "字段【"+fd+"】类型为D(日期)中存在非法数据，请检查";
			}
		}
		return ms;
	}



	/**
	 * 电文字段补齐
	 * 
	 * */
	private String fieldMakeUp(XmlBEntity b,String val) {
		String ftype = b.getFieldtype();
		Integer flen = b.getFieldlength();
		Integer fprec = b.getFieldprecise();
		//数值精度为空
		if(fprec==null){
			fprec = new Integer(0);
		}
		if("C".equals(ftype)){
			Integer vlen = val.length();
			if(vlen.compareTo(flen)==-1){
				val = makeUpVal(val, flen, "BOTTOM", "SPACE");
			}
		}else if("N".equals(ftype)){
			int zsnum = flen - fprec ;//整数位数= 字段长度 - 精度【小数位数】 
			String[] ns = val.split("\\.");//以小数点分割
			if(ns.length<2){//整数
				String zs = ns[0];
				String zss = new String();
				String xss = new String();
				if(Integer.valueOf(zs)>0||Integer.valueOf(zs)==0){
				 zss = makeUpVal(zs, zsnum, "TOP", "ZERO");
				 xss = makeUpVal("", fprec, "BOTTOM", "ZERO");
				 val = zss+xss;			
				}else{
				xss = makeDownVal(flen,zs);
				val = zss+xss;
				}
//				val = zss+xss;
			}else{
				String zs = ns[0];
				String xs = ns[1];
				if(Integer.valueOf(zs)>0||Integer.valueOf(zs)==0){
				String zss = makeUpVal(zs, zsnum, "TOP", "ZERO");
				String xss = makeUpVal(xs, fprec, "BOTTOM", "ZERO");
				val = zss+xss;
				}else{
				String zss = makeDownVal(flen,zs+xs);
//				String xss = makeUpVal(xs, fprec, "BOTTOM", "ZERO");
				val = zss;	
				}
			}
		}else if("D".equals(ftype)){
			val = val.replace("/", "");
			val = val.replace("-", "");
			val = val.replace(" ", "");
		}
		return val;
	}
	
	/**
	 * 补零/补空格
	 * len=需求长度
	 * act=TOP/BOTTOM   v=space/zero
	 * */
	private String makeUpVal(String val,Integer len,String act,String v) {
//		int vallen = val.length();
		//add by zwx 2019-10-10 中文获取字节长度
		int vallen = val.getBytes().length;
		int munum = len-vallen;
		if(munum>0){
			StringBuffer mustr = new StringBuffer();
			if("SPACE".equals(v)){
				for (int i = 0; i < munum; i++) {
					mustr.append(" ");
				}
			}else{
				for (int i = 0; i < munum; i++) {
					mustr.append("0");
				}
			}
			//前补
			if("TOP".equals(act)){
				val = mustr+val;
			}else{
				//后补
				val = val+mustr;
			}
		}
		return val;
	}
	
	/**
	 * 非小数、数字校验
	 * 
	 * */
	private boolean isNum1(String str){
        //带小数的
        Pattern pattern = Pattern.compile("^[-+]?[0-9]+(\\.[0-9]+)?$");

        if(pattern.matcher(str).matches()){
            //数字
            return true;
        } else {
            //非数字
            return false;
        }
    }
	
	/**
	 * 非日期校验
	 * 
	 * */
	private boolean isValidDate(String str) {
		boolean convertSuccess = true;
		SimpleDateFormat format = null;
		int iof = str.indexOf("-");
		if (iof > 1) {
			format = new SimpleDateFormat("yyyy-MM-dd");
		} else {
			format = new SimpleDateFormat("yyyy/MM/dd");
		}
		try {
			// 设置lenient为false.
			// 否则SimpleDateFormat会比较宽松地验证日期，比如2007/02/29会被接受，并转换成2007/03/01
			format.setLenient(false);
			format.parse(str);
		} catch (ParseException e) {
			// e.printStackTrace();
			// 如果throw java.text.ParseException或者NullPointerException，就说明格式不对
			convertSuccess = false;
		}
		return convertSuccess;
	}
	
    /**
     * 非空非null判断
     * @return 非空==true / 空==false
     * */
    private boolean isEmpty(String s) {
		boolean b = false;
		if(s != null && s != ""){
			b = true;
		}
		return b;
	}

    
    
    /**
     * 截取字节
     * @param bytes
     * @param startIn
     * @param len
     * @return
     */
    public String getByteCut(byte[] bytes,int startIn,int len){
    	byte[] destPos = new byte[len];
    	System.arraycopy(bytes, startIn, destPos, 0, len);
    	return new String(destPos);
    }
    //end by zwx
    /**
     * 负数前补0
     * @param bytes
     * @param startIn
     * @param len
     * @return
     */
    private String makeDownVal(int a,String val){
    	int num = val.length();
    	int munum = a - num;
    	StringBuffer mustr = new StringBuffer();
    	for (int i = 0; i < munum; i++) {
			mustr.append("0");
		}
    	String vals = new String();
    	vals ="-"+ mustr;
    	val = vals+val.replace("-", "");
		return val;
    	
    }


}
