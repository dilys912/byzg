/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.dm.dm104;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Vector;

import nc.bs.dm.pub.DmDMO;
import nc.bs.pub.SystemException;
import nc.bs.pub.pf.IQueryData;
import nc.bs.pub.pf.IQueryData2;
import nc.bs.scm.pub.smart.RichDMO;
import nc.bs.scm.pub.smart.SmartDMO;
import nc.vo.dm.dm104.DelivbillHHeaderVO;
import nc.vo.dm.dm104.DelivbillHItemVO;
import nc.vo.dm.dm104.DelivbillHVO;
import nc.vo.dm.pub.DMBillTypeConst;
import nc.vo.dm.pub.DMDataVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.VOStatus;
import nc.vo.pub.billcodemanage.BillCodeObjValueVO;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.pub.session.ClientLink;
import nc.vo.scm.pub.smart.ISmartVO;
import nc.vo.scm.pub.smart.SmartFieldMeta;


/**
 * DelivbillH的DMO类。
 *
 * 创建日期：(2002-6-3)
 * @author：左小军
 */
public class DelivbillHDMO extends DmDMO implements IQueryData {
/**
 * DelivbillHDMO 构造子注解。
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public DelivbillHDMO() throws javax.naming.NamingException, SystemException {
	super();
}

///**
//* 回写发运单已出库数量。
//* 功能：
//* 作者：左小军
//* 参数：
//* 返回：
//* 例外：
//* 日期：(2002-9-20 10:20:26)
//* 修改日期，修改人，修改原因，注释标志：
//* @param vos nc.vo.dm.pub.DMDataVO[]
//*/
//public void setOutnum(DMDataVO[] vos) throws Exception {
//	Connection con= null;
//	PreparedStatement stmt= null, stmt2= null, stmt3= null;
//
//	try {
//		//回写发运单的已出库数量
//		con= getConnection();
//		String SQL=
//		  	" update dm_delivbill_b set doutnum = ISNULL(doutnum,0.0) +( ? )  where  pk_delivbill_b = ?  and irowstatus<>"+DelivBillStatus.End;
//		stmt= prepareStatement(con, SQL);
//
//		for (int i= 0; i < vos.length; i++) {
//			if (vos[i].getAttributeValue("noutnum") != null)
//				stmt.setBigDecimal(1, ((UFDouble) vos[i].getAttributeValue("noutnum")).toBigDecimal());
//			else
//				stmt.setNull(1, Types.DECIMAL);
//
//			if (vos[i].getAttributeValue("pksourceb") != null)
//				stmt.setString(2, vos[i].getAttributeValue("pksourceb").toString());
//			else
//				stmt.setNull(2, Types.VARCHAR);
//
//			executeUpdate(stmt);
//		}
//		executeBatch(stmt);
//
//
//		//对于已经关闭的发运单，需要更新“回写上游数量”字段
//		SQL=
//		  	" update dm_delivbill_b set doutnum = ISNULL(doutnum,0.0) +(?), nfeedbacknum = ISNULL(nfeedbacknum,0.0) +(?)  "
//		    +"where  pk_delivbill_b = ?  and irowstatus="+DelivBillStatus.End;
//		stmt2= prepareStatement(con, SQL);
//
//		for (int i= 0; i < vos.length; i++) {
//			if (vos[i].getAttributeValue("noutnum") != null) {
//			    stmt2.setBigDecimal(1, ((UFDouble) vos[i].getAttributeValue("noutnum")).toBigDecimal());
//			    stmt2.setBigDecimal(2, ((UFDouble) vos[i].getAttributeValue("noutnum")).toBigDecimal());
//			}
//			else {
//			    stmt2.setNull(1, Types.DECIMAL);
//			    stmt2.setNull(2, Types.DECIMAL);
//			}
//
//
//			if (vos[i].getAttributeValue("pksourceb") != null)
//			    stmt2.setString(3, vos[i].getAttributeValue("pksourceb").toString());
//			else
//			    stmt2.setNull(3, Types.VARCHAR);
//
//			executeUpdate(stmt2);
//		}
//		executeBatch(stmt2);
//
//
//		//更新表头时间戳
//		StringBuffer headSql= new StringBuffer();
//
//		headSql= new StringBuffer();
//		headSql.append("UPDATE dm_delivbill_h SET dr = 0 WHERE pk_delivbill_h =?");
//		stmt3= prepareStatement(con, headSql.toString());
//
//		for (int i= 0; i < vos.length; i++) {
//		    stmt3.setString(1, (String)vos[i].getAttributeValue("pksourceh"));
//			executeUpdate(stmt3);
//		}
//		executeBatch(stmt3);
//	} catch (Exception e) {
//		e.printStackTrace();
//		throw e;
//	} finally {
//		try {
//			if (stmt != null) {
//				stmt.close();
//			}
//		} catch (Exception e) {
//		}
//
//		try {
//			if (stmt2 != null) {
//				stmt2.close();
//			}
//		} catch (Exception e) {
//		}
//
//		try {
//			if (stmt3 != null) {
//				stmt3.close();
//			}
//		} catch (Exception e) {
//		}
//
//		try {
//			if (con != null) {
//				con.close();
//			}
//		} catch (Exception e) {
//		}
//	}
//}

/**
 * <p>根据表头的主键查询一个VO。
 * <p>
 * 创建日期：(2002-6-3)
 * @param key ??dbFieldType??
 * @exception java.sql.SQLException 异常说明。
 */
public DelivbillHVO findByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "findByPrimaryKey", new Object[] { key });
	/*************************************************************/

	DelivbillHVO vo= new DelivbillHVO();
	//
	DelivbillHHeaderVO header= findHeaderByPrimaryKey(key);
	DelivbillHItemVO[] items= null;

	String headerKey = null;
	try {
		headerKey= header.getPrimaryKey();
	}catch(Exception e) {
		throw new java.sql.SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40140408","UPP40140408-000122")/*@res "方法 header.getPrimaryKey() 出错！"*/);
	}
	if (header != null) {
		items= findItemsForHeaderWhere(headerKey, null);
	}
	//
	vo.setParentVO(header);
	vo.setChildrenVO(items);

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "findByPrimaryKey", new Object[] { key });
	/*************************************************************/

	return vo;
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-6-3)
 * @return nc.vo.dm.dm104.DelivbillHHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public DelivbillHHeaderVO findHeaderByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "findHeaderByPrimaryKey", new Object[] { key });
	/*************************************************************/

	DelivbillHHeaderVO[] dhvos=
		findallHeaderByWhere(null, "dm_delivbill_h.pk_delivbill_h ='" + key + "'");

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "findHeaderByPrimaryKey", new Object[] { key });
	/*************************************************************/

	if (null != dhvos && dhvos.length == 1)
		return dhvos[0];
	return null;

	//return delivbillHead;
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-6-3)
 * @return nc.vo.dm.dm104.DelivbillHItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public DelivbillHItemVO findItemByPrimaryKey(String key) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "findItemByPrimaryKey", new Object[] { key });
	/*************************************************************/

	DelivbillHItemVO[] divos=
		findItemsForHeaderWhere(null, "dm_delivbill_h.pk_delivbill_b ='" + key + "'");

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "findItemByPrimaryKey", new Object[] { key });
	/*************************************************************/

	if (null != divos && divos.length == 1)
		return divos[0];
	return null;

	//return delivbillHItem;
}


/**
 * <p>删除母子表的所有内容。
 * <p>
 * 创建日期：(2002-6-3)
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public void delete(DelivbillHVO vo, ClientLink clientLink) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "delete", new Object[]{vo});
	/*************************************************************/

	//删除表体
	//deleteItemsForHeader(headerKey);

	//删除表头　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
	//deleteHeader((DelivbillHHeaderVO)vo.getParentVO());


	RichDMO richDMO = null;
	try {
		richDMO = new  RichDMO();
	}catch(Exception e) {
		throw new SQLException(e.getMessage());
	}

	richDMO.model2_DeleteBatch(clientLink, new AggregatedValueObject[]{vo}, "pk_delivbill_h");

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "delete", new Object[]{vo});
	/*************************************************************/
}

/**
 * 2002.08.08加入时间戳处理。
 * <p>将VO插入母子表。
 * <p>
 * 创建日期：(2002-6-3)
 * @param vo nc.vo.dm.dm104.DelivbillHVO
 *
 * @return java.util.ArrayList 结构为：  {String, ArrayList, String[], String[]}
 * 第一个返回元素 String 为表头pk， 第二个返回元素 String[] 为表体的 pk 数组，
 * 第三个返回元素 String 为表头 ts, 第四个返回元素 String[] 为表体 ts 数组
 *
 * @version 20050303_by_zxping
 *
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList insert(DelivbillHVO vo, ClientLink clientLink) throws java.sql.SQLException, nc.bs.pub.SystemException, javax.transaction.SystemException, nc.vo.pub.BusinessException {


	RichDMO richDMO = null;
	try {
		richDMO = new  RichDMO();
	}catch(Exception e) {
		throw new SQLException(e.getMessage());
	}

	richDMO.model2_EditBatch(clientLink,
			new AggregatedValueObject[]{vo},
			"pk_delivbill_h",   //fkOfItem
			"pkcorpforgenoid",
			"pkcorpforgenoid",
			true);//neednewts

	DelivbillHItemVO[] items = (DelivbillHItemVO[]) vo.getChildrenVO();

	String[] sBodyPks = new String[items.length];
	String[] sBodyTs = new String[items.length];
	//将所有新增表体的 pk 返回
	for (int i = 0; i < items.length; i++) {
		sBodyPks[i]= items[i].getAttributeValue("pk_delivbill_b").toString();
		sBodyTs[i] = items[i].getAttributeValue("ts").toString();
	}

	ArrayList resultlist = new ArrayList();
	//表头 pk
	resultlist.add((String)vo.getParentVO().getAttributeValue("pk_delivbill_h"));
	resultlist.add(sBodyPks);
	resultlist.add(vo.getParentVO().getAttributeValue("ts").toString());
	resultlist.add(sBodyTs);

	return resultlist;



}

/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-6-3)
 * @return nc.vo.dm.dm104.DelivbillHItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList findInfoForInv(String pkinv) throws SQLException {
	ArrayList result= new ArrayList();

	StringBuffer sql=
		new StringBuffer("select  invcode,invname,invspec,invtype,measname from bd_invmandoc ");
	sql.append(
		" inner join bd_invbasdoc on bd_invbasdoc.pk_invbasdoc = bd_invmandoc.pk_invbasdoc ");
	sql.append(
		" left outer join bd_measdoc on bd_invbasdoc.pk_measdoc = bd_measdoc.pk_measdoc ");
	sql.append(" where pk_invmandoc = ?");

	Connection con= null;

	PreparedStatement stmt= null;
	ResultSet rs= null;
	try {
		con= getConnection();
		stmt= con.prepareStatement(sql.toString());
		stmt.setString(1, pkinv);
		rs= stmt.executeQuery();
		//
		if (rs.next()) {
			//
			String invcode= rs.getString("invcode");
			result.add(0, invcode == null ? null : invcode.trim());
			//
			String invname= rs.getString("invname");
			result.add(1, invname == null ? null : invname.trim());
			//
			String invspec= rs.getString("invspec");
			result.add(2, invspec == null ? null : invspec.trim());
			//
			String invtype= rs.getString("invtype");
			result.add(3, invtype == null ? null : invtype.trim());
			//
			String measname= rs.getString("measname");
			result.add(4, measname == null ? null : measname.trim());

		}
	} finally {
		try{
		if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	return result;
}

/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-5-16)
 * @return nc.vo.dm.dm001.DelivorgHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public String findRouteDescr(String pkroute) throws SQLException {
	if (pkroute == null)
		return "";
	else {
		StringBuffer routeDescr= new StringBuffer();
		StringBuffer sql=	new StringBuffer();
		sql.append(	"select bd_address.addrname  from bd_routeaddr " )
		.append("left outer join bd_address on bd_routeaddr.pkcustspot=bd_address.pk_address ")
		.append("where bd_routeaddr.dr=0 and bd_routeaddr.pkroute='")
		.append(pkroute.trim())
		.append("' and bd_routeaddr.dr=0 ");


		Connection con= null;
		PreparedStatement stmt= null;
		ResultSet rs= null;
		try {
			con= getConnection();
			stmt= con.prepareStatement(sql.toString());
			rs= stmt.executeQuery();
			while (rs.next()) {
				String addressname= rs.getString(1);
				if (addressname != null)
					if (routeDescr.toString().equals("") == true) {
						routeDescr.append(addressname);
					} else {
						routeDescr.append("--");
						routeDescr.append(addressname);
					}

			}
			//
			//rs.close();
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			}
			catch (Exception e) {
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}
		return routeDescr.toString();
	}
}



/**
 * 由路线和到货地址查询里程。
 * 创建日期：(2002-7-17 13:42:41)
 * @return nc.vo.pub.lang.UFDouble
 * @param destname java.lang.String
 * @param pkroute java.lang.String
 */
public UFDouble getMileagebyAdrress(String destname, String pkroute)
	throws java.sql.SQLException {
	UFDouble mileage= null;
	BigDecimal mile= null;
	String sql=
		"select dmileage from bd_route "
		+"left outer join bd_routeaddr on bd_routeaddr.pkroute=bd_route.pk_route "
		+"left outer join bd_areacl  on bd_routeaddr.pkcustaddr= bd_areacl.pk_areacl "
		+"where bd_routeaddr.pkroute= ? and bd_areacl.areaclname = ? ";
	Connection con= null;
	PreparedStatement stmt= null;
	ResultSet rs = null;
	try {
		con= getConnection();
		stmt= con.prepareStatement(sql);
		stmt.setString(1, pkroute);
		stmt.setString(2, destname);
		rs = stmt.executeQuery();
		//
		if (rs.next()) {
			mile= rs.getBigDecimal(1);
			if (mile != null)
				mileage= new UFDouble(mile);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return mileage;
}

/**
 * 此处插入方法说明。
 * 创建日期：(2002-6-18 10:18:22)
 */
public DelivbillHItemVO[] queryStatus(String[] pkdayplans) throws SQLException {
	StringBuffer sb = new StringBuffer("SELECT pkdayplan, irowstatus from dm_delivbill_b where ");
	for (int i = 0; i < pkdayplans.length; i++) {
		sb.append(" pkdayplan = '" + pkdayplans[i] + "' ");
		if (i != pkdayplans.length - 1)
			sb.append(" or ");
	}
	DelivbillHItemVO[] delivbillHItems = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sb.toString());
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			DelivbillHItemVO delivbillHItem = new DelivbillHItemVO();
			//日计划行主键
			String pkdayplan = rs.getString("pkdayplan");
			delivbillHItem.setPkdayplan(pkdayplan == null ? null : pkdayplan.trim());
			//发运单行状态
			Integer irowstatus = (Integer) rs.getObject("irowstatus");
			delivbillHItem.setIrowstatus(irowstatus == null ? null : irowstatus);
			v.addElement(delivbillHItem);
		}
	}
	finally {
		try {
			if (rs != null) {
				rs.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		}
		catch (Exception e) {
		}
	}
	delivbillHItems = new DelivbillHItemVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(delivbillHItems);
	}

	return delivbillHItems;
}

/**
 * 自动核销发运单。
 *
 * 创建日期：(2002-6-3)
 * @param delivbillHItem nc.vo.dm.dm104.DelivbillHItemVO
 * @exception java.sql.SQLException 异常说明。
 */
public void auotVerify(String sHeadPK) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "auotVerify", new Object[] { sHeadPK });
	/*************************************************************/
	Connection con= null;
	PreparedStatement stmt= null;
	try {
		StringBuffer sb= new StringBuffer();

		sb.append("update dm_delivbill_b set btestbyinvoice = 'Y' where pk_delivbill_b = '" + sHeadPK + "' and (btestbyinvoice is null or btestbyinvoice='N') ");

		con= getConnection();
		stmt= con.prepareStatement(sb.toString());
		stmt.executeUpdate();

		String str= "update dm_delivbill_h set dr=0 where pk_delivbill_h = '" + sHeadPK + "'";
		stmt= con.prepareStatement(str);
		stmt.executeUpdate();

	//} catch (Exception e) {
		//e.printStackTrace();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "auotVerify", new Object[] { sHeadPK });
	/*************************************************************/
}

/**
 * 创建日期：(2003-11-5 19:55:49)
 * 作者：仲瑞庆
 * 参数：
 * 返回：
 * 说明：
 * @return java.util.ArrayList
 * @param vo nc.vo.dm.dm104.DelivbillHVO
 */
public ArrayList execAudit(DelivbillHVO vo) throws SQLException, BusinessException, SystemException {
	ArrayList resultlist= new ArrayList();
	String key;
	String headkey;
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "execAudit", new Object[] { vo });
	/*************************************************************/

	/**处理时间截 modified by czp on 2002-10-06 begin */
	try {

		DelivbillHItemVO[] items= (DelivbillHItemVO[]) vo.getChildrenVO();
		if (items == null || items.length == 0)
			return null;

		//更新表体数据
		String sql= "update dm_delivbill_b set irowstatus = ? where pk_delivbill_h = ?";

		//改为 SmartVO 形式的更新处理方式
		//参数值
		ArrayList values = new ArrayList();
		ArrayList elem = new ArrayList();
		elem.add(items[0].getIrowstatus());
		elem.add(items[0].getPk_delivbill_h());
		values.add(elem);
		//参数类型
		ArrayList javatypes = new ArrayList();
		javatypes.add(new Integer(SmartFieldMeta.JAVATYPE_INTEGER));
		javatypes.add(new Integer(SmartFieldMeta.JAVATYPE_STRING));

		RichDMO richDMO = null;
		try {
			richDMO = new  RichDMO();
		}catch(Exception e) {
			throw new SQLException(e.getMessage());
		}
		richDMO.executeUpdateBatch(sql, values, javatypes);

		//updateHeader((DelivbillHHeaderVO) vo.getParentVO());
		//改为 SmartVO 形式的更新处理方式
		//更新表头数据
		sql= "update dm_delivbill_h set pkapprperson = ?, apprdate = ?, taudittime = ? where pk_delivbill_h = ?";
		DelivbillHHeaderVO headVO = (DelivbillHHeaderVO)vo.getParentVO();
		//参数值
		values = new ArrayList();
		elem = new ArrayList();
		elem.add(headVO.getPkapprperson()); //审批人
		elem.add(headVO.getApprdate()); //审批日期
		elem.add(headVO.getTaudittime()); // 审核时间
		elem.add(headVO.getPk_delivbill_h()); //表头主键
		values.add(elem);
		//参数类型
		javatypes = new ArrayList();
		javatypes.add(new Integer(SmartFieldMeta.JAVATYPE_STRING));
		javatypes.add(new Integer(SmartFieldMeta.JAVATYPE_UFDATE));
		javatypes.add(new Integer(SmartFieldMeta.JAVATYPE_STRING));
		javatypes.add(new Integer(SmartFieldMeta.JAVATYPE_STRING));
		richDMO.executeUpdateBatch(sql, values, javatypes);

		DmDMO dmd= new DmDMO();
		String strTimeStamp= null;
		key= (String) vo.getParentVO().getPrimaryKey();
		if (key != null && key.trim().length() > 0) {
			strTimeStamp= dmd.queryTimeStamp("dm_delivbill_h", "pk_delivbill_h", key);
			resultlist.add(strTimeStamp);
		}

	} catch (Exception e) {
		e.printStackTrace();
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40140408","UPP40140408-000123")/*@res "系统异常，请稍后再试"*/);
	}
	/**处理时间截 modified by czp on 2002-10-06 begin */

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "update", new Object[] { vo });
	/*************************************************************/
	return resultlist;
}

/**
 * 作者：李金巧
 * 功能：取得某个指定表中某个字段的一组值
 * 参数：tableName		表名
 * 参数：fieldName		要查询的字段名
 * 参数：key			键值字段
 * 参数：values			键值数组
 * 返回：
 * 例外：
 * 日期：(2002-4-2 11:53:15)
 * 修改日期，修改人，修改原因，注释标志：
 *
 */
public java.util.Hashtable fetchArrayValue(
	String tableName,
	String fieldName,
	String key,
	String whereKey,
	String[] values)
	throws SQLException {
	Hashtable table= new Hashtable();

	//拼接Sql语句
	StringBuffer buffer=
		new StringBuffer("select " + key + ", " + fieldName + " from " + tableName);
	if (values != null && values.length > 0) {
		buffer.append(" where (" + whereKey + " = '" + values[0] + "'");
		for (int i= 1; i < values.length; i++) {
			buffer.append(" or " + whereKey + " = '" + values[i] + "'");
		}
		buffer.append(")");
	}

	Vector s= new Vector();

	Connection con= null;
	PreparedStatement stmt= null;
	ResultSet rs= null;
	try {
		con= getConnection();
		stmt= con.prepareStatement(buffer.toString());
		rs= stmt.executeQuery();

		//
		String keyValue= null;
		String fieldValue= null;
		while (rs.next()) {
			keyValue= rs.getString(1);
			if (keyValue == null || keyValue.trim() == "")
				continue;
			fieldValue= rs.getString(2);
			if (fieldValue == null || fieldValue.trim() == "")
				continue;
			if (!table.containsKey(keyValue))
				table.put(keyValue, fieldValue);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	return table;

}

/*当任务单保存完成后，
 *需要更新发运单表头 ts
 **/
public DelivbillHHeaderVO findHeaderFieldsValue(String whereclause)
	throws SQLException {
	StringBuffer sql = new StringBuffer();
	sql.append("select ts from dm_delivbill_h where "+whereclause);

	DelivbillHHeaderVO[] heads = null;
	SmartDMO smartDMO = null;
	try {
		smartDMO = new  SmartDMO();
	}catch(Exception e) {
		throw new SQLException(e.getMessage());
	}

	heads = (DelivbillHHeaderVO[])smartDMO.selectBySql(sql.toString(), nc.vo.dm.dm104.DelivbillHHeaderVO.class);
	if(heads==null || heads.length==0)
		return null;
	return heads[0];


}



/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-5-16)
 * @return nc.vo.dm.dm001.DelivorgHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 *
 * 注:
 * 该方法原名为 findallHeaderByWhereForSign，
 * 只是由于其与原方法 findallHeaderByWhere 意义相同，
 * 故将原方法 findallHeaderByWhere commented
 */
public DelivbillHHeaderVO[] findallHeaderByWhere(String pkdo, String whereclause)
	throws SQLException {

	//String[] headroute= null;
	StringBuffer[] routeDescr = null;

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm001.DelivorgDMO", "findHeaderByPrimaryKey", new Object[] {});
	/*************************************************************/

	StringBuffer sql = new StringBuffer();
	sql
		.append("select dm_delivbill_h.vdelivbillcode, dm_delivbill_h.pkdelivorg as pkdelivorg,")
		.append(" dm_delivbill_h.pkdelivmode, dm_delivbill_h.pktrancust as pktrancust, dm_delivbill_h.pktranorg,")
		.append(" dm_delivbill_h.pkvehicle as pkvehicle,dm_delivbill_h.pkdelivroute,")
		.append("sm_user.user_name, dm_delivbill_h.pkdriver, dm_delivbill_h.vnote,")

		.append(" dm_delivbill_h.vuserdef4 as vuserdef4, dm_delivbill_h.vuserdef3 as vuserdef3,")
		.append(" dm_delivbill_h.vuserdef2 as vuserdef2, dm_delivbill_h.vuserdef1 as vuserdef1,")
		.append(" dm_delivbill_h.vuserdef0 as vuserdef0, ")

		.append("dm_delivbill_h.pkbillperson, dm_delivbill_h.billdate,")
		.append(" dm_delivbill_h.pkapprperson, dm_delivbill_h.apprdate, dm_delivbill_h.senddate, dm_delivbill_h.bmissionbill,")
		.append("apprvuser.user_name,  dm_delivbill_h.bconfirm, dm_delivbill_h.pk_delivbill_h, ")
		.append(" bd_deptdoc.deptname,bd_sendtype.sendname,bd_cubasdoc.custname as vtranname,")//eric bd_route.vroutename,
		.append("dm_vehicle.vvehiclename,dm_vehicletype.vvhcltypename,dm_vehicle.vehiclelicense,")
		.append("dm_vehicle.pkvehicletype as pkvehicletype , ")
		.append("case when dm_driver.vdrivername is null then bd_psndoc.psnname else dm_driver.vdrivername end as vdrivername ,")
		.append(" dm_delivbill_h.ts ,dm_delivbill_h.pkoperator,dm_delivbill_h.pkoprdepart, ")
		.append(" dm_delivbill_h.vuserdef9 as vuserdef9,")
		.append(" dm_delivbill_h.vuserdef8 as vuserdef8, dm_delivbill_h.vuserdef7 as vuserdef7,")
		.append(" dm_delivbill_h.vuserdef6 as vuserdef6, dm_delivbill_h.vuserdef5 as vuserdef5, ")
		.append(" bd_delivorg.vdoname,")
		.append(" bd_cubasdoc.linkman1 as linkman1,bd_cubasdoc.phone1 as phone1, ")
		.append(" dm_delivbill_h.startdate as startdate, dm_delivbill_h.returndate as returndate, ")
		.append(" dm_delivbill_h.starttime as starttime, dm_delivbill_h.returntime as returntime,  ");
		sql.append(" dm_delivbill_h.dallpacknum, dm_delivbill_h.dallweight,  dm_delivbill_h.dallvolumn,dm_delivbill_h.dfactweight, ")

		//v3.1新增自定义项
		.append("dm_delivbill_h.vuserdef10, dm_delivbill_h.vuserdef11, dm_delivbill_h.vuserdef12, ")
		.append("dm_delivbill_h.vuserdef13, dm_delivbill_h.vuserdef14, dm_delivbill_h.vuserdef15, dm_delivbill_h.vuserdef16, ")
		.append("dm_delivbill_h.vuserdef17, dm_delivbill_h.vuserdef18, dm_delivbill_h.vuserdef19, dm_delivbill_h.pk_defdoc0, ")
		.append("dm_delivbill_h.pk_defdoc1, dm_delivbill_h.pk_defdoc2, dm_delivbill_h.pk_defdoc3, dm_delivbill_h.pk_defdoc4, ")
		.append("dm_delivbill_h.pk_defdoc5, dm_delivbill_h.pk_defdoc6, dm_delivbill_h.pk_defdoc7, dm_delivbill_h.pk_defdoc8, ")
		.append("dm_delivbill_h.pk_defdoc9, dm_delivbill_h.pk_defdoc10, dm_delivbill_h.pk_defdoc11, dm_delivbill_h.pk_defdoc12,")
		.append("dm_delivbill_h.pk_defdoc13, dm_delivbill_h.pk_defdoc14, dm_delivbill_h.pk_defdoc15, dm_delivbill_h.pk_defdoc16, ")
		.append("dm_delivbill_h.pk_defdoc17, dm_delivbill_h.pk_defdoc18, dm_delivbill_h.pk_defdoc19,  ")


		.append(" dm_delivbill_h.iprintcount, " )
		.append(" dm_delivbill_h.isendtype, ")
		// 新增最后修改人，最后修改时间，制单时间，审核时间
		.append(" dm_delivbill_h.taudittime,dm_delivbill_h.tmaketime, ")
		.append(" dm_delivbill_h.tlastmodifytime,dm_delivbill_h.clastmodifierid ");

	sql.append(" from dm_delivbill_h ");
//	sql.append(" inner join bd_route on dm_delivbill_h.pkdelivroute=bd_route.pk_route ");
	sql.append(" left outer join bd_deptdoc on  dm_delivbill_h.pktranorg=bd_deptdoc.pk_deptdoc  ");
	sql.append(" left outer join bd_sendtype on dm_delivbill_h.pkdelivmode=bd_sendtype.pk_sendtype  ");
	sql.append(" left outer join dm_trancust on dm_delivbill_h.pktrancust=dm_trancust.pk_trancust   ");
	//Modified by xhq 2002/10/07 begin
	sql.append(" left outer join bd_cubasdoc on dm_trancust.pkcusmandoc=bd_cubasdoc.pk_cubasdoc   ");
	//Modified by xhq 2002/10/07 end
	sql.append(" left outer join dm_vehicle on dm_delivbill_h.pkvehicle=dm_vehicle.pk_vehicle  ");
	sql.append(
		" left outer join dm_vehicletype on dm_vehicle.pkvehicletype=dm_vehicletype.pk_vehicletype  ");
	sql.append(" left outer join dm_driver on dm_delivbill_h.pkdriver=dm_driver.pk_driver ");

	sql.append(" left outer join bd_psndoc on dm_driver.pk_psndoc=bd_psndoc.pk_psndoc ");
	sql.append(" left outer join sm_user on dm_delivbill_h.pkbillperson=sm_user.cuserid ");
	sql.append(
		" left outer join sm_user as apprvuser on dm_delivbill_h.pkapprperson=apprvuser.cuserid ");
	sql.append(" inner join bd_delivorg on bd_delivorg.pk_delivorg = dm_delivbill_h.pkdelivorg ");
	sql.append(" where dm_delivbill_h.dr=0 ");
	if (null != pkdo && pkdo.trim().length() != 0) {
		sql.append(" and dm_delivbill_h.pkdelivorg='");
		sql.append(pkdo);
		sql.append("' ");
	}
	if (whereclause != null && whereclause.trim().length() != 0) {
		sql.append(" and ");
		sql.append(whereclause);
	}

	DelivbillHHeaderVO[] heads = null;
	SmartDMO smartDMO = null;
	try {
		smartDMO = new  SmartDMO();
	}catch(Exception e) {
		throw new SQLException(e.getMessage());
	}

	heads = (DelivbillHHeaderVO[])smartDMO.selectBySql(sql.toString(), nc.vo.dm.dm104.DelivbillHHeaderVO.class);
	if(heads==null || heads.length==0)
		return null;



	DelivbillHHeaderVO delivbillHead = null;

//由于改为 SmartDMO 的方法，故如下一点方法被替换掉

	PreparedStatement stmt = null;
	ResultSet rs =  null;

	try {


		routeDescr = new StringBuffer[heads.length];
		sql =
			new StringBuffer("select pkroute,areaclname from bd_routeaddr ")
			.append("inner join bd_areacl on bd_routeaddr.pkcustaddr=bd_areacl.pk_areacl where bd_routeaddr.dr=0 and ( 1=0 ");
		//查询每个单据的路线描述
		Hashtable pkrouteHash = new Hashtable();
		for (int i = 0; i < heads.length; i++) {
			routeDescr[i] = new StringBuffer();
			delivbillHead = heads[i];
			if (delivbillHead != null
				&& delivbillHead.getPkdelivroute() != null
				&& !pkrouteHash.containsKey(delivbillHead.getPkdelivroute().trim())) {
				pkrouteHash.put(delivbillHead.getPkdelivroute().trim(), "Y");
				sql.append(" or pkroute = '");
				sql.append(delivbillHead.getPkdelivroute().trim());
				sql.append("'");
			}
		}
		sql.append(")");

		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		rs = stmt.executeQuery();
		while (rs.next()) {
			String pkroute = rs.getString(1);
			String addressname = rs.getString(2);
			if (pkroute != null && addressname != null)
				for (int i = 0; i < heads.length; i++) {
					if (heads[i].getPkdelivroute() != null && heads[i].getPkdelivroute().equals(pkroute))
						if (routeDescr[i].toString().equals("")) {
							routeDescr[i].append(addressname);
						}
						else {
							routeDescr[i].append("--");
							routeDescr[i].append(addressname);
						}
				}
		}
		//

		for (int i = 0; i < heads.length; i++) {
			heads[i].setVroutedescr(routeDescr[i].toString());
		}


	}
	finally {
		try{
		if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		}
		catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm001.DelivorgDMO", "findHeaderByPrimaryKey", new Object[] {
	});
	/*************************************************************/
	return heads;
}

/**
 * <p>根据表头的主键查询一个VO。
 * <p>
 * 创建日期：(2002-6-3)
 * @param key ??dbFieldType??
 * @exception java.sql.SQLException 异常说明。
 */
public DelivbillHVO findByPrimaryKeyWhere(String key, String itemwhere) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "findByPrimaryKey", new Object[] { key });
	/*************************************************************/

	DelivbillHVO vo= new DelivbillHVO();
	//
	DelivbillHHeaderVO header= null; // findHeaderByPrimaryKey(key);
	DelivbillHItemVO[] items= null;
	//if (header != null) {
	items= findItemsForHeaderWhere(key, itemwhere);
	//}
	//
	vo.setParentVO(header);
	vo.setChildrenVO(items);

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "findByPrimaryKey", new Object[] { key });
	/*************************************************************/

	return vo;
}

/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-6-3)
 * @return nc.vo.dm.dm104.DelivbillHItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public DelivbillHItemVO[] findItemsForHeaderWhere(String key, String whereclause) throws SQLException {
	//删除dfee
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "findItemsForHeader", new Object[] { key });
	/*************************************************************/

	StringBuffer sql = new StringBuffer();
	sql.append("select distinct pk_delivbill_b, dm_delivbill_b.pk_delivbill_h as pk_delivbill_h, dm_delivbill_b.irownumber, ");
	sql.append(" dm_delivbill_b.pkinv as pkinv, dm_delivbill_b.pkassistmeasure as pkassistmeasure, ");
	sql.append(" dm_delivbill_b.vbatchcode as vbatchcode, dm_delivbill_b.ibatchstatus as ibatchstatus, ");
	sql.append(" dm_delivbill_b.vfree1 as vfree1, dm_delivbill_b.vfree2 as vfree2,dm_delivbill_b.vfree3 as vfree3, ");
	sql.append(" dm_delivbill_b.vfree4 as vfree4,dm_delivbill_b.vfree5 as vfree5,dm_delivbill_b.vfree6 as vfree6, ");
	sql.append(" dm_delivbill_b.vfree7 as vfree7,dm_delivbill_b.vfree8 as vfree8,dm_delivbill_b.vfree9 as vfree9, ");
	sql.append(" dm_delivbill_b.vfree10 as vfree10, ");
	sql.append(" dm_delivbill_b.dinvnum, dm_delivbill_b.dinvweight, dm_delivbill_b.dinvassist, ").append("dm_delivbill_b.dvolumn as dvolumn, dm_delivbill_b.requireday, ").append(
		"dm_delivbill_b.receivedate, dm_delivbill_b.pkcusmandoc, ");
	sql.append(" dm_delivbill_b.pkdeststockorg, dm_delivbill_b.blargess, dm_delivbill_b.dcancelnum,").append(
		" dm_delivbill_b.dsignnum as dsignnum, dm_delivbill_b.doutnum as doutnum, dm_delivbill_b.pksendstockorg, ");
	sql.append(" dm_delivbill_b.pksendstock, dm_delivbill_b.pkorder, dm_delivbill_b.vordercode, ");
	sql.append(" dm_delivbill_b.vbilltype as vbilltype, dm_delivbill_b.pkorderrow, dm_delivbill_b.pkitem as pkitem,  ");
	sql.append(" dm_delivbill_b.pkitemperiod as pkitemperiod, dm_delivbill_b.dunitprice as dunitprice, ");
	sql
		.append(" dm_delivbill_b.irowstatus, dm_delivbill_b.pksalecorp as pksalecorp, dm_delivbill_b.pksalegrp,")
		.append(" dm_delivbill_b.bsigned, dm_delivbill_b.vnote,")

		.append(" dm_delivbill_b.vuserdef4 ,  dm_delivbill_b.vuserdef3, ")
		.append(" dm_delivbill_b.vuserdef2,  dm_delivbill_b.vuserdef1, ")
		.append(" dm_delivbill_b.vuserdef0 ,  ");

	sql.append(" dm_delivbill_b.bappendent, dm_delivbill_b.dsourcerow, dm_delivbill_b.pkdayplan,").append(" dm_delivbill_b.vconsign, dm_delivbill_b.pkdestrep, ");
	sql.append("  dm_delivbill_b.vsignname, dm_delivbill_b.pk_transcontainer as pk_transcontainer, ");
	sql.append(" dm_delivbill_b.vcargcode, dm_delivbill_b.vdestaddress as vdestaddress, ");
	sql.append(" bd_invbasdoc.invcode,bd_invbasdoc.invname,bd_invbasdoc.invspec,bd_invbasdoc.invtype,");
	sql.append("bd_measdoc1.measname as measname,custname,custcode,bd_measdoc2.measname as measname1  ");
	sql.append(",bd_calbody.bodyname as destbodyname,bd_areacl.areaclname as destareaclname,");
	sql.append("bd_stordoc.storname as deststorname,bd_stordoc.storaddr as deststoraddr,unitname,");
	sql.append("vsalestruname,srccalbody.bodyname as srcbodyname,srccalbody.area as srcarea,srcareacl.areaclname as srcareaclname,");
	sql.append("srcstordoc.storname as srcstorname,srcstordoc.storaddr as srcstoraddr,");
	sql.append("jobname,jobphasename,vclassname,custareacl.areaclname as custareaclname,")
	//"dmileage,")
	.append("srcareacl.pk_areacl as pksrccalbodyar, bd_areacl.pk_areacl as pkdestareacl ");
	sql.append(" ,dm_delivbill_b.pkarrivearea,arriveareacl.areaclname as vdestarea ");
	sql
		.append(" ,dm_delivbill_b.ibetimes, dm_delivbill_b.ipacking, dm_delivbill_b.iattitude, ")
		.append("dm_delivbill_b.breceiveinform, dm_delivbill_b.ionroadtime, dm_delivbill_b.vsignnote, ")
		.append("dm_delivbill_b.ts,dm_delivbill_b.btestbyinvoice,dm_delivbill_b.confirmarrivedate,")
		.append("dm_delivbill_b.cfreezeid,dm_delivbill_b.creceiptcorpid,dm_delivbill_b.vdayplancode, ")


		.append(" dm_delivbill_b.vuserdef5,")

		.append("dm_delivbill_b.cbiztype, ");

	//modified by liubing
	sql.append(
		" dm_delivdaypl.pkoperator,dm_delivdaypl.pkoprdepart,dm_delivbill_b.pksendaddress as pksendaddress, dm_delivbill_b.pkarriveaddress as pkarriveaddress,dm_delivbill_b.orderplantime as orderplantime,dm_delivbill_b.plantime as plantime ");
	sql.append(",dm_delivbill_b.iloadnum as iloadnum, dm_delivbill_b.pksendarea, ")


	//v3.1新增自定义项
	.append("dm_delivbill_b.vuserdef6, dm_delivbill_b.vuserdef7, dm_delivbill_b.vuserdef8, ")
	.append("dm_delivbill_b.vuserdef9, dm_delivbill_b.vuserdef10, dm_delivbill_b.vuserdef11, dm_delivbill_b.vuserdef12, ")
	.append("dm_delivbill_b.vuserdef13, dm_delivbill_b.vuserdef14, dm_delivbill_b.vuserdef15, dm_delivbill_b.vuserdef16, ")
	.append("dm_delivbill_b.vuserdef17, dm_delivbill_b.vuserdef18, dm_delivbill_b.vuserdef19, dm_delivbill_b.pk_defdoc0, ")
	.append("dm_delivbill_b.pk_defdoc1, dm_delivbill_b.pk_defdoc2, dm_delivbill_b.pk_defdoc3, dm_delivbill_b.pk_defdoc4, ")
	.append("dm_delivbill_b.pk_defdoc5, dm_delivbill_b.pk_defdoc6, dm_delivbill_b.pk_defdoc7, dm_delivbill_b.pk_defdoc8, ")
	.append("dm_delivbill_b.pk_defdoc9, dm_delivbill_b.pk_defdoc10, dm_delivbill_b.pk_defdoc11, dm_delivbill_b.pk_defdoc12,")
	.append("dm_delivbill_b.pk_defdoc13, dm_delivbill_b.pk_defdoc14, dm_delivbill_b.pk_defdoc15, dm_delivbill_b.pk_defdoc16, ")
	.append("dm_delivbill_b.pk_defdoc17, dm_delivbill_b.pk_defdoc18, dm_delivbill_b.pk_defdoc19  ");


	//skg
	sql.append(" from dm_delivbill_b ");
	sql.append(" inner join bd_invmandoc on dm_delivbill_b.pkinv=bd_invmandoc.pk_invmandoc ");
	sql.append(" inner join bd_invbasdoc on bd_invbasdoc.pk_invbasdoc = bd_invmandoc.pk_invbasdoc ");
	sql.append(" left outer join bd_measdoc as bd_measdoc1 on bd_invbasdoc.pk_measdoc = bd_measdoc1.pk_measdoc ");
	sql.append(" left outer join bd_cumandoc on bd_cumandoc.pk_cumandoc = dm_delivbill_b.pkcusmandoc ");
	sql.append(" left outer join bd_cubasdoc on bd_cumandoc.pk_cubasdoc = bd_cubasdoc.pk_cubasdoc ");
	//sql.append(" left outer join bd_cubasdoc on bd_cubasdoc.pk_cubasdoc = dm_delivbill_b.pkcusmandoc ");
	//
	sql.append(" left outer join bd_areacl as custareacl on bd_cubasdoc.pk_areacl= custareacl.pk_areacl  ");
	sql.append(" left outer join bd_measdoc as bd_measdoc2 on dm_delivbill_b.pkassistmeasure = bd_measdoc2.pk_measdoc ");
	sql.append(" left outer join bd_calbody on dm_delivbill_b.pkdeststockorg = bd_calbody.pk_calbody  ");
	sql.append(" left outer join bd_areacl on bd_calbody.pk_areacl= bd_areacl.pk_areacl ");
	sql.append(" left outer join bd_stordoc on dm_delivbill_b.pkdestrep=bd_stordoc.pk_stordoc ");
	sql.append(" left outer join bd_corp on dm_delivbill_b.pksalecorp=bd_corp.pk_corp ");
	sql.append(" left outer join bd_salestru on dm_delivbill_b.pksalegrp=bd_salestru.csalestruid ");
	sql.append(" left outer join bd_calbody srccalbody on dm_delivbill_b.pksendstockorg = srccalbody.pk_calbody  ");
	sql.append(" left outer join bd_areacl srcareacl on srccalbody.pk_areacl= srcareacl.pk_areacl ");
	sql.append(" left outer join bd_stordoc srcstordoc on dm_delivbill_b.pksendstock=srcstordoc.pk_stordoc  ");
	sql.append(" left outer join bd_jobbasfil on dm_delivbill_b.pkitem=bd_jobbasfil.pk_jobbasfil ");
	sql.append(" left outer join bd_jobphase on dm_delivbill_b.pkitemperiod=bd_jobphase.pk_jobphase ");
	sql.append(" left outer join dm_transcontainer on dm_delivbill_b.pk_transcontainer=dm_transcontainer.pk_transcontainer ");
	sql.append(" inner join dm_delivbill_h on dm_delivbill_b.pk_delivbill_h=dm_delivbill_h.pk_delivbill_h ");
//	sql.append(" inner join bd_route on bd_route.pk_route=dm_delivbill_h.pkdelivroute "); eric 2012-8-15
	//sql.append(" left outer join bd_routeaddr on ").append(" bd_routeaddr.pkroute=bd_route.pk_route ");
	sql.append(" inner join dm_delivdaypl on dm_delivbill_b.pkdayplan=dm_delivdaypl.pk_delivdaypl ");
	sql.append(" left outer join bd_areacl arriveareacl on arriveareacl.pk_areacl=dm_delivbill_b.pkarrivearea ");
	sql.append(" where dm_delivbill_b.dr=0 ");
	//.append("  and (bd_cubasdoc.pk_areacl=bd_routeaddr.pkcustaddr or bd_calbody.pk_areacl=bd_routeaddr.pkcustaddr)")
	if (null != key && key.trim().length() != 0) {
		sql.append(" and dm_delivbill_b.pk_delivbill_h = '" + key + "'");
	}
	if (whereclause != null && whereclause.trim().length() != 0) {
		sql.append(" and ");
		sql.append(whereclause);
	}

	SmartDMO smartDMO = null;
	try {
		smartDMO = new  SmartDMO();
	}catch(Exception e) {
		throw new SQLException(e.getMessage());
	}

	DelivbillHItemVO[]  delivbillHItems = (DelivbillHItemVO[])smartDMO.selectBySql(sql.toString(), nc.vo.dm.dm104.DelivbillHItemVO.class);
	return delivbillHItems;

}


/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-6-3)
 * @return nc.vo.dm.dm104.DelivbillHItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public DelivbillHItemVO[] findItemsForMutiHeader(String pkdo, String headerwhere, String whereclause, UFBoolean ufbIsForSoFee) throws SQLException {
	StringBuffer sql = new StringBuffer();
	sql.append("select distinct dm_delivbill_b.pk_delivbill_b, dm_delivbill_b.pk_delivbill_h as pk_delivbill_h, dm_delivbill_b.irownumber, ");
	sql.append(" dm_delivbill_b.pkinv as pkinv, dm_delivbill_b.pkassistmeasure as pkassistmeasure, ");
	sql.append(" dm_delivbill_b.vbatchcode as vbatchcode, dm_delivbill_b.ibatchstatus as ibatchstatus, ");
	sql.append(" dm_delivbill_b.vfree1 as vfree1, dm_delivbill_b.vfree2 as vfree2,dm_delivbill_b.vfree3 as vfree3, ");
	sql.append(" dm_delivbill_b.vfree4 as vfree4,dm_delivbill_b.vfree5 as vfree5,dm_delivbill_b.vfree6 as vfree6, ");
	sql.append(" dm_delivbill_b.vfree7 as vfree7,dm_delivbill_b.vfree8 as vfree8,dm_delivbill_b.vfree9 as vfree9, ");
	sql.append(" dm_delivbill_b.vfree10 as vfree10, ");
	sql.append(" dm_delivbill_b.dinvnum, dm_delivbill_b.dinvweight, dm_delivbill_b.dinvassist, ").append("dm_delivbill_b.dvolumn as dvolumn, dm_delivbill_b.requireday, ").append(
		"dm_delivbill_b.receivedate, dm_delivbill_b.pkcusmandoc, ");
	sql.append(" dm_delivbill_b.pkdeststockorg, dm_delivbill_b.blargess, dm_delivbill_b.dcancelnum,").append(
		" dm_delivbill_b.dsignnum as dsignnum, dm_delivbill_b.doutnum as doutnum, dm_delivbill_b.pksendstockorg, ");
	sql.append(" dm_delivbill_b.pksendstock, dm_delivbill_b.pkorder, dm_delivbill_b.vordercode, ");
	sql.append(" dm_delivbill_b.vbilltype as vbilltype, dm_delivbill_b.pkorderrow, dm_delivbill_b.pkitem as pkitem,  ");
	sql.append(" dm_delivbill_b.pkitemperiod as pkitemperiod, dm_delivbill_b.dunitprice as dunitprice, ");
	sql
		.append(" dm_delivbill_b.irowstatus, dm_delivbill_b.pksalecorp as pksalecorp, dm_delivbill_b.pksalegrp,")
		.append(" dm_delivbill_b.bsigned, dm_delivbill_b.vnote,")

		.append(" dm_delivbill_b.vuserdef4 ,  dm_delivbill_b.vuserdef3, ")
		.append(" dm_delivbill_b.vuserdef2,  dm_delivbill_b.vuserdef1, ")
		.append(" dm_delivbill_b.vuserdef0 ,  ");

	sql.append(" dm_delivbill_b.bappendent, dm_delivbill_b.dsourcerow, dm_delivbill_b.pkdayplan,").append(" dm_delivbill_b.vconsign, dm_delivbill_b.pkdestrep, ");
	sql.append("  dm_delivbill_b.vsignname, dm_delivbill_b.pk_transcontainer as pk_transcontainer, ");
	sql.append(" dm_delivbill_b.vcargcode, dm_delivbill_b.vdestaddress as vdestaddress, ");

	sql.append("vclassname,");

	sql.append("dm_delivbill_b.pkarrivearea, ")

	//采购订单到货计划ID,来源订单是否退货单,发货单位,发货地址
	.append("dm_delivbill_b.pkorderplanid, dm_delivbill_b.borderreturn, dm_delivbill_b.csendcorpid, dm_delivbill_b.vsendaddr, ")

	.append("dm_delivbill_b.bcloseout, ")
		.append(" dm_delivbill_b.ibetimes, dm_delivbill_b.ipacking, dm_delivbill_b.iattitude, ")
		.append("dm_delivbill_b.breceiveinform, dm_delivbill_b.ionroadtime, dm_delivbill_b.vsignnote, ")
		.append("dm_delivbill_b.ts,dm_delivbill_b.btestbyinvoice,dm_delivbill_b.confirmarrivedate,")
		.append("dm_delivbill_b.cfreezeid,dm_delivbill_b.creceiptcorpid,dm_delivbill_b.vdayplancode, ")

		.append(" dm_delivbill_b.vuserdef5, ")

		.append("dm_delivbill_b.cbiztype, ")
		.append("dm_delivbill_b.pksendaddress as pksendaddress , dm_delivbill_b.pkarriveaddress as pkarriveaddress , ")
		.append("dm_delivbill_b.dwaylossnum ,dm_delivbill_b.orderplantime as orderplantime,dm_delivbill_b.plantime as plantime ");
	sql.append(",dm_delivbill_b.iloadnum as iloadnum, dm_delivbill_b.pkarrivecorp, dm_delivbill_b.pksendarea, ")
	//sql.append(" dm_delivdaypl.pkoperator,dm_delivdaypl.pkoprdepart ");
	//改为公式收货单位联系方式sql.append(" ,bd_cubasdoc1.linkman1,bd_cubasdoc1.phone1 ");

	//v3.1新增自定义项
	.append("dm_delivbill_b.vuserdef6, dm_delivbill_b.vuserdef7, dm_delivbill_b.vuserdef8, ")
	.append("dm_delivbill_b.vuserdef9, dm_delivbill_b.vuserdef10, dm_delivbill_b.vuserdef11, dm_delivbill_b.vuserdef12, ")
	.append("dm_delivbill_b.vuserdef13, dm_delivbill_b.vuserdef14, dm_delivbill_b.vuserdef15, dm_delivbill_b.vuserdef16, ")
	.append("dm_delivbill_b.vuserdef17, dm_delivbill_b.vuserdef18, dm_delivbill_b.vuserdef19, dm_delivbill_b.pk_defdoc0, ")
	.append("dm_delivbill_b.pk_defdoc1, dm_delivbill_b.pk_defdoc2, dm_delivbill_b.pk_defdoc3, dm_delivbill_b.pk_defdoc4, ")
	.append("dm_delivbill_b.pk_defdoc5, dm_delivbill_b.pk_defdoc6, dm_delivbill_b.pk_defdoc7, dm_delivbill_b.pk_defdoc8, ")
	.append("dm_delivbill_b.pk_defdoc9, dm_delivbill_b.pk_defdoc10, dm_delivbill_b.pk_defdoc11, dm_delivbill_b.pk_defdoc12,")
	.append("dm_delivbill_b.pk_defdoc13, dm_delivbill_b.pk_defdoc14, dm_delivbill_b.pk_defdoc15, dm_delivbill_b.pk_defdoc16, ")
	.append("dm_delivbill_b.pk_defdoc17, dm_delivbill_b.pk_defdoc18, dm_delivbill_b.pk_defdoc19, dm_delivbill_b.dmoney,  ")
	.append("dm_delivbill_b.cquoteunitid, dm_delivbill_b.nquoteunitrate, dm_delivbill_b.nquoteunitnum, dm_delivbill_b.nfeedbacknum, ")
    .append("dm_delivbill_b.dpacknum, dm_delivbill_b.dpackweight, dm_delivbill_b.dpackvolumn, dm_delivbill_b.pk_packsort ");
    
	if (ufbIsForSoFee.booleanValue()) {
		sql.append(", fee.dfeeitem,fee.pkcustinvoice ");
	}


	//skg
	sql.append(" from dm_delivbill_b ")
	.append(" inner join dm_delivbill_h on dm_delivbill_b.pk_delivbill_h=dm_delivbill_h.pk_delivbill_h ")
//	.append(" inner join bd_route on bd_route.pk_route=dm_delivbill_h.pkdelivroute ") eric 2012-8-14
	.append(" left outer join dm_transcontainer on dm_delivbill_b.pk_transcontainer=dm_transcontainer.pk_transcontainer ");
			
	//为代垫费用联查运费单
	if (ufbIsForSoFee.booleanValue()) {
		sql.append("inner join (select sum(isnull(dfeeitemplan,dfeeitemfact)) dfeeitem, pkcustinvoice, dm_delivfeebill_b.pk_delivbill_b ")
		.append("from dm_delivfeebill_b where dm_delivfeebill_b.dr=0 group by dm_delivfeebill_b.pk_delivbill_b,pkcustinvoice) as fee ")
		.append("on  fee.pk_delivbill_b = dm_delivbill_b.pk_delivbill_b ");
	}
	
	//sql.append(" left outer join bd_routeaddr on ").append(" bd_routeaddr.pkroute=bd_route.pk_route ");
	if ((whereclause != null) && ((whereclause.indexOf("vdelivdayplcode") >= 0) || (whereclause.indexOf("vsrcbillnum") >= 0)))
		sql.append(" inner join dm_delivdaypl on dm_delivbill_b.pkdayplan=dm_delivdaypl.pk_delivdaypl ");

	sql.append(" where dm_delivbill_b.dr=0 ");
	
	//为代垫费用联查运费单
	if (ufbIsForSoFee.booleanValue()) {
		sql.append("and dm_delivbill_b.cfee_bid is null ");
	}

	sql.append(" and  dm_delivbill_b.pk_delivbill_h IN (");
	//子查询
	sql.append(" select  dm_delivbill_h.pk_delivbill_h  from dm_delivbill_h ");
	sql.append(" where dm_delivbill_h.dr=0 ");

	if (pkdo != null) {
		sql.append(" and dm_delivbill_h.pkdelivorg='");
		sql.append(pkdo);
		sql.append("' ");
	}
	if (headerwhere != null && !headerwhere.equals("")) {
		sql.append(" and ");
		sql.append(headerwhere);
	}
	//
	sql.append(")");

	if (whereclause != null && whereclause.trim().length() != 0) {
		sql.append(" and ");
		sql.append(whereclause);
	}


	SmartDMO smartDMO = null;
	try {
		smartDMO = new  SmartDMO();
	}catch(Exception e) {
		throw new SQLException(e.getMessage());
	}

	DelivbillHItemVO[]  delivbillHItems = (DelivbillHItemVO[])smartDMO.selectBySql(sql.toString(), nc.vo.dm.dm104.DelivbillHItemVO.class);
	return delivbillHItems;

}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-6-3)
 * @return nc.vo.dm.dm104.DelivbillHItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public DelivbillHItemVO[] findItemsForMutiHeader(String pkdo, String headerwhere, String whereclause) throws SQLException {
	return findItemsForMutiHeader(pkdo, headerwhere, whereclause, new UFBoolean(false));
}


/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-5-16)
 * @return nc.vo.dm.dm001.DelivorgHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList findRecieveCustlink(String pkcust) throws SQLException {
	ArrayList result = new ArrayList();
	if (pkcust == null)
		return null;
	else {
		StringBuffer routeDescr = new StringBuffer();

		StringBuffer sql =
			new StringBuffer(
				"select linkman1,phone1 from bd_cumandoc "
					+ " inner join bd_cubasdoc on bd_cumandoc.pk_cubasdoc=bd_cubasdoc.pk_cubasdoc where bd_cumandoc.dr=0 and bd_cumandoc.pk_cumandoc='");
		sql.append(pkcust.trim());
		sql.append("'");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql.toString());
			rs = stmt.executeQuery();
			while (rs.next()) {
				String linkman1 = rs.getString(1);
				String phone1 = rs.getString(2);
				result.add(linkman1);
				result.add(phone1);
			}
			//
			//rs.close();
		}
		finally {
			try {
				if (rs != null) {
					rs.close();
				}
			}
			catch (Exception e) {
			}

			try {
				if (stmt != null) {
					stmt.close();
				}
			}
			catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			}
			catch (Exception e) {
			}
		}
		return result;
	}
}

/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-5-16)
 * @return nc.vo.dm.dm001.DelivorgHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public boolean isMustSign(String pksendtype) throws SQLException {
	boolean result = false;
	if (pksendtype == null || pksendtype.trim().length() == 0) {
	}
	else {
		StringBuffer sql =
			new StringBuffer(
				"select isacceptted from bd_sendtype where bd_sendtype.dr=0 and pk_sendtype='");
		sql.append(pksendtype);
		sql.append("'");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql.toString());
			rs = stmt.executeQuery();
			while (rs.next()) {

				String isacceptted = rs.getString(1);
				if (isacceptted != null
					&& isacceptted.trim().length() != 0
					&& isacceptted.equalsIgnoreCase("Y")) {
					result = true;
				}
			}
		}
		finally {
			try {
				if (rs != null) {
					rs.close();
				}
			}
			catch (Exception e) {
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			}
			catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			}
			catch (Exception e) {
			}
		}
	}
	return result;
}

/**
 * 查找发运单表体行所有到货库存组织的仓库。
 *
 * 创建日期：(2002-6-3)
 * @return nc.vo.dm.dm104.DelivbillHItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList findStoresByCalbody(DelivbillHItemVO[] items, String userid) throws SQLException, BusinessException{
	ArrayList result = new ArrayList();
	//结构为若干ArrayList每个ArrayList对应一个库存组织
	//每个库存组织的ArrayList中的第一项为库存组织id，第二项为若干仓库id构成的ArrayList
	ArrayList oneCalbody = null;
	ArrayList currentCalbody = null;
	ArrayList currentStores = null;
	String onePkcalbody = null;
	boolean bCalbody;
	int i;
	//库管员权限
	//Hashtable storeUserHash = getUserStores(userid);
	//

	StringBuffer sql = new StringBuffer("select pk_calbody,pk_stordoc,storcode,storname from bd_stordoc where bd_stordoc.isdirectstore = 'N' and gubflag = 'N' and sealflag = 'N' ");
	//skg begin 2003-11-06
	/*
	Vector vTemp = new Vector();
	for (i = 0; i < items.length; i++) {
		if (items[i].getPksendstockorg() != null) {
			//sql.append(items[i].getPkdeststockorg().trim());
			vTemp.addElement(items[i].getPksendstockorg().trim());
		}
	}
	if (vTemp.size() > 0) {
		sql.append(" and (");
		for (i = 0; i < vTemp.size() - 1; i++)
			sql.append("pk_calbody = '" + (String) vTemp.elementAt(i) + "' or ");
		sql.append("pk_calbody = '" + (String) vTemp.elementAt(vTemp.size() - 1) + "') ");
	}
	*/
	Hashtable htStoreOrgs = new Hashtable();
	for (i = 0; i < items.length; i++) {
		if (items[i].getPksendstockorg() != null) {
			htStoreOrgs.put(items[i].getPksendstockorg().trim(), "");
		}
	}
	DMDataVO votool = new DMDataVO();
	String[] sStoreOrgs = votool.getAllStrKeysFromHashtable(htStoreOrgs);
	sql.append(" and ");
	sql.append(votool.getStrPKs("pk_calbody", sStoreOrgs));
	//skg end 2003-11-06
	//仓库权限过滤
//	nc.bs.bd.datapower.DataPowerServiceBO bo = new nc.bs.bd.datapower.DataPowerServiceBO();
//	boolean bUsedCalbodyPower = bo.isUsedDataPower("bd_calbody", "库存组织",  items[0].getPk_corp());
//	if (bUsedCalbodyPower){
//		sql.append(" and pk_calbody in (");
//		sql.append(bo.getSubSql("bd_calbody","库存组织",userid,items[0].getPk_corp()));
//		sql.append(" ) ");
//	}
//	boolean bUsedStorePower = bo.isUsedDataPower("bd_stordoc", "仓库档案",  items[0].getPk_corp());
//	if (bUsedStorePower){
//		sql.append(" and pk_stordoc in (");
//		sql.append(bo.getSubSql("bd_stordoc","仓库档案", userid, items[0].getPk_corp()));
//		sql.append(" ) ");
//	}  //zlq 20061025 单据暂不处理档案权限

	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			//
			String pk_calbody = rs.getString("pk_calbody");
			//
			String pk_stordoc = rs.getString("pk_stordoc");
			//
			String storname = rs.getString("storname");
			//
			if (pk_calbody != null) {
				bCalbody = false;
				for (i = 0; i < result.size(); i++) { //查找是否已有库存组织
					oneCalbody = (ArrayList) result.get(i);
					if (oneCalbody != null) {
						onePkcalbody = (String) oneCalbody.get(0);
						if (onePkcalbody != null) {
							if (onePkcalbody.trim().equals(pk_calbody.trim()) == true) {
								bCalbody = true;
								break;
							}
						}
					}
				}
				if (bCalbody == false) { //新库存组织
					currentCalbody = new ArrayList();
					//写入库存组织id
					currentCalbody.add(pk_calbody);
					//写入仓库id
					currentStores = new ArrayList();
					if (pk_stordoc != null)
						// && storeUserHash.containsValue(pk_stordoc.trim()) == true)
						currentStores.add(new String[] { pk_stordoc, storname });
					currentCalbody.add(currentStores);
					result.add(currentCalbody);
				} else { //已有库存组织
					currentStores = (ArrayList) oneCalbody.get(1);
					if (pk_stordoc != null)
						// && storeUserHash.containsValue(pk_stordoc.trim()) == true)
						currentStores.add(new String[] { pk_stordoc, storname });
				}
			}
			/*
			String invname= rs.getString("invname");
			result.add(1, invname == null ? null : invname.trim());
			//
			String invspec= rs.getString("invspec");
			result.add(2, invspec == null ? null : invspec.trim());
			//*/

		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	return result;
}

/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-5-16)
 * @return nc.vo.dm.dm001.DelivorgHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList findTrancustlink(String pktrancust) throws SQLException {
	ArrayList result = new ArrayList();
	if (pktrancust == null)
		return null;
	else {
		StringBuffer routeDescr = new StringBuffer();

		StringBuffer sql =
			new StringBuffer(
				"select linkman1,phone1 from dm_trancust "
					+ " inner join bd_cubasdoc on dm_trancust.pkcusmandoc=bd_cubasdoc.pk_cubasdoc where dm_trancust.dr=0 and dm_trancust.pk_trancust='");
		sql.append(pktrancust.trim());
		sql.append("'");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql.toString());
			rs = stmt.executeQuery();
			while (rs.next()) {
				String linkman1 = rs.getString(1);
				String phone1 = rs.getString(2);
				result.add(linkman1);
				result.add(phone1);
			}
			//
			//rs.close();
		}
		finally {
			try {
				if (rs != null) {
					rs.close();
				}
			}
			catch (Exception e) {
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			}
			catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			}
			catch (Exception e) {
			}
		}
		return result;
	}
}

/**
 * 此处插入方法说明。
 * 功能：由收货单位获得到货地区和到货地址
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2002-10-24 12:38:27)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.lang.String[]
 * @param pk_cumandoc java.lang.String
 */
public String[] getDestArea(String pk_cumandoc) throws java.sql.SQLException{
	String sql = "SELECT D.pk_areacl, areaclname, addrname ";
	sql += "FROM bd_cumandoc A, bd_cubasdoc B, bd_custaddr C, bd_areacl D ";
	sql += "WHERE pk_cumandoc = ? AND A.pk_cubasdoc = B.pk_cubasdoc AND C.pk_cubasdoc = B.pk_cubasdoc AND C.pk_areacl = D.pk_areacl";

	Connection con = null;
	PreparedStatement stmt = null;
	Vector v = new Vector();
	ResultSet rs = null;
	try {
		con= getConnection();
		stmt= con.prepareStatement(sql);
		stmt.setString(1, pk_cumandoc);
		rs = stmt.executeQuery();
		//
		if (rs.next()) {
			v.addElement(rs.getString(1));
			v.addElement(rs.getString(2));
			v.addElement(rs.getString(3));
		}
		//if(rs != null) rs.close();
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	if(v.size() > 0){
		String s[] = new String[v.size()];
		v.copyInto(s);
		return s;
	}
	return null;
}

/**
 * 取得发运单表体对应日计划的业务员业务部门置入发运单表体
 *  @param	         参数说明
 *  @return	         返回值
 *  @exception     异常描述
 *  @see               需要参见的其它内容
 *  @since	         从类的那一个版本，此方法被添加进来。（可选）
 *  @author            zhongyue
 * @return nc.vo.dm.dm104.DelivbillHItemVO
 * @param vo nc.vo.dm.dm104.DelivbillHItemVO
 */
public DelivbillHItemVO getPkoperatorForItem(DelivbillHItemVO vo) throws SQLException {

	//关联日计划表查询发运单
	StringBuffer sql = new StringBuffer();
	sql.append("select dm_delivdaypl.pkoperator,dm_delivdaypl.pkoprdepart  ");
	sql.append(" from dm_delivbill_b ");
	sql.append(
		" inner join dm_delivdaypl on dm_delivbill_b.pkdayplan=dm_delivdaypl.pk_delivdaypl ");
	sql.append(" where dm_delivbill_b.dr=0 ");

	String pk = null;
	try {
		pk= vo.getPrimaryKey();
	}catch(Exception e) {
		throw new java.sql.SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40140408","UPP40140408-000124")/*@res "方法 vo.getPrimaryKey() 出错！"*/);
	}

	if (pk != null && pk.trim().length() != 0) {
		sql.append(" and dm_delivbill_b.pk_delivbill_b = '" + pk + "'");
	}
	else
		sql.append(" and 1=0");
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		//stmt.setString(1, key);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			//dm_delivdaypl.pkoperator,dm_delivdaypl.pkoprdepart
			//取得日计划的业务员业务部门置入发运单表体
			String pkoperator = rs.getString("pkoperator");
			vo.setAttributeValue("pkoperator", pkoperator == null ? null : pkoperator.trim());
			String pkoprdepart = rs.getString("pkoprdepart");
			vo.setAttributeValue("pkoprdepart", pkoprdepart == null ? null : pkoprdepart.trim());
		}
	}
	finally {
		try {
			if (rs != null) {
				rs.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		}
		catch (Exception e) {
		}
	}

	return vo;
}

/**
 * 函数的功能、用途、对属性的更改，以及函数执行前后对象的状态。
 *  @param	         参数说明
 *  @return	         返回值
 *  @exception     异常描述
 *  @see               需要参见的其它内容
 *  @since	         从类的那一个版本，此方法被添加进来。（可选）
 *  @deprecated   该方法从类的那一个版本后，已经被其它方法替换。（可选）
 *  @author            zhongyue
 * @return java.util.Hashtable
 * @param userid java.lang.String
 */
public Hashtable getUserStores(String userid) throws java.sql.SQLException {
	Hashtable storeHash = new Hashtable();
	if (userid != null) {

		StringBuffer sql = new StringBuffer("select cwarehouseid from ic_storeadmin where cwhsmanagerid = '");
		sql.append(userid);
		sql.append("' ");
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql.toString());
			rs = stmt.executeQuery();
			//
			while (rs.next()) {
				//
				String pk_stordoc = rs.getString("cwarehouseid");
				if (pk_stordoc != null)
					storeHash.put(pk_stordoc.trim(), "1");
			}
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			} catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
			}
		}

	}
	return storeHash;
}

/**
 * 参数： 通过供应商基础ID获得供应商管理ID
 * 返回：
 * 例外：
 * 日期：(2002-12-3 16:22:50)
 * 修改日期，修改人，修改原因，注释标志：
 */
public String[] getVendorMangID(String pk_cubasdoc) throws java.sql.SQLException{
	String sql = "select pk_cumandoc from bd_cumandoc where dr = 0 and pk_cubasdoc = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	Vector v = new Vector();
	ResultSet rs = null;
	try {
		con= getConnection();
		stmt= con.prepareStatement(sql);
		stmt.setString(1, pk_cubasdoc);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			v.addElement(rs.getString(1));
		}
		//if(rs != null) rs.close();
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	if(v.size() > 0){
		String s[] = new String[v.size()];
		v.copyInto(s);
		return s;
	}
	return null;
}

/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2002-6-3)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
public boolean isBillCodeDuplicated(DelivbillHVO VO) throws java.sql.SQLException {
	boolean b = false;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		DelivbillHHeaderVO headVO = (DelivbillHHeaderVO) VO.getParentVO();
		String sql =
			"select vdelivbillcode from dm_delivbill_h where dr = 0  and vdelivbillcode = ? and pkdelivorg='"
				+ headVO.getPkdelivorg()
				+ "'";

		con = getConnection();
		stmt = con.prepareStatement(sql);

		String s = headVO.getVdelivbillcode();
		if (s != null && s.trim().length() > 0) {
			stmt.setString(1, s);

			rs  = stmt.executeQuery();

			while (rs.next()) {
				s = rs.getString(1);
				if (s != null && s.trim().length() > 0) {
					b = true;
					break;
				}
			}

			//if (rs != null)
				//rs.close();
		}
	}
	finally {
		try {
			if (rs != null) {
				rs.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		}
		catch (Exception e) {
		}
	}

	return b;
}

/**
 * 此处插入方法说明。
 * 功能：查询对应业务类型的收发类别
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2002-10-7 11:53:55)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.lang.String
 * @param sWhereClause java.lang.String
 * @exception nc.vo.pub.BusinessException 异常说明。
 */
public String queryDispatcherForCbiztype(String sWhereClause)
	throws java.sql.SQLException, javax.transaction.SystemException, nc.vo.pub.BusinessException {
	StringBuffer sb= new StringBuffer();
	sb.append(" select bd_busitype.verifyrule ").append(" from bd_busitype where bd_busitype.dr=0 ");
	if (null != sWhereClause && sWhereClause.trim().length() != 0) {
		sb.append(" and " + sWhereClause);
	}
	//查得费用构成项属性表
	DMDataVO[] ddvos= query(sb);

	if (null != ddvos && ddvos.length == 1)
		return ddvos[0].getAttributeValue("verifyrule").toString().trim();
	return "";
}

/**
 * 此处插入方法说明。
 * 功能：查询发运方式对应的费用项
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2002-8-28 18:51:39)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.dm.pub.DMDataVO[]
 * @param sWhereClause java.lang.String
 * @exception java.rmi.RemoteException 异常说明。
 */
public nc.vo.dm.pub.DMDataVO[] queryFeeItemFormula(String sWhereClause)
	throws java.sql.SQLException, javax.transaction.SystemException, nc.vo.pub.BusinessException {
	StringBuffer sb= new StringBuffer();
	sb
		.append(" select dm_feeitemformula.pksendtype,dm_feeitemformula.pktrancust, dm_feeitemformula.vfeeitmforcode,")
		.append(" dm_feeitemformula.vfeeitmforname,dm_feeitem.vfeeitemcode,dm_feeitem.vfeeitemname,dm_feeitemformula.pk_feeitem ")
		.append(" from dm_feeitemformula inner join dm_feeitem ")
		.append(" on dm_feeitemformula.pk_feeitem=dm_feeitem.pk_feeitem where dm_feeitemformula.dr=0 ");
	if (null != sWhereClause && sWhereClause.trim().length() != 0) {
		sb.append(" and " + sWhereClause);
	}
	//查得费用构成项属性表
	DMDataVO[] ddvos= query(sb);

	return ddvos;
}

/**
 * 此处插入方法说明。
 * 功能：查询运费构成项和属性
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2002-8-28 18:51:39)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.dm.pub.DMDataVO[]
 * @param sWhereClause java.lang.String
 * @exception java.rmi.RemoteException 异常说明。
 */
public nc.vo.dm.pub.DMDataVO queryForitem(String sWhereClause)
	throws java.sql.SQLException, javax.transaction.SystemException, nc.vo.pub.BusinessException {
	StringBuffer sb= new StringBuffer();
	sb.append(" select * from dm_foritem where dr=0 ");
	if (null != sWhereClause && sWhereClause.trim().length() != 0) {
		sb.append(" and " + sWhereClause);
	}
	//查得费用构成项属性表
	DMDataVO[] ddvos= query(sb);

	DMDataVO ddvo= new DMDataVO();
	for (int i= 0; i < ddvos.length; i++) {

		String resid = (String)ddvos[i].getAttributeValue("resid");

		String vforitemname = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4014",resid);

		ddvos[i].setAttributeValue("vforitemname", vforitemname);

		ddvo.setAttributeValue(ddvos[i].getAttributeValue("vforitemcode").toString(), ddvos[i]);

	}

	return ddvo;
}

/**
 * 此处插入方法说明。
 * 功能：依发货库存组织查对应的地区的ID和名称
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2002-10-7 11:53:55)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.lang.String
 * @param sWhereClause java.lang.String
 * @exception nc.vo.pub.BusinessException 异常说明。
 */
public String[] queryLocalNameIDForSendCalBody(String sWhereClause)
	throws java.sql.SQLException, javax.transaction.SystemException, nc.vo.pub.BusinessException {
	StringBuffer sb= new StringBuffer();
	sb.append(" select bd_calbody.pk_areacl,bd_areacl.areaclname ").append(
		" from bd_calbody left outer join bd_areacl on bd_calbody.pk_areacl=bd_areacl.pk_areacl where bd_calbody.dr=0 ");
	if (null != sWhereClause && sWhereClause.trim().length() != 0) {
		sb.append(" and " + sWhereClause);
	}
	//查得费用构成项属性表
	DMDataVO[] ddvos= query(sb);

	String[] sReturn= new String[2];
	if (null != ddvos && ddvos.length == 1) {
		sReturn[0]=
			ddvos[0].getAttributeValue("pk_areacl") == null
				? ""
				: ddvos[0].getAttributeValue("pk_areacl").toString().trim();
		sReturn[1]=
			ddvos[0].getAttributeValue("areaclname") == null ? nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40140408","UPP40140408-000131")/*@res "无名地区"*/
				: ddvos[0].getAttributeValue("areaclname").toString().trim();
		return sReturn;
	}
	return sReturn;
}

/**
 * 创建日期：(2003-11-4 14:41:01)
 * 作者：仲瑞庆
 * 参数：
 * 返回：
 * 说明：
 * @return nc.vo.dm.pub.DMDataVO[]
 * @param sWhereClause java.lang.String
 */
public DMDataVO[] queryLocalNameIDForSendCalBodyS(String sWhereClause)
throws java.sql.SQLException, javax.transaction.SystemException, nc.vo.pub.BusinessException{
	StringBuffer sb= new StringBuffer();
	sb.append(" select bd_calbody.pk_areacl,bd_calbody.pk_calbody,bd_areacl.areaclname ").append(
		" from bd_calbody left outer join bd_areacl on bd_calbody.pk_areacl=bd_areacl.pk_areacl where bd_calbody.dr=0 ");
	if (null != sWhereClause && sWhereClause.trim().length() != 0) {
		sb.append(" and " + sWhereClause);
	}
	//查得费用构成项属性表
	DMDataVO[] ddvos= query(sb);
	return ddvos;
}

/**
 * 此处插入方法说明。
 * 功能：查询包装分类的VO数组
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2002-8-28 18:51:39)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.dm.pub.DMDataVO[]
 * @param sWhereClause java.lang.String
 * @exception java.rmi.RemoteException 异常说明。
 */
public nc.vo.dm.pub.DMDataVO queryPackageItem(String sWhereClause)
	throws java.sql.SQLException, javax.transaction.SystemException, nc.vo.pub.BusinessException {
	StringBuffer sb= new StringBuffer();
	sb
		.append(" select dm_packsort.pk_packsort,dm_packsort.packsortname,")
		.append(" dm_packsort.packsortcode, dm_packsort.packvolumn ")
		.append(" from dm_packsort where dr=0 ");
	if (null != sWhereClause && sWhereClause.trim().length() != 0) {
		sb.append(" and " + sWhereClause);
	}
	//查得费用构成项属性表
	DMDataVO[] ddvos= query(sb);

	DMDataVO ddvo= new DMDataVO();
	for (int i= 0; i < ddvos.length; i++) {
		ddvo.setAttributeValue(ddvos[i].getAttributeValue("pk_packsort").toString(), ddvos[i]);
	}

	return ddvo;
}

/**
 * 制发运单表体核销标志。
 *
 * 创建日期：(2002-6-3)
 * @param delivbillHItem nc.vo.dm.dm104.DelivbillHItemVO
 * @exception java.sql.SQLException 异常说明。
 */
public void setDelivBillVerifyFlag(DMDataVO[] vos) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "setDelivBillVerifyFlag", new Object[] { vos });
	/*************************************************************/
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		StringBuffer sb = new StringBuffer();
		StringBuffer sWhere = new StringBuffer();
		for (int i = 0; i < vos.length; i++) {
			String sPK = (String) vos[i].getAttributeValue("pk_delivbill_b");
			sWhere.append("pk_delivbill_b = '" + sPK + "' ");
			if (i != vos.length - 1)
				sWhere.append(" OR ");
		}

		//sb.append("update dm_delivbill_b set btestbyinvoice = 'Y'");
		String sFlag = vos[0].getAttributeValue("btestbyinvoice")==null?"N":vos[0].getAttributeValue("btestbyinvoice").toString();
		sb.append("update dm_delivbill_b set btestbyinvoice = '");
  		sb.append(sFlag);
  		sb.append("'");


		if (sWhere != null && sWhere.toString().trim().length() != 0) {
			sb.append(" where " + sWhere.toString());
		}
		con = getConnection();
		stmt = con.prepareStatement(sb.toString());
		stmt.executeUpdate();

		//更新表头时间戳
		sb = new StringBuffer();
		sb.append(
			"UPDATE dm_delivbill_h SET dr = 0 WHERE (pk_delivbill_h IN (SELECT pk_delivbill_h FROM dm_delivbill_b ");
		if (sWhere != null && sWhere.toString().trim().length() != 0) {
			sb.append(" where " + sWhere.toString());
		}
		sb.append("))");
		con = getConnection();
		stmt = con.prepareStatement(sb.toString());
		stmt.executeUpdate();

	}
	//catch (Exception e) {
		//e.printStackTrace();
	//}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		}
		catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "setDelivBillVerifyFlag", new Object[] { vos });
	/*************************************************************/
}

/**
 * 修改说明：返回值ArrayList的最后一位是表头时间
 * <p>使用VO的值更新母子表。
 * <p>
 * 创建日期：(2002-6-3)
 * @param vo nc.vo.dm.dm104.DelivbillHVO
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList update(DelivbillHVO vo, boolean isForOut, ClientLink clientLink) throws SQLException, BusinessException, SystemException {
	ArrayList resultlist = new ArrayList();
//	String key;
//	String headkey;
//	/*************************************************************/
//	// 保留的系统管理接口：
//	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "update", new Object[] { vo });
//	/*************************************************************/
//
	//

	DelivbillHItemVO[] items = (DelivbillHItemVO[]) vo.getChildrenVO();

	RichDMO richDMO = null;
	try {
		if(!isForOut) {
			richDMO = new  RichDMO();
			richDMO.model2_EditBatch(clientLink,
					new AggregatedValueObject[]{vo},
					"pk_delivbill_h",   //fkOfItem
					"pkcorpforgenoid",
					"pkcorpforgenoid",
					true);//neednewts
		}else { //出库时更新发运单
			SmartDMO smartDMO = null;
			try {
				smartDMO = new  SmartDMO();
			}
			catch(Exception e) {
				throw new SQLException(e.getMessage());
			}

			//更新表体的行状态
			smartDMO.executeUpdateBatch(items,
					new String[]{"irowstatus"}, new String[]{"pk_delivbill_b"});


			//更新表头，为了得到最新的时间戳
			DelivbillHHeaderVO header = (DelivbillHHeaderVO)vo.getParentVO();
			smartDMO.executeUpdateBatch(new ISmartVO[]{header},
					new String[]{"pk_delivbill_h"}, new String[]{"pk_delivbill_h"});

			//返回时间戳
			//String strTimeStamp = null;
			//strTimeStamp = queryTimeStamp("dm_delivbill_h", "pk_delivbill_h", header.getPk_delivbill_h());
			//header.setAttributeValue("ts", strTimeStamp);
		}

	}catch(Exception e) {
		throw new SQLException(e.getMessage());
	}

	//将所有新增表体的 pk 返回
	for (int i = 0;items != null && i < items.length; i++) {
		if(items[i].getStatus() == VOStatus.NEW) {
			resultlist.add(items[i].getAttributeValue("pk_delivbill_b"));
		}else {
			resultlist.add(null);
		}
	}

	return resultlist;

}

/**
 * 函数的功能、用途、对属性的更改，以及函数执行前后对象的状态。
 *  @param	         参数说明
 *  @return	         返回值
 *  @exception     异常描述
 *  @see               需要参见的其它内容
 *  @since	         从类的那一个版本，此方法被添加进来。（可选）
 *  @author           ZXJ
 * @param pkdlvbillh java.lang.String[]
 */
public void updateDelivbillHeadTs(String[] pkdlvbillh)
	throws  Exception {
	String SQL = " update dm_delivbill_h set pk_delivbill_h = pk_delivbill_h where pk_delivbill_h = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = prepareStatement(con, SQL);
		for(int i=0; i<pkdlvbillh.length;i++) {

			stmt.setString(1, pkdlvbillh[i]);

			executeUpdate(stmt);
		}
		executeBatch(stmt);

	}
	//catch (Exception e) {
		//e.printStackTrace();

	//}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		}
		catch (Exception e) {
		}
	}
}



/**
 * <p>使用VO的值更新母子表。
 * <p>
 * 创建日期：(2002-6-11)
 * @param vo nc.vo.dm.dm106.DelivbillHVO
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList updateSign(DelivbillHVO vo)
	throws SQLException, BusinessException, SystemException {
	ArrayList resultlist = new ArrayList();
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm106.DelivbillHDMO", "update", new Object[] { vo });
	/*************************************************************/
	try {
		//需要同时更新表头时间戳
		DelivbillHHeaderVO header = (DelivbillHHeaderVO) vo.getParentVO();
		if (header.getPk_delivbill_h() != null) {
			//更新表头时间戳
			StringBuffer sql = new StringBuffer();
			sql.append("UPDATE dm_delivbill_h SET dr = 0 WHERE pk_delivbill_h ='");
			sql.append(header.getPk_delivbill_h());
			sql.append("'");
			saveExecute(sql);
		}

		DelivbillHItemVO[] items = (DelivbillHItemVO[]) vo.getChildrenVO();

		SmartDMO smartDMO = null;
		try {
			smartDMO = new  SmartDMO();
		}
		catch(Exception e) {
			throw new SQLException(e.getMessage());
		}
		smartDMO.executeUpdateBatch(items,
				new String[]{"dsignnum", "dcancelnum", "bsigned", "vsignnote","vsignname",
				"receivedate", "ibetimes", "ipacking","iattitude", "breceiveinform", "ionroadtime"}, new String[]{"pk_delivbill_b"});

//		for (int i = 0; i < items.length; i++) {
//			updateSignItem(items[i]);
//		}

		//返回时间戳
		String strTimeStamp = null;
		if (header.getPk_delivbill_h() != null && header.getPk_delivbill_h().length() > 0) {
			strTimeStamp = queryTimeStamp("dm_delivbill_h", "pk_delivbill_h", header.getPk_delivbill_h());
			resultlist.add(strTimeStamp);
		}

	}
	catch (Exception e) {
		e.printStackTrace();
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40140408","UPP40140408-000123")/*@res "系统异常，请稍后再试"*/);
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm106.DelivbillHDMO", "update", new Object[] { vo });
	/*************************************************************/
	return resultlist;
}

/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2002-6-3)
 * @param delivbillHItem nc.vo.dm.dm104.DelivbillHItemVO
 * @exception java.sql.SQLException 异常说明。
 */
public void writeBackItem(DelivbillHItemVO delivbillHItem) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "updateItem", new Object[] { delivbillHItem });
	/*************************************************************/

	String sql = "update dm_delivbill_b set doutnum = ? where pk_delivbill_b = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		// update non PK fields:

		if (delivbillHItem.getDoutnum() == null) {
			stmt.setNull(1, Types.INTEGER);
		}
		else {
			stmt.setBigDecimal(1, delivbillHItem.getDoutnum().toBigDecimal());
		}

		// find record by PK fields:
		String pk = null;
		try {
			pk= delivbillHItem.getPrimaryKey();
		}catch(Exception e) {
			throw new java.sql.SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40140408","UPP40140408-000125")/*@res "方法 delivbillHItem.getPrimaryKey() 出错！"*/);
		}
		stmt.setString(2, pk);
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}
		catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		}
		catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "updateItem", new Object[] { delivbillHItem });
	/*************************************************************/
}

/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2002-6-3)
 * @param key nc.vo.pub.oid.OID
 * @exception java.sql.SQLException 异常说明。
 */
private void deleteItems(DelivbillHItemVO[] vos) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "deleteItem", new Object[] { vos });
	/*************************************************************/

	//String sql = "update dm_delivbill_b set dr = 1 where pk_delivbill_b = ?";
	String sql = "update dm_delivbill_b set dr = 1 where ";
	String[] keys = new String[vos.length];
	for (int i = 0; i < vos.length; i++) {
		keys[i] = vos[i].getPk_delivbill_b();
	}
	sql += getStrPKs("pk_delivbill_b", keys);

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		//stmt.setString(1, vo.getPrimaryKey());
		stmt.executeUpdate();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.dm.dm104.DelivbillHDMO", "deleteItem", new Object[] { vos });
	/*************************************************************/
}

/**
* <p>
* 创建日期：(2002-6-24)
* @param vo nc.vo.dm.dm105.MissionbillHVO
* @exception java.sql.SQLException 异常说明。
*/
public ArrayList findRoutedetail(String pkrouteh) throws SQLException, SystemException {
	ArrayList routeDescr = new ArrayList();
	if (pkrouteh == null)
		return routeDescr;

		StringBuffer sql =		new StringBuffer();
		sql.append(	"select bd_address.pk_address,bd_address.addrname, bd_routeaddr.dmileage  ")
		.append("from bd_routeaddr ")
		.append("left outer join bd_address on bd_routeaddr.pkcustspot=bd_address.pk_address ")
		.append("where bd_routeaddr.dr=0 and bd_routeaddr.pkroute='")
		.append(pkrouteh.trim())
		.append("' ")
		.append("order by bd_routeaddr.dmileage asc ");//为了保持起点到终点的顺序

		SmartDMO smartDMO = null;
		try {
			smartDMO = new  SmartDMO();
		}
		catch(Exception e) {
			throw new SQLException(e.getMessage());
		}

		Object[] obj = smartDMO.selectBy2(sql.toString());

		for(int i=0; obj!=null && i<obj.length; i++) {
			Object[] routedetail = new Object[3];
			routedetail[0] = ((Object[])obj[i])[0];
			routedetail[1] = ((Object[])obj[i])[1];
			routedetail[2] = ((Object[])obj[i])[2];
			if (routedetail[0] != null)
				routeDescr.add(routedetail);
		}

		return routeDescr;
}

/**
* 每二百个PK值为一组,得到查询的IN子句
此方法实现如下内容:

para:  pk_field,  stringp[]内含各个值
返回:
((0=1) or pk_field in ('a','b'...200个) or pk_field in ('c','d'...200个))

* 创建日期：(2002-10-4 16:06:56)
* @return java.lang.String[]
* @param aAreaPK java.lang.String
*/
public StringBuffer getStrPKs(String sFieldName, String[] AreaPKs) {
	DMDataVO dmdatavo = new DMDataVO();
	return dmdatavo.getStrPKs(sFieldName, AreaPKs);
}

/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2002-5-16)
 * @return nc.vo.dm.dm001.DelivorgHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public boolean isOutBillExist(CircularlyAccessibleValueObject voDeilivh) throws SQLException {
	boolean result = false;
	String sPKDelivBillH = voDeilivh.getAttributeValue("pk_delivbill_h").toString();
	if (voDeilivh == null) {
	}
	else {
		StringBuffer sql = new StringBuffer();
		sql.append("select ic_general_h.cgeneralhid from ic_general_h inner join ic_general_b on ");
		sql.append("ic_general_h.cgeneralhid = ic_general_b.cgeneralhid ");
		sql.append("where ic_general_h.dr=0 and ic_general_b.dr=0 and ic_general_h.fbillflag=2 and csourcebillhid='");
		sql.append(sPKDelivBillH);
		sql.append("'");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = getConnection();
			stmt = con.prepareStatement(sql.toString());
			rs = stmt.executeQuery();
			while (rs.next()) {
				String sDelivBillHid = rs.getString(1);
				if (sDelivBillHid != null && sDelivBillHid.trim().length() != 0) {
					result = true;
				}
			} //
			//rs.close();
		}
		finally {
			try {
				if (rs != null) {
					rs.close();
				}
			}catch (Exception e) {
			}
			try {
				if (stmt != null) {
					stmt.close();
				}
			}
			catch (Exception e) {
			}
			try {
				if (con != null) {
					con.close();
				}
			}
			catch (Exception e) {
			}
		}
	}
	return result;
}

/**
 * 此处插入方法说明。
 * 功能：查询发运单对应的包装明细
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2002-8-28 18:51:39)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.dm.pub.DMDataVO[]
 * @param sWhereClause java.lang.String
 * @exception java.rmi.RemoteException 异常说明。
 */
public nc.vo.dm.pub.DMDataVO[] queryDelivPackNum(String sWhereClause)
	throws java.sql.SQLException, javax.transaction.SystemException, nc.vo.pub.BusinessException {
	StringBuffer sb= new StringBuffer();
	sb
		.append(" select pk_delivpacknum, pk_delivbill_h, pksendarea, pkarrivearea, pksendaddress, pkarriveaddress, pk_packsort, ")
		.append(" crownumber, dpacknum, pkcust, pkdeststockorg,pkinvclass,doneweight ,dweight, dvolumn ")
		.append(" from dm_delivpacknum ")
		.append(" where dm_delivpacknum.dr=0 ");
	if (null != sWhereClause && sWhereClause.trim().length() != 0) {
		sb.append(" and " + sWhereClause);
	}
	sb.append(" order by crownumber ");
	//查得包装明细表
	DMDataVO[] ddvos= query(sb);

	return ddvos;
}

	/**
 * 创建日期：(2003-11-26 16:37:37)
 * 作者：仲瑞庆
 * 参数：
 * 返回：
 * 说明：依传入的聚合VO,返回表头的单据号
		此方法仅供前台点界面的取消按钮时调用
 * @param sBillTypeCodeKey java.lang.String
 * @param sCorpKey java.lang.String
 * @param sBillCodeKey java.lang.String
 * @param bcvo nc.vo.pub.billcodemanage.BillCodeObjValueVO
 * @param vos nc.vo.pub.AggregatedValueObject[]
 * @exception java.rmi.RemoteException 异常说明。
 */
public void returnAVOBillCodeForUI2(
	String sCorpKey,
	String sBillCodeKey,
	BillCodeObjValueVO[] bcvos,
	AggregatedValueObject[] vos)
	throws BusinessException {
	//参数检查
	if (vos == null || vos.length == 0)
		return;

	//nc.bs.pub.billcodemanage.BillcodeRule bcrbo= null;
	try {
		//nc.bs.pub.billcodemanage.BillcodeRuleHome home=
			//(nc
				//.bs
				//.pub
				//.billcodemanage
				//.BillcodeRuleHome) getBeanHome(nc
				//.bs
				//.pub
				//.billcodemanage
				//.BillcodeRuleHome
				//.class,
				//"nc.bs.pub.billcodemanage.BillcodeRuleBO");
		//bcrbo= home.create();
		nc.bs.pub.billcodemanage.BillcodeRuleBO bcrbo=new nc.bs.pub.billcodemanage.BillcodeRuleBO();

		for (int i= 0; i < vos.length; i++) {
			if (vos[i].getParentVO().getAttributeValue(sBillCodeKey) == null
				|| vos[i].getParentVO().getAttributeValue(sBillCodeKey).toString().trim().length() == 0
				|| vos[i].getParentVO().getAttributeValue(sCorpKey) == null
				|| vos[i].getParentVO().getAttributeValue(sCorpKey).toString().trim().length() == 0
//				|| vos[i].getParentVO().getAttributeValue(sBillTypeCodeKey) == null
//				|| vos[i].getParentVO().getAttributeValue(sBillTypeCodeKey).toString().trim().length() == 0
				)
				continue;
			//if (vos[i].getParentVO().getStatus() == VOStatus.NEW) {
				bcrbo.returnBillCodeOnDelete(
					vos[i].getParentVO().getAttributeValue(sCorpKey).toString(),
					DMBillTypeConst.m_delivDelivBill,
//					 sBillTypeCodeKey,
					vos[i].getParentVO().getAttributeValue(sBillCodeKey).toString(),
					bcvos[i]);
				//} else if (vos[i].getParentVO().getStatus() == VOStatus.DELETED) {
				//bcrbo.returnBillCodeOnDelete(
				//vos[i].getParentVO().getAttributeValue(sCorpKey).toString(),
				//vos[i].getParentVO().getAttributeValue(sBillTypeCodeKey).toString(),
				//vos[i].getParentVO().getAttributeValue(sBillCodeKey).toString(),
				//bcvos[i]);
			//}
		}
		return;

	} catch (Exception e) {
		e.printStackTrace(System.out);
		throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40140408","UPP40140408-000126")/*@res "退回单据号出错！"*/);
	} finally {
		//if (bcrbo != null)
			//try {
				//bcrbo.remove();
			//} catch (Exception e) {
			//}
	}
}


/**
 * 自动核销发运单。
 *
 * 创建日期：(2002-6-3)
 * @param delivbillHItem nc.vo.dm.dm104.DelivbillHItemVO
 * @exception java.sql.SQLException 异常说明。
 */
public void auotVerifys(String[] sHeadPKs) throws java.sql.SQLException {
	for (int i = 0; i < sHeadPKs.length; i++){
		auotVerify(sHeadPKs[i]);
	}
}

public CircularlyAccessibleValueObject[] queryAllBodyData(String key) throws BusinessException {
	DelivbillHItemVO[] vos = null;
	try {
		vos = findItemsForHeaderWhere(key, "dm_delivbill_b.dinvnum > nvl(dm_delivbill_b.doutnum,0) ");
	} catch (Exception e) {
		// TODO: handle exception
	}
	return vos;
}

public CircularlyAccessibleValueObject[] queryAllHeadData(String whereString) throws BusinessException { 
	DelivbillHHeaderVO[] vo = null;
	try {
		vo = findallHeaderByWhere("", whereString);
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	return vo;
}
}
