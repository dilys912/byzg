/*******************************************************************************
 * *************************************************************\ The skeleton
 * of this class is generated by an automatic * code generator for NC product. * \
 ******************************************************************************/

package nc.impl.dm.dm108;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;

import nc.bs.core.dao.BaseDao;
import nc.bs.dao.BaseDAO;
import nc.bs.dao.DAOException;
import nc.bs.dm.dm104.DelivbillHDMO;
import nc.bs.dm.dm108.InvoiceDMO;
import nc.bs.dm.pub.DmDMO;
import nc.bs.dm.pub.RewriteDMO;
import nc.bs.framework.common.NCLocator;
import nc.bs.pub.pf.PfUtilTools;
import nc.bs.scm.pub.smart.SmartDMO;
import nc.itf.arap.pub.IArapBillPublic;
import nc.itf.arap.pub.IArapForGYLPublic;
import nc.itf.dm.dm108.IInvoice;
import nc.itf.dm.dm108.IInvoiceQuery;
import nc.itf.pub.rino.IPubDMO;
import nc.itf.scm.pub.bill.IScm;
import nc.itf.uap.IUAPQueryBS;
import nc.jdbc.framework.SQLParameter;
import nc.jdbc.framework.processor.BeanListProcessor;
import nc.jdbc.framework.processor.BeanProcessor;
import nc.jdbc.framework.processor.ColumnProcessor;
import nc.jdbc.framework.processor.MapListProcessor;
import nc.vo.dm.dm104.FreightType;
import nc.vo.dm.pub.DMBillTypeConst;
import nc.vo.dm.pub.DMDataVO;
import nc.vo.dm.pub.DMVO;
import nc.vo.dm.pub.ExceptionUtils;
import nc.vo.ep.dj.DJZBHeaderVO;
import nc.vo.ep.dj.DJZBItemVO;
import nc.vo.ep.dj.DJZBVO;
import nc.vo.hbbb.meetaccount.GetDataCondVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.VOStatus;
import nc.vo.pub.billcodemanage.BillCodeObjValueVO;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.pub.SCMEnv;
import nc.vo.scm.pub.session.ClientLink;

/**
 * DelivbillH的BO类 创建日期：(2002-6-3)
 *  
 * @author：
 */
public class InvoiceImpl extends nc.impl.dm.pub.DmImpl implements
    IInvoiceQuery, IInvoice {

  /**
   * DelivbillHBO 构造子注解。
   */
  public InvoiceImpl() {
    super();
  }

  /**
   * 审核发票，并生成应付单。
   */
  @SuppressWarnings("unused")
public DMVO auditInvoice(DMVO dvo, ClientLink clientLink)
      throws BusinessException {
    String[] sAllKeys = null;
    try {
      // 加锁
      String sHeadPkName = "pk_delivinvoice_h";
      String sBodyPkName = "pk_delivinvoice_b";
      String sHeadPkNameInBody = "pk_delivinvoice_h";
      String[] sHeadLockFieldsNames = {
        "pk_delivinvoice_h"
      };
      String[] sBodyLockFieldsNames = {
          "pk_delivinvoice_h", "pk_delivinvoice_b"
      };
      DmDMO dmdmo = new DmDMO();
      sAllKeys = dmdmo.getLockPKsArray(dvo, sHeadPkName, sBodyPkName,
          sHeadPkNameInBody, sHeadLockFieldsNames, sBodyLockFieldsNames);

      lockPKs(sAllKeys, dvo.getParentVO().getAttributeValue("userid")
          .toString());

      // 校验
      invoice_saveCheck(dvo);

      // 发票审核
      InvoiceDMO dmo = new InvoiceDMO();
      DMVO retvo = dmo.save(dvo);

      // 应付模块是否启用
      if (dvo.getParentVO().getAttributeValue("isendtype").toString().equals(
          FreightType.ap + "")
          && isArapModuleStarted((String) dvo.getParentVO().getAttributeValue(
              "pk_corp"), "AP")) {
        SCMEnv.info("………………应付模块启用！………………");
        
        // 构造应付单数据
        DJZBVO arapvo = genArapBill(dvo);
        // nc.vo.arap.change.VoTools tools = new nc.vo.arap.change.VoTools();
        // arapvo = tools.getSum(arapvo);
       
        /**
         * 判断是否有运费暂估，如果有则生成付应付单，回冲运费暂估应付（制盖） z
         * 王凯飞
         * 
         */
        String pk_corp = clientLink.getCorp();
//        String headv = arapvo.getParentVO().getAttributeValue("dwbm").toString();
        if("1078".equals(pk_corp)|| pk_corp.equals("1108")){
        	DJZBItemVO[] dvodsa = (DJZBItemVO[]) arapvo.getChildrenVO();
        	String dvoddlx = dvodsa[0].getDdlx();
        	DJZBVO[] djzbvo = queryARAPfromDM(dvo);//查出已暂估应付单vo
        	if(djzbvo.length > 0){
        		DJZBVO[] insetdjvo = zuzhuangInsetVO(djzbvo,dvoddlx);
        		
        		IArapForGYLPublic iArap = (IArapForGYLPublic) NCLocator.getInstance().lookup(IArapForGYLPublic.class.getName());
        		for(int j = 0; j < insetdjvo.length; j++){
        			iArap.saveEffForCG(insetdjvo[j]);
        		}
        		IArapBillPublic uArap = (IArapBillPublic) NCLocator.getInstance().lookup(IArapBillPublic.class.getName());
        		for (int i = 0; i < djzbvo.length; i++) {
        			DJZBVO updatetmp = new DJZBVO();
        			UFDouble zro = new UFDouble(0);
        			DJZBHeaderVO djheadervo = (DJZBHeaderVO) djzbvo[i].getParentVO();
//        			djheadervo.setZyx28("已回冲");
        			
        			DJZBItemVO[] djbodyvo = (DJZBItemVO[]) djzbvo[i].getChildrenVO();
        			for (int j = 0; j < djbodyvo.length; j++) {
        				djbodyvo[j].setZyx28("已回冲");
					}
        			updatetmp.setParentVO(djheadervo);
        			updatetmp.setChildrenVO(djbodyvo);
        			uArap.editArapBill(updatetmp);
        		}
        		//回写委外加工入库单vuserdef19 = "已暂估部分结算"/"已结算"
				backICStatus_wwjg(djzbvo,pk_corp);
        	}
        }
        
        try {
        	// 生成应付单
        	// nc.bs.ep.dj.DJZBBO bean = new nc.bs.ep.dj.DJZBBO();
        	
        	String currentDate = clientLink.getLogonDate().toString();
        	new nc.bs.pub.pf.PfUtilBO().processAction("SAVE", "D1", currentDate,
        			null, arapvo, null);
        	
        	// throw new BusinessException("hear!");
        }
        catch (Exception e) {
        	// 运费发票---〉审核应收单、应付单 后 如果发现异常，需要调用收付接口删除 实时凭证
        	// 删除应付单
        	// 删除应付单
        	String invoiceid = (String) dvo.getParentVO().getAttributeValue(
        			"pk_delivinvoice_h"); // 发票主键
        	
        	IArapBillPublic bean = (IArapBillPublic) NCLocator.getInstance()
        			.lookup(IArapBillPublic.class.getName());
        	bean.deleteOutArapBillByPk(invoiceid);
        	// nc.bs.ep.dj.DJZBBO bean=new nc.bs.ep.dj.DJZBBO();
        	// bean.deleteOutBill(invoiceid);
        }
        
        
      }
      else if (dvo.getParentVO().getAttributeValue("isendtype").toString()
          .equals(FreightType.ar + "")
          && isArapModuleStarted((String) dvo.getParentVO().getAttributeValue(
              "pk_corp"), "AR")) {
        SCMEnv.info("………………应收模块启用！………………");

        // 构造应付单数据
        DJZBVO arapvo = genArapBill(dvo);

        // nc.vo.arap.change.VoTools tools = new nc.vo.arap.change.VoTools();
        // arapvo = tools.getSum(arapvo);
        
        /**
         * 判断是否有运费暂估，如果有则生成付应付单，回冲运费暂估应付（制盖）
         * 王凯飞
         * 
         */
        String pk_corp = clientLink.getCorp();
//        String headv = arapvo.getParentVO().getAttributeValue("dwbm").toString();
        if("1078".equals(pk_corp)|| pk_corp.equals("1108")){
        	DJZBItemVO[] dvodsa = (DJZBItemVO[]) arapvo.getChildrenVO();
        	String dvoddlx = dvodsa[0].getDdlx();
        	DJZBVO[] djzbvo = queryARAPfromDM(dvo);//查出已暂估应付单vo
        	if(djzbvo.length > 0){
        		DJZBVO[] insetdjvo = zuzhuangInsetVO(djzbvo,dvoddlx);
        		
        		IArapForGYLPublic iArap = (IArapForGYLPublic) NCLocator.getInstance().lookup(IArapForGYLPublic.class.getName());
        		for(int j = 0; j < insetdjvo.length; j++){
        			iArap.saveEffForCG(insetdjvo[j]);
        		}
        		IArapBillPublic uArap = (IArapBillPublic) NCLocator.getInstance().lookup(IArapBillPublic.class.getName());
        		for (int i = 0; i < djzbvo.length; i++) {
        			DJZBVO updatetmp = new DJZBVO();
        			UFDouble zro = new UFDouble(0);
        			DJZBHeaderVO djheadervo = (DJZBHeaderVO) djzbvo[i].getParentVO();
//        			djheadervo.setZyx28("已回冲");
        			
        			DJZBItemVO[] djbodyvo = (DJZBItemVO[]) djzbvo[i].getChildrenVO();
        			for (int j = 0; j < djbodyvo.length; j++) {
        				djbodyvo[j].setZyx28("已回冲");
					}
        			updatetmp.setParentVO(djheadervo);
        			updatetmp.setChildrenVO(djbodyvo);
        			uArap.editArapBill(updatetmp);
        		}
        		//回写委外加工入库单vuserdef19 = "已暂估部分结算"/"已结算"
				backICStatus_wwjg(djzbvo,pk_corp);
        	}
        }
        try {
          // 生成应付单
          // nc.bs.ep.dj.DJZBBO bean = new nc.bs.ep.dj.DJZBBO();

          String currentDate = clientLink.getLogonDate().toString();
          new nc.bs.pub.pf.PfUtilBO().processAction("SAVE", "D0", currentDate,
              null, arapvo, null);

          // throw new BusinessException("hear!");
        }
        catch (Exception e) {
          // 运费发票---〉审核应收单、应付单 后 如果发现异常，需要调用收付接口删除 实时凭证
          // 删除应付单
          // 删除应付单
          String invoiceid = (String) dvo.getParentVO().getAttributeValue(
              "pk_delivinvoice_h"); // 发票主键

          IArapBillPublic bean = (IArapBillPublic) NCLocator.getInstance()
              .lookup(IArapBillPublic.class.getName());
          bean.deleteOutArapBillByPk(invoiceid);
          // nc.bs.ep.dj.DJZBBO bean=new nc.bs.ep.dj.DJZBBO();
          // bean.deleteOutBill(invoiceid);
        }
      }

      return retvo;

    }
    catch (Exception e) {
      reportException(e);
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException(e);
    }
    finally {
      // 解锁
      unLockPKs(sAllKeys, dvo.getParentVO().getAttributeValue("userid")
          .toString());
    }
  }
  /**
	 * 王凯飞
	 * 回写销库出库单vuserdef19
	 * 审核
	 */
	public void backICStatus_wwjg(DJZBVO[] vOs,String pk_corp) throws BusinessException{
		if(vOs!=null&&vOs.length>0){
			String status = "已结算";
			for(int i=0;i<vOs.length;i++){
				DJZBItemVO[] bod = (DJZBItemVO[]) vOs[i].getChildrenVO();
				String ddhh = "";
				for (int j = 0; j < bod.length; j++) {
					String ddhht = bod[0].getDdhh()==null?"":bod[j].getDdhh().toString();
					ddhh = ddhh+"'"+ddhht+"',";
				}
				ddhh = ddhh.substring(0,ddhh.length()-1);
				//回写
				String sql = "update ic_general_b set vuserdef19='"+status+"' where cgeneralbid in ("+ddhh+")  and pk_corp = '"+pk_corp+"'";
				getBaseDAO().executeUpdate(sql);
			}
		}
	}
	/**
	 * 王凯飞
	 * 回写委外加工入库单vuserdef19
	 * 弃审
	 */
	public void backICStatus_wwjg1(DJZBVO[] vOs,String pk_corp) throws BusinessException{
		if(vOs!=null&&vOs.length>0){
			String status = "已暂估且未结算";
			IPubDMO ipubdmo = (IPubDMO)NCLocator.getInstance().lookup(IPubDMO.class.getName());
			for(int i=0;i<vOs.length;i++){
				DJZBItemVO[] bod = (DJZBItemVO[]) vOs[i].getChildrenVO();
				String ddhh ="";
				for (int j = 0; j < bod.length; j++) {
					String ddhht = bod[0].getDdhh()==null?"":bod[j].getDdhh().toString();
					ddhh = ddhh+"'"+ddhht+"',";
				}
				ddhh = ddhh.substring(0,ddhh.length()-1);
				//回写
				String sql = "update ic_general_b set vuserdef19='"+status+"',isok='N'  where cgeneralbid in ("+ddhh+") and pk_corp = '"+pk_corp+"' ";
				ipubdmo.executeUpdate(sql);
			}
		}
	}
  
  /**
   * @returnDJZBVO[]
   * 组装要回冲的应付单VO
   * @author 王凯飞
   * */
  private DJZBVO[] zuzhuangInsetVO(DJZBVO[] djzbvo,String dvoddlx) {
	  
	  DJZBVO[] insetdjvo = new DJZBVO[djzbvo.length];
	  for (int i = 0; i < djzbvo.length; i++) {
			DJZBVO insettmp = new DJZBVO();
			UFDouble zro = new UFDouble(0);
			
			UFDouble bbjesum = new UFDouble(0);
			UFDouble fbjesum = new UFDouble(0);
			UFDouble ybjesum = new UFDouble(0);
			
			DJZBVO djzbs = (DJZBVO) djzbvo[i].clone();//克隆VO
			
			DJZBItemVO[] djbodyvo = (DJZBItemVO[]) djzbs.getChildrenVO();
			for (int j = 0; j < djbodyvo.length; j++) {
				UFDouble bbye = djbodyvo[j].getBbye();//本币余额
				UFDouble dfbbje = djbodyvo[j].getDfbbje();
				UFDouble dfbbsj = djbodyvo[j].getDfbbsj();
				UFDouble dfbbwsje = djbodyvo[j].getDfbbwsje();
				UFDouble dfybje = djbodyvo[j].getDfybje();
				UFDouble dfybsj = djbodyvo[j].getDfybsj();
				UFDouble dfybwsje = djbodyvo[j].getDfybwsje();
				UFDouble hsdj = djbodyvo[j].getHsdj();
				UFDouble ybye = djbodyvo[j].getYbye();
				UFDouble fbjeb = djbodyvo[j].getDfbbje();
				
				bbjesum = bbjesum.add(dfbbje);
				fbjesum = fbjesum.add(fbjeb);
				ybjesum = ybjesum.add(dfybje);
	
				djbodyvo[j].setBbye(zro.sub(bbye));
				djbodyvo[j].setDfbbje(zro.sub(dfbbje));
				djbodyvo[j].setDfbbsj(zro.sub(dfbbsj));
				djbodyvo[j].setDfbbwsje(zro.sub(dfbbwsje));
				djbodyvo[j].setDfybje(zro.sub(dfybje));
				djbodyvo[j].setDfybsj(zro.sub(dfybsj));
				djbodyvo[j].setDfybwsje(zro.sub(dfybwsje));
				djbodyvo[j].setHsdj(zro.sub(hsdj));
				djbodyvo[j].setYbye(zro.sub(ybye));
				djbodyvo[j].setZyx28(dvoddlx);//应加回冲的运费发票主键
				
			}
			
			DJZBHeaderVO djheadervo = (DJZBHeaderVO) djzbs.getParentVO();
			djheadervo.setDjbh(null);
			djheadervo.setVouchid(null);
			djheadervo.setBbje(zro.sub(bbjesum));
			djheadervo.setFbje(zro.sub(fbjesum));
			djheadervo.setYbje(zro.sub(ybjesum));
			
			insettmp.setParentVO(djheadervo);
			insettmp.setChildrenVO(djbodyvo);
			insetdjvo[i]=insettmp;
		}
	  
	return insetdjvo;
  }
  
  /**
   *根据发票上的单据号，查询应付单，反回应付单VO 
   *王凯飞
   */
  private DJZBVO[] queryARAPfromDM(DMVO dvo) {
	// TODO Auto-generated method stub
	  HashMap<String, UFDouble> dmsjmap = new  HashMap<String, UFDouble>();
      DMDataVO[] dmitems = dvo.getBodyVOs();
      HashMap vbillcodeid = changeVbillCode(dmitems); //单据号改成据单据主键map
      String checkapsql = "";
      for (int i = 0; i < dmitems.length; i++) {
			String djh = (String) dmitems[i].getAttributeValue("vuserdef14");//单据号
			String ddlx = (String) vbillcodeid.get(djh);//单据主键
			UFDouble dinvnum = new UFDouble(dmitems[i].getAttributeValue("dinvnum").toString());
			dmsjmap.put(ddlx, dinvnum);
			checkapsql+="'"+ddlx+"'";
			if( i < dmitems.length-1){
				checkapsql+=",";
			}
		}
	  StringBuffer qsql = new StringBuffer();
	  StringBuffer bsql = new StringBuffer();
	  qsql.append(" select distinct h.* ")
      .append("       from arap_djzb h  ")
      .append("        inner join arap_djfb b ") 
      .append("        on h.vouchid = b.vouchid ")
      .append("        where nvl(b.dr,0)=0 ") 
      .append("        and nvl(h.dr,0)=0 ") 
      .append("        and h.bbje > 0 ")
      .append("        and nvl(b.zyx28,'未回冲') = '未回冲' ")
      .append("        and b.ddlx in ("+checkapsql+") ") ;
	  
	  bsql.append(" select b.* ")
      .append("       from arap_djzb h  ")
      .append("        inner join arap_djfb b ") 
      .append("        on h.vouchid = b.vouchid ")
      .append("        where nvl(b.dr,0)=0 ") 
      .append("        and nvl(h.dr,0)=0 ") 
      .append("        and h.bbje > 0 ")
      .append("        and nvl(b.zyx28,'未回冲') = '未回冲' ")
      .append("        and b.ddlx in ("+checkapsql+") ") ;
  	Object obj = null;
  	
  	ArrayList headerlist = null;
  	try {
		headerlist  = (ArrayList) getBaseDAO().executeQuery(qsql.toString(), new BeanListProcessor(DJZBHeaderVO.class));
	} catch (DAOException e) {
		e.printStackTrace();
	}
  	DJZBVO[] djzbvo =  new DJZBVO[headerlist.size()];
  	if(headerlist.size()>0){
  		for (int j = 0; j < headerlist.size(); j++) {
  			DJZBVO itemdjvo = new DJZBVO();
  			DJZBHeaderVO headtmpvo = (DJZBHeaderVO) headerlist.get(j);
  			String sql = bsql.toString()+"and h.vouchid='"+headtmpvo.getVouchid()+"'";
  			ArrayList<DJZBItemVO> itemlist =null;
  			try {
  				itemlist  = (ArrayList<DJZBItemVO>) getBaseDAO().executeQuery(sql, new BeanListProcessor(DJZBItemVO.class));
  			} catch (DAOException e) {
  				// TODO Auto-generated catch block
  				e.printStackTrace();
  			}
  			DJZBItemVO[] bodyvo = itemlist.toArray(new DJZBItemVO[itemlist.size()]);
  			itemdjvo.setParentVO(headtmpvo);
  			itemdjvo.setChildrenVO(bodyvo);
  			djzbvo[j]=itemdjvo;
  		}
  	}
  	
  	ArrayList<DJZBVO> overlist = new ArrayList<DJZBVO>();
	if(djzbvo.length >0){
		Iterator iter = dmsjmap.entrySet().iterator();
		while (iter.hasNext()) {
		Map.Entry entry = (Map.Entry) iter.next();
		String key = entry.getKey().toString();//出库单ID
		UFDouble val = new UFDouble(entry.getValue().toString());//暂估数量
//		DJZBVO[] djtmpz = new DJZBVO[djzb.length];
		ArrayList<DJZBVO> djtmpz = new ArrayList<DJZBVO>();
		for (int j = 0; j < djzbvo.length; j++) {
			DJZBVO djtmp = new DJZBVO();
			DJZBItemVO[] itemtmpvo = (DJZBItemVO[]) djzbvo[j].getChildrenVO();
			DJZBHeaderVO headertmpvo = (DJZBHeaderVO) djzbvo[j].getParentVO();
			String ddlxtmp = itemtmpvo[0].getDdlx();
			if(key.equals(ddlxtmp)){
				djtmp.setParentVO(headertmpvo);
				djtmp.setChildrenVO(itemtmpvo);
				djtmpz.add(djtmp);
			}
		}
		if (djtmpz.size()>0 || djtmpz !=null) {
			DJZBVO sss = djtmpz.get(0);
			DJZBItemVO[] bdsss = (DJZBItemVO[]) sss.getChildrenVO();
			if(val.intValue()>=bdsss.length){
				for (int k = 0; k < djtmpz.size(); k++) {
					overlist.add(djtmpz.get(k));
				}
			}else{//截取暂估的前开票数量
				DJZBVO tempi = new DJZBVO();
				tempi.setParentVO(sss.getParentVO());
				DJZBItemVO[] tempbi = new DJZBItemVO[val.intValue()];
				for (int k = 0; k < val.intValue(); k++) {
					tempbi[k]=bdsss[k];
				}
				tempi.setChildrenVO(tempbi);
				overlist.add(tempi);
			}
			
		}
	}
	}
	DJZBVO[] overdjvo = new DJZBVO[overlist.size()];
	if (overlist.size()>0) {
		for (int j = 0; j < overlist.size(); j++) {
			overdjvo[j] = overlist.get(j);
		}
	}
	return overdjvo;
  }
  
  
  
  private HashMap changeVbillCode(DMDataVO[] dmitems) {
	// TODO Auto-generated method stub
	  String vsql = "";
      for (int i = 0; i < dmitems.length; i++) {
			String djh = (String) dmitems[i].getAttributeValue("vuserdef14");//单据号
			vsql+="'"+djh+"'";
			if( i < dmitems.length-1){
				vsql+=",";
			}
      }
      String vvsql = "select distinct vbillcode,cgeneralhid from ic_general_h where nvl(dr,0)=0 and vbillcode in ("+vsql+")";
      IUAPQueryBS query = (IUAPQueryBS) NCLocator.getInstance().lookup(IUAPQueryBS.class.getName());
    	MapListProcessor alp = new MapListProcessor();//集合处理器
    	Object obj = null;
    	try {
    		obj = query.executeQuery(vvsql, alp);//执得查询
    	} catch (BusinessException e1) {
    		e1.printStackTrace();
    	}
    	HashMap<String, String> listmap = new HashMap<String, String>();
    	ArrayList addrList = (ArrayList) obj;
    	if (addrList != null && addrList.size() > 0) {
    		for (int i = 0; i < addrList.size(); i++) {
    			Map addrMap = (Map) addrList.get(i);
    			String vbillcode = addrMap.get("vbillcode").toString();
    			String cgeneralhid = addrMap.get("cgeneralhid").toString();
    			listmap.put(vbillcode, cgeneralhid);
    		}
    	}
	  return listmap;
  }
  
  
  
  /**
   * 保存发票同时自动核销发运单、发票，。
   * huxiaobo modified at 20060927 14:46
   */
  public DMVO autoVerify(DMVO dvo, String[] delivBillBPKs)
      throws BusinessException {
    String[] delivBillHeadPks =null;//需要加锁的发运单的主表的主键
    String[] delivBillFeepks=null;	//需要加锁的运费单的主表以及字表的主键
    DMVO vo = null;
    try {
      if(delivBillBPKs!=null)
	  {
      // 构造发运单vo和发票vo
      // 根据发运单pk数组查询发运单表体行vos（可能为多条发运单对应的表体行数据集）
      DMVO delivvo = new DMVO();
      DMDataVO delivhvo = new DMDataVO();
      DMDataVO[] delivbvos = null;
      StringBuffer sb = new StringBuffer();
      //查询发运单表体pk的条件
      sb.append(" dm_delivbill_b.pk_delivbill_b in(");
      for (int i = 0; i < delivBillBPKs.length - 1; i++) {
        sb.append("'");
        sb.append(delivBillBPKs[i]);
        sb.append("'");
        sb.append(", ");
      }
      sb.append("'");
      sb.append(delivBillBPKs[delivBillBPKs.length - 1]);
      sb.append("'");
      sb.append(")");
      InvoiceDMO dmo=new InvoiceDMO();
      delivBillHeadPks =dmo.getDilvBillPks(sb);
      //查询运费单表头表体pk的条件
      sb = new StringBuffer();
      sb.append(" dm_delivfeebill_b.pk_delivbill_b in(");
      for (int i = 0; i < delivBillBPKs.length - 1; i++) {
        sb.append("'");
        sb.append(delivBillBPKs[i]);
        sb.append("'");
        sb.append(", ");
      }
      sb.append("'");
      sb.append(delivBillBPKs[delivBillBPKs.length - 1]);
      sb.append("'");
      sb.append(")");
      delivBillFeepks=dmo.getDilvBillFeePks(sb);
      //dmo.getDilvBillFeePks(where)；
      lockPKs(delivBillHeadPks, dvo.getParentVO().getAttributeValue("userid").toString());
      lockPKs(delivBillFeepks, dvo.getParentVO().getAttributeValue("userid").toString());
      lockPKs(delivBillBPKs, dvo.getParentVO().getAttributeValue("userid").toString());
	  
      // 保存发票
      vo = saveInvoice(dvo);
      if (delivBillBPKs == null)
        return vo;
      
      VerifyImpl bo = new VerifyImpl();
      // 发运单表体vos
      delivbvos = bo.queryDelivBillByVerify(sb.toString());
      // 发运单表头vo
      delivhvo.setAttributeValue("pkcorp", dvo.getParentVO().getAttributeValue(
          "pk_corp"));
      delivhvo.setAttributeValue("pkdelivorg", dvo.getParentVO()
          .getAttributeValue("pkdelivorg"));
      delivhvo.setAttributeValue("pktrancust", dvo.getParentVO()
          .getAttributeValue("pk_transcust"));
      delivhvo.setAttributeValue("userid", dvo.getParentVO().getAttributeValue(
          "userid"));
      delivhvo.setAttributeValue("date", dvo.getParentVO().getAttributeValue(
          "billdate"));
      //
      delivvo.setParentVO(delivhvo);
      delivvo.setChildrenVO(delivbvos);

      // 发票vo,
      DMVO invoicevo = new DMVO();
      DMDataVO invoicehvo = (DMDataVO) dvo.getParentVO();
      DMDataVO[] invoicebvos = dvo.getBodyVOs();
      for (int i = 0; i < invoicebvos.length; i++) {
        invoicebvos[i].setAttributeValue("vinvoicenumber", invoicehvo
            .getAttributeValue("vinvoicenumber"));
        invoicebvos[i].setAttributeValue("billdate", invoicehvo
            .getAttributeValue("billdate"));
        invoicebvos[i].setAttributeValue("dremains", invoicebvos[i]
            .getAttributeValue("dtranmoney"));
      }
      invoicevo.setParentVO(invoicehvo);
      invoicevo.setChildrenVO(invoicebvos);

//      // 置发运单表体核销标志
//      DelivbillHDMO dmo2 = new DelivbillHDMO();
//      dmo2.auotVerifys(delivBillHPKs);

      // 调用自动核销接口
      bo.autoVerify(delivvo, invoicevo);
	  }
	  else
	  {
	    vo = saveInvoice(dvo);
	    if (delivBillBPKs == null)
	      return vo;
	  }
    }
    catch (Exception ex) {
      ExceptionUtils.marsh(ex);
    }
    finally {// 解锁
      if (delivBillBPKs == null)
          ;
      else{
      unLockPKs(delivBillBPKs, dvo.getParentVO().getAttributeValue("userid").toString());
      unLockPKs(delivBillFeepks, dvo.getParentVO().getAttributeValue("userid").toString());
      unLockPKs(delivBillHeadPks, dvo.getParentVO().getAttributeValue("userid").toString());
      }
    }
    return vo;
  }

  /**
   * 保存Ts检查。 功能： 参数： 返回： 例外： 日期：(2002-7-24 20:24:01) 修改日期，修改人，修改原因，注释标志：
   */
  public void invoice_checkTs(DMVO vo) throws BusinessException {
    IScm srv = (IScm) NCLocator.getInstance().lookup(IScm.class.getName());    
    srv.checkDefDataType(vo);

    if (vo.getParentVO().getStatus() == nc.vo.pub.VOStatus.NEW)
      return;
    String[] sTs = new String[] {
      vo.getParentVO().getAttributeValue("ts").toString()
    };
    String[] sPK = new String[] {
      vo.getParentVO().getAttributeValue("pk_delivinvoice_h").toString()
    };

    Hashtable ht = null;
    try {
      DmDMO dmdmo = new DmDMO();
      ht = dmdmo.checkRowExitOrChanged(sPK, sTs, "dm_delivinvoice_h",
          "pk_delivinvoice_h", "ts");
    }
    catch (Exception e) {
      throw new BusinessException(e);
    }
    Integer iCheck = new Integer(ht.get(sPK[0]).toString());
    if (iCheck.intValue() == nc.vo.dm.pub.DMOCheckTsStatus.IsNotExistThePK) {
      String[] value = new String[] {
        vo.getParentVO().getAttributeValue("vinvoicenumber").toString()
      };
      throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("40140418", "UPP40140418-000072", null, value));
      // "单据号为：" +
      // vo.getParentVO().getAttributeValue("vinvoicenumber").toString() + "
      // 的记录不存在！");
    }
    else if (iCheck.intValue() == nc.vo.dm.pub.DMOCheckTsStatus.IsNotTheSameTs) {
      String[] value = new String[] {
        vo.getParentVO().getAttributeValue("vinvoicenumber").toString()
      };
      throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("40140418", "UPP40140418-000073", null, value));
      // "单据号为：" +
      // vo.getParentVO().getAttributeValue("vinvoicenumber").toString() + "
      // 的记录已被修改！");
    }

  }

  /**
   * @author 毕晖 函数的功能、用途、对属性的更改，以及函数执行前后对象的状态。
   * @param 参数说明
   * @return 返回值
   * @exception 异常描述
   * @see 需要参见的其它内容
   * @since 从类的那一个版本，此方法被添加进来。（可选） //
   * @wdeprecated 该方法从类的那一个版本后，已经被其它方法替换。（可选） (2002-12-12 11:35:32)
   */
  protected DJZBVO genArapBill(DMVO vo) throws BusinessException {
    // VO转换
    DJZBVO aparvo = null;
    try {
      String sArap = new String();
      if (vo.getParentVO().getAttributeValue("isendtype").toString().equals(
          FreightType.ap + "")) {
        sArap = "D1";
      }
      else if (vo.getParentVO().getAttributeValue("isendtype").toString()
          .equals(FreightType.ar + "")) {
        sArap = "D0";
      }
      aparvo = (DJZBVO) PfUtilTools.runChangeData("7V", sArap, vo);
      aparvo.getParentVO().setAttributeValue("lybz", new Integer(15));
    }
    catch (Exception ex) {
      throw new BusinessException(ex);
    }
    return aparvo;
  }

  /**
   * 创建者：仲瑞庆 功能：获得针对所传入VO的对象VO，以用于生成单据编码 参数： 返回： 例外： 日期：(2001-10-22 16:09:40)
   * 修改日期，修改人，修改原因，注释标志：
   * 
   * @return nc.vo.pub.billcodemanage.BillCodeObjVO
   * @param vo
   *          nc.vo.pub.AggregatedValueObject
   */
  private BillCodeObjValueVO getBillCodeObjVO(CircularlyAccessibleValueObject vo) {
    BillCodeObjValueVO bcovo = new BillCodeObjValueVO();
    String[] names = vo.getAttributeNames();
    String[] values = new String[names.length];
    for (int j = 0; j < names.length; j++) {
      values[j] = vo.getAttributeValue(names[j]) == null ? "" : vo
          .getAttributeValue(names[j]).toString();
      // 强制置入中文名称
      if (names[j].equals("pkcorp")) {

        names[j] = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
            "common", "UC000-0000404")/* @res "公司" */; //
      }
      else if (names[j].equals("pkinv")) {
        names[j] = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID(
            "common", "UC000-0001439")/* @res "存货" */; //
      }
    }
    bcovo.setAttributeValue(names, values);
    return bcovo;
  }

  /**
   * 判断应付系统是否启用。
   */
  public boolean isArapModuleStarted(String sCorpID, String sModuleCode)
      throws BusinessException {
    boolean isUsed = false;
    try {
      nc.bs.dm.pub.RewriteDMO dmo = new RewriteDMO();
      isUsed = dmo.isModuleStarted(sCorpID, sModuleCode);
    }
    catch (Exception e) {
      reportException(e);
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException(e);
    }
    return isUsed;
  }

  /**
   * 用于核销的发运单的查询。
   */
  public DMDataVO[] queryDelivBillByVerify(String sWhereClause)
      throws BusinessException {
    try {
      InvoiceDMO dmo = new InvoiceDMO();
      nc.vo.dm.pub.DMDataVO[] dmdvos = dmo.queryDelivBillByVerify(sWhereClause);
      return dmdvos;
    }
    catch (Exception e) {
      reportException(e);
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException(e);
    }
  }

  /**
   * 查询生成发票的发运单。
   */
  public DMDataVO[] queryDeliveryBill(String sWhereClause)
      throws BusinessException {
    try {
      InvoiceDMO dmo = new InvoiceDMO();
      nc.vo.dm.pub.DMDataVO[] dmdvos = dmo.queryDeliveryBill(sWhereClause);
      return dmdvos;
    }
    catch (Exception e) {
      reportException(e);
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException(e);
    }
  }

  /**
   * 查询发票。
   */
  public DMVO[] queryInvoice(String sWhereClause) throws BusinessException {
    try {
      DMVO[] vos = new DMVO[0];
      DMDataVO[] headvos = null;
      DMDataVO[] bodyvos = null;
      String headPK = null;

      InvoiceDMO dmo = new InvoiceDMO();

      long lStartTime = System.currentTimeMillis();
      long lTime = 0;

      // 查询表头
      headvos = dmo.queryInvoiceHead(sWhereClause);

      lTime = System.currentTimeMillis() - lStartTime;
      SCMEnv.info("========================执行<" + "查询表头" + ">当前的时间为："
          + (lTime / 60000) + "分" + ((lTime / 1000) % 60) + "秒"
          + (lTime % 1000) + "毫秒===============");

      if (headvos == null || headvos.length == 0)
        return vos;

      // String[] sPKs= new String[headvos.length];
      // for (int i= 0; i < headvos.length; i++) {
      // sPKs[i]= (String) headvos[i].getAttributeValue("pk_delivinvoice_h");
      // }

      // DMDataVO tooldatavo= new DMDataVO();
      // StringBuffer sbBodyWhere= tooldatavo.getStrPKs("pk_delivinvoice_h",
      // sPKs);

      String sBodyWhere = " pk_delivinvoice_h IN (SELECT pk_delivinvoice_h FROM dm_delivinvoice_h ";
      if (sWhereClause != null && sWhereClause.length() > 0) {
        sBodyWhere = sBodyWhere + " WHERE " + sWhereClause;
      }
      sBodyWhere = sBodyWhere + ") ";

      // 查询表体

      lStartTime = System.currentTimeMillis();

      bodyvos = dmo.queryInvoiceBody(sBodyWhere); // .toString());

      lTime = System.currentTimeMillis() - lStartTime;
      SCMEnv.info("========================执行<" + "查询表体" + ">当前的时间为："
          + (lTime / 60000) + "分" + ((lTime / 1000) % 60) + "秒"
          + (lTime % 1000) + "毫秒===============");

      // 组合VO

      lStartTime = System.currentTimeMillis();

      vos = new DMVO[headvos.length];
      String bodyHPK = null;
      Vector v = null;
      Hashtable ht = new Hashtable();

      for (int i = 0; i < bodyvos.length; i++) {
        headPK = (String) bodyvos[i].getAttributeValue("pk_delivinvoice_h");
        if (ht.containsKey(headPK)) {
          v = (Vector) ht.get(headPK);
          // v.add(bodyvos[i]);
          // ht.put(headPK, v);
        }
        else {
          v = new Vector();
          // v.add(bodyvos[i]);
          // ht.put(headPK, v);
        }
        v.add(bodyvos[i]);
        ht.put(headPK, v);
      }

      for (int i = 0; i < headvos.length; i++) {
        vos[i] = new DMVO();
        headPK = (String) headvos[i].getAttributeValue("pk_delivinvoice_h");
        vos[i].setParentVO(headvos[i]);
        if (ht.containsKey(headPK)) {
          v = (Vector) ht.get(headPK);
          if (v.size() > 0) {
            DMDataVO[] tmpvos = new DMDataVO[v.size()];
            v.copyInto(tmpvos);
            vos[i].setChildrenVO(tmpvos);
          }
        }
      }

      lTime = System.currentTimeMillis() - lStartTime;
      SCMEnv.info("========================执行<" + "组合VO" + ">当前的时间为："
          + (lTime / 60000) + "分" + ((lTime / 1000) % 60) + "秒"
          + (lTime % 1000) + "毫秒===============");

      return vos;
    }
    catch (Exception e) {
      reportException(e);
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException(e);
    }
  }

  /**
   * 用于核销的发票查询。
   */
  public DMDataVO[] queryInvoiceByVerify(String sWhereClause)
      throws BusinessException {
    try {
      InvoiceDMO dmo = new InvoiceDMO();
      nc.vo.dm.pub.DMDataVO[] dmdvos = dmo.queryInvoiceByVerify(sWhereClause);
      return dmdvos;
    }
    catch (Exception e) {
      reportException(e);
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException(e);
    }
  }

  /**
   * 创建日期：(2003-11-26 19:20:34) 作者：仲瑞庆 参数： 返回： 说明：
   * 
   * @param sBillTypeCodeKey
   *          java.lang.String
   * @param sCorpKey
   *          java.lang.String
   * @param sBillCodeKey
   *          java.lang.String
   * @param vos
   *          nc.vo.pub.AggregatedValueObject[]
   * @exception BusinessException
   *              异常说明。
   */
  protected void returnBillCode(String sBillTypeCodeKey, String sCorpKey,
      String sBillCodeKey, AggregatedValueObject[] vos)
      throws BusinessException {
    try {
      if (vos == null || vos.length == 0)
        return;
      InvoiceDMO dmo = new InvoiceDMO();
      BillCodeObjValueVO[] bvos = new BillCodeObjValueVO[vos.length];
      for (int i = 0; i < vos.length; i++) {
        // bvos[i].setAttributeValue(sBillTypeCodeKey,
        // DMBillTypeConst.m_delivInvoice);
        bvos[i] = getBillCodeObjVO(vos[i].getParentVO());
      }
      dmo.returnAVOBillCode(DMBillTypeConst.m_delivInvoice, sCorpKey,
          sBillCodeKey, bvos, vos);
    }
    catch (Exception ex) {
      ExceptionUtils.marsh( ex );
    }

  }

  /**
   * 创建日期：(2003-11-26 19:20:15) 作者：仲瑞庆 参数： 返回： 说明：界面点取消时释放单据号
   * 
   * @param sBillTypeCodeKey
   *          java.lang.String
   * @param sCorpKey
   *          java.lang.String
   * @param sBillCodeKey
   *          java.lang.String
   * @param vos
   *          nc.vo.pub.AggregatedValueObject[]
   * @exception BusinessException
   *              异常说明。
   */
  public void invoice_returnBillCodeForUI(String sBillTypeCodeKey,
      String sCorpKey, String sBillCodeKey, AggregatedValueObject[] vos)
      throws BusinessException {
    try {
      if (vos == null || vos.length == 0)
        return;
      InvoiceDMO dmo = new InvoiceDMO();
      BillCodeObjValueVO[] bvos = new BillCodeObjValueVO[vos.length];
      for (int i = 0; i < vos.length; i++) {
        // bvos[i].setAttributeValue(sBillTypeCodeKey,
        // DMBillTypeConst.m_delivInvoice);
        bvos[i] = getBillCodeObjVO(vos[i].getParentVO());
      }
      dmo.returnAVOBillCodeForUI(DMBillTypeConst.m_delivInvoice, sCorpKey,
          sBillCodeKey, bvos, vos);
    }
    catch (Exception e) {
      reportException(e);
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException(e);
    }

  }

  /**
   * 保存发票。
   */
  public DMVO saveInvoice(DMVO vo) throws BusinessException {
    String[] sAllKeys = null;
    DMVO dvo = null;
    try {
      IScm srv = (IScm) NCLocator.getInstance().lookup(IScm.class.getName());    
      srv.checkDefDataType(vo);

      // 加锁
      String sHeadPkName = "pk_delivinvoice_h";
      String sBodyPkName = "pk_delivinvoice_b";
      String sHeadPkNameInBody = "pk_delivinvoice_h";
      String[] sHeadLockFieldsNames = {
        "pk_delivinvoice_h"
      };
      String[] sBodyLockFieldsNames = {
          "pk_delivinvoice_h", "pk_delivinvoice_b"
      };
      DmDMO dmdmo = new DmDMO();
      sAllKeys = dmdmo.getLockPKsArray(vo, sHeadPkName, sBodyPkName,
          sHeadPkNameInBody, sHeadLockFieldsNames, sBodyLockFieldsNames);
      lockPKs(sAllKeys, vo.getParentVO().getAttributeValue("userid").toString());
      // 校验
      invoice_saveCheck(vo);

      // 对删除和修改行释放单据号
      returnBillCode(DMBillTypeConst.m_delivInvoice, "pk_corp",
          "vinvoicenumber", new DMVO[] {
            vo
          });

      // 保存
      InvoiceDMO dmo = new InvoiceDMO();
      //add by shikun 2014-08-20 编辑后，减少或增加行数量：分装子表主键和行数量
      DMDataVO hvo = vo.getHeaderVO();
      String pk_hid = hvo.getAttributeValue("pk_delivinvoice_h")==null?"":hvo.getAttributeValue("pk_delivinvoice_h").toString();
 
      //add by yqq 2017-01-11  从运费发票表头取公司条件    
      String pk_corp = hvo.getAttributeValue("pk_corp")==null?"":hvo.getAttributeValue("pk_corp").toString();

      HashMap<String, UFDouble> bmap = new HashMap<String, UFDouble>();
      if (pk_hid!=null&&!"".equals(pk_hid)) {
		DMDataVO[] old_bvos = dmo.queryInvoiceBody(" isnull(dr,0)=0 and pk_delivinvoice_h = '"+pk_hid+"'");
		if (old_bvos!=null&&old_bvos.length>0) {
			for (int i = 0; i < old_bvos.length; i++) {
				DMDataVO bvoi = old_bvos[i];
				String pk_bid = bvoi.getAttributeValue("pk_delivinvoice_b")==null?"":bvoi.getAttributeValue("pk_delivinvoice_b").toString();
				if (pk_bid!=null&&!"".equals(pk_bid)) {
					if(!bmap.containsKey(pk_bid)){
						UFDouble bnum = bvoi.getAttributeValue("dinvnum")==null?new UFDouble(0):new UFDouble(bvoi.getAttributeValue("dinvnum").toString());
						bmap.put(pk_bid, bnum);
					}
				}
			}
		}
	}//end shikun 2014-08-20
      dvo = dmo.save(vo);   
      //eric 更新出库单 vuserdef20 是否已生成运费发票  1 是    0否
      //2013-1-7 更新出库单表体vuserdef5 设置是否已生成运费发票   1 是    0否 
      DMDataVO[] vos = vo.getBodyVOs();
//      String updatesql = "update ic_general_b set vuserdef5 = ?  where cgeneralbid in (select cgeneralbid from ( " +
//    		  			 "select  b.cgeneralbid  from ic_general_h h,ic_general_b b,bd_invbasdoc inv where h.cgeneralhid = b.cgeneralhid and "+
//    		  			 "b.cinvbasid = inv.pk_invbasdoc and inv.invcode= ? and h.vbillcode = ?  and nvl(b.vuserdef5,0) = ? order by b.vbatchcode) where rownum <= ? ) ";
      
      
      
/*      //edit by zwx 2015-5-15 过滤已删除记录,否则会回写已删除记录,导致已开过发票还显示
      String updatesql = "update ic_general_b set vuserdef5 = ?  where cgeneralbid in (select cgeneralbid from ( " +
 		 "select  b.cgeneralbid  from ic_general_h h,ic_general_b b,bd_invbasdoc inv where h.cgeneralhid = b.cgeneralhid and "+
 		 "b.cinvbasid = inv.pk_invbasdoc and inv.invcode= ? and h.vbillcode = ?  and nvl(b.vuserdef5,0) = ? and ISNULL(h.dr,0)=0 and ISNULL(b.dr,0)=0 order by b.vbatchcode) where rownum <= ? ) ";

      //end by zwx
*/      
      
      
    //edit by yqq 2017-01-11 过滤已删除记录,否则会回写已删除记录,导致已开过发票还显示并带公司条件
      String updatesql = "update ic_general_b set vuserdef5 = ?  where cgeneralbid in (select cgeneralbid from ( " +
		 "select  b.cgeneralbid  from ic_general_h h,ic_general_b b,bd_invbasdoc inv where h.cgeneralhid = b.cgeneralhid and "+
		 "b.cinvbasid = inv.pk_invbasdoc and inv.invcode= ? and h.vbillcode = ?  and h.pk_corp='"+pk_corp+"' and nvl(b.vuserdef5,0) = ? and ISNULL(h.dr,0)=0 and ISNULL(b.dr,0)=0 order by b.vbatchcode) where rownum <= ? ) ";
    //end by yqq
      
      
      

//      String updatesql = "update ic_general_h set vuserdef20='1' where vbillcode = ? ";
//      String updatesql2 = "update ic_general_h set vuserdef20='0' where vbillcode = ? ";
      SQLParameter param = new SQLParameter();
      IUAPQueryBS qurey = (IUAPQueryBS) NCLocator.getInstance().lookup(IUAPQueryBS.class.getName());
      for(DMDataVO bvo : vos){
    	  param.clearParams();
    	  Object count = bvo.getAttributeValue("dinvnum");
     	 Object vbillcode = bvo.getAttributeValue("vuserdef14");
     	 Object invcode = bvo.getAttributeValue("vuserdef18");
     	if(vbillcode!=null&&invcode!=null){
    	 if( bvo.getStatus()!=VOStatus.DELETED){
    		 //获取同一个出库单号下的相同存货的最大可开票数量：25数量，其他行数。
    		 StringBuffer sqlkp = new StringBuffer();
    		 sqlkp.append(" select case substr(bas.invcode, 0, 2) ") 
    			.append("          when '25' then ") 
    			.append("           sum(b.noutnum) ") 
    			.append("          else ") 
    			.append("           count(cgeneralbid) ") 
    			.append("        end num ") 
    			.append("   from ic_general_h h ") 
    			.append("  inner join ic_general_b b on h.cgeneralhid = b.cgeneralhid ") 
    			.append("  inner join bd_invbasdoc bas on b.cinvbasid = bas.pk_invbasdoc ") 
    			.append("  where nvl(h.dr, 0) = 0 ") 
    			.append("    and nvl(b.dr, 0) = 0 ") 
    			.append("    and nvl(bas.dr, 0) = 0 ") 
    			.append("    and nvl(b.vuserdef5, '0') = '0' ") //未开票行
    			.append("    and h.vbillcode = '"+vbillcode+"' ") 
    			.append("    and bas.invcode = '"+invcode+"' ") 
    			.append("  group by h.vbillcode, bas.invcode ");
    		 Object nnum = qurey.executeQuery(sqlkp.toString(), new ColumnProcessor());
    		 UFDouble noutnum = nnum==null? new UFDouble(0):new UFDouble(nnum.toString());
    		 String pk_delivinvoice_b = bvo.getAttributeValue("pk_delivinvoice_b")==null?"":bvo.getAttributeValue("pk_delivinvoice_b").toString();
         	 if (pk_delivinvoice_b!=null&&!"".equals(pk_delivinvoice_b)) {
    			Object old_dinvnum = bmap.get(pk_delivinvoice_b);
    			if (old_dinvnum!=null) {
					UFDouble oldnum = new UFDouble(old_dinvnum.toString());
					UFDouble newnum = new UFDouble(count.toString());
					UFDouble cenum = newnum.sub(oldnum);
					if (cenum.doubleValue()>0) {//开票数量增加，增加数量与可开票数量进行比较
						if (invcode.toString().startsWith("25")) {//25开头的存货为按重量计算，此时不进行数量的校验和拦截
				    		 Object status1 = "1";
				    		 Object status2 = "0";
				    		 param.addParam(status1);
				    		 param.addParam(invcode);
				    		 param.addParam(vbillcode);
				    		 param.addParam(status2);
				    		 param.addParam(cenum);
						}else{//非25开头的存货，进行垛数校验
							if (noutnum.doubleValue()>=cenum.doubleValue()) {//可开票数量大于等于新增差额数量，进行开票状态回写
					    		 Object status1 = "1";
					    		 Object status2 = "0";
					    		 param.addParam(status1);
					    		 param.addParam(invcode);
					    		 param.addParam(vbillcode);
					    		 param.addParam(status2);
					    		 param.addParam(cenum);
							}else{//新增差额数量超出可开票数量，抛出异常
								throw new BusinessException("存货["+invcode+"]的新开票数量大于出库可开票数量："+cenum+">"+noutnum+"");
							}
						}
					}else if (cenum.doubleValue()<0) {//开票数量减少，减少数量回写出库单开票状态
						UFDouble cenum2 = oldnum.sub(newnum);
			    		 Object status1 = "0";
			    		 Object status2 = "1";
			    		 param.addParam(status1);
			    		 param.addParam(invcode);
			    		 param.addParam(vbillcode);
			    		 param.addParam(status2);
			    		 param.addParam(cenum2);
					}
				}else{	//新增数量时回写开票状态
					if (invcode.toString().startsWith("25")) {//25开头的存货为按重量计算，此时不进行数量的校验和拦截
			    		 Object status1 = "1";
			    		 Object status2 = "0";
			    		 param.addParam(status1);
			    		 param.addParam(invcode);
			    		 param.addParam(vbillcode);
			    		 param.addParam(status2);
			    		 param.addParam(count);
					}else{
						UFDouble ufcount = new UFDouble(count.toString());
						if (noutnum.doubleValue()>=ufcount.doubleValue()) {//可开票数量大于等于新增差额数量，进行开票状态回写
				    		 Object status1 = "1";
				    		 Object status2 = "0";
				    		 param.addParam(status1);
				    		 param.addParam(invcode);
				    		 param.addParam(vbillcode);
				    		 param.addParam(status2);
				    		 param.addParam(count);
						}else{
							throw new BusinessException("存货["+invcode+"]的新开票数量大于出库可开票数量："+ufcount+">"+noutnum+"");
						}
					}
				}
    		}else{//新增行时回写开票状态
				if (invcode.toString().startsWith("25")) {//25开头的存货为按重量计算，此时不进行数量的校验和拦截
		    		 Object status1 = "1";
		    		 Object status2 = "0";
		    		 param.addParam(status1);
		    		 param.addParam(invcode);
		    		 param.addParam(vbillcode);
		    		 param.addParam(status2);
		    		 param.addParam(count);
				}else{
					UFDouble ufcount = new UFDouble(count.toString());
					if (noutnum.doubleValue()>=ufcount.doubleValue()) {//可开票数量大于等于新增差额数量，进行开票状态回写
			    		 Object status1 = "1";
			    		 Object status2 = "0";
			    		 param.addParam(status1);
			    		 param.addParam(invcode);
			    		 param.addParam(vbillcode);
			    		 param.addParam(status2);
			    		 param.addParam(count);
					}else{
						throw new BusinessException("存货["+invcode+"]的新开票数量大于出库可开票数量："+ufcount+">"+noutnum+"");
					}
				}
    		}
    	 }else{
    		 Object status1 = "0";
    		 Object status2 = "1";
    		 param.addParam(status1);
    		 param.addParam(invcode);
    		 param.addParam(vbillcode);
    		 param.addParam(status2);
    		 param.addParam(count);
    		 }
    	 //edit by zwx 2015-3-2  param不为空时执行update
    	 if((param!=null)&&(param.getParameters().size()>0)){
    		 getBaseDAO().executeUpdate(updatesql, param); 
    	 }
     	}
      }
    }
    catch (Exception ex) {
      ExceptionUtils.marsh( ex );
    }
    finally {
      // 解锁
      unLockPKs(sAllKeys, vo.getParentVO().getAttributeValue("userid")
          .toString());
    }
    return dvo;
  }


/**
   * 获取同一个出库单号下的相同存货的最大可开票数量：25数量，其他行数。
   * add by shikun 2014-08-23 
   * */
  private UFDouble getICoutnum(IUAPQueryBS qurey,Object vbillcode, Object invcode) {
	StringBuffer sb = new StringBuffer();
	sb.append(" select case substr(bas.invcode, 0, 2) ") 
	.append("          when '25' then ") 
	.append("           sum(b.noutnum) ") 
	.append("          else ") 
	.append("           count(cgeneralbid) ") 
	.append("        end num ") 
	.append("   from ic_general_h h ") 
	.append("  inner join ic_general_b b on h.cgeneralhid = b.cgeneralhid ") 
	.append("  inner join bd_invbasdoc bas on b.cinvbasid = bas.pk_invbasdoc ") 
	.append("  where nvl(h.dr, 0) = 0 ") 
	.append("    and nvl(b.dr, 0) = 0 ") 
	.append("    and nvl(bas.dr, 0) = 0 ") 
	.append("    and nvl(b.vuserdef5, '0') = '0' ") //未开票行
	.append("    and h.vbillcode = '"+vbillcode+"' ") 
	.append("    and bas.invcode = '"+invcode+"' ") 
	.append("  group by h.vbillcode, bas.invcode ") ;
	try {
		UFDouble noutnum = (UFDouble) qurey.executeQuery(sb.toString(), new ColumnProcessor());
		return noutnum;
	} catch (BusinessException e) {
		e.printStackTrace();
	}
	return null;
}
//eric
  public BaseDAO dao ;
  public BaseDAO getBaseDAO(){
	  if(dao==null){
		  dao = new BaseDAO();
	  }
	  return dao;
  }

  /**
   * 保存Ts检查。 功能： 参数： 返回： 例外： 日期：(2002-7-24 20:24:01) 修改日期，修改人，修改原因，注释标志：
   */
  public void invoice_saveCheck(DMVO vo) throws BusinessException,
      BusinessException, javax.naming.NamingException {
    IScm srv = (IScm) NCLocator.getInstance().lookup(IScm.class.getName());    
    srv.checkDefDataType(vo);
    // 检查时间戳
    invoice_checkTs(vo);
    // 检查单据号是否重复
    checkBillCode(vo,"vinvoicenumber","dm_delivinvoice_h","pk_corp");
  }

  /**
   * 置核销标志。
   */
  public void setVerifyFlag(DMVO delivVO, DMVO invoiceVO, String sUser)
      throws BusinessException {
    try {

      // 重置发票

      InvoiceDMO invoiceDMO = new InvoiceDMO();

      // 构造发票表头

      DMDataVO[] bodyvos = (DMDataVO[]) invoiceVO.getChildrenVO();

      if (bodyvos == null || bodyvos.length == 0)
        return;

      String[] Hids = new String[bodyvos.length];

      for (int i = 0; i < bodyvos.length; i++) {
        Hids[i] = (String) bodyvos[i].getAttributeValue("pk_delivinvoice_h");
      }

      String sWhere = " pk_delivinvoice_h IN (";
      for (int i = 0; i < Hids.length; i++) {
        sWhere = sWhere + "'" + Hids[i] + "'";
        if (i != Hids.length - 1)
          sWhere = sWhere + ",";
        else
          sWhere = sWhere + ")";
      }

      DMDataVO[] headvos = (DMDataVO[]) invoiceDMO.queryInvoiceHead(sWhere);

      DMVO dmvo = new DMVO();
      for (int i = 0; i < headvos.length; i++) {
        headvos[i].setAttributeValue("userid", sUser);
        dmvo.setParentVO(headvos[i]);
        dmvo.setChildrenVO(null);
        dmvo.setStatusTo(VOStatus.UPDATED);
        saveInvoice(dmvo);
      }

      // 置发票表体核销数量

      invoiceDMO.setInvoiceVerifyNum(invoiceVO);

      // 置发运单表体核销标志

      DelivbillHDMO delivbillDMO = new DelivbillHDMO();

      DMDataVO[] dmdvos = (DMDataVO[]) delivVO.getChildrenVO();

      delivbillDMO.setDelivBillVerifyFlag(dmdvos);

    }
    catch (Exception e) {
      reportException(e);
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException(e);
    }
  }

  /**
   * 弃审发票，并删除应付单。
   */
  public DMVO unauditInvoice(DMVO dvo) throws BusinessException {
    String[] sAllKeys = null;
    try {
      // 加锁
      String sHeadPkName = "pk_delivinvoice_h";
      String sBodyPkName = "pk_delivinvoice_b";
      String sHeadPkNameInBody = "pk_delivinvoice_h";
      String[] sHeadLockFieldsNames = {
        "pk_delivinvoice_h"
      };
      String[] sBodyLockFieldsNames = {
          "pk_delivinvoice_h", "pk_delivinvoice_b"
      };
      DmDMO dmdmo = new DmDMO();
      sAllKeys = dmdmo.getLockPKsArray(dvo, sHeadPkName, sBodyPkName,
          sHeadPkNameInBody, sHeadLockFieldsNames, sBodyLockFieldsNames);

      lockPKs(sAllKeys, dvo.getParentVO().getAttributeValue("userid")
          .toString());

      // 校验
      invoice_saveCheck(dvo);

      // 发票审核
      InvoiceDMO dmo = new InvoiceDMO();
      DMVO retvo = dmo.save(dvo);

      // 判断应付是否启用
      boolean isUsed = isArapModuleStarted((String) dvo.getParentVO()
          .getAttributeValue("pk_corp"), "AP");

      if (isUsed) {
        // 删除应付单
    	  
    	  String invoiceid = (String) dvo.getParentVO().getAttributeValue(
    			  "pk_delivinvoice_h"); // 发票主键
    	  
    	 /*
    	  * 查询是否有回冲应付单,如果有则删除，并回写暂估应付回冲标志(制盖)
    	  * 王凯飞
    	  * 2014-11-01
    	  * */
    	//查询出是否你有暂估回冲，有则返回VO数组
    	String pk_corp = dvo.getParentVO().getAttributeValue("pk_corp").toString();
    	if("1078".equals(pk_corp)|| pk_corp.equals("1108")){
    		DJZBVO[] delete = queryDJZBfromZxy(invoiceid);
    		if(delete.length >0){
    			
    			//删除负的暂估应付单
    			IArapBillPublic beanfu = (IArapBillPublic) NCLocator.getInstance()
    					.lookup(IArapBillPublic.class.getName());
    			for (int i = 0; i < delete.length; i++) {
    				beanfu.deleteArapBill(delete[i]);
    			}
    			//回写暂估应付。
    			DJZBVO[] backdj = queryDJfromdel(delete);
//    			IArapBillPublic uArap = (IArapBillPublic) NCLocator.getInstance().lookup(IArapBillPublic.class.getName());
    			for (int i = 0; i < delete.length; i++) {
    				DJZBVO updatetmp = new DJZBVO();
    				DJZBHeaderVO djheadvo = (DJZBHeaderVO) backdj[i].getParentVO();
//    				djheadvo.setZyx28(null);
    				
    				DJZBItemVO[] djbodyvo = (DJZBItemVO[]) backdj[i].getChildrenVO();
    				for (int j = 0; j < djbodyvo.length; j++) {
    					djbodyvo[j].setZyx28(null);
					}
    				updatetmp.setParentVO(djheadvo);
    				updatetmp.setChildrenVO(djbodyvo);
    				beanfu.editArapBill(updatetmp);
    			}
    			
    			//回写
				backICStatus_wwjg1(delete,pk_corp);
    		}
    	}

        IArapBillPublic bean = (IArapBillPublic) NCLocator.getInstance()
            .lookup(IArapBillPublic.class.getName());
        bean.deleteOutArapBillByPk(invoiceid);
        
        // nc.bs.ep.dj.DJZBBO bean=new nc.bs.ep.dj.DJZBBO();
        // bean.deleteOutBill(invoiceid);
      }

      return retvo;

    }
    catch (Exception e) {
      reportException(e);
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException(e);
    }
    finally {
      // 解锁
      unLockPKs(sAllKeys, dvo.getParentVO().getAttributeValue("userid")
          .toString());
    }
  }
  
  /**
   * 查得要回冲的VO
   * 王凯飞
 * @return 
   * 
   * */
  @SuppressWarnings("unchecked")
private DJZBVO[] queryDJfromdel(DJZBVO[] djzbvo) {
//	  HashMap<String, String> tmpmap = new HashMap<String, String>();
	  String headsqltmp = ""; 
	  for (int i = 0; i < djzbvo.length; i++) {
		  DJZBItemVO[] bodytmpvo = (DJZBItemVO[]) djzbvo[i].getChildrenVO();
		  for (int j = 0; j < bodytmpvo.length; j++) {
			  String ddhh = bodytmpvo[j].getDdhh();
			  headsqltmp+="'"+ddhh+"',";
		  }
	  }
	  headsqltmp = headsqltmp.substring(0, headsqltmp.length()-1);//去掉最后一个逗号
	  StringBuffer headsql = new StringBuffer();
	  headsql.append(" select distinct zb.* from arap_djzb zb ") 
	  .append("        left join arap_djfb fb ") 
	  .append("        on zb.vouchid = fb.vouchid ") 
	  .append("        where nvl(zb.dr,0)=0  ") 
	  .append("        and nvl(fb.dr,0)=0 ") 
	  .append("        and bbje>0  ") 
	  .append("        and fb.ddhh in ("+headsqltmp+") ") ;
	  
	  StringBuffer bodysql = new StringBuffer();
	  bodysql.append(" select distinct fb.* from arap_djzb zb ") 
	  .append("        left join arap_djfb fb ") 
	  .append("        on zb.vouchid = fb.vouchid ") 
	  .append("        where nvl(zb.dr,0)=0  ") 
	  .append("        and nvl(fb.dr,0)=0 ") 
	  .append("        and bbje>0  ") 
	  .append("        and fb.ddhh in ("+headsqltmp+") ") ;
//	  String bodysql=" select * from  arap_djfb where nvl(dr,0)=0 ";
	  ArrayList headerlist = null;
	  	try {
			headerlist  = (ArrayList) getBaseDAO().executeQuery(headsql.toString(), new BeanListProcessor(DJZBHeaderVO.class));
		} catch (DAOException e) {
			e.printStackTrace();
		}
	  	DJZBVO[] djvoaa =  new DJZBVO[headerlist.size()];
	  	if(headerlist.size()>0 || headerlist !=null){
	  		for (int j = 0; j < headerlist.size(); j++) {
	  			DJZBVO itemdjvo = new DJZBVO();
	  			DJZBHeaderVO headtmpvo = (DJZBHeaderVO) headerlist.get(j);
	  			bodysql.append("   and fb.vouchid='"+headtmpvo.getVouchid()+"' ");
	  			ArrayList<DJZBItemVO> itemlist =null;
	  			try {
	  				itemlist  = (ArrayList<DJZBItemVO>) getBaseDAO().executeQuery(bodysql.toString(), new BeanListProcessor(DJZBItemVO.class));
	  			} catch (DAOException e) {
	  				// TODO Auto-generated catch block
	  				e.printStackTrace();
	  			}
	  			DJZBItemVO[] bodyvo = itemlist.toArray(new DJZBItemVO[itemlist.size()]);
	  			itemdjvo.setParentVO(headtmpvo);
	  			itemdjvo.setChildrenVO(bodyvo);
	  			djvoaa[j]=itemdjvo;
	  		}
	  	}
	  return djvoaa;
  }
  
  /**
   * 查询是否有回冲应付单生成
   * 王凯飞
   * */
  @SuppressWarnings("unchecked")
private DJZBVO[] queryDJZBfromZxy(String invoice) {
	  //1.根据发票id查出应付单主表的id
	  StringBuffer qsql = new StringBuffer();
	  StringBuffer bsql = new StringBuffer();
	  qsql.append(" select distinct h.* ")
      .append("       from arap_djzb h  ")
      .append("        inner join arap_djfb b ") 
      .append("        on h.vouchid = b.vouchid ")
      .append("        where nvl(b.dr,0)=0 ") 
      .append("        and nvl(h.dr,0)=0 ") 
    //  .append("        and h.bbje > 0 ")
      .append("        and b.zyx28 = '"+invoice+"' ");
	  
	  bsql.append(" select  b.* ")
      .append("       from arap_djzb h  ")
      .append("        inner join arap_djfb b ") 
      .append("        on h.vouchid = b.vouchid ")
      .append("        where nvl(b.dr,0)=0 ") 
      .append("        and nvl(h.dr,0)=0 ") 
    //  .append("        and h.bbje > 0 ")
      .append("        and b.zyx28 = '"+invoice+"' ");
  	ArrayList headerlist = null;
  	try {
		headerlist  = (ArrayList) getBaseDAO().executeQuery(qsql.toString(), new BeanListProcessor(DJZBHeaderVO.class));
	} catch (DAOException e) {
		e.printStackTrace();
	}
  	DJZBVO[] djzbvo =  new DJZBVO[headerlist.size()];
  	if(headerlist.size()>0 || headerlist !=null){
  		for (int j = 0; j < headerlist.size(); j++) {
  			DJZBVO itemdjvo = new DJZBVO();
  			DJZBHeaderVO headtmpvo = (DJZBHeaderVO) headerlist.get(j);
  			bsql.append("  and h.vouchid='"+headtmpvo.getVouchid()+"'  ");
  			ArrayList<DJZBItemVO> itemlist =null;
  			try {
  				itemlist  = (ArrayList<DJZBItemVO>) getBaseDAO().executeQuery(bsql.toString(), new BeanListProcessor(DJZBItemVO.class));
  			} catch (DAOException e) {
  				// TODO Auto-generated catch block
  				e.printStackTrace();
  			}
  			DJZBItemVO[] bodyvo = itemlist.toArray(new DJZBItemVO[itemlist.size()]);
  			itemdjvo.setParentVO(headtmpvo);
  			itemdjvo.setChildrenVO(bodyvo);
  			djzbvo[j]=itemdjvo;
  		}
  	}
  	
  	return djzbvo;
}
  
  
  
  /**
	 * 此处插入方法说明。
	 * 功能：检查单据号重复，只能在保存方法之后调用。
	 * 参数：
	 * 返回：
	 * 例外：
	 * 日期：(2002-11-1 9:46:35)
	 * 修改日期，修改人，修改原因，注释标志：
	 * @param voBill nc.voBill.pub.AggregatedValueObject
	 * @exception nc.voBill.pub.BusinessException 异常说明。
	 */
	public void checkBillCode(AggregatedValueObject voBill,
			String sCodeFieldName, String sTableName, String sCorpField)
			throws BusinessException {

		if (voBill.getParentVO() == null)
			return;
		String vbillcode = (String) voBill.getParentVO().getAttributeValue(
				sCodeFieldName);
		String pk_corp = (String) voBill.getParentVO().getAttributeValue(
				sCorpField);
		if (vbillcode == null || vbillcode.trim().length() == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver
					.getInstance().getStrByID("scmcommon",
							"UPPSCMCommon-000067")/* @res "单据号为空！" */);

		String sSql = "SELECT " + sCodeFieldName + " FROM " + sTableName
				+ " WHERE  " + sCodeFieldName + "='" + vbillcode + "' and "
				+ sCorpField + "='" + pk_corp + "' and dr=0 ";

		try {

			SmartDMO sdmo = new SmartDMO();
			Object[] rs = sdmo.selectBy2(sSql);
			if (rs != null && rs.length > 0 && rs.length > 1) {
				throw new BusinessException(nc.bs.ml.NCLangResOnserver
						.getInstance().getStrByID("scmcommon",
								"UPPSCMCommon-000068")/* @res "单据号重复，请重新录入单据号！" */);
			}
		} catch (Exception e) {
			ExceptionUtils.marsh(e);
		}

	}
}