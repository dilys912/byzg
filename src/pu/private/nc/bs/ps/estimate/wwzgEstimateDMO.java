/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.ps.estimate;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

import nc.bs.dao.BaseDAO;
import nc.bs.dao.DAOException;
import nc.bs.pu.pub.PubDMO;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.bs.scm.ic.freeitem.DefdefDMO;
import nc.itf.uap.busibean.ISysInitQry;
import nc.vo.ic.pub.bill.GeneralBillHeaderVO;
import nc.vo.ic.pub.bill.GeneralBillItemVO;
import nc.vo.ic.pub.bill.GeneralBillVO;
import nc.vo.ps.estimate.EstimateVO;
import nc.vo.ps.estimate.saleEstimateVO;
import nc.vo.ps.estimate.GeneralBb3VO;
import nc.vo.ps.estimate.GeneralHHeaderVO;
import nc.vo.ps.estimate.GeneralHItemVO;
import nc.vo.ps.estimate.GeneralHVO;
import nc.vo.ps.estimate.IGeneralBillItemVO;
import nc.vo.ps.estimate.IGeneralBillVO;
import nc.vo.ps.estimate.wwEstimateVO;
import nc.vo.ps.settle.OorderVO;
import nc.vo.pub.BusinessException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.para.SysInitVO;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.pu.RelationsCalVO;
import nc.vo.scm.pub.SCMEnv;

/**
 * Estimate的DMO类。
 *
 * 创建日期：(2001-5-30)
 * @author：
 */
public class wwzgEstimateDMO extends DataManageObject {
/**
 * EstimateDMO 构造子注解。
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public wwzgEstimateDMO() throws javax.naming.NamingException, SystemException {
	super();
}
/**
 * EstimateDMO 构造子注解。
 *
 * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public wwzgEstimateDMO(String dbName) throws javax.naming.NamingException, SystemException {
	super(dbName);
}





/**
 * 此处插入方法说明。
 * 功能描述:删除入库单的结算子子表
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public void deleteBb3(GeneralBb3VO vo[]) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "deleteBb3", new Object[]{vo});
	/*************************************************************/

	String sql = "update ic_general_bb3 set dr = 1 where cgeneralbid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con, sql);
		for(int i = 0; i < vo.length; i++){
			stmt.setString(1, vo[i].getCgeneralbid());
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "deleteBb3", new Object[]{vo});
	/*************************************************************/
}

/**
 * 此处插入方法说明。
 * 功能描述:删除入库单体
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public void deleteBody(GeneralHItemVO vo[]) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "deleteBody", new Object[]{vo});
	/*************************************************************/

	String sql = "update ic_general_b set dr = 1 where cgeneralbid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con, sql);
		for(int i = 0; i < vo.length; i++){
			stmt.setString(1, vo[i].getCgeneralbid());
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "deleteBody", new Object[]{vo});
	/*************************************************************/
}

/**
 * 功能描述:作废期初暂估入库单,并修改订单的累计入库数量
 * 输入参数:GeneralHVO[]
 * 异常处理:SQLException
 * 作者：熊海情
 * 修改：晁志平 2004-06-02 增加到货计划行处理
 */
public void discard(GeneralHVO vo[], String strPkCorp) throws java.sql.SQLException {
	if (vo == null || vo.length == 0) {
		SCMEnv.out("没有数据，直接返回！");
		return;
	}
	String strSql1 = "update ic_general_h set dr = 1 where cgeneralhid = ?";
	String strSql2 = "update ic_general_b set dr = 1 where cgeneralbid = ?";
	String strSql3 = "update ic_general_bb3 set dr = 1 where cgeneralbb3 = ?";
	int iLen = vo.length;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();

		for (int i = 0; i < iLen; i++) {
			//作废入库单表头
			stmt = prepareStatement(con, strSql1);
			stmt.setString(1, vo[i].getHeadVO().getCgeneralhid());
			executeUpdate(stmt);
			executeBatch(stmt);

			//作废入库单表体
			stmt = prepareStatement(con, strSql2);
			GeneralHItemVO bodyVO[] = vo[i].getBodyVO();
			for (int j = 0; j < bodyVO.length; j++) {
				stmt.setString(1, bodyVO[j].getCgeneralbid());
				executeUpdate(stmt);
			}
			executeBatch(stmt);

			//作废入库单结算子子表
			stmt = prepareStatement(con, strSql3);
			GeneralBb3VO bb3VO[] = vo[i].getGrandVO();
			for (int j = 0; j < bb3VO.length; j++) {
				stmt.setString(1, bb3VO[j].getCgeneralbb3());
				executeUpdate(stmt);
			}
			executeBatch(stmt);
		}
		//修改订单表体的累计入库数量
		Vector vPlanLine = new Vector(), vKey = new Vector(), vNumAdded = new Vector();
		GeneralHItemVO[] voItems = null;
		int jLen = 0;
		String strKey = null;
		boolean bPlanLine = false;
		for (int i = 0; i < iLen; i++) {
			voItems = vo[i].getBodyVO();
			if (voItems == null || voItems.length == 0)
				continue;
			jLen = voItems.length;
			for (int j = 0; j < jLen; j++) {
				if (voItems[j] == null)
					continue;
				strKey = voItems[j].getCorder_bb1id();
				bPlanLine = false;
				if (strKey != null && strKey.trim().length() > 0)
					bPlanLine = true;
				vPlanLine.addElement(new UFBoolean(bPlanLine));
				vKey.addElement(bPlanLine ? voItems[j].getCorder_bb1id() : voItems[j].getCsourcebillbid());
				vNumAdded.addElement(voItems[j].getNinnum() == null ? new UFDouble(0.0) : voItems[j].getNinnum().multiply(-1.0));
			}
		}
		if (vPlanLine.size() == 0) {
			SCMEnv.out("未正确获取订单行或订单到货计划数据，直接返回");
			return;
		}
		int iSize = vPlanLine.size();
		boolean[] isPlanLines = new boolean[iSize];
		String[] saKey = new String[iSize];
		UFDouble[] uaNumAdded = new UFDouble[iSize];
		for (int i = 0; i < iSize; i++) {
			isPlanLines[i] = ((UFBoolean) vPlanLine.elementAt(i)).booleanValue();
			saKey[i] = (String) vKey.elementAt(i);
			uaNumAdded[i] = (UFDouble) vNumAdded.elementAt(i);
		}
		ArrayList listPara = new ArrayList();
		listPara.add(isPlanLines);
		listPara.add(saKey);
		listPara.add(uaNumAdded);
		listPara.add(strPkCorp);
		updateOrderStockNum(listPara);
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
}

/**
 * 此处插入方法说明。
 * 功能描述:通过存货管理ID,辅计量ID和主数量获得辅数量
 * 输入参数:
 * 返回值:
 * 异常处理:
 *
 */
public UFDouble getAssistNum(String cMangID,String cAssistUnitID,UFDouble nNum) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "getAssistNum", new Object[]{cMangID,cAssistUnitID,nNum});
	/*************************************************************/

	String sql = "select mainmeasrate from bd_convert";
	sql += " where pk_invbasdoc = ( select pk_invbasdoc from bd_invmandoc where pk_invmandoc = ? )";
	sql += " and pk_measdoc = ?";

	double nExchangeRate=0.0;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, cMangID);
		stmt.setString(2, cAssistUnitID);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			Object oTemp = rs.getObject(1);
			if(oTemp != null && oTemp.toString().trim().length()>0){
				UFDouble d = new UFDouble(oTemp.toString());
				nExchangeRate=d.doubleValue();
			}
		}

		if(rs != null){
			rs.close();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "getAssistNum", new Object[]{cMangID,cAssistUnitID,nNum});
	/*************************************************************/

	if(nExchangeRate!=0.0 && nNum!=null){
		nExchangeRate=nNum.doubleValue()/nExchangeRate;
		return new UFDouble(nExchangeRate);
	}
	return null;
}

/**
 * 功能描述:通过存货管理ID,辅计量ID和主数量获得辅数量
 *
 */
public UFDouble[] getAssistNumBatch(String cMangID[], String cAssistUnitID[], UFDouble nNum[]) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "getAssistNumBatch", new Object[] { cMangID, cAssistUnitID, nNum });
	/*************************************************************/
	//异常处理
	if (nNum == null || nNum.length == 0) {
		return null;
	}
	int iLen = 0;
	if (cAssistUnitID == null || cAssistUnitID.length == 0 || cMangID == null || cMangID.length == 0) {
		UFDouble[] ufdRslts = new UFDouble[nNum.length];
		iLen = cMangID.length;
		for (int i = 0; i < iLen; i++) {
			ufdRslts[i] = new UFDouble(0.0);
		}
		return ufdRslts;
	}
	iLen = cMangID.length;
	//查询存货基础ID
	String sql1 =
		"select pk_invmandoc, A.pk_invbasdoc from bd_invmandoc A, bd_invbasdoc B where A.dr = 0 and B.dr = 0 and A.pk_invbasdoc = B.pk_invbasdoc ";
	sql1 += "and pk_invmandoc in ";

	Vector vTemp = new Vector();
	vTemp.addElement(cMangID[0]);
	for (int i = 1; i < iLen; i++) {
		if (!vTemp.contains(cMangID[i]))
			vTemp.addElement(cMangID[i]);
	}
	String sTemp[] = new String[vTemp.size()];
	vTemp.copyInto(sTemp);
	String strIdSet = null;
	/*
	sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
	for (int i = 0; i < sTemp.length - 1; i++)
		sql1 += " pk_invmandoc in " + sTemp[i] + " or ";
	sql1 += " pk_invmandoc in " + sTemp[sTemp.length - 1] + ")";
	*/
	Hashtable t = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	String cBaseID[] = new String[cMangID.length];
	try {
		//临时表
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strIdSet =
			dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU21, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdSet == null || strIdSet.trim().equals("()")){
			strIdSet = " ('ErrorPk') ";
		}
		sql1 += strIdSet;

		con = getConnection();

		//查询存货基础ID
		stmt = con.prepareStatement(sql1);
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			String s1 = rs.getString(1);
			String s2 = rs.getString(2);
			if (s1 != null && s1.trim().length() > 0 && s2 != null && s2.trim().length() > 0) {
				t.put(s1, s2);
			}
		}
		if (stmt != null)
			stmt.close();
		for (int i = 0; i < cBaseID.length; i++) {
			Object o = t.get(cMangID[i]);
			if (o != null)
				cBaseID[i] = o.toString();
		}

		//根据基础ID查询换算率
		String sql = "select pk_invbasdoc, pk_measdoc, mainmeasrate from bd_convert";
		sql += " where dr = 0 and pk_invbasdoc in ";
		vTemp = new Vector();
		vTemp.addElement(cBaseID[0]);
		for (int i = 1; i < cBaseID.length; i++) {
			if (!vTemp.contains(cBaseID[i]))
				vTemp.addElement(cBaseID[i]);
		}
		sTemp = new String[vTemp.size()];
		vTemp.copyInto(sTemp);
		//临时表
		strIdSet =
			dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU22, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdSet == null || strIdSet.trim().equals("()")){
			strIdSet = " ('ErrorPk') ";
		}
		sql += strIdSet;
		/*
		sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
		for (int i = 0; i < sTemp.length - 1; i++)
			sql += " pk_invbasdoc in " + sTemp[i] + " or ";
		sql += " pk_invbasdoc in " + sTemp[sTemp.length - 1] + ")";
		*/
		t = new Hashtable();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			String s1 = rs.getString(1);
			String s2 = rs.getString(2);
			Object oTemp = rs.getObject(3);
			if (oTemp != null && oTemp.toString().trim().length() > 0) {
				UFDouble d = new UFDouble(oTemp.toString());
				t.put(s1 + s2, d);
			}
		}
		if (rs != null) {
			rs.close();
		}
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "getAssistNumBatch", new Object[] { cMangID, cAssistUnitID, nNum });
	/*************************************************************/
	iLen = nNum.length;
	UFDouble nRate[] = new UFDouble[iLen];
	for (int i = 0; i < nRate.length; i++)
		nRate[i] = new UFDouble(0);
	if (t.size() > 0 && nNum != null && nNum.length > 0) {
		for (int i = 0; i < nRate.length; i++) {
			if (nNum[i] == null) {
				continue;
			}
			if (t.containsKey(cBaseID[i] + cAssistUnitID[i]))
				nRate[i] = (UFDouble) t.get(cBaseID[i] + cAssistUnitID[i]);
			nRate[i] = new UFDouble(nNum[i].doubleValue() / nRate[i].doubleValue());
		}
	}
	return nRate;
}

/**
 * 获取采购数量容差值
 * 创建日期：(2004-06-03 10:40:23)
 * @param  String　　公司主键
 * @return UFDouble　容差值，是一个比例
 */
private UFDouble getCtrlRatePu(String corpId) throws SQLException {
	nc.vo.pub.para.SysInitVO m_initCtrlRateVO = null;
	UFDouble rate = new UFDouble(0.0);
	try {
		ISysInitQry myService = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		m_initCtrlRateVO = myService.queryByParaCode(corpId, "PO03");
		rate = new UFDouble(m_initCtrlRateVO.getValue());
	} catch (Exception e) {
		if (e instanceof SQLException) {
			throw (SQLException) e;
		}
		throw new SQLException(e.getMessage());
	}
	return rate;
}

/**
 * 获取采购数量容差控制
 * 创建日期：(2004-06-03 10:40:23)
 * @param  String　　公司主键
 * @return String　  是否控制容差{"不控制","不保存"}
 */
private String getCtrlStringPu(String corpId) throws SQLException {
	nc.vo.pub.para.SysInitVO m_initCtrlRateVO = null;
	String strctrl = "不控制";
	try {
		ISysInitQry myService = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		m_initCtrlRateVO = myService.queryByParaCode(corpId, "PO02");
		strctrl = m_initCtrlRateVO.getValue();
	} catch (Exception e) {
		if (e instanceof SQLException) {
			throw (SQLException) e;
		}
		throw new SQLException(e.getMessage());
	}
	return strctrl;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得单据模板数据（ARAP）
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2002/05/29
 * @return java.lang.String[]
 * @param unitCode java.lang.String
 */
public String[] getDJDataForARAP(String unitCode,String cbilltype) throws SQLException{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "getDJDataForARAP", new Object[]{unitCode,cbilltype});
	/*************************************************************/

	String sql = "SELECT djlxoid, djmboid FROM ARAP_djLX WHERE dwbm = ? and djlxbm = ?";

	String s[] = new String[2];
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, unitCode);
		stmt.setString(2, cbilltype);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			s[0] = rs.getString(1);
			s[1] = rs.getString(2);
		}

		if(rs != null){
			rs.close();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "getDJDataForARAP", new Object[]{unitCode,cbilltype});
	/*************************************************************/

	return s;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得自由项0
 * 输入参数:入库单VO
 * 返回值:[[自由项0]...]
 * 异常处理:
 * 日期:
 */
public ArrayList getFreeItem0(GeneralHVO VOs[]) {
	ArrayList list1 = new ArrayList();

	try{
		DefdefDMO dmo = new DefdefDMO();
		for(int i = 0; i < VOs.length; i++){
			GeneralHItemVO itemVO[] = VOs[i].getBodyVO();
			ArrayList list2 = new ArrayList();
			for(int j = 0; j < itemVO.length; j++){
				list2.add(itemVO[j].getCinventoryid());
			}
			ArrayList list3 = dmo.queryFreeVOByInvIDs(list2);
			list1.add(list3);
		}
	}catch(Exception e){
		/*不影响业务流程，此异常不必抛出*/
		SCMEnv.out(e);
	}

	return list1;
}

/**
 * 参数： 期初暂估中通过仓库ID获得库存组织ID
 * 返回：
 * 例外：
 * 日期：(2002-11-22 10:52:38)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.lang.String
 * @param cwarehouseid java.lang.String
 */
public String getStorIDByWarehouseID(String cwarehouseid) throws SQLException{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "getStorIDByWarehouseID", new Object[]{cwarehouseid});
	/*************************************************************/

	String sql = "select pk_calbody from bd_stordoc where pk_stordoc = ? and dr = 0";

	String s = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, cwarehouseid);

		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			s = rs.getString(1);
		}

		if(rs != null){
			rs.close();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "getStorIDByWarehouseID", new Object[]{cwarehouseid});
	/*************************************************************/

	return s;
}

/*
 * 获取订单上的发票方
 * 返回Hashtable: key: corderid, value: [0] 发票方ID [1] 收付款协议号
 * 2006-08-25 xhq
 */

public Hashtable getOrderInvoiceReceiver(String corderid[]) throws SQLException{
	
	String strIdSet = null;
	try {
		nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
		strIdSet =
			dmoTmpTbl.insertTempTable(corderid, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU86, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdSet == null || strIdSet.trim().equals("()")) {
			strIdSet = " ('ErrorPk') ";
		}
	} catch (Exception e) {
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("SCMCOMMON","UPPSCMCommon-000413")/*@res "调用临时表处理出现异常:"*/ + e.getMessage());
	}
	
//	String sql = "select A.corderid,A.cgiveinvoicevendor,B.pk_payterm from po_order A left outer join bd_payterm B on A.ctermprotocolid = B.pk_payterm where A.dr = 0 and A.corderid in ";
	String sql = "SELECT a.csaleid,a.creceiptcorpid, B.pk_payterm FROM SO_SALE a left join bd_payterm  b on A.ctermprotocolid = B.pk_payterm  where A.dr = 0 and A.csaleid in";
	sql += strIdSet;

	Connection con = null;
	PreparedStatement stmt = null;
	Hashtable t = new Hashtable();
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			String s1 = rs.getString(1);
			String s2 = rs.getString(2);
			String s3 = rs.getString(3);
			if(s1 != null) t.put(s1,new String[]{s2,s3});
		}

		if(rs != null){
			rs.close();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	return t;
}

/**
 * 此处插入方法说明。
 * 功能描述:通过上级存货分类CODE获得下级存货分类CODE
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2002/07/19
 */
public String[] getSubInvClassCode(String cInvClassCode) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "getSubInvClassCode", new Object[]{cInvClassCode});
	/*************************************************************/

	String sql ="select invclasscode from bd_invcl where invclasslev > (select invclasslev from bd_invcl where invclasscode = ?)";

	Vector v = new Vector();
	v.addElement(cInvClassCode);
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, cInvClassCode);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			String s = rs.getString(1);
			if(s != null && s.trim().length() > 0){
				int index = s.indexOf(cInvClassCode);
				if(index == 0) v.addElement(s);
			}
		}

		if(rs != null) rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "getSubInvClassCode", new Object[]{cInvClassCode});
	/*************************************************************/

	if(v.size() > 0){
		String s[] = new String[v.size()];
		v.copyInto(s);
		return s;
	}

	return null;
}

/**
 * 功能描述:插入入库单结算子子表
 * 输入参数:
 * 返回值:ic_general_bb3　主键数组
 * 异常处理:
 */
public String[] insertBb3(GeneralBb3VO generalBb3[], String key1[], String key2, String pk_corp)
	throws java.sql.SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "insertBb3", new Object[] { generalBb3, key1, key2 });
	/*************************************************************/
	if (key1 == null || key1.length == 0) {
		SCMEnv.out("入库单子表主键数据为空，不能插入　ic_general_bb3　数据，直接返回！");
		return null;
	}
	String sql =
		"insert into ic_general_bb3(cgeneralbid, cgeneralhid, naccountmny, naccountnum2, caccountunitid, naccountnum1, nsignnum, npprice, npmoney, cgeneralbb3) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

	String[] keys = new String[key1.length];
	String strPkBB3 = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = prepareStatement(con, sql);
		for (int i = 0; i < generalBb3.length; i++) {
			// set PK fields:
			stmt.setString(1, key1[i]);
			// set non PK fields:
			stmt.setString(2, key2);
			if (generalBb3[i].getNaccountmny() == null) {
				stmt.setNull(3, Types.INTEGER);
			} else {
				stmt.setBigDecimal(3, generalBb3[i].getNaccountmny().toBigDecimal());
			}
			if (generalBb3[i].getNaccountnum2() == null) {
				stmt.setNull(4, Types.INTEGER);
			} else {
				stmt.setBigDecimal(4, generalBb3[i].getNaccountnum2().toBigDecimal());
			}
			if (generalBb3[i].getCaccountunitid() == null) {
				stmt.setNull(5, Types.CHAR);
			} else {
				stmt.setString(5, generalBb3[i].getCaccountunitid());
			}
			if (generalBb3[i].getNaccountnum1() == null) {
				stmt.setNull(6, Types.INTEGER);
			} else {
				stmt.setBigDecimal(6, generalBb3[i].getNaccountnum1().toBigDecimal());
			}
			if (generalBb3[i].getNsignnum() == null) {
				stmt.setNull(7, Types.INTEGER);
			} else {
				stmt.setBigDecimal(7, generalBb3[i].getNsignnum().toBigDecimal());
			}
			if (generalBb3[i].getNpprice() == null) {
				stmt.setNull(8, Types.INTEGER);
			} else {
				stmt.setBigDecimal(8, generalBb3[i].getNpprice().toBigDecimal());
			}
			if (generalBb3[i].getNpmoney() == null) {
				stmt.setNull(9, Types.INTEGER);
			} else {
				stmt.setBigDecimal(9, generalBb3[i].getNpmoney().toBigDecimal());
			}
			strPkBB3 = getOID(pk_corp);
			//
			keys[i] = strPkBB3;
			//
			stmt.setString(10, strPkBB3);
			//
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	} catch (SQLException e) {
		throw e;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "insertBb3", new Object[] { generalBb3, key1, key2 });
	/*************************************************************/

	return keys;
}

/**
 * 功能描述:插入入库单体
 * 输入参数:GeneralHItemVO[],入库单表体VO[]；String,入库单表头ID；String,公司主键
 * 返回值: String[] ,表体ID[]
 * 异常处理:SQLException,SystemException
 * 作者：熊海情
 * 修改：晁志平 2004-06-02 增加插入到货计划ID，有到货计划时按到货计划生成期初暂估入库单
 */
public String[] insertBody(GeneralHItemVO generalB[], String pk_head, String pk_corp) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "insertBody", new Object[] { generalB, pk_head });
	/*************************************************************/

	String sql = "insert into ic_general_b(cgeneralbid, cgeneralhid, cinventoryid, vbatchcode, vfree1, vfree2, vfree3, vfree4, vfree5, dvalidate, dbizdate, dstandbydate, vproductbatch, nshouldoutnum, nshouldoutassistnum, noutnum, noutassistnum, nshouldinnum, castunitid, nneedinassistnum, ninnum, ninassistnum, ntranoutnum, nprice, nmny, nplannedprice, nplannedmny, csourcebillhid, csourcebillbid, csourcetype, vsourcebillcode, fchecked, cprojectid, ccostobject, ccorrespondbid, ccorrespondhid, ccorrespondtype, ccorrespondcode, flargess, vuserdef1, vuserdef2, vuserdef3, vuserdef4, vuserdef5, vuserdef6, bzgflag, isok, cwp, cfirsttype, cfirstbillhid, cfirstbillbid, crowno, dzgdate, corder_bb1id, pk_reqcorp, pk_invoicecorp, pk_reqstoorg, pk_creqwareid,";
	sql += "vuserdef7,vuserdef8,vuserdef9,vuserdef10,vuserdef11,vuserdef12,vuserdef13,vuserdef14,vuserdef15,vuserdef16,";
	sql += "vuserdef17,vuserdef18,vuserdef19,vuserdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,";
	sql += "pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,";
	sql += "pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,cprojectphaseid,cinvbasid,cvendorid,pk_corp";
	sql += ") values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,";
	sql += "?,?,?,?,?,?,?,?,?,?,";
	sql += "?,?,?,?,?,?,?,?,?,?,";
	sql += "?,?,?,?,?,?,?,?,?,?,";
	sql += "?,?,?,?,?,?,?,?)";

	String key[] = new String[generalB.length];
	Connection con = null;
	PreparedStatement stmt = null;
	//String pk_corp = generalB[0].getPrimaryKey()
	try {
		con = getConnection();
		stmt = prepareStatement(con, sql);

		for (int i = 0; i < generalB.length; i++) {
			// set PK fields:
			key[i] = getOID(pk_corp);
			stmt.setString(1, key[i]);
			// set non PK fields:

			stmt.setString(2, pk_head);
			if (generalB[i].getCinventoryid() == null) {
				stmt.setNull(3, Types.CHAR);
			} else {
				stmt.setString(3, generalB[i].getCinventoryid());
			}
			if (generalB[i].getVbatchcode() == null) {
				stmt.setNull(4, Types.CHAR);
			} else {
				stmt.setString(4, generalB[i].getVbatchcode());
			}
			if (generalB[i].getVfree1() == null) {
				stmt.setNull(5, Types.CHAR);
			} else {
				stmt.setString(5, generalB[i].getVfree1());
			}
			if (generalB[i].getVfree2() == null) {
				stmt.setNull(6, Types.CHAR);
			} else {
				stmt.setString(6, generalB[i].getVfree2());
			}
			if (generalB[i].getVfree3() == null) {
				stmt.setNull(7, Types.CHAR);
			} else {
				stmt.setString(7, generalB[i].getVfree3());
			}
			if (generalB[i].getVfree4() == null) {
				stmt.setNull(8, Types.CHAR);
			} else {
				stmt.setString(8, generalB[i].getVfree4());
			}
			if (generalB[i].getVfree5() == null) {
				stmt.setNull(9, Types.CHAR);
			} else {
				stmt.setString(9, generalB[i].getVfree5());
			}
			if (generalB[i].getDvalidate() == null) {
				stmt.setNull(10, Types.CHAR);
			} else {
				stmt.setString(10, generalB[i].getDvalidate().toString());
			}
			if (generalB[i].getDbizdate() == null) {
				stmt.setNull(11, Types.CHAR);
			} else {
				stmt.setString(11, generalB[i].getDbizdate().toString());
			}
			if (generalB[i].getDstandbydate() == null) {
				stmt.setNull(12, Types.CHAR);
			} else {
				stmt.setString(12, generalB[i].getDstandbydate().toString());
			}
			if (generalB[i].getVproductbatch() == null) {
				stmt.setNull(13, Types.CHAR);
			} else {
				stmt.setString(13, generalB[i].getVproductbatch());
			}
			if (generalB[i].getNshouldoutnum() == null) {
				stmt.setNull(14, Types.INTEGER);
			} else {
				stmt.setBigDecimal(14, generalB[i].getNshouldoutnum().toBigDecimal());
			}
			if (generalB[i].getNshouldoutassistnum() == null) {
				stmt.setNull(15, Types.INTEGER);
			} else {
				stmt.setBigDecimal(15, generalB[i].getNshouldoutassistnum().toBigDecimal());
			}
			if (generalB[i].getNoutnum() == null) {
				stmt.setNull(16, Types.INTEGER);
			} else {
				stmt.setBigDecimal(16, generalB[i].getNoutnum().toBigDecimal());
			}
			if (generalB[i].getNoutassistnum() == null) {
				stmt.setNull(17, Types.INTEGER);
			} else {
				stmt.setBigDecimal(17, generalB[i].getNoutassistnum().toBigDecimal());
			}
			if (generalB[i].getNshouldinnum() == null) {
				stmt.setNull(18, Types.INTEGER);
			} else {
				stmt.setBigDecimal(18, generalB[i].getNshouldinnum().toBigDecimal());
			}
			if (generalB[i].getCastunitid() == null) {
				stmt.setNull(19, Types.CHAR);
			} else {
				stmt.setString(19, generalB[i].getCastunitid());
			}
			if (generalB[i].getNneedinassistnum() == null) {
				stmt.setNull(20, Types.INTEGER);
			} else {
				stmt.setBigDecimal(20, generalB[i].getNneedinassistnum().toBigDecimal());
			}
			if (generalB[i].getNinnum() == null) {
				stmt.setNull(21, Types.INTEGER);
			} else {
				stmt.setBigDecimal(21, generalB[i].getNinnum().toBigDecimal());
			}
			if (generalB[i].getNinassistnum() == null) {
				stmt.setNull(22, Types.INTEGER);
			} else {
				stmt.setBigDecimal(22, generalB[i].getNinassistnum().toBigDecimal());
			}
			if (generalB[i].getNtranoutnum() == null) {
				stmt.setNull(23, Types.INTEGER);
			} else {
				stmt.setBigDecimal(23, generalB[i].getNtranoutnum().toBigDecimal());
			}
			if (generalB[i].getNprice() == null) {
				stmt.setNull(24, Types.INTEGER);
			} else {
				stmt.setBigDecimal(24, generalB[i].getNprice().toBigDecimal());
			}
			if (generalB[i].getNmny() == null) {
				stmt.setNull(25, Types.INTEGER);
			} else {
				stmt.setBigDecimal(25, generalB[i].getNmny().toBigDecimal());
			}
			if (generalB[i].getNplannedprice() == null) {
				stmt.setNull(26, Types.INTEGER);
			} else {
				stmt.setBigDecimal(26, generalB[i].getNplannedprice().toBigDecimal());
			}
			if (generalB[i].getNplannedmny() == null) {
				stmt.setNull(27, Types.INTEGER);
			} else {
				stmt.setBigDecimal(27, generalB[i].getNplannedmny().toBigDecimal());
			}
			if (generalB[i].getCsourcebillhid() == null) {
				stmt.setNull(28, Types.CHAR);
			} else {
				stmt.setString(28, generalB[i].getCsourcebillhid());
			}
			if (generalB[i].getCsourcebillbid() == null) {
				stmt.setNull(29, Types.CHAR);
			} else {
				stmt.setString(29, generalB[i].getCsourcebillbid());
			}
			if (generalB[i].getCsourcetype() == null) {
				stmt.setNull(30, Types.CHAR);
			} else {
				stmt.setString(30, generalB[i].getCsourcetype());
			}
			if (generalB[i].getVsourcebillcode() == null) {
				stmt.setNull(31, Types.CHAR);
			} else {
				stmt.setString(31, generalB[i].getVsourcebillcode());
			}
			if (generalB[i].getFchecked() == null) {
				stmt.setNull(32, Types.INTEGER);
			} else {
				stmt.setInt(32, generalB[i].getFchecked().intValue());
			}
			if (generalB[i].getCprojectid() == null) {
				stmt.setNull(33, Types.CHAR);
			} else {
				stmt.setString(33, generalB[i].getCprojectid());
			}
			if (generalB[i].getCcostobject() == null) {
				stmt.setNull(34, Types.CHAR);
			} else {
				stmt.setString(34, generalB[i].getCcostobject());
			}
			if (generalB[i].getCcorrespondbid() == null) {
				stmt.setNull(35, Types.CHAR);
			} else {
				stmt.setString(35, generalB[i].getCcorrespondbid());
			}
			if (generalB[i].getCcorrespondhid() == null) {
				stmt.setNull(36, Types.CHAR);
			} else {
				stmt.setString(36, generalB[i].getCcorrespondhid());
			}
			if (generalB[i].getCcorrespondtype() == null) {
				stmt.setNull(37, Types.CHAR);
			} else {
				stmt.setString(37, generalB[i].getCcorrespondtype());
			}
			if (generalB[i].getCcorrespondcode() == null) {
				stmt.setNull(38, Types.CHAR);
			} else {
				stmt.setString(38, generalB[i].getCcorrespondcode());
			}
			if (generalB[i].getFlargess() == null) {
				stmt.setNull(39, Types.CHAR);
			} else {
				stmt.setString(39, generalB[i].getFlargess().toString());
			}
			if (generalB[i].getVuserdef1() == null) {
				stmt.setNull(40, Types.CHAR);
			} else {
				stmt.setString(40, generalB[i].getVuserdef1());
			}
			if (generalB[i].getVuserdef2() == null) {
				stmt.setNull(41, Types.CHAR);
			} else {
				stmt.setString(41, generalB[i].getVuserdef2());
			}
			if (generalB[i].getVuserdef3() == null) {
				stmt.setNull(42, Types.CHAR);
			} else {
				stmt.setString(42, generalB[i].getVuserdef3());
			}
			if (generalB[i].getVuserdef4() == null) {
				stmt.setNull(43, Types.CHAR);
			} else {
				stmt.setString(43, generalB[i].getVuserdef4());
			}
			if (generalB[i].getVuserdef5() == null) {
				stmt.setNull(44, Types.CHAR);
			} else {
				stmt.setString(44, generalB[i].getVuserdef5());
			}
			if (generalB[i].getVuserdef6() == null) {
				stmt.setNull(45, Types.CHAR);
			} else {
				stmt.setString(45, generalB[i].getVuserdef6());
			}
			if (generalB[i].getBzgflag() == null) {
				stmt.setNull(46, Types.CHAR);
			} else {
				stmt.setString(46, generalB[i].getBzgflag().toString());
			}
			if (generalB[i].getIsok() == null) {
				stmt.setNull(47, Types.CHAR);
			} else {
				stmt.setString(47, generalB[i].getIsok().toString());
			}
			if (generalB[i].getCwp() == null) {
				stmt.setNull(48, Types.CHAR);
			} else {
				stmt.setString(48, generalB[i].getCwp());
			}
			if (generalB[i].getCfirsttype() == null) {
				stmt.setNull(49, Types.CHAR);
			} else {
				stmt.setString(49, generalB[i].getCfirsttype());
			}
			if (generalB[i].getCfirstbillhid() == null) {
				stmt.setNull(50, Types.CHAR);
			} else {
				stmt.setString(50, generalB[i].getCfirstbillhid());
			}
			if (generalB[i].getCfirstbillbid() == null) {
				stmt.setNull(51, Types.CHAR);
			} else {
				stmt.setString(51, generalB[i].getCfirstbillbid());
			}
			if (generalB[i].getCrowno() == null) {
				stmt.setNull(52, Types.CHAR);
			} else {
				stmt.setString(52, generalB[i].getCrowno());
			}
			if (generalB[i].getDzgdate() == null) {
				stmt.setNull(53, Types.CHAR);
			} else {
				stmt.setString(53, generalB[i].getDzgdate().toString());
			}
			if (generalB[i].getCorder_bb1id() == null) {
				stmt.setNull(54, Types.CHAR);
			} else {
				stmt.setString(54, generalB[i].getCorder_bb1id());
			}
			if (generalB[i].getPk_reqcorp() == null) {
				stmt.setNull(55, Types.CHAR);
			} else {
				stmt.setString(55, generalB[i].getPk_reqcorp());
			}
			if (generalB[i].getPk_invoicecorp() == null) {
				stmt.setNull(56, Types.CHAR);
			} else {
				stmt.setString(56, generalB[i].getPk_invoicecorp());
			}
			if (generalB[i].getPk_reqstoorg() == null) {
				stmt.setNull(57, Types.CHAR);
			} else {
				stmt.setString(57, generalB[i].getPk_reqstoorg());
			}
			if (generalB[i].getPk_creqwareid() == null) {
				stmt.setNull(58, Types.CHAR);
			} else {
				stmt.setString(58, generalB[i].getPk_creqwareid());
			}

			if (generalB[i].getVuserdef7() == null) {
				stmt.setNull(59, Types.CHAR);
			} else {
				stmt.setString(59, generalB[i].getVuserdef7());
			}
			if (generalB[i].getVuserdef8() == null) {
				stmt.setNull(60, Types.CHAR);
			} else {
				stmt.setString(60, generalB[i].getVuserdef8());
			}	
			if (generalB[i].getVuserdef9() == null) {
				stmt.setNull(61, Types.CHAR);
			} else {
				stmt.setString(61, generalB[i].getVuserdef9());
			}
			if (generalB[i].getVuserdef10() == null) {
				stmt.setNull(62, Types.CHAR);
			} else {
				stmt.setString(62, generalB[i].getVuserdef10());
			}
			
			if (generalB[i].getVuserdef11() == null) {
				stmt.setNull(63, Types.CHAR);
			} else {
				stmt.setString(63, generalB[i].getVuserdef11());
			}
			if (generalB[i].getVuserdef12() == null) {
				stmt.setNull(64, Types.CHAR);
			} else {
				stmt.setString(64, generalB[i].getVuserdef12());
			}
			if (generalB[i].getVuserdef13() == null) {
				stmt.setNull(65, Types.CHAR);
			} else {
				stmt.setString(65, generalB[i].getVuserdef13());
			}
			if (generalB[i].getVuserdef14() == null) {
				stmt.setNull(66, Types.CHAR);
			} else {
				stmt.setString(66, generalB[i].getVuserdef14());
			}
			if (generalB[i].getVuserdef15() == null) {
				stmt.setNull(67, Types.CHAR);
			} else {
				stmt.setString(67, generalB[i].getVuserdef15());
			}
			if (generalB[i].getVuserdef16() == null) {
				stmt.setNull(68, Types.CHAR);
			} else {
				stmt.setString(68, generalB[i].getVuserdef16());
			}
			if (generalB[i].getVuserdef17() == null) {
				stmt.setNull(69, Types.CHAR);
			} else {
				stmt.setString(69, generalB[i].getVuserdef17());
			}
			if (generalB[i].getVuserdef18() == null) {
				stmt.setNull(70, Types.CHAR);
			} else {
				stmt.setString(70, generalB[i].getVuserdef18());
			}
			if (generalB[i].getVuserdef19() == null) {
				stmt.setNull(71, Types.CHAR);
			} else {
				stmt.setString(71, generalB[i].getVuserdef19());
			}
			if (generalB[i].getVuserdef20() == null) {
				stmt.setNull(72, Types.CHAR);
			} else {
				stmt.setString(72, generalB[i].getVuserdef20());
			}

			if (generalB[i].getPk_defdoc1() == null) {
				stmt.setNull(73, Types.CHAR);
			} else {
				stmt.setString(73, generalB[i].getPk_defdoc1());
			}
			if (generalB[i].getPk_defdoc2() == null) {
				stmt.setNull(74, Types.CHAR);
			} else {
				stmt.setString(74, generalB[i].getPk_defdoc2());
			}
			if (generalB[i].getPk_defdoc3() == null) {
				stmt.setNull(75, Types.CHAR);
			} else {
				stmt.setString(75, generalB[i].getPk_defdoc3());
			}
			if (generalB[i].getPk_defdoc4() == null) {
				stmt.setNull(76, Types.CHAR);
			} else {
				stmt.setString(76, generalB[i].getPk_defdoc4());
			}
			if (generalB[i].getPk_defdoc5() == null) {
				stmt.setNull(77, Types.CHAR);
			} else {
				stmt.setString(77, generalB[i].getPk_defdoc5());
			}
			if (generalB[i].getPk_defdoc6() == null) {
				stmt.setNull(78, Types.CHAR);
			} else {
				stmt.setString(78, generalB[i].getPk_defdoc6());
			}
			if (generalB[i].getPk_defdoc7() == null) {
				stmt.setNull(79, Types.CHAR);
			} else {
				stmt.setString(79, generalB[i].getPk_defdoc7());
			}
			if (generalB[i].getPk_defdoc8() == null) {
				stmt.setNull(80, Types.CHAR);
			} else {
				stmt.setString(80, generalB[i].getPk_defdoc8());
			}
			if (generalB[i].getPk_defdoc9() == null) {
				stmt.setNull(81, Types.CHAR);
			} else {
				stmt.setString(81, generalB[i].getPk_defdoc9());
			}
			if (generalB[i].getPk_defdoc10() == null) {
				stmt.setNull(82, Types.CHAR);
			} else {
				stmt.setString(82, generalB[i].getPk_defdoc10());
			}
			if (generalB[i].getPk_defdoc11() == null) {
				stmt.setNull(83, Types.CHAR);
			} else {
				stmt.setString(83, generalB[i].getPk_defdoc11());
			}
			if (generalB[i].getPk_defdoc12() == null) {
				stmt.setNull(84, Types.CHAR);
			} else {
				stmt.setString(84, generalB[i].getPk_defdoc12());
			}
			if (generalB[i].getPk_defdoc13() == null) {
				stmt.setNull(85, Types.CHAR);
			} else {
				stmt.setString(85, generalB[i].getPk_defdoc13());
			}
			if (generalB[i].getPk_defdoc14() == null) {
				stmt.setNull(86, Types.CHAR);
			} else {
				stmt.setString(86, generalB[i].getPk_defdoc14());
			}
			if (generalB[i].getPk_defdoc15() == null) {
				stmt.setNull(87, Types.CHAR);
			} else {
				stmt.setString(87, generalB[i].getPk_defdoc15());
			}
			if (generalB[i].getPk_defdoc16() == null) {
				stmt.setNull(88, Types.CHAR);
			} else {
				stmt.setString(88, generalB[i].getPk_defdoc16());
			}
			if (generalB[i].getPk_defdoc17() == null) {
				stmt.setNull(89, Types.CHAR);
			} else {
				stmt.setString(89, generalB[i].getPk_defdoc17());
			}
			if (generalB[i].getPk_defdoc18() == null) {
				stmt.setNull(90, Types.CHAR);
			} else {
				stmt.setString(90, generalB[i].getPk_defdoc18());
			}
			if (generalB[i].getPk_defdoc19() == null) {
				stmt.setNull(91, Types.CHAR);
			} else {
				stmt.setString(91, generalB[i].getPk_defdoc19());
			}
			if (generalB[i].getPk_defdoc20() == null) {
				stmt.setNull(92, Types.CHAR);
			} else {
				stmt.setString(92, generalB[i].getPk_defdoc20());
			}
			if (generalB[i].getCprojectphaseid() == null) {
				stmt.setNull(93, Types.CHAR);
			} else {
				stmt.setString(93, generalB[i].getCprojectphaseid());
			}
			
			if (generalB[i].getCbaseid() == null) {
				stmt.setNull(94, Types.CHAR);
			} else {
				stmt.setString(94, generalB[i].getCbaseid());
			}
			if (generalB[i].getCvendorid() == null) {
				stmt.setNull(95, Types.CHAR);
			} else {
				stmt.setString(95, generalB[i].getCvendorid());
			}
			if (generalB[i].getPk_corp() == null) {
				stmt.setNull(96, Types.CHAR);
			} else {
				stmt.setString(96, generalB[i].getPk_corp());
			}
			
			//
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	} catch (SQLException e) {
		throw e;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "insertBody", new Object[] { generalB, pk_head });
	/*************************************************************/

	return key;
}

/**
 * 此处插入方法说明。
 * 功能描述:插入入库单头
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public String insertHead(GeneralHHeaderVO generalH) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "insertHead", new Object[] { generalH });
	/*************************************************************/

	String sql = "insert into ic_general_h(cgeneralhid, pk_corp, cbiztype, cbilltypecode, vbillcode, dbilldate, cwarehouseid, cdispatcherid, cdptid, cwhsmanagerid, coperatorid, cregister, dauditdate, cauditorid, daccountdate, cinventoryid, ccustomerid, vdiliveraddress, cdilivertypeid, cwastewarehouseid, cbizid, cproviderid, vnote, fbillflag, fspecialflag, vuserdef1, vuserdef2, vuserdef3, vuserdef4, vuserdef5, vuserdef6, pk_calbody, freplenishflag, pk_purcorp, ";
	sql += "vuserdef7,vuserdef8,vuserdef9,vuserdef10,vuserdef11,vuserdef12,vuserdef13,vuserdef14,vuserdef15,vuserdef16,";
	sql += "vuserdef17,vuserdef18,vuserdef19,vuserdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,";
	sql += "pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,";
	sql += "pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,tmaketime,tlastmoditime,taccounttime";	
	sql += ") values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ";
	sql += "?,?,?,?,?,?,?,?,?,?,";
	sql += "?,?,?,?,?,?,?,?,?,?,";
	sql += "?,?,?,?,?,?,?,?,?,?,";
	sql += "?,?,?,?,?,?,?)";

	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		// set PK fields:
		key = getOID(generalH.getPk_corp());
		stmt.setString(1, key);
		// set non PK fields:
		if (generalH.getPk_corp() == null) {
			stmt.setNull(2, Types.CHAR);
		} else {
			stmt.setString(2, generalH.getPk_corp());
		}
		if (generalH.getCbiztype() == null) {
			stmt.setNull(3, Types.CHAR);
		} else {
			stmt.setString(3, generalH.getCbiztype());
		}
		if (generalH.getCbilltypecode() == null) {
			stmt.setNull(4, Types.CHAR);
		} else {
			stmt.setString(4, generalH.getCbilltypecode());
		}
		if (generalH.getVbillcode() == null) {
			stmt.setNull(5, Types.CHAR);
		} else {
			stmt.setString(5, generalH.getVbillcode());
		}
		if (generalH.getDbilldate() == null) {
			stmt.setNull(6, Types.CHAR);
		} else {
			stmt.setString(6, generalH.getDbilldate().toString());
		}
		if (generalH.getCwarehouseid() == null) {
			stmt.setNull(7, Types.CHAR);
		} else {
			stmt.setString(7, generalH.getCwarehouseid());
		}
		if (generalH.getCdispatcherid() == null) {
			stmt.setNull(8, Types.CHAR);
		} else {
			stmt.setString(8, generalH.getCdispatcherid());
		}
		if (generalH.getCdptid() == null) {
			stmt.setNull(9, Types.CHAR);
		} else {
			stmt.setString(9, generalH.getCdptid());
		}
		if (generalH.getCwhsmanagerid() == null) {
			stmt.setNull(10, Types.CHAR);
		} else {
			stmt.setString(10, generalH.getCwhsmanagerid());
		}
		if (generalH.getCoperatorid() == null) {
			stmt.setNull(11, Types.CHAR);
		} else {
			stmt.setString(11, generalH.getCoperatorid());
		}
		if (generalH.getCregister() == null) {
			stmt.setNull(12, Types.CHAR);
		} else {
			stmt.setString(12, generalH.getCregister());
		}
		if (generalH.getDauditdate() == null) {
			stmt.setNull(13, Types.CHAR);
		} else {
			stmt.setString(13, generalH.getDauditdate().toString());
		}
		if (generalH.getCauditorid() == null) {
			stmt.setNull(14, Types.CHAR);
		} else {
			stmt.setString(14, generalH.getCauditorid());
		}
		if (generalH.getDaccountdate() == null) {
			stmt.setNull(15, Types.CHAR);
		} else {
			stmt.setString(15, generalH.getDaccountdate().toString());
		}
		if (generalH.getCinventoryid() == null) {
			stmt.setNull(16, Types.CHAR);
		} else {
			stmt.setString(16, generalH.getCinventoryid());
		}
		if (generalH.getCcustomerid() == null) {
			stmt.setNull(17, Types.CHAR);
		} else {
			stmt.setString(17, generalH.getCcustomerid());
		}
		if (generalH.getVdiliveraddress() == null) {
			stmt.setNull(18, Types.CHAR);
		} else {
			stmt.setString(18, generalH.getVdiliveraddress());
		}
		if (generalH.getCdilivertypeid() == null) {
			stmt.setNull(19, Types.CHAR);
		} else {
			stmt.setString(19, generalH.getCdilivertypeid());
		}
		if (generalH.getCwastewarehouseid() == null) {
			stmt.setNull(20, Types.CHAR);
		} else {
			stmt.setString(20, generalH.getCwastewarehouseid());
		}
		if (generalH.getCbizid() == null) {
			stmt.setNull(21, Types.CHAR);
		} else {
			stmt.setString(21, generalH.getCbizid());
		}
		if (generalH.getCproviderid() == null) {
			stmt.setNull(22, Types.CHAR);
		} else {
			stmt.setString(22, generalH.getCproviderid());
		}
		if (generalH.getVnote() == null) {
			stmt.setNull(23, Types.CHAR);
		} else {
			stmt.setString(23, generalH.getVnote());
		}
		if (generalH.getFbillflag() == null) {
			stmt.setNull(24, Types.INTEGER);
		} else {
			stmt.setInt(24, generalH.getFbillflag().intValue());
		}
		if (generalH.getFspecialflag() == null) {
			stmt.setNull(25, Types.INTEGER);
		} else {
			stmt.setInt(25, generalH.getFspecialflag().intValue());
		}
		if (generalH.getVuserdef1() == null) {
			stmt.setNull(26, Types.CHAR);
		} else {
			stmt.setString(26, generalH.getVuserdef1());
		}
		if (generalH.getVuserdef2() == null) {
			stmt.setNull(27, Types.CHAR);
		} else {
			stmt.setString(27, generalH.getVuserdef2());
		}
		if (generalH.getVuserdef3() == null) {
			stmt.setNull(28, Types.CHAR);
		} else {
			stmt.setString(28, generalH.getVuserdef3());
		}
		if (generalH.getVuserdef4() == null) {
			stmt.setNull(29, Types.CHAR);
		} else {
			stmt.setString(29, generalH.getVuserdef4());
		}
		if (generalH.getVuserdef5() == null) {
			stmt.setNull(30, Types.CHAR);
		} else {
			stmt.setString(30, generalH.getVuserdef5());
		}
		if (generalH.getVuserdef6() == null) {
			stmt.setNull(31, Types.CHAR);
		} else {
			stmt.setString(31, generalH.getVuserdef6());
		}
		if (generalH.getCstoreorganization() == null) {
			stmt.setNull(32, Types.CHAR);
		} else {
			stmt.setString(32, generalH.getCstoreorganization());
		}
		if (generalH.getFreplenishflag() == null || generalH.getFreplenishflag().intValue() == 0) {
			stmt.setString(33, "N");
		} else {
			stmt.setString(33, "Y");
		}
		if (generalH.getPk_purcorp() == null) {
			stmt.setNull(34, Types.CHAR);
		} else {
			stmt.setString(34, generalH.getPk_purcorp());
		}
		
		if (generalH.getVuserdef7() == null) {
			stmt.setNull(35, Types.CHAR);
		} else {
			stmt.setString(35, generalH.getVuserdef7());
		}
		if (generalH.getVuserdef8() == null) {
			stmt.setNull(36, Types.CHAR);
		} else {
			stmt.setString(36, generalH.getVuserdef8());
		}	
		if (generalH.getVuserdef9() == null) {
			stmt.setNull(37, Types.CHAR);
		} else {
			stmt.setString(37, generalH.getVuserdef9());
		}
		if (generalH.getVuserdef10() == null) {
			stmt.setNull(38, Types.CHAR);
		} else {
			stmt.setString(38, generalH.getVuserdef10());
		}
		
		if (generalH.getVuserdef11() == null) {
			stmt.setNull(39, Types.CHAR);
		} else {
			stmt.setString(39, generalH.getVuserdef11());
		}
		if (generalH.getVuserdef12() == null) {
			stmt.setNull(40, Types.CHAR);
		} else {
			stmt.setString(40, generalH.getVuserdef12());
		}
		if (generalH.getVuserdef13() == null) {
			stmt.setNull(41, Types.CHAR);
		} else {
			stmt.setString(41, generalH.getVuserdef13());
		}
		if (generalH.getVuserdef14() == null) {
			stmt.setNull(42, Types.CHAR);
		} else {
			stmt.setString(42, generalH.getVuserdef14());
		}
		if (generalH.getVuserdef15() == null) {
			stmt.setNull(43, Types.CHAR);
		} else {
			stmt.setString(43, generalH.getVuserdef15());
		}
		if (generalH.getVuserdef16() == null) {
			stmt.setNull(44, Types.CHAR);
		} else {
			stmt.setString(44, generalH.getVuserdef16());
		}
		if (generalH.getVuserdef17() == null) {
			stmt.setNull(45, Types.CHAR);
		} else {
			stmt.setString(45, generalH.getVuserdef17());
		}
		if (generalH.getVuserdef18() == null) {
			stmt.setNull(46, Types.CHAR);
		} else {
			stmt.setString(46, generalH.getVuserdef18());
		}
		if (generalH.getVuserdef19() == null) {
			stmt.setNull(47, Types.CHAR);
		} else {
			stmt.setString(47, generalH.getVuserdef19());
		}
		if (generalH.getVuserdef20() == null) {
			stmt.setNull(48, Types.CHAR);
		} else {
			stmt.setString(48, generalH.getVuserdef20());
		}

		if (generalH.getPk_defdoc1() == null) {
			stmt.setNull(49, Types.CHAR);
		} else {
			stmt.setString(49, generalH.getPk_defdoc1());
		}
		if (generalH.getPk_defdoc2() == null) {
			stmt.setNull(50, Types.CHAR);
		} else {
			stmt.setString(50, generalH.getPk_defdoc2());
		}
		if (generalH.getPk_defdoc3() == null) {
			stmt.setNull(51, Types.CHAR);
		} else {
			stmt.setString(51, generalH.getPk_defdoc3());
		}
		if (generalH.getPk_defdoc4() == null) {
			stmt.setNull(52, Types.CHAR);
		} else {
			stmt.setString(52, generalH.getPk_defdoc4());
		}
		if (generalH.getPk_defdoc5() == null) {
			stmt.setNull(53, Types.CHAR);
		} else {
			stmt.setString(53, generalH.getPk_defdoc5());
		}
		if (generalH.getPk_defdoc6() == null) {
			stmt.setNull(54, Types.CHAR);
		} else {
			stmt.setString(54, generalH.getPk_defdoc6());
		}
		if (generalH.getPk_defdoc7() == null) {
			stmt.setNull(55, Types.CHAR);
		} else {
			stmt.setString(55, generalH.getPk_defdoc7());
		}
		if (generalH.getPk_defdoc8() == null) {
			stmt.setNull(56, Types.CHAR);
		} else {
			stmt.setString(56, generalH.getPk_defdoc8());
		}
		if (generalH.getPk_defdoc9() == null) {
			stmt.setNull(57, Types.CHAR);
		} else {
			stmt.setString(57, generalH.getPk_defdoc9());
		}
		if (generalH.getPk_defdoc10() == null) {
			stmt.setNull(58, Types.CHAR);
		} else {
			stmt.setString(58, generalH.getPk_defdoc10());
		}
		if (generalH.getPk_defdoc11() == null) {
			stmt.setNull(59, Types.CHAR);
		} else {
			stmt.setString(59, generalH.getPk_defdoc11());
		}
		if (generalH.getPk_defdoc12() == null) {
			stmt.setNull(60, Types.CHAR);
		} else {
			stmt.setString(60, generalH.getPk_defdoc12());
		}
		if (generalH.getPk_defdoc13() == null) {
			stmt.setNull(61, Types.CHAR);
		} else {
			stmt.setString(61, generalH.getPk_defdoc13());
		}
		if (generalH.getPk_defdoc14() == null) {
			stmt.setNull(62, Types.CHAR);
		} else {
			stmt.setString(62, generalH.getPk_defdoc14());
		}
		if (generalH.getPk_defdoc15() == null) {
			stmt.setNull(63, Types.CHAR);
		} else {
			stmt.setString(63, generalH.getPk_defdoc15());
		}
		if (generalH.getPk_defdoc16() == null) {
			stmt.setNull(64, Types.CHAR);
		} else {
			stmt.setString(64, generalH.getPk_defdoc16());
		}
		if (generalH.getPk_defdoc17() == null) {
			stmt.setNull(65, Types.CHAR);
		} else {
			stmt.setString(65, generalH.getPk_defdoc17());
		}
		if (generalH.getPk_defdoc18() == null) {
			stmt.setNull(66, Types.CHAR);
		} else {
			stmt.setString(66, generalH.getPk_defdoc18());
		}
		if (generalH.getPk_defdoc19() == null) {
			stmt.setNull(67, Types.CHAR);
		} else {
			stmt.setString(67, generalH.getPk_defdoc19());
		}
		if (generalH.getPk_defdoc20() == null) {
			stmt.setNull(68, Types.CHAR);
		} else {
			stmt.setString(68, generalH.getPk_defdoc20());
		}

		if (generalH.getTmaketime() == null) {
			stmt.setNull(69, Types.CHAR);
		} else {
			stmt.setString(69, generalH.getTmaketime());
		}
		if (generalH.getTlastmoditime() == null) {
			stmt.setNull(70, Types.CHAR);
		} else {
			stmt.setString(70, generalH.getTlastmoditime());
		}
		if (generalH.getTaccounttime() == null) {
			stmt.setNull(71, Types.CHAR);
		} else {
			stmt.setString(71, generalH.getTaccounttime());
		}

		//
		stmt.executeUpdate();
	} catch (SQLException e) {
		throw e;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "insertHead", new Object[] { generalH });
	/*************************************************************/

	return key;
}

/**
 * 功能描述:反暂时，判断是否全部暂估/部分暂估
 * 输入参数:String[] 头ID[],String[],体ID[]
 * 返回值:[Y/全部]
 * 作者：熊海情
 * 创建:2002/06/25
 *
 * 修改:晁志平 FOR V30 效率优化
 */
public UFBoolean[] isAntiEstimateAll(String cgeneralhid[], String cgeneralbid[]) throws SQLException {

	//查询符合条件的｛表头ID＝表体ID数目｝
	HashMap mapBidCnt = new HashMap();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		String sql = "select cgeneralhid,count(cgeneralbid) as bidnum from ic_general_b where dr = 0 ";
		sql += "and cgeneralhid in ";
		//临时表集合
		String strIdSet =
			new nc.bs.scm.pub.TempTableDMO().insertTempTable(
				cgeneralhid,
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU11,
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdSet == null || strIdSet.trim().equals("()")){
			strIdSet = " ('ErrorPk') ";
		}
		sql += strIdSet + " ";
		sql += "group by cgeneralhid ";
		//
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		while (rs.next()) {
			mapBidCnt.put(rs.getString(1), (Integer) rs.getObject(2));
		}
	} catch (SQLException e) {
		throw e;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {

		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {

		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {

		}
	}
	//处理返回
	int iHidLen = cgeneralhid.length;

	//没有符合条件的记录，全部为部分暂估
	UFBoolean bRslt[] = new UFBoolean[iHidLen];
	if (mapBidCnt.size() == 0) {
		for (int i = 0; i < iHidLen; i++) {
			bRslt[i] = new UFBoolean(false);
		}
		return bRslt;
	}
	//哈希MAP{头ID=头ID重复次数}
	HashMap mapHidCnt = new HashMap();
	Integer iCntTmp = null;
	for (int i = 0; i < iHidLen; i++) {
		iCntTmp = (Integer) mapHidCnt.get(cgeneralhid[i]);
		if (iCntTmp == null) {
			iCntTmp = new Integer(1);
		} else {
			iCntTmp = new Integer(iCntTmp.intValue() + 1);
		}
		mapHidCnt.put(cgeneralhid[i], iCntTmp);
	}
	Integer iCntH = null;
	Integer iCntB = null;
	for (int i = 0; i < iHidLen; i++) {
		iCntB = (Integer) mapBidCnt.get(cgeneralhid[i]);
		iCntH = (Integer) mapHidCnt.get(cgeneralhid[i]);
		bRslt[i] = new UFBoolean(iCntB != null && iCntB.equals(iCntH));
	}
	return bRslt;
}

/**
 * 此处插入方法说明。
 * 功能描述:判断入库单的单据号是否重复
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public boolean isCodeDuplicate(String unitCode,String billCode,String key) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "isCodeDuplicate", new Object[]{unitCode,billCode,key});
	/*************************************************************/

	String sql ="";
	if(key!=null) sql = "select vbillcode from ic_general_h where pk_corp = ? and vbillcode = ? and cgeneralhid <> ? and dr = 0 ";
	else sql = "select vbillcode from ic_general_h where pk_corp = ? and vbillcode = ? and dr = 0 ";

	Connection con = null;
	PreparedStatement stmt = null;
	Vector v=new Vector();
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, unitCode);
		stmt.setString(2, billCode);
		if(key!=null) stmt.setString(3, key);

		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			String s=rs.getString(1);
			v.addElement(s);
		}

		if(rs != null){
			rs.close();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "isCodeDuplicate", new Object[]{unitCode,billCode,key});
	/*************************************************************/

	if(v.size()>0) return true;
	return false;
}

/**
 * 此处插入方法说明。
 * 功能描述:判断存货是否属于所输入的仓库的库存组织
 * 输入参数:属于，返回TRUE；否则，返回FALSE
 * 返回值:
 * 异常处理:
 */
public UFBoolean[] isInvBelongWarehouse(String cBaseID[], String cWarehouseID) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "isInvBelongWarehouse", new Object[] { cBaseID, cWarehouseID });
	/*************************************************************/

	String sql = "select pk_calbody, pk_invbasdoc";
	sql += " from bd_produce";
	sql += " where pk_calbody = (select pk_calbody from bd_stordoc where pk_stordoc = ?) and pk_invbasdoc in ";

	Vector vTemp = new Vector();
	vTemp.addElement(cBaseID[0]);
	for (int i = 1; i < cBaseID.length; i++) {
		if (!vTemp.contains(cBaseID[i]))
			vTemp.addElement(cBaseID[i]);
	}
	String sTemp[] = new String[vTemp.size()];
	vTemp.copyInto(sTemp);
	/*
	sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
	for(int i = 0; i < sTemp.length - 1; i++) sql += " pk_invbasdoc in " + sTemp[i] + " or ";
	sql += " pk_invbasdoc in " + sTemp[sTemp.length - 1] + ")";
	*/
	String strSetId = null;
	Connection con = null;
	PreparedStatement stmt = null;
	Hashtable t = new Hashtable();
	ResultSet rs = null;
	try {
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU23, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;

		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, cWarehouseID);

		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			String s1 = rs.getString(1);
			String s2 = rs.getString(2);
			if (s1 != null && s1.trim().length() > 0 && s2 != null && s2.trim().length() > 0) {
				t.put(s2, s1);
			}
		}
		if (rs != null) {
			rs.close();
		}
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "isInvBelongWarehouse", new Object[] { cBaseID, cWarehouseID });
	/*************************************************************/

	UFBoolean b[] = new UFBoolean[cBaseID.length];
	for (int i = 0; i < b.length; i++) {
		b[i] = new UFBoolean(false);
		String s1 = cBaseID[i];
		if (s1 != null) {
			Object o = t.get(s1);
			if (o != null)
				b[i] = new UFBoolean(true);
		}
	}

	return b;
}

/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
 *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
 *			sql语句。
 * 创建日期：(2001-7-11)
 * @return nc.vo.ps.estimate.GeneralBb3VO[]
 * @param unitCode int
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList queryBb3(EstimateVO[] vOs) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryBb3", new Object[] { vOs });
	/*************************************************************/

	String sql =
		"select cgeneralbid, cgeneralhid, naccountmny, naccountnum2, caccountunitid, naccountnum1, nsignnum, npprice, npmoney from ic_general_bb3 ";
	sql += "where dr = 0 and cgeneralbid in ";

	Vector vTemp = new Vector();
	for (int i = 0; i < vOs.length; i++)
		vTemp.addElement(vOs[i].getCgeneralbid());
	String sTemp[] = new String[vTemp.size()];
	vTemp.copyInto(sTemp);
	//临时表
	try {
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU24, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	/*
	sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
	for(int i = 0; i < sTemp.length - 1; i++) sql += " cgeneralbid in " + sTemp[i] + " or ";
	sql += " cgeneralbid in " + sTemp[sTemp.length - 1] + ")";
	*/
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	Hashtable t = new Hashtable();
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			GeneralBb3VO generalBb3 = new GeneralBb3VO();
			// cgeneralbid :
			String cgeneralbid = rs.getString(1);
			generalBb3.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
			// cgeneralhid :
			String cgeneralhid = rs.getString(2);
			generalBb3.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
			// naccountmny :
			Object naccountmny = rs.getObject(3);
			generalBb3.setNaccountmny(naccountmny == null ? null : new UFDouble(naccountmny.toString()));
			// naccountnum2 :
			Object naccountnum2 = rs.getObject(4);
			generalBb3.setNaccountnum2(naccountnum2 == null ? null : new UFDouble(naccountnum2.toString()));
			// caccountunitid :
			String caccountunitid = rs.getString(5);
			generalBb3.setCaccountunitid(caccountunitid == null ? null : caccountunitid.trim());
			// naccountnum1 :
			Object naccountnum1 = rs.getObject(6);
			generalBb3.setNaccountnum1(naccountnum1 == null ? null : new UFDouble(naccountnum1.toString()));
			// nsignnum :
			Object nsignnum = rs.getObject(7);
			generalBb3.setNsignnum(nsignnum == null ? null : new UFDouble(nsignnum.toString()));
			// npprice :
			Object npprice = rs.getObject(8);
			generalBb3.setNpprice(npprice == null ? null : new UFDouble(npprice.toString()));
			// npmoney :
			Object npmoney = rs.getObject(9);
			generalBb3.setNpmoney(npmoney == null ? null : new UFDouble(npmoney.toString()));

			if (t.get(cgeneralbid) == null)
				t.put(cgeneralbid, generalBb3);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryBb3", new Object[] { vOs });
	/*************************************************************/

	ArrayList list = new ArrayList();
	for (int i = 0; i < vOs.length; i++) {
		GeneralBb3VO bodyVO = null;
		Object oTemp = t.get(vOs[i].getCgeneralbid());
		if (oTemp != null)
			bodyVO = (GeneralBb3VO) oTemp;
		list.add(new GeneralBb3VO[] { bodyVO });
	}

	return list;
}

public ArrayList queryBb3(String cgeneralbid[]) throws SQLException {
	String sql =
		"select cgeneralbid, cgeneralhid, naccountmny, naccountnum2, caccountunitid, naccountnum1, nsignnum, npprice, npmoney from ic_general_bb3 ";
	sql += "where dr = 0 and cgeneralbid in ";

	//临时表
	try {
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(cgeneralbid, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU24, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}

	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	Hashtable t = new Hashtable();
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			GeneralBb3VO generalBb3 = new GeneralBb3VO();
			// bid :
			String bid = rs.getString(1);
			generalBb3.setCgeneralbid(bid == null ? null : bid.trim());
			// cgeneralhid :
			String cgeneralhid = rs.getString(2);
			generalBb3.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
			// naccountmny :
			Object naccountmny = rs.getObject(3);
			generalBb3.setNaccountmny(naccountmny == null ? null : new UFDouble(naccountmny.toString()));
			// naccountnum2 :
			Object naccountnum2 = rs.getObject(4);
			generalBb3.setNaccountnum2(naccountnum2 == null ? null : new UFDouble(naccountnum2.toString()));
			// caccountunitid :
			String caccountunitid = rs.getString(5);
			generalBb3.setCaccountunitid(caccountunitid == null ? null : caccountunitid.trim());
			// naccountnum1 :
			Object naccountnum1 = rs.getObject(6);
			generalBb3.setNaccountnum1(naccountnum1 == null ? null : new UFDouble(naccountnum1.toString()));
			// nsignnum :
			Object nsignnum = rs.getObject(7);
			generalBb3.setNsignnum(nsignnum == null ? null : new UFDouble(nsignnum.toString()));
			// npprice :
			Object npprice = rs.getObject(8);
			generalBb3.setNpprice(npprice == null ? null : new UFDouble(npprice.toString()));
			// npmoney :
			Object npmoney = rs.getObject(9);
			generalBb3.setNpmoney(npmoney == null ? null : new UFDouble(npmoney.toString()));

			if (t.get(bid) == null) t.put(bid, generalBb3);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	ArrayList list = new ArrayList();
	for (int i = 0; i < cgeneralbid.length; i++) {
		GeneralBb3VO bodyVO = null;
		Object oTemp = t.get(cgeneralbid[i]);
		if (oTemp != null)
			bodyVO = (GeneralBb3VO) oTemp;
		list.add(new GeneralBb3VO[] { bodyVO });
	}

	return list;
}

/**
 * 此处插入方法说明。
 * 功能描述:查询入库单表体
 * 输入参数:[入库单VO]
 * 返回值:[表体状态]
 * 异常处理:无
 */
public ArrayList queryBodyBillStatus(saleEstimateVO VOs[]) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryBodyBillStatus", new Object[]{VOs});
	/*************************************************************/

	String sql = "select bzgflag, isok, naccountnum1, A.dr, cregister from ic_general_b A,ic_general_bb3 B,ic_general_h C ";
	sql += "where A.cgeneralbid = ? and A.cgeneralbid = B.cgeneralbid and A.cgeneralhid = C.cgeneralhid and B.cgeneralhid = C.cgeneralhid ";

	ArrayList list = new ArrayList();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		for(int i = 0; i < VOs.length; i++){
			stmt.setString(1, VOs[i].getCgeneralbid());

			rs = stmt.executeQuery();
			//
			ArrayList list1 = new ArrayList();
			if (rs.next()) {
				String bzgflag = rs.getString(1);
				String isok = rs.getString(2);
				BigDecimal naccountnum1 = null;
				Object oTemp = rs.getObject(3);
				if(oTemp != null && oTemp.toString().trim().length() > 0) naccountnum1 = new BigDecimal(oTemp.toString());
				if(naccountnum1==null) naccountnum1=new BigDecimal(0.0);
				Integer dr = (Integer)rs.getObject(4);
				Object cregister = rs.getObject(5);

				list1.add(new UFBoolean(bzgflag.trim()));
				list1.add(new UFBoolean(isok.trim()));
				list1.add(new UFDouble(naccountnum1));
				list1.add(dr);
				list1.add(cregister);
			}
			if(rs != null) rs.close();

			list.add(list1);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryBodyBillStatus", new Object[]{VOs});
	/*************************************************************/

	return list;
}

/**
 * 此处插入方法说明。
 * 功能描述:根据采购入库单(暂估)的来源为订单，查询订单的币种、汇率（折本、折辅）、扣税类别、税率
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2002/05/27
 * @return java.util.ArrayList
 * @param VOs nc.vo.ic.pub.bill.GeneralBillVO[]
 */
public ArrayList queryDataForARAP(GeneralBillVO[] VOs) throws SQLException{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryDataForARAP", new Object[]{VOs});
	/*************************************************************/

	String sql = " select ccurrencytypeid, nexchangeotobrate, nexchangeotoarate, idiscounttaxtype, ntaxrate from po_order_b";
	sql += " where corder_bid = ?";

	ArrayList list = new ArrayList();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		for(int i = 0; i < VOs.length; i++){
			GeneralBillItemVO bodyVO[] = (GeneralBillItemVO[]) VOs[i].getChildrenVO();
			stmt.setString(1, bodyVO[0].getCsourcebillbid());

			rs = stmt.executeQuery();
			//
			Object s[] = new Object[5];
			if (rs.next()) {
				s[0] = rs.getString(1);

				Object d = rs.getObject(2);
				if(d != null) s[1] = new UFDouble(d.toString());

				d = rs.getObject(3);
				if(d != null) s[2] = new UFDouble(d.toString());

				int j = rs.getInt(4);
				s[3] = new Integer(j);

				d = rs.getObject(5);
				if(d != null) s[4] = new UFDouble(d.toString());

			}else{
				//来源不能获得订单信息,则从上层来源获得
				stmt.setString(1, bodyVO[0].getCfirstbillbid());
				rs = stmt.executeQuery();

				if (rs.next()) {
					s[0] = rs.getString(1);

					Object d = rs.getObject(2);
					if(d != null) s[1] = new UFDouble(d.toString());

					d = rs.getObject(3);
					if(d != null) s[2] = new UFDouble(d.toString());

					int j = rs.getInt(4);
					s[3] = new Integer(j);

					d = rs.getObject(5);
					if(d != null) s[4] = new UFDouble(d.toString());
				}
			}
			if(rs != null) rs.close();

			list.add(s);
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryDataForARAP", new Object[]{VOs});
	/*************************************************************/

	return list;
}

/**
 * 功能：查询入库单(暂估、反暂共用)
 * 输入：公司主键、查询条件串、暂估标志
 * 返回：暂估VO[]
 * 创建：2001-5-30
 * 作者：熊海情
 * 修改：晁志平 FOR V30 效率优化
 */
public EstimateVO[] queryEstimate(String unitCode, String sCondition, String sZG) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryEstimate", new Object[] { unitCode, sCondition, sZG });
	/*************************************************************/
	String sql =
		"select A.vuserdef1,A.vuserdef2,A.vuserdef3,A.vuserdef4,A.vuserdef5,A.vuserdef6,A.vuserdef7,A.vuserdef8,A.vuserdef9,A.vuserdef10,";
	sql += "A.cdispatcherid,A.cbizid,A.vnote,A.cwhsmanagerid,A.cdptid,A.cbilltypecode,";
	sql
		+= "B.cprojectid,B.cprojectphaseid,B.cfirsttype,B.cfirstbillbid,B.cfirstbillhid,B.ninassistnum,B.hsl,B.nplannedmny,B.castunitid,B.dbizdate,";

	sql
		+= "vbillcode, dbilldate, cproviderid, A.cgeneralhid, B.cgeneralbid, B.cinventoryid, B.vuserdef1, B.vuserdef2, B.vuserdef3, B.vuserdef4, B.vuserdef5, B.vuserdef6, B.vfree1, B.vfree2, B.vfree3, B.vfree4, B.vfree5, ninnum,";
	sql
		+= "naccountnum1, naccountmny, cwarehouseid, A.pk_corp, nmaterialmoney, cgeneralbb3, A.ts, B.ts, C.ts, cbiztype, vbatchcode,csourcebillhid, csourcebillbid, crowno, A.pk_calbody,";
	if (sZG.toUpperCase().equals("Y")) {
		sql += "npprice, npmoney, dzgdate, ";
	} else {
		sql += "nprice, nmny, dzgdate, ";
	}
	
	sql += "A.vuserdef11,A.vuserdef12,A.vuserdef13,A.vuserdef14,A.vuserdef15,A.vuserdef16,A.vuserdef17,A.vuserdef18,A.vuserdef19,A.vuserdef20, ";
	sql += "A.pk_defdoc1,A.pk_defdoc2,A.pk_defdoc3,A.pk_defdoc4,A.pk_defdoc5,A.pk_defdoc6,A.pk_defdoc7,A.pk_defdoc8,A.pk_defdoc9,A.pk_defdoc10, ";
	sql += "A.pk_defdoc11,A.pk_defdoc12,A.pk_defdoc13,A.pk_defdoc14,A.pk_defdoc15,A.pk_defdoc16,A.pk_defdoc17,A.pk_defdoc18,A.pk_defdoc19,A.pk_defdoc20, ";
	sql += "B.vuserdef7,B.vuserdef8,B.vuserdef9,B.vuserdef10,B.vuserdef11,B.vuserdef12,B.vuserdef13,B.vuserdef14,B.vuserdef15,B.vuserdef16,B.vuserdef17,B.vuserdef18,B.vuserdef19,B.vuserdef20, ";
	sql += "B.pk_defdoc1,B.pk_defdoc2,B.pk_defdoc3,B.pk_defdoc4,B.pk_defdoc5,B.pk_defdoc6,B.pk_defdoc7,B.pk_defdoc8,B.pk_defdoc9,B.pk_defdoc10, ";
	sql += "B.pk_defdoc11,B.pk_defdoc12,B.pk_defdoc13,B.pk_defdoc14,B.pk_defdoc15,B.pk_defdoc16,B.pk_defdoc17,B.pk_defdoc18,B.pk_defdoc19,B.pk_defdoc20,B.cvendorid, ";
	sql += "bzgyfflag,nzgyfprice,nzgyfmoney,pk_invoicecorp,pk_purcorp,vfirstbillcode,iscalculatedinvcost ";

	sql += "from ic_general_h A,ic_general_b B,ic_general_bb3 C, bd_stordoc S, bd_busitype BT ";
	sql
		+= "where A.cbiztype = BT.pk_busitype and A.cwarehouseid = S.pk_stordoc and cbilltypecode = '45' and A.dr = 0 and B.dr = 0 and A.cgeneralhid=B.cgeneralhid and A.cgeneralhid=C.cgeneralhid and B.cgeneralbid=C.cgeneralbid and (A.fbillflag = 3 or A.fbillflag = 4) ";
	sql += "and upper(bzgflag) = '" + sZG + "' ";
	if (unitCode != null) {
		sql += "and A.pk_corp = " + "'" + unitCode + "' ";
	}
	sql += sCondition + " ";

	//已结算的入库单不能暂估
	if (sZG.toUpperCase().equals("N"))
		sql += "and naccountnum1 = 0.0 and abs(ninnum) > 0.0 ";

	//已结算的暂估入库单不能取消暂估
	if (sZG.toUpperCase().equals("Y"))
		sql += "and naccountnum1 = 0.0 ";

	//按入库单号 + 行号排序列
	sql += "order by vbillcode, crowno ";

	EstimateVO[] estimates = null;
	Vector v = new Vector();
	Vector vMangID = new Vector();
	Vector vBaseID = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		Vector vv = new Vector();
		ResultSet rs = stmt.executeQuery();
		//
		String strTmp = null;
		Object oTmp = null;
		int iIdx = 0;
		EstimateVO estimate = null;
		while (rs.next()) {
			iIdx = 1;
			estimate = new EstimateVO();
			// A.vuserdef1-10
			estimate.setVuserdefh1(rs.getString(iIdx++));
			estimate.setVuserdefh2(rs.getString(iIdx++));
			estimate.setVuserdefh3(rs.getString(iIdx++));
			estimate.setVuserdefh4(rs.getString(iIdx++));
			estimate.setVuserdefh5(rs.getString(iIdx++));
			estimate.setVuserdefh6(rs.getString(iIdx++));
			estimate.setVuserdefh7(rs.getString(iIdx++));
			estimate.setVuserdefh8(rs.getString(iIdx++));
			estimate.setVuserdefh9(rs.getString(iIdx++));
			estimate.setVuserdefh10(rs.getString(iIdx++));
			// cdispathcerid
			estimate.setCdispatcherid(rs.getString(iIdx++));
			// coperatorid
			estimate.setCoperatorid(rs.getString(iIdx++));
			// vnote
			estimate.setVnote(rs.getString(iIdx++));
			// cwhsmanagerid
			estimate.setCwhsmanagerid(rs.getString(iIdx++));
			// cdptid
			estimate.setCdptid(rs.getString(iIdx++));
			// cbilltypecode
			estimate.setCbilltypecode(rs.getString(iIdx++));
			//B.cprojectid,
			estimate.setCprojectid(rs.getString(iIdx++));
			//B.cprojectphaseid,
			estimate.setCprojectphaseid(rs.getString(iIdx++));
			//B.cfirsttype,
			estimate.setCfirsttype(rs.getString(iIdx++));
			//B.cfirstbillbid,
			estimate.setCfirstbillbid(rs.getString(iIdx++));
			//B.cfirstbillhid,
			estimate.setCfirstbillhid(rs.getString(iIdx++));
			//B.ninassistnum,
			oTmp = rs.getObject(iIdx++);
			estimate.setNinassistnum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			//B.hsl,
			oTmp = rs.getObject(iIdx++);
			estimate.setHsl(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			//B.nplannedmny,
			oTmp = rs.getObject(iIdx++);
			estimate.setNplannedmny(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			//B.castunitid,
			estimate.setCastunitid(rs.getString(iIdx++));
			//B.dbizdate,
			strTmp = rs.getString(iIdx++);
			estimate.setDbizdate(strTmp == null ? null : new UFDate(strTmp.trim(), false));
			// vbillcode :
			strTmp = rs.getString(iIdx++);
			estimate.setVbillcode(strTmp == null ? null : strTmp.trim());
			// dbilldate :
			strTmp = rs.getString(iIdx++);
			estimate.setDbilldate(strTmp == null ? null : new UFDate(strTmp.trim(), false));
			// cproviderid :
			strTmp = rs.getString(iIdx++);
			estimate.setCprovidermangid(strTmp == null ? null : strTmp.trim());
			// cgeneralhid :
			strTmp = rs.getString(iIdx++);
			estimate.setCgeneralhid(strTmp == null ? null : strTmp.trim());
			// cgeneralbid :
			strTmp = rs.getString(iIdx++);
			estimate.setCgeneralbid(strTmp == null ? null : strTmp.trim());
			// cmangid :
			strTmp = rs.getString(iIdx++);
			estimate.setCmangid(strTmp == null ? null : strTmp.trim());
			// vuserdef1 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef1(strTmp == null ? null : strTmp.trim());
			// vuserdef2 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef2(strTmp == null ? null : strTmp.trim());
			// vuserdef3 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef3(strTmp == null ? null : strTmp.trim());
			// vuserdef4 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef4(strTmp == null ? null : strTmp.trim());
			// vuserdef5 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef5(strTmp == null ? null : strTmp.trim());
			// vuserdef6 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef6(strTmp == null ? null : strTmp.trim());
			// vfree1 :
			strTmp = rs.getString(iIdx++);
			estimate.setVfree1(strTmp == null ? null : strTmp.trim());
			// vfree2 :
			strTmp = rs.getString(iIdx++);
			estimate.setVfree2(strTmp == null ? null : strTmp.trim());
			// vfree3 :
			strTmp = rs.getString(iIdx++);
			estimate.setVfree3(strTmp == null ? null : strTmp.trim());
			// vfree4 :
			strTmp = rs.getString(iIdx++);
			estimate.setVfree4(strTmp == null ? null : strTmp.trim());
			// vfree5 :
			strTmp = rs.getString(iIdx++);
			estimate.setVfree5(strTmp == null ? null : strTmp.trim());
			// ninnum :
			oTmp = rs.getObject(iIdx++);
			estimate.setNinnum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nsettlenum :
			oTmp = rs.getObject(iIdx++);
			estimate.setNsettlenum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nsettlemny :
			oTmp = rs.getObject(iIdx++);
			estimate.setNsettlemny(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// cwarehouseid :
			strTmp = rs.getString(iIdx++);
			estimate.setCwarehouseid(strTmp == null ? null : strTmp.trim());
			// cunitid :
			strTmp = rs.getString(iIdx++);
			estimate.setPk_corp(strTmp == null ? null : strTmp.trim());
			// nmaterialmoney :
			oTmp = rs.getObject(iIdx++);
			estimate.setNmaterialmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// cgeneralbb3 :
			strTmp = rs.getString(iIdx++);
			estimate.setCgeneralbb3(strTmp == null ? null : strTmp.trim());
			// ts1 :
			strTmp = rs.getString(iIdx++);
			estimate.setTs1(strTmp == null ? null : strTmp.trim());
			// ts2 :
			strTmp = rs.getString(iIdx++);
			estimate.setTs2(strTmp == null ? null : strTmp.trim());
			// ts3 :
			strTmp = rs.getString(iIdx++);
			estimate.setTs3(strTmp == null ? null : strTmp.trim());
			// cbiztype :
			strTmp = rs.getString(iIdx++);
			estimate.setCbiztype(strTmp == null ? null : strTmp.trim());
			// vbatchcode :
			strTmp = rs.getString(iIdx++);
			estimate.setVbatchcode(strTmp == null ? null : strTmp.trim());
			// csourcebillhid :
			strTmp = rs.getString(iIdx++);
			estimate.setCsourcebillhid(strTmp == null ? null : strTmp.trim());
			// csourcebillbid :
			strTmp = rs.getString(iIdx++);
			estimate.setCsourcebillbid(strTmp == null ? null : strTmp.trim());
			// crowno :
			strTmp = rs.getString(iIdx++);
			estimate.setAttributeValue("crowno", strTmp);
			// pk_calbody :
			strTmp = rs.getString(iIdx++);
			estimate.setCcalbodyid(strTmp == null ? null : strTmp.trim());
			// nprice :
			oTmp = rs.getObject(iIdx++);
			estimate.setNprice(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nmoney :
			oTmp = rs.getObject(iIdx++);
			estimate.setNmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// dzgdate :
			strTmp = rs.getString(iIdx++);
			estimate.setDzgdate(strTmp == null ? null : new UFDate(strTmp.trim(), false));

			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh20(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch1(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch2(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch3(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch4(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch5(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch6(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch7(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch8(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch9(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch10(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch20(strTmp == null ? "" : strTmp.trim());
			
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef7(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef8(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef9(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef10(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef20(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb1(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb2(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb3(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb4(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb5(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb6(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb7(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb8(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb9(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb10(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb20(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setCvendorid(strTmp == null ? "" : strTmp.trim());			
			strTmp = rs.getString(iIdx++);
			estimate.setBzgyf(strTmp == null ? new UFBoolean(false) : new UFBoolean(strTmp.trim()));			
			// nzgyfprice :
			oTmp = rs.getObject(iIdx++);
			estimate.setNtaxprice(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nzgyfmoney :
			oTmp = rs.getObject(iIdx++);
			estimate.setNtotalmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// cunitid :
			strTmp = rs.getString(iIdx++);
			estimate.setPk_invoicecorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_purcorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVfirstbillcode(strTmp == null ? null : strTmp.trim());			
      strTmp = rs.getString(iIdx++);
      estimate.setBcalculatecost(strTmp == null ? new UFBoolean(false) : new UFBoolean(strTmp.trim()));      
			
			vv.addElement(estimate);
		}
		if (rs != null)
			rs.close();
		if (stmt != null)
			stmt.close();

		if (vv.size() > 0) {
			String sqlsql =
				"select pk_invmandoc, A.pk_invbasdoc from bd_invmandoc A, bd_invbasdoc B where A.dr = 0 and B.dr = 0 and A.pk_corp = '"
					+ unitCode
					+ "' ";
			sqlsql += "and A.pk_invbasdoc = B.pk_invbasdoc and upper(laborflag) = 'N' and upper(discountflag) = 'N' ";
			//sqlsql += "and upper(sellproxyflag) = 'N' and ("; /**CZP DELETED FOR XY 2004-04-27*/
			sqlsql += "and pk_invmandoc in ";
			Vector vTemp = new Vector();
			vTemp.addElement(((saleEstimateVO) vv.elementAt(0)).getPk_invmandoc());
			for (int i = 1; i < vv.size(); i++) {
				if (!vTemp.contains(((saleEstimateVO) vv.elementAt(i)).getPk_invmandoc()))
					vTemp.addElement(((saleEstimateVO) vv.elementAt(i)).getPk_invmandoc());
			}
			String sTemp[] = new String[vTemp.size()];
			vTemp.copyInto(sTemp);
			//临时表
			try {
				String strSetId = null;
				nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
				strSetId =
					dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU25, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
				if (strSetId == null || strSetId.trim().equals("()")) {
					strSetId = " ('ErrorPk') ";
				}
				sqlsql += strSetId;
			} catch (Exception e) {
				throw new SQLException(e.getMessage());
			}
			/*
					sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
					for (int i = 0; i < sTemp.length - 1; i++)
						sqlsql += " pk_invmandoc in " + sTemp[i] + " or ";
					sqlsql += " pk_invmandoc in " + sTemp[sTemp.length - 1] + ")";
			*/
			stmt = con.prepareStatement(sqlsql);
			rs = stmt.executeQuery();
			while (rs.next()) {
				vMangID.addElement(rs.getString(1));
				vBaseID.addElement(rs.getString(2));
			}
			if (rs != null)
				rs.close();
			if (stmt != null)
				stmt.close();

			for (int i = 0; i < vv.size(); i++) {
				saleEstimateVO tempVO = (saleEstimateVO) vv.elementAt(i);
				if (vMangID.contains(tempVO.getPk_invmandoc())) {
					int j = vMangID.indexOf(tempVO.getPk_invmandoc());
					if (j >= 0)
						tempVO.setCbaseid((String) vBaseID.elementAt(j));
					v.addElement(tempVO);
				}
			}
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	if (v.size() > 0) {
		estimates = new EstimateVO[v.size()];
		for (int i = 0; i < v.size(); i++)
			estimates[i] = new EstimateVO();
		v.copyInto(estimates);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryEstimate", new Object[] { unitCode, sCondition, sZG });
	/*************************************************************/

	return estimates;
}

/**
 * 此处插入方法说明。
 * 功能描述:查询期初暂估入库单状态
 * 输入参数:[入库单VO]
 * 返回值:[表头状态]
 * 异常处理:无
 */
public ArrayList queryInitialBillStatus(GeneralHVO VOs[]) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryInitialBillStatus", new Object[]{VOs});
	/*************************************************************/

	String sql = "select isok, naccountnum1, A.dr from ic_general_h A,ic_general_b B,ic_general_bb3 C";
	sql += " where A.cgeneralhid = ? and A.cgeneralhid = B.cgeneralhid and A.cgeneralhid = C.cgeneralhid";
	
	String sql1 = "select cinvoice_bid from po_invoice_b where dr = 0 and cupsourcebillid = ?";

	ArrayList list = new ArrayList();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;

	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		for(int i = 0; i < VOs.length; i++){
			stmt.setString(1, VOs[i].getHeadVO().getCgeneralhid());

			UFBoolean bSettled=new UFBoolean(false);
			UFBoolean bDeleted=new UFBoolean(false);

			rs = stmt.executeQuery();
			//
			ArrayList list1 = new ArrayList();
			while (rs.next()) {
				String isok = rs.getString(1);
				BigDecimal naccountnum1 = null;
				Object oTemp = rs.getObject(2);
				if(oTemp != null && oTemp.toString().trim().length() > 0) naccountnum1 = new BigDecimal(oTemp.toString());
				if(naccountnum1==null) naccountnum1=new BigDecimal(0.0);
				Integer dr = (Integer)rs.getObject(3);

				if(!bSettled.booleanValue()){
					UFBoolean b=new UFBoolean(isok.trim());
					if(b.booleanValue() || naccountnum1.doubleValue()!=0.0) bSettled=new UFBoolean(true);
				}

				if(!bDeleted.booleanValue()){
					if(dr.intValue()==1) bDeleted=new UFBoolean(true);
				}
			}
			if(rs != null) rs.close();

			list1.add(bSettled);
			list1.add(bDeleted);

			list.add(list1);
		}
		
		if(stmt != null) stmt.close();
		
		stmt = con.prepareStatement(sql1);

		for(int i = 0; i < VOs.length; i++){
			stmt.setString(1, VOs[i].getHeadVO().getCgeneralhid());

			UFBoolean bInvoice=new UFBoolean(false);

			rs = stmt.executeQuery();
			//
			ArrayList list1 = (ArrayList)list.get(i);
			while (rs.next()) {
				String oTemp = rs.getString(1);
				
				if(oTemp != null && oTemp.toString().trim().length() > 0){
					bInvoice = new UFBoolean(true);
				}
			}
			if(rs != null) rs.close();

			list1.add(bInvoice);
		}		
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryInitialBillStatus", new Object[]{VOs});
	/*************************************************************/

	return list;
}

/**
 * 功能:查询期初暂估入库单表体
 * 输入:String,拼接好的查询条件串
 * 返回:GeneralHItemVO[]
 * 异常:SQLException
 * 创建：2003/02/20
 * 作者：熊海情
 * 修改：2004-06-30 晁志平 出于效率考虑，此方法仅作为对单张表查询；多表查询将采用queryInitialBodys(String[],String[])!
 */
public GeneralHItemVO[] queryInitialBody(String sCondition) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryInitialBody", new Object[]{sCondition});
	/*************************************************************/

	String sql ="select cgeneralbid, A.cgeneralhid, A.cinventoryid, vbatchcode, vfree1, vfree2, vfree3, vfree4, vfree5, dvalidate, dbizdate, dstandbydate, vproductbatch, nshouldoutnum, nshouldoutassistnum, noutnum, noutassistnum, nshouldinnum, castunitid, nneedinassistnum, ninnum, ninassistnum, ntranoutnum, nprice, nmny, nplannedprice, nplannedmny, csourcebillhid, csourcebillbid, csourcetype, vsourcebillcode, fchecked, cprojectid, ccostobject, ccorrespondbid, ccorrespondhid, ccorrespondtype, ccorrespondcode, flargess, A.vuserdef1, A.vuserdef2, A.vuserdef3, A.vuserdef4, A.vuserdef5, A.vuserdef6, bzgflag, isok, cwp, A.ts, crowno, corder_bb1id ";
	sql += " from ic_general_b A, ic_general_h B where A.dr = 0 and B.dr = 0 and A.cgeneralhid = B.cgeneralhid";
	sql += sCondition;

	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();

		stmt = con.prepareStatement(sql);

		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			GeneralHItemVO generalB = new GeneralHItemVO();
			// cgeneralbid :
			String cgeneralbid = rs.getString(1);
			generalB.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
			// cgeneralhid :
			String cgeneralhid = rs.getString(2);
			generalB.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
			// cmangid :
			String cmangid = rs.getString(3);
			generalB.setCinventoryid(cmangid == null ? null : cmangid.trim());
			// vbatchcode :
			String vbatchcode = rs.getString(4);
			generalB.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
			// vfree1 :
			String vfree1 = rs.getString(5);
			generalB.setVfree1(vfree1 == null ? null : vfree1.trim());
			// vfree2 :
			String vfree2 = rs.getString(6);
			generalB.setVfree2(vfree2 == null ? null : vfree2.trim());
			// vfree3 :
			String vfree3 = rs.getString(7);
			generalB.setVfree3(vfree3 == null ? null : vfree3.trim());
			// vfree4 :
			String vfree4 = rs.getString(8);
			generalB.setVfree4(vfree4 == null ? null : vfree4.trim());
			// vfree5 :
			String vfree5 = rs.getString(9);
			generalB.setVfree5(vfree5 == null ? null : vfree5.trim());
			// dvalidate :
			String dvalidate = rs.getString(10);
			generalB.setDvalidate(dvalidate == null ? null : new UFDate(dvalidate.trim(),false));
			// dbizdate :
			String dbizdate = rs.getString(11);
			generalB.setDbizdate(dbizdate == null ? null : new UFDate(dbizdate.trim(),false));
			// dstandbydate :
			String dstandbydate = rs.getString(12);
			generalB.setDstandbydate(dstandbydate == null ? null : new UFDate(dstandbydate.trim(),false));
			// vproductbatch :
			String vproductbatch = rs.getString(13);
			generalB.setVproductbatch(vproductbatch == null ? null : vproductbatch.trim());
			// nshouldoutnum :
			Object nshouldoutnum = rs.getObject(14);
			generalB.setNshouldoutnum(nshouldoutnum == null ? new UFDouble(0.0) : new UFDouble(nshouldoutnum.toString()));
			// nshouldoutassistnum :
			Object nshouldoutassistnum = rs.getObject(15);
			generalB.setNshouldoutassistnum(nshouldoutassistnum == null ? new UFDouble(0.0) : new UFDouble(nshouldoutassistnum.toString()));
			// noutnum :
			Object noutnum = rs.getObject(16);
			generalB.setNoutnum(noutnum == null ? new UFDouble(0.0) : new UFDouble(noutnum.toString()));
			// noutassistnum :
			Object noutassistnum = rs.getObject(17);
			generalB.setNoutassistnum(noutassistnum == null ? new UFDouble(0.0) : new UFDouble(noutassistnum.toString()));
			// nshouldinnum :
			Object nshouldinnum = rs.getObject(18);
			generalB.setNshouldinnum(nshouldinnum == null ? new UFDouble(0.0) : new UFDouble(nshouldinnum.toString()));
			// castunitid :
			String castunitid = rs.getString(19);
			generalB.setCastunitid(castunitid == null ? null : castunitid.trim());
			// nneedinassistnum :
			Object nneedinassistnum = rs.getObject(20);
			generalB.setNneedinassistnum(nneedinassistnum == null ? new UFDouble(0.0) : new UFDouble(nneedinassistnum.toString()));
			// ninnum :
			Object ninnum = rs.getObject(21);
			generalB.setNinnum(ninnum == null ? new UFDouble(0.0) : new UFDouble(ninnum.toString()));
			// ninassistnum :
			Object ninassistnum = rs.getObject(22);
			generalB.setNinassistnum(ninassistnum == null ? new UFDouble(0.0) : new UFDouble(ninassistnum.toString()));
			// ntranoutnum :
			Object ntranoutnum = rs.getObject(23);
			generalB.setNtranoutnum(ntranoutnum == null ? new UFDouble(0.0) : new UFDouble(ntranoutnum.toString()));
			// nprice :
			Object nprice = rs.getObject(24);
			generalB.setNprice(nprice == null ? new UFDouble(0.0) : new UFDouble(nprice.toString()));
			// nmny :
			Object nmny = rs.getObject(25);
			generalB.setNmny(nmny == null ? new UFDouble(0.0) : new UFDouble(nmny.toString()));
			// nplannedprice :
			Object nplannedprice = rs.getObject(26);
			generalB.setNplannedprice(nplannedprice == null ? new UFDouble(0.0) : new UFDouble(nplannedprice.toString()));
			// nplannedmny :
			Object nplannedmny = rs.getObject(27);
			generalB.setNplannedmny(nplannedmny == null ? new UFDouble(0.0) : new UFDouble(nplannedmny.toString()));
			// csourcebillhid :
			String csourcebillhid = rs.getString(28);
			generalB.setCsourcebillhid(csourcebillhid == null ? null : csourcebillhid.trim());
			// csourcebillbid :
			String csourcebillbid = rs.getString(29);
			generalB.setCsourcebillbid(csourcebillbid == null ? null : csourcebillbid.trim());
			// csourcetype :
			String csourcetype = rs.getString(30);
			generalB.setCsourcetype(csourcetype == null ? null : csourcetype.trim());
			// vsourcebillcode :
			String vsourcebillcode = rs.getString(31);
			generalB.setVsourcebillcode(vsourcebillcode == null ? null : vsourcebillcode.trim());
			// fchecked :
			Integer fchecked = (Integer)rs.getObject(32);
			generalB.setFchecked(fchecked == null ? null : fchecked);
			// cprojectid :
			String cprojectid = rs.getString(33);
			generalB.setCprojectid(cprojectid == null ? null : cprojectid.trim());
			// ccostobject :
			String ccostobject = rs.getString(34);
			generalB.setCcostobject(ccostobject == null ? null : ccostobject.trim());
			// ccorrespondbid :
			String ccorrespondbid = rs.getString(35);
			generalB.setCcorrespondbid(ccorrespondbid == null ? null : ccorrespondbid.trim());
			// ccorrespondhid :
			String ccorrespondhid = rs.getString(36);
			generalB.setCcorrespondhid(ccorrespondhid == null ? null : ccorrespondhid.trim());
			// ccorrespondtype :
			String ccorrespondtype = rs.getString(37);
			generalB.setCcorrespondtype(ccorrespondtype == null ? null : ccorrespondtype.trim());
			// ccorrespondcode :
			String ccorrespondcode = rs.getString(38);
			generalB.setCcorrespondcode(ccorrespondcode == null ? null : ccorrespondcode.trim());
			// flargess :
			String flargess = rs.getString(39);
			generalB.setFlargess(flargess == null ? null : new UFBoolean(flargess.trim()));
			// vuserdef1 :
			String vuserdef1 = rs.getString(40);
			generalB.setVuserdef1(vuserdef1 == null ? null : vuserdef1.trim());
			// vuserdef2 :
			String vuserdef2 = rs.getString(41);
			generalB.setVuserdef2(vuserdef2 == null ? null : vuserdef2.trim());
			// vuserdef3 :
			String vuserdef3 = rs.getString(42);
			generalB.setVuserdef3(vuserdef3 == null ? null : vuserdef3.trim());
			// vuserdef4 :
			String vuserdef4 = rs.getString(43);
			generalB.setVuserdef4(vuserdef4 == null ? null : vuserdef4.trim());
			// vuserdef5 :
			String vuserdef5 = rs.getString(44);
			generalB.setVuserdef5(vuserdef5 == null ? null : vuserdef5.trim());
			// vuserdef6 :
			String vuserdef6 = rs.getString(45);
			generalB.setVuserdef6(vuserdef6 == null ? null : vuserdef6.trim());
			// bzgflag :
			String bzgflag = rs.getString(46);
			generalB.setBzgflag(bzgflag == null ? null : new UFBoolean(bzgflag.trim()));
			// isok :
			String isok = rs.getString(47);
			generalB.setIsok(isok == null ? null : new UFBoolean(isok.trim()));
			// cwp :
			String cwp = rs.getString(48);
			generalB.setCwp(cwp == null ? null : cwp.trim());
			// ts :
			String ts = rs.getString(49);
			generalB.setTs(ts == null ? null : ts.trim());
			// crowno :
			String crowno = rs.getString(50);
			generalB.setCrowno(crowno == null ? null : crowno.trim());
			// corder_bb1id :
			String corder_bb1id = rs.getString(51);
			generalB.setCorder_bb1id(corder_bb1id == null ? null : corder_bb1id.trim());

			v.addElement(generalB);
		}
		if(rs != null) rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryInitialBody", new Object[]{sCondition});
	/*************************************************************/

	if (v.size() > 0) {
		GeneralHItemVO bodyVO[] = new GeneralHItemVO[v.size()];
		v.copyInto(bodyVO);
		return bodyVO;
	}

	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得存货的主计量ID(VMI的材料出库单专用)
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期：2002/06/20
 */
public String queryMainUnitID(String cMangID) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryMainUnitID", new Object[]{cMangID});
	/*************************************************************/

	String sql1 = "select pk_measdoc from bd_invmandoc A, bd_invbasdoc B where pk_invmandoc = ? and A.pk_invbasdoc = B.pk_invbasdoc";

	String cUnitID = null;//主计量ID
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql1);
		stmt.setString(1, cMangID);
		rs = stmt.executeQuery();

		if(rs.next()){
			cUnitID = rs.getString(1);
		}
	}
	finally {
		if(rs != null){
			rs.close();
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryMainUnitID", new Object[]{cMangID});
	/*************************************************************/

	return cUnitID;
}

/**
 * 功能描述:订单查询(不包括费用属性的存货，且订单已审批和入库累计数量不大于订单数量)
 *			若订单被修订,只能查询修订后的订单
 * 输入参数:String,公司主键；String,查询条件串
 * 返回值: OorderVO[]
 * 异常处理:SQLException
 * 作者：熊海情
 * 修改：晁志平 2004-06-01 有到货计划时按到货计划生成期初暂估入库单
 */
public OorderVO[] queryOrder(String unitCode, String sCondition) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryOrder", new Object[] { unitCode, sCondition });
	/*************************************************************/

	StringBuffer sbSql1 = new StringBuffer("");
	StringBuffer sbSql2 = new StringBuffer("");
	//第一部分：订单行(无到货计划)
	sbSql1.append("select ");
	sbSql1.append("'N',po_order.corderid, po_order.vordercode, po_order.pk_corp, po_order.dorderdate, ");
	sbSql1.append("po_order.cbiztype, po_order.cvendormangid, po_order.cvendorbaseid, po_order.cdeptid, ");
	sbSql1.append("po_order.cemployeeid, po_order_b.pk_arrvstoorg, po_order.ts, ");
	sbSql1.append("po_order_b.corder_bid,po_order_b.cmangid, po_order_b.cbaseid, po_order_b.nordernum, ");
	sbSql1.append("po_order_b.nmoney, po_order_b.cwarehouseid, po_order_b.naccumstorenum, po_order_b.vfree1, ");
	sbSql1.append("po_order_b.vfree2, po_order_b.vfree3, po_order_b.vfree4, po_order_b.vfree5, ");
	sbSql1.append("po_order_b.cprojectid, po_order_b.cprojectphaseid, po_order_b.ts, po_order_b.vproducenum, ");
	sbSql1.append("'', ");
	sbSql1.append("po_order_b.pk_reqcorp, po_order_b.pk_arrvcorp, po_order_b.pk_invoicecorp, po_order_b.pk_reqstoorg, po_order_b.pk_arrvstoorg, po_order_b.pk_creqwareid, ");

	sbSql1.append("po_order.vdef1,po_order.vdef2,po_order.vdef3,po_order.vdef4,po_order.vdef5,");
	sbSql1.append("po_order.vdef6,po_order.vdef7,po_order.vdef8,po_order.vdef9,po_order.vdef10,");
	sbSql1.append("po_order.vdef11,po_order.vdef12,po_order.vdef13,po_order.vdef14,po_order.vdef15,");
	sbSql1.append("po_order.vdef16,po_order.vdef17,po_order.vdef18,po_order.vdef19,po_order.vdef20,");
	sbSql1.append("po_order.pk_defdoc1,po_order.pk_defdoc2,po_order.pk_defdoc3,po_order.pk_defdoc4,po_order.pk_defdoc5,");
	sbSql1.append("po_order.pk_defdoc6,po_order.pk_defdoc7,po_order.pk_defdoc8,po_order.pk_defdoc9,po_order.pk_defdoc10,");
	sbSql1.append("po_order.pk_defdoc11,po_order.pk_defdoc12,po_order.pk_defdoc13,po_order.pk_defdoc14,po_order.pk_defdoc15,");
	sbSql1.append("po_order.pk_defdoc16,po_order.pk_defdoc17,po_order.pk_defdoc18,po_order.pk_defdoc19,po_order.pk_defdoc20, ");
	
	sbSql1.append("po_order_b.vdef1,po_order_b.vdef2,po_order_b.vdef3,po_order_b.vdef4,po_order_b.vdef5,");
	sbSql1.append("po_order_b.vdef6,po_order_b.vdef7,po_order_b.vdef8,po_order_b.vdef9,po_order_b.vdef10,");
	sbSql1.append("po_order_b.vdef11,po_order_b.vdef12,po_order_b.vdef13,po_order_b.vdef14,po_order_b.vdef15,");
	sbSql1.append("po_order_b.vdef16,po_order_b.vdef17,po_order_b.vdef18,po_order_b.vdef19,po_order_b.vdef20,");
	sbSql1.append("po_order_b.pk_defdoc1,po_order_b.pk_defdoc2,po_order_b.pk_defdoc3,po_order_b.pk_defdoc4,po_order_b.pk_defdoc5,");
	sbSql1.append("po_order_b.pk_defdoc6,po_order_b.pk_defdoc7,po_order_b.pk_defdoc8,po_order_b.pk_defdoc9,po_order_b.pk_defdoc10,");
	sbSql1.append("po_order_b.pk_defdoc11,po_order_b.pk_defdoc12,po_order_b.pk_defdoc13,po_order_b.pk_defdoc14,po_order_b.pk_defdoc15,");
	sbSql1.append("po_order_b.pk_defdoc16,po_order_b.pk_defdoc17,po_order_b.pk_defdoc18,po_order_b.pk_defdoc19,po_order_b.pk_defdoc20 ");

	sbSql1.append("from po_order ");
	sbSql1.append("inner join po_order_b on po_order.corderid = po_order_b.corderid ");
	sbSql1.append("inner join bd_invbasdoc on po_order_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
	sbSql1.append("left outer join bd_stordoc on po_order_b.cwarehouseid = bd_stordoc.pk_stordoc ");
	sbSql1.append("where po_order.forderstatus = 3 and po_order_b.iisactive <> 3 ");
	sbSql1.append("and po_order.dr = 0 and po_order_b.dr = 0 ");
	sbSql1.append("and upper(bd_invbasdoc.laborflag) = 'N' and upper(bd_invbasdoc.discountflag) = 'N' ");
	sbSql1.append("and (coalesce(bd_stordoc.iscalculatedinvcost,'N') = 'Y' or po_order_b.cwarehouseid is null) ");
	sbSql1.append("and coalesce(po_order_b.breceiveplan, 'N') = 'N' ");
//	sbSql1.append("and po_order_b.nordernum > coalesce(po_order_b.naccumstorenum, 0.0) ");
//	if (unitCode != null) {
//		sbSql1.append("and po_order.pk_corp ='" + unitCode + "' ");
//	}
	sbSql1.append(sCondition + " ");
	//联合两种情况
//	sbSql.append("union all ");
	//第二部分：到货计划
	sbSql2.append("select ");
	sbSql2.append("'Y',po_order.corderid, po_order.vordercode, po_order.pk_corp, po_order.dorderdate, ");
	sbSql2.append("po_order.cbiztype, po_order.cvendormangid, po_order.cvendorbaseid, po_order.cdeptid, ");
	sbSql2.append("po_order.cemployeeid, po_order_bb1.cstoreorganization, po_order.ts, ");
	sbSql2.append("po_order_b.corder_bid,po_order_bb1.cmangid, po_order_bb1.cbaseid, po_order_bb1.nordernum, ");
	sbSql2.append("(po_order_b.nmoney / po_order_b.nordernum) * po_order_bb1.nordernum, po_order_bb1.cwarehouseid, po_order_bb1.naccumstorenum, po_order_bb1.vfree1, ");
	sbSql2.append("po_order_bb1.vfree2, po_order_bb1.vfree3, po_order_bb1.vfree4, po_order_bb1.vfree5, ");
	sbSql2.append("po_order_b.cprojectid, po_order_b.cprojectphaseid, po_order_b.ts, po_order_b.vproducenum, ");
	sbSql2.append("po_order_bb1.corder_bb1id, ");
	sbSql2.append("po_order_b.pk_reqcorp, po_order_b.pk_arrvcorp, po_order_b.pk_invoicecorp, po_order_b.pk_reqstoorg, po_order_b.pk_arrvstoorg, po_order_b.pk_creqwareid, ");

	sbSql2.append("po_order.vdef1,po_order.vdef2,po_order.vdef3,po_order.vdef4,po_order.vdef5,");
	sbSql2.append("po_order.vdef6,po_order.vdef7,po_order.vdef8,po_order.vdef9,po_order.vdef10,");
	sbSql2.append("po_order.vdef11,po_order.vdef12,po_order.vdef13,po_order.vdef14,po_order.vdef15,");
	sbSql2.append("po_order.vdef16,po_order.vdef17,po_order.vdef18,po_order.vdef19,po_order.vdef20,");
	sbSql2.append("po_order.pk_defdoc1,po_order.pk_defdoc2,po_order.pk_defdoc3,po_order.pk_defdoc4,po_order.pk_defdoc5,");
	sbSql2.append("po_order.pk_defdoc6,po_order.pk_defdoc7,po_order.pk_defdoc8,po_order.pk_defdoc9,po_order.pk_defdoc10,");
	sbSql2.append("po_order.pk_defdoc11,po_order.pk_defdoc12,po_order.pk_defdoc13,po_order.pk_defdoc14,po_order.pk_defdoc15,");
	sbSql2.append("po_order.pk_defdoc16,po_order.pk_defdoc17,po_order.pk_defdoc18,po_order.pk_defdoc19,po_order.pk_defdoc20, ");
	
	sbSql2.append("po_order_b.vdef1,po_order_b.vdef2,po_order_b.vdef3,po_order_b.vdef4,po_order_b.vdef5,");
	sbSql2.append("po_order_b.vdef6,po_order_b.vdef7,po_order_b.vdef8,po_order_b.vdef9,po_order_b.vdef10,");
	sbSql2.append("po_order_b.vdef11,po_order_b.vdef12,po_order_b.vdef13,po_order_b.vdef14,po_order_b.vdef15,");
	sbSql2.append("po_order_b.vdef16,po_order_b.vdef17,po_order_b.vdef18,po_order_b.vdef19,po_order_b.vdef20,");
	sbSql2.append("po_order_b.pk_defdoc1,po_order_b.pk_defdoc2,po_order_b.pk_defdoc3,po_order_b.pk_defdoc4,po_order_b.pk_defdoc5,");
	sbSql2.append("po_order_b.pk_defdoc6,po_order_b.pk_defdoc7,po_order_b.pk_defdoc8,po_order_b.pk_defdoc9,po_order_b.pk_defdoc10,");
	sbSql2.append("po_order_b.pk_defdoc11,po_order_b.pk_defdoc12,po_order_b.pk_defdoc13,po_order_b.pk_defdoc14,po_order_b.pk_defdoc15,");
	sbSql2.append("po_order_b.pk_defdoc16,po_order_b.pk_defdoc17,po_order_b.pk_defdoc18,po_order_b.pk_defdoc19,po_order_b.pk_defdoc20 ");

	sbSql2.append("from po_order ");
	sbSql2.append("inner join po_order_b on po_order.corderid = po_order_b.corderid ");
	sbSql2.append("inner join po_order_bb1 on po_order_b.corder_bid = po_order_bb1.corder_bid ");
	sbSql2.append("inner join bd_invbasdoc on po_order_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
	sbSql2.append("left outer join bd_stordoc on po_order_b.cwarehouseid = bd_stordoc.pk_stordoc ");
	sbSql2.append("where po_order.forderstatus = 3 and po_order_b.iisactive <> 3 ");
	sbSql2.append("and po_order.dr = 0 and po_order_b.dr = 0 and po_order_bb1.dr = 0 ");
	sbSql2.append("and upper(bd_invbasdoc.laborflag) = 'N' and upper(bd_invbasdoc.discountflag) = 'N' ");
	sbSql2.append("and (coalesce(bd_stordoc.iscalculatedinvcost,'N') = 'Y' or po_order_b.cwarehouseid is null) ");
	sbSql2.append("and coalesce(po_order_b.breceiveplan, 'N') = 'Y' ");
//	sbSql2.append("and po_order_bb1.nordernum > coalesce(po_order_bb1.naccumstorenum, 0.0) ");
//	if (unitCode != null) {
//		sbSql2.append("and po_order.pk_corp ='" + unitCode + "' ");
//	}
	sbSql2.append(sCondition + " ");

	OorderVO orders[] = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	String strTmp = null;
	Object oTmp = null;
	try {
		con = getConnection();

		//不必翻译
//		((nc.bs.mw.sql.UFConnection)con).enableSQLTranslator(false);
		stmt = con.prepareStatement(sbSql1.toString());
		rs = stmt.executeQuery();
		//
		int index = 0;
		OorderVO order = null;
		String strPlanFlag = null;
		while (rs.next()) {
			index = 1;
			order = new OorderVO();
			// 到货计划标志 :
			strPlanFlag = rs.getString(index++);
			// corderid :
			strTmp = rs.getString(index++);
			order.setCorderid(strTmp == null ? null : strTmp.trim());
			// vordercode :
			strTmp = rs.getString(index++);
			order.setVordercode(strTmp == null ? null : strTmp.trim());
			// pk_corp :
			strTmp = rs.getString(index++);
			order.setPk_corp(strTmp == null ? null : strTmp.trim());
			// dorderdate :
			strTmp = rs.getString(index++);
			order.setDdate(strTmp == null ? null : new UFDate(strTmp.trim()));
			// cbiztype :
			strTmp = rs.getString(index++);
			order.setCbiztype(strTmp == null ? null : strTmp.trim());
			// cvendormangid :
			strTmp = rs.getString(index++);
			order.setCvendormangid(strTmp == null ? null : strTmp.trim());
			// cvendorbaseid :
			strTmp = rs.getString(index++);
			order.setCvendorbaseid(strTmp == null ? null : strTmp.trim());
			// cdeptid :
			strTmp = rs.getString(index++);
			order.setCdeptid(strTmp == null ? null : strTmp.trim());
			// cemployeeid :
			strTmp = rs.getString(index++);
			order.setCemployeeid(strTmp == null ? null : strTmp.trim());
			// cstoreorganization :
			strTmp = rs.getString(index++);
			order.setCstoreorganization(strTmp == null ? null : strTmp.trim());
			// ts1 :
			strTmp = rs.getString(index++);
			order.setTs1(strTmp == null ? null : strTmp.trim());
			// corder_bid :
			strTmp = rs.getString(index++);
			order.setCorder_bid(strTmp == null ? null : strTmp.trim());
			// cmangid :
			strTmp = rs.getString(index++);
			order.setCmangid(strTmp == null ? null : strTmp.trim());
			// cbaseid :
			strTmp = rs.getString(index++);
			order.setCbaseid(strTmp == null ? null : strTmp.trim());
			// nordernum :
			oTmp = rs.getObject(index++);
			order.setNordernum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString().trim()));
			// nmoney :
			oTmp = rs.getObject(index++);
			order.setNmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString().trim()));
			// cwarehouseid :
			strTmp = rs.getString(index++);
			order.setCwarehouseid(strTmp == null ? null : strTmp.trim());
			// naccumstorenum :
			oTmp = rs.getObject(index++);
			order.setNaccumstorenum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString().trim()));
			// vfree1 :
			strTmp = rs.getString(index++);
			order.setVfree1(strTmp == null ? null : strTmp.trim());
			// vfree2 :
			strTmp = rs.getString(index++);
			order.setVfree2(strTmp == null ? null : strTmp.trim());
			// vfree3 :
			strTmp = rs.getString(index++);
			order.setVfree3(strTmp == null ? null : strTmp.trim());
			// vfree4 :
			strTmp = rs.getString(index++);
			order.setVfree4(strTmp == null ? null : strTmp.trim());
			// vfree5 :
			strTmp = rs.getString(index++);
			order.setVfree5(strTmp == null ? null : strTmp.trim());
			// cprojectid :
			strTmp = rs.getString(index++);
			order.setCprojectid(strTmp == null ? null : strTmp.trim());
			// cprojectphaseid :
			strTmp = rs.getString(index++);
			order.setCprojectphaseid(strTmp == null ? null : strTmp.trim());
			// ts2 :
			strTmp = rs.getString(index++);
			order.setTs2(strTmp == null ? null : strTmp.trim());
			// vprodcenum :
			strTmp = rs.getString(index++);
			order.setVbatchcode(strTmp == null ? null : strTmp.trim());
			// corder_bb1id :
			if ("Y".equalsIgnoreCase(strPlanFlag)) {
				strTmp = rs.getString(index++);
				order.setCorder_bb1id(strTmp == null ? null : strTmp.trim());
			} else {
				index++;
			}
			
			//支持集采
			strTmp = rs.getString(index++);
			order.setPk_reqcorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setPk_arrvcorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setPk_invoicecorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setPk_reqstoorg(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setPk_arrvstoorg(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setPk_creqwareid(strTmp == null ? null : strTmp.trim());		
			
			strTmp = rs.getString(index++);
			order.setHvdef1(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef2(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef3(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef4(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef5(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef6(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef7(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef8(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef9(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef10(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef11(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef12(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef13(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef14(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef15(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef16(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef17(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef18(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef19(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef20(strTmp == null ? null : strTmp.trim());

			strTmp = rs.getString(index++);
			order.setHpkdef1(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef2(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef3(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef4(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef5(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef6(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef7(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef8(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef9(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef10(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef11(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef12(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef13(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef14(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef15(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef16(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef17(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef18(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef19(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef20(strTmp == null ? null : strTmp.trim());

			strTmp = rs.getString(index++);
			order.setBvdef1(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef2(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef3(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef4(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef5(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef6(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef7(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef8(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef9(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef10(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef11(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef12(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef13(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef14(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef15(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef16(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef17(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef18(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef19(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef20(strTmp == null ? null : strTmp.trim());

			strTmp = rs.getString(index++);
			order.setBpkdef1(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef2(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef3(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef4(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef5(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef6(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef7(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef8(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef9(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef10(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef11(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef12(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef13(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef14(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef15(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef16(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef17(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef18(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef19(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef20(strTmp == null ? null : strTmp.trim());

			//
			//
			order.setCstoreorganization(order.getPk_arrvstoorg());
			if(order.getNordernum().doubleValue() > 0 && order.getNordernum().doubleValue() > order.getNaccumstorenum().doubleValue()) v.addElement(order);
			if(order.getNordernum().doubleValue() < 0 && order.getNordernum().doubleValue() < order.getNaccumstorenum().doubleValue()) v.addElement(order);			
		}

		if(stmt != null) stmt.close();
		stmt = con.prepareStatement(sbSql2.toString());
		rs = stmt.executeQuery();
		index = 0;
		while (rs.next()) {
			index = 1;
			order = new OorderVO();
			// 到货计划标志 :
			strPlanFlag = rs.getString(index++);
			// corderid :
			strTmp = rs.getString(index++);
			order.setCorderid(strTmp == null ? null : strTmp.trim());
			// vordercode :
			strTmp = rs.getString(index++);
			order.setVordercode(strTmp == null ? null : strTmp.trim());
			// pk_corp :
			strTmp = rs.getString(index++);
			order.setPk_corp(strTmp == null ? null : strTmp.trim());
			// dorderdate :
			strTmp = rs.getString(index++);
			order.setDdate(strTmp == null ? null : new UFDate(strTmp.trim()));
			// cbiztype :
			strTmp = rs.getString(index++);
			order.setCbiztype(strTmp == null ? null : strTmp.trim());
			// cvendormangid :
			strTmp = rs.getString(index++);
			order.setCvendormangid(strTmp == null ? null : strTmp.trim());
			// cvendorbaseid :
			strTmp = rs.getString(index++);
			order.setCvendorbaseid(strTmp == null ? null : strTmp.trim());
			// cdeptid :
			strTmp = rs.getString(index++);
			order.setCdeptid(strTmp == null ? null : strTmp.trim());
			// cemployeeid :
			strTmp = rs.getString(index++);
			order.setCemployeeid(strTmp == null ? null : strTmp.trim());
			// cstoreorganization :
			strTmp = rs.getString(index++);
			order.setCstoreorganization(strTmp == null ? null : strTmp.trim());
			// ts1 :
			strTmp = rs.getString(index++);
			order.setTs1(strTmp == null ? null : strTmp.trim());
			// corder_bid :
			strTmp = rs.getString(index++);
			order.setCorder_bid(strTmp == null ? null : strTmp.trim());
			// cmangid :
			strTmp = rs.getString(index++);
			order.setCmangid(strTmp == null ? null : strTmp.trim());
			// cbaseid :
			strTmp = rs.getString(index++);
			order.setCbaseid(strTmp == null ? null : strTmp.trim());
			// nordernum :
			oTmp = rs.getObject(index++);
			order.setNordernum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString().trim()));
			// nmoney :
			oTmp = rs.getObject(index++);
			order.setNmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString().trim()));
			// cwarehouseid :
			strTmp = rs.getString(index++);
			order.setCwarehouseid(strTmp == null ? null : strTmp.trim());
			// naccumstorenum :
			oTmp = rs.getObject(index++);
			order.setNaccumstorenum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString().trim()));
			// vfree1 :
			strTmp = rs.getString(index++);
			order.setVfree1(strTmp == null ? null : strTmp.trim());
			// vfree2 :
			strTmp = rs.getString(index++);
			order.setVfree2(strTmp == null ? null : strTmp.trim());
			// vfree3 :
			strTmp = rs.getString(index++);
			order.setVfree3(strTmp == null ? null : strTmp.trim());
			// vfree4 :
			strTmp = rs.getString(index++);
			order.setVfree4(strTmp == null ? null : strTmp.trim());
			// vfree5 :
			strTmp = rs.getString(index++);
			order.setVfree5(strTmp == null ? null : strTmp.trim());
			// cprojectid :
			strTmp = rs.getString(index++);
			order.setCprojectid(strTmp == null ? null : strTmp.trim());
			// cprojectphaseid :
			strTmp = rs.getString(index++);
			order.setCprojectphaseid(strTmp == null ? null : strTmp.trim());
			// ts2 :
			strTmp = rs.getString(index++);
			order.setTs2(strTmp == null ? null : strTmp.trim());
			// vprodcenum :
			strTmp = rs.getString(index++);
			order.setVbatchcode(strTmp == null ? null : strTmp.trim());
			// corder_bb1id :
			if ("Y".equalsIgnoreCase(strPlanFlag)) {
				strTmp = rs.getString(index++);
				order.setCorder_bb1id(strTmp == null ? null : strTmp.trim());
			} else {
				index++;
			}
			
			//支持集采
			strTmp = rs.getString(index++);
			order.setPk_reqcorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setPk_arrvcorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setPk_invoicecorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setPk_reqstoorg(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setPk_arrvstoorg(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setPk_creqwareid(strTmp == null ? null : strTmp.trim());	
			
			strTmp = rs.getString(index++);
			order.setHvdef1(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef2(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef3(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef4(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef5(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef6(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef7(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef8(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef9(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef10(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef11(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef12(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef13(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef14(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef15(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef16(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef17(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef18(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef19(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHvdef20(strTmp == null ? null : strTmp.trim());

			strTmp = rs.getString(index++);
			order.setHpkdef1(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef2(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef3(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef4(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef5(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef6(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef7(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef8(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef9(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef10(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef11(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef12(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef13(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef14(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef15(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef16(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef17(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef18(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef19(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setHpkdef20(strTmp == null ? null : strTmp.trim());

			strTmp = rs.getString(index++);
			order.setBvdef1(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef2(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef3(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef4(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef5(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef6(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef7(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef8(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef9(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef10(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef11(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef12(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef13(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef14(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef15(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef16(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef17(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef18(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef19(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBvdef20(strTmp == null ? null : strTmp.trim());

			strTmp = rs.getString(index++);
			order.setBpkdef1(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef2(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef3(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef4(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef5(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef6(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef7(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef8(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef9(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef10(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef11(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef12(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef13(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef14(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef15(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef16(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef17(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef18(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef19(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(index++);
			order.setBpkdef20(strTmp == null ? null : strTmp.trim());

			//			
			//
			if(order.getNordernum().doubleValue() > 0 && order.getNordernum().doubleValue() > order.getNaccumstorenum().doubleValue()) v.addElement(order);
			if(order.getNordernum().doubleValue() < 0 && order.getNordernum().doubleValue() < order.getNaccumstorenum().doubleValue()) v.addElement(order);			
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	orders = new OorderVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(orders);
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryOrder", new Object[] { unitCode, sCondition });
	/*************************************************************/

	return orders;
}

/**
 * 功能:查询订单表体状态
 * 输入:结算用订单VO[]
 * 返回:状态向量
 * 异常:SQLException
 * 作者:熊海情
 * 修改:晁志平 FOR V30 效率优化
 */
public Vector queryOrderStatus(OorderVO orderVOs[]) throws SQLException {
	if (orderVOs == null || orderVOs.length == 0) {
		SCMEnv.out("传入参数为空，直接返回NULL");
		return null;
	}
	String sql =
		"select corder_bid,forderstatus,iisactive,po_order.dr from po_order,po_order_b where po_order.corderid = po_order_b.corderid and corder_bid in ";
	int iLen = orderVOs.length;
	String[] saBid = new String[iLen];
	for (int i = 0; i < iLen; i++) {
		saBid[i] = orderVOs[i].getCorder_bid();
	}
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;

	HashMap map = new HashMap();
	String strBid = null;
	try {
		//临时表集合
		String strSetId =
			new nc.bs.scm.pub.TempTableDMO().insertTempTable(
				saBid,
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_00,
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId + " ";
		//
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		Vector vTmp = null;
		while (rs.next()) {
			strBid = rs.getString(1);
			if (strBid == null) {
				continue;
			}
			vTmp = new Vector();
			vTmp.addElement((Integer) rs.getObject(2));
			vTmp.addElement((Integer) rs.getObject(3));
			vTmp.addElement((Integer) rs.getObject(4));
			map.put(strBid, vTmp);
		}
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	Vector vRslt = new Vector();
	for (int i = 0; i < iLen; i++) {
		strBid = orderVOs[i].getCorder_bid();
		if (strBid == null) {
			vRslt.add(null);
		}
		vRslt.addElement((Vector) map.get(strBid));
	}
	return vRslt;
}

/**
 * 功能描述:获得存货和仓库对应的存货计价方式,计划价
 * 输入参数: String[],存货管理档案ID[]；String[], 仓库ID[]
 * 返回值:ArrayList
 * 异常处理:SQLException
 * 作者：熊海情
 * 修改：晁志平 2004-06-05 For V30  如果仓库全为空，则直接返回空
 */
public ArrayList queryPriceMethod(String cMangID[], String cWarehouseID[]) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryPriceMethod", new Object[] { cMangID, cWarehouseID });
	/*************************************************************/

	//查询库存组织
	String sql1 = "select pk_stordoc, pk_calbody from bd_stordoc where dr = 0 and pk_stordoc in ";
	Vector vTemp = new Vector();
	for (int i = 0; i < cWarehouseID.length; i++) {
		if (cWarehouseID[i] == null)
			continue;
		if (!vTemp.contains(cWarehouseID[i]))
			vTemp.addElement(cWarehouseID[i]);
	}
	if (vTemp.size() == 0) {
		ArrayList list = new ArrayList();
		for (int i = 0; i < cWarehouseID.length; i++) {
			list.add(null);
		}
		return list;
	}
	String sTemp[] = new String[vTemp.size()];
	vTemp.copyInto(sTemp);
	//临时表
	try {
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU26, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql1 += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	/*
		sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
		for (int i = 0; i < sTemp.length - 1; i++)
			sql1 += " pk_stordoc in " + sTemp[i] + " or ";
		sql1 += " pk_stordoc in " + sTemp[sTemp.length - 1] + ")";
	*/
	//查询存货基础ID
	String sql2 =
		"select pk_invmandoc, A.pk_invbasdoc from bd_invmandoc A, bd_invbasdoc B where A.dr = 0 and B.dr = 0 and A.pk_invbasdoc = B.pk_invbasdoc and pk_invmandoc in ";
	vTemp = new Vector();
	vTemp.addElement(cMangID[0]);
	for (int i = 1; i < cMangID.length; i++) {
		if (!vTemp.contains(cMangID[i]))
			vTemp.addElement(cMangID[i]);
	}
	sTemp = new String[vTemp.size()];
	vTemp.copyInto(sTemp);
	//临时表
	try {
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU27, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql2 += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	/*
	sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
	for (int i = 0; i < sTemp.length - 1; i++)
		sql2 += " pk_invmandoc in " + sTemp[i] + " or ";
	sql2 += " pk_invmandoc in " + sTemp[sTemp.length - 1] + ")";
	*/
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	Hashtable t = new Hashtable();
	String cBaseID[] = new String[cMangID.length];
	String cCalbody[] = new String[cWarehouseID.length];
	try {
		con = getConnection();

		//查询库存组织
		stmt = con.prepareStatement(sql1);
		rs = stmt.executeQuery();
		while (rs.next()) {
			String s1 = rs.getString(1);
			String s2 = rs.getString(2);
			if (s1 != null && s1.trim().length() > 0 && s2 != null && s2.trim().length() > 0) {
				t.put(s1, s2);
			}
		}
		if (stmt != null)
			stmt.close();
		for (int i = 0; i < cCalbody.length; i++) {
			Object o = t.get(cWarehouseID[i]);
			if (o != null)
				cCalbody[i] = o.toString();
		}

		//查询存货基础ID
		t = new Hashtable();
		stmt = con.prepareStatement(sql2);
		rs = stmt.executeQuery();
		while (rs.next()) {
			String s1 = rs.getString(1);
			String s2 = rs.getString(2);
			if (s1 != null && s1.trim().length() > 0 && s2 != null && s2.trim().length() > 0) {
				t.put(s1, s2);
			}
		}
		if (stmt != null)
			stmt.close();
		for (int i = 0; i < cBaseID.length; i++) {
			Object o = t.get(cMangID[i]);
			if (o != null)
				cBaseID[i] = o.toString();
		}

		//根据存货基础ID查询计价方式及计划价
		String sql = " select pk_calbody, pk_invbasdoc, pricemethod, jhj from bd_produce where dr = 0 and pk_invbasdoc in ";
		vTemp = new Vector();
		vTemp.addElement(cBaseID[0]);
		for (int i = 1; i < cBaseID.length; i++) {
			if (!vTemp.contains(cBaseID[i]))
				vTemp.addElement(cBaseID[i]);
		}
		sTemp = new String[vTemp.size()];
		vTemp.copyInto(sTemp);
		//临时表
		try {
			String strSetId = null;
			nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
			strSetId =
				dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU28, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
			sql += strSetId;
		} catch (Exception e) {
			throw new SQLException(e.getMessage());
		}
		/*
			sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
			for (int i = 0; i < sTemp.length - 1; i++)
				sql += " pk_invbasdoc in " + sTemp[i] + " or ";
			sql += " pk_invbasdoc in " + sTemp[sTemp.length - 1] + ")";
		*/
		//
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		t = new Hashtable();
		while (rs.next()) {
			String s1 = rs.getString(1);
			String s2 = rs.getString(2);

			int pricemethod = rs.getInt(3);
			BigDecimal jhj = null;
			Object oTemp = rs.getObject(4);
			if (oTemp != null && oTemp.toString().trim().length() > 0)
				jhj = new BigDecimal(oTemp.toString());

			ArrayList list = new ArrayList();
			if (pricemethod < 1 || pricemethod > 6)
				pricemethod = 1;
			list.add(new Integer(pricemethod));
			if (jhj == null)
				list.add(new UFDouble(0));
			else
				list.add(new UFDouble(jhj));

			if (s2 == null || s2.trim().length() == 0)
				t.put(s1, list);
			else
				t.put(s1 + s2, list);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryPriceMethod", new Object[] { cMangID, cWarehouseID });
	/*************************************************************/

	ArrayList list = new ArrayList();
	for (int i = 0; i < cCalbody.length; i++) {
		String s1 = cCalbody[i];
		String s2 = cBaseID[i];
		Object o = t.get(s1 + s2);
		if (o != null)
			list.add((ArrayList) o);
		else
			list.add(null);
	}
	return list;
}



/**
 * 此处插入方法说明。
 * 功能描述:获得业务类型对应的收发类别ID。（服务于直运业务类型的结算）
 * 输入参数:业务类型ID
 * 返回值:
 * 异常处理:
 */
public String queryRSMode(String cbusitypeid) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryRSMode", new Object[]{cbusitypeid});
	/*************************************************************/

	String sql=" select receipttype from bd_busitype";
	sql+=" where pk_busitype = ?";

	String s = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, cbusitypeid);

		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			s = rs.getString(1);
		}

		if(rs != null){
			rs.close();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryRSMode", new Object[]{cbusitypeid});
	/*************************************************************/

	return s;
}

/**
 * 此处插入方法说明。
 * 功能描述:来源是订单的期初暂估入库单的业务类型
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public String[] querySpeBiztypeID(String pk_corp) throws SQLException {

	String sql = "";
	sql = " select A.pk_businesstype";
	sql += " from pub_billbusiness A, pub_billsource B";
	sql += " where A.pk_billtype = '4T' and B.referbilltype = '21' and A.pk_billbusiness = B.billbusinessid";
  sql += " and (A.pk_corp = '" + pk_corp + "' or A.pk_corp = '@@@@')";

	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			String s = rs.getString(1);
			v.addElement(s);
		}

		if(rs != null){
			rs.close();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	String id[] = null;
	if (v.size() > 0) {
		id=new String[v.size()];
		v.copyInto(id);
	}

	return id;
}

/**
 * 此处插入方法说明。
 * 功能描述:查询期初暂估入库单结算子子表
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public GeneralBb3VO[] queryStockBb3(GeneralHItemVO VOs[]) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockBb3", new Object[] { VOs });
	/*************************************************************/

	String sql = "select cgeneralbid, cgeneralhid, cgeneralbb3, naccountnum1, naccountmny, npprice, npmoney, ts";
	sql += " from ic_general_bb3 where dr = 0 and cgeneralbid in ";

	Vector vTemp = new Vector();
	for (int i = 0; i < VOs.length; i++)
		vTemp.addElement(VOs[i].getCgeneralbid());
	String sTemp[] = new String[vTemp.size()];
	vTemp.copyInto(sTemp);
	//临时表
	try {
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU29, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	/*
		sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
		for(int i = 0; i < sTemp.length - 1; i++) sql += " cgeneralbid in " + sTemp[i] + " or ";
		sql += " cgeneralbid in " + sTemp[sTemp.length - 1] + ")";
	*/
	Hashtable h = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			GeneralBb3VO generalBb3 = new GeneralBb3VO();
			// cgeneralbid :
			String cgeneralbid = rs.getString(1);
			generalBb3.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
			// cgeneralhid :
			String cgeneralhid = rs.getString(2);
			generalBb3.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
			// cgeneralbb3 :
			String cgeneralbb3 = rs.getString(3);
			generalBb3.setCgeneralbb3(cgeneralbb3 == null ? null : cgeneralbb3.trim());
			// naccountnum1 :
			Object naccountnum1 = rs.getObject(4);
			generalBb3.setNaccountnum1(naccountnum1 == null ? new UFDouble(0.0) : new UFDouble(naccountnum1.toString()));
			// naccountmny :
			Object naccountmny = rs.getObject(5);
			generalBb3.setNaccountmny(naccountmny == null ? new UFDouble(0.0) : new UFDouble(naccountmny.toString()));
			// npprice :
			Object npprice = rs.getObject(6);
			generalBb3.setNpprice(npprice == null ? new UFDouble(0.0) : new UFDouble(npprice.toString()));
			// npmoney :
			Object npmoney = rs.getObject(7);
			generalBb3.setNpmoney(npmoney == null ? new UFDouble(0.0) : new UFDouble(npmoney.toString()));
			// ts :
			String ts = rs.getString(8);
			generalBb3.setTs(ts == null ? null : ts.trim());

			if (h.get(cgeneralbid) == null)
				h.put(cgeneralbid, generalBb3);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockBb3", new Object[] { VOs });
	/*************************************************************/

	Vector v = new Vector();
	for (int i = 0; i < VOs.length; i++) {
		v.addElement(h.get(VOs[i].getCgeneralbid()));
	}
	if (v.size() > 0) {
		GeneralBb3VO bb3VO[] = new GeneralBb3VO[v.size()];
		v.copyInto(bb3VO);
		return bb3VO;
	}
	return null;
}

/*
 * 根据订单行ID查询订单税率和扣税类别
 */
public Hashtable queryOrderTaxRate(String sBodyKey[]) throws SQLException{
	String sql =
		"select corder_bid, ntaxrate ,idiscounttaxtype from po_order_b where dr = 0 and corder_bid in ";

	//临时表
	try {
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(
				sBodyKey,
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU30,
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}

	Hashtable h = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();

		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			String s = rs.getString(1);
			Object oTemp = rs.getObject(2);
			int i = rs.getInt(3);
			if(s != null) h.put(s, new Object[]{oTemp, new Integer(i)});
		}

	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	if(h.size() > 0) return h;
	return null;	
}
/*
 * 根据订单行ID查询订单税率和扣税类别
 */
public Hashtable queryOrderTaxRate_wwyf(String sBodyKey[]) throws SQLException{
	String sql =
		"select corder_bid, ntaxrate ,idiscounttaxtype from sc_order_b where dr = 0 and corder_bid in ";

	//临时表
	try {
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(
				sBodyKey,
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU30,
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}

	Hashtable h = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();

		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			String s = rs.getString(1);
			Object oTemp = rs.getObject(2);
			int i = rs.getInt(3);
			if(s != null) h.put(s, new Object[]{oTemp, new Integer(i)});
		}

	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	if(h.size() > 0) return h;
	return null;	
}
/**
 * 此处插入方法说明。
 * 功能描述:查询期初暂估入库单表体
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public ArrayList queryStockBody(String sBodyKey[]) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockBody", new Object[] { sBodyKey });
	/*************************************************************/

	String sql =
		"select cgeneralbid, cgeneralhid, cinventoryid, vbatchcode, vfree1, vfree2, vfree3, vfree4, vfree5, dvalidate, dbizdate, dstandbydate, vproductbatch, nshouldoutnum, nshouldoutassistnum, noutnum, noutassistnum, nshouldinnum, castunitid, nneedinassistnum, ninnum, ninassistnum, ntranoutnum, nprice, nmny, nplannedprice, nplannedmny, csourcebillhid, csourcebillbid, csourcetype, vsourcebillcode, fchecked, cprojectid, ccostobject, ccorrespondbid, ccorrespondhid, ccorrespondtype, ccorrespondcode, flargess, vuserdef1, vuserdef2, vuserdef3, vuserdef4, vuserdef5, vuserdef6, bzgflag, isok, cwp, ts, crowno, bzgyfflag, pk_invoicecorp ";
	sql += " from ic_general_b where dr = 0 and cgeneralbid in ";

	//临时表
	try {
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(
				sBodyKey,
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU30,
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	/*
		String sTemp[] = nc.bs.pu.pub.PubDMO.getInSetsByIds(sBodyKey);
		for(int i = 0; i < sTemp.length - 1; i++) sql += " cgeneralbid in " + sTemp[i] + " or ";
		sql += " cgeneralbid in " + sTemp[sTemp.length - 1] + ")";
	*/
	Hashtable h = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();

		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			GeneralHItemVO generalB = new GeneralHItemVO();
			// cgeneralbid :
			String cgeneralbid = rs.getString(1);
			generalB.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
			// cgeneralhid :
			String cgeneralhid = rs.getString(2);
			generalB.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
			// cmangid :
			String cmangid = rs.getString(3);
			generalB.setCinventoryid(cmangid == null ? null : cmangid.trim());
			// vbatchcode :
			String vbatchcode = rs.getString(4);
			generalB.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
			// vfree1 :
			String vfree1 = rs.getString(5);
			generalB.setVfree1(vfree1 == null ? null : vfree1.trim());
			// vfree2 :
			String vfree2 = rs.getString(6);
			generalB.setVfree2(vfree2 == null ? null : vfree2.trim());
			// vfree3 :
			String vfree3 = rs.getString(7);
			generalB.setVfree3(vfree3 == null ? null : vfree3.trim());
			// vfree4 :
			String vfree4 = rs.getString(8);
			generalB.setVfree4(vfree4 == null ? null : vfree4.trim());
			// vfree5 :
			String vfree5 = rs.getString(9);
			generalB.setVfree5(vfree5 == null ? null : vfree5.trim());
			// dvalidate :
			String dvalidate = rs.getString(10);
			generalB.setDvalidate(dvalidate == null ? null : new UFDate(dvalidate.trim(), false));
			// dbizdate :
			String dbizdate = rs.getString(11);
			generalB.setDbizdate(dbizdate == null ? null : new UFDate(dbizdate.trim(), false));
			// dstandbydate :
			String dstandbydate = rs.getString(12);
			generalB.setDstandbydate(dstandbydate == null ? null : new UFDate(dstandbydate.trim(), false));
			// vproductbatch :
			String vproductbatch = rs.getString(13);
			generalB.setVproductbatch(vproductbatch == null ? null : vproductbatch.trim());
			// nshouldoutnum :
			Object nshouldoutnum = rs.getObject(14);
			generalB.setNshouldoutnum(nshouldoutnum == null ? null : new UFDouble(nshouldoutnum.toString()));
			// nshouldoutassistnum :
			Object nshouldoutassistnum = rs.getObject(15);
			generalB.setNshouldoutassistnum(nshouldoutassistnum == null ? null : new UFDouble(nshouldoutassistnum.toString()));
			// noutnum :
			Object noutnum = rs.getObject(16);
			generalB.setNoutnum(noutnum == null ? null : new UFDouble(noutnum.toString()));
			// noutassistnum :
			Object noutassistnum = rs.getObject(17);
			generalB.setNoutassistnum(noutassistnum == null ? null : new UFDouble(noutassistnum.toString()));
			// nshouldinnum :
			Object nshouldinnum = rs.getObject(18);
			generalB.setNshouldinnum(nshouldinnum == null ? null : new UFDouble(nshouldinnum.toString()));
			// castunitid :
			String castunitid = rs.getString(19);
			generalB.setCastunitid(castunitid == null ? null : castunitid.trim());
			// nneedinassistnum :
			Object nneedinassistnum = rs.getObject(20);
			generalB.setNneedinassistnum(nneedinassistnum == null ? null : new UFDouble(nneedinassistnum.toString()));
			// ninnum :
			Object ninnum = rs.getObject(21);
			generalB.setNinnum(ninnum == null ? null : new UFDouble(ninnum.toString()));
			// ninassistnum :
			Object ninassistnum = rs.getObject(22);
			generalB.setNinassistnum(ninassistnum == null ? null : new UFDouble(ninassistnum.toString()));
			// ntranoutnum :
			Object ntranoutnum = rs.getObject(23);
			generalB.setNtranoutnum(ntranoutnum == null ? null : new UFDouble(ntranoutnum.toString()));
			// nprice :
			Object nprice = rs.getObject(24);
			generalB.setNprice(nprice == null ? null : new UFDouble(nprice.toString()));
			// nmny :
			Object nmny = rs.getObject(25);
			generalB.setNmny(nmny == null ? null : new UFDouble(nmny.toString()));
			// nplannedprice :
			Object nplannedprice = rs.getObject(26);
			generalB.setNplannedprice(nplannedprice == null ? null : new UFDouble(nplannedprice.toString()));
			// nplannedmny :
			Object nplannedmny = rs.getObject(27);
			generalB.setNplannedmny(nplannedmny == null ? null : new UFDouble(nplannedmny.toString()));
			// csourcebillhid :
			String csourcebillhid = rs.getString(28);
			generalB.setCsourcebillhid(csourcebillhid == null ? null : csourcebillhid.trim());
			// csourcebillbid :
			String csourcebillbid = rs.getString(29);
			generalB.setCsourcebillbid(csourcebillbid == null ? null : csourcebillbid.trim());
			// csourcetype :
			String csourcetype = rs.getString(30);
			generalB.setCsourcetype(csourcetype == null ? null : csourcetype.trim());
			// vsourcebillcode :
			String vsourcebillcode = rs.getString(31);
			generalB.setVsourcebillcode(vsourcebillcode == null ? null : vsourcebillcode.trim());
			// fchecked :
			Integer fchecked = (Integer) rs.getObject(32);
			generalB.setFchecked(fchecked == null ? null : fchecked);
			// cprojectid :
			String cprojectid = rs.getString(33);
			generalB.setCprojectid(cprojectid == null ? null : cprojectid.trim());
			// ccostobject :
			String ccostobject = rs.getString(34);
			generalB.setCcostobject(ccostobject == null ? null : ccostobject.trim());
			// ccorrespondbid :
			String ccorrespondbid = rs.getString(35);
			generalB.setCcorrespondbid(ccorrespondbid == null ? null : ccorrespondbid.trim());
			// ccorrespondhid :
			String ccorrespondhid = rs.getString(36);
			generalB.setCcorrespondhid(ccorrespondhid == null ? null : ccorrespondhid.trim());
			// ccorrespondtype :
			String ccorrespondtype = rs.getString(37);
			generalB.setCcorrespondtype(ccorrespondtype == null ? null : ccorrespondtype.trim());
			// ccorrespondcode :
			String ccorrespondcode = rs.getString(38);
			generalB.setCcorrespondcode(ccorrespondcode == null ? null : ccorrespondcode.trim());
			// flargess :
			String flargess = rs.getString(39);
			generalB.setFlargess(flargess == null ? null : new UFBoolean(flargess.trim()));
			// vuserdef1 :
			String vuserdef1 = rs.getString(40);
			generalB.setVuserdef1(vuserdef1 == null ? null : vuserdef1.trim());
			// vuserdef2 :
			String vuserdef2 = rs.getString(41);
			generalB.setVuserdef2(vuserdef2 == null ? null : vuserdef2.trim());
			// vuserdef3 :
			String vuserdef3 = rs.getString(42);
			generalB.setVuserdef3(vuserdef3 == null ? null : vuserdef3.trim());
			// vuserdef4 :
			String vuserdef4 = rs.getString(43);
			generalB.setVuserdef4(vuserdef4 == null ? null : vuserdef4.trim());
			// vuserdef5 :
			String vuserdef5 = rs.getString(44);
			generalB.setVuserdef5(vuserdef5 == null ? null : vuserdef5.trim());
			// vuserdef6 :
			String vuserdef6 = rs.getString(45);
			generalB.setVuserdef6(vuserdef6 == null ? null : vuserdef6.trim());
			// bzgflag :
			String bzgflag = rs.getString(46);
			generalB.setBzgflag(bzgflag == null ? null : new UFBoolean(bzgflag.trim()));
			// isok :
			String isok = rs.getString(47);
			generalB.setIsok(isok == null ? null : new UFBoolean(isok.trim()));
			// cwp :
			String cwp = rs.getString(48);
			generalB.setCwp(cwp == null ? null : cwp.trim());
			// ts :
			String ts = rs.getString(49);
			generalB.setTs(ts == null ? null : ts.trim());
			// crowno :
			String crowno = rs.getString(50);
			generalB.setCrowno(crowno == null ? null : crowno.trim());
			// bzgyfflag :
			String bzgyfflag = rs.getString(51);
			generalB.setBzgyfflag(bzgyfflag == null ? null : new UFBoolean(bzgyfflag.trim()));
			// pk_invoicecorp :
			String pk_invoicecorp = rs.getString(52);
			generalB.setPk_invoicecorp(pk_invoicecorp == null ? null : pk_invoicecorp.trim());

			if (h.get(cgeneralbid) == null)
				h.put(cgeneralbid, generalB);
		}

	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockBody", new Object[] { sBodyKey });
	/*************************************************************/

	ArrayList list = new ArrayList();
	for (int i = 0; i < sBodyKey.length; i++) {
		GeneralHItemVO bodyVO = null;
		Object oTemp = h.get(sBodyKey[i]);
		if (oTemp != null)
			bodyVO = (GeneralHItemVO) oTemp;
		list.add(new GeneralHItemVO[] { bodyVO });
	}
	return list;
}

/**
 * 功能描述:查询入库单表体。服务于存货核算。
 * 输入参数:String[],入库单表体ID[]
 * 返回值:GeneralHItemVO[]，入库单表体VO[]
 * 异常处理:SQLException
 * 作者：熊海情
 * 修改：2004-05-27 晁志平 FOR　V30　向存货核算传递换算率
 */
public GeneralHItemVO[] queryStockBodyForIA(String keys[]) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockBodyForIA", new Object[] { keys });
	/*************************************************************/

	String sql = "select cgeneralbid, cgeneralhid, cinventoryid, vbatchcode, vfree1, vfree2, vfree3, vfree4, vfree5,";
	sql += " castunitid, ninassistnum, nplannedprice, nplannedmny, csourcebillhid, csourcebillbid, csourcetype,";
	sql += " vsourcebillcode, cprojectid, bzgflag, cfirsttype, cfirstbillhid, cfirstbillbid, cprojectphaseid,";
	sql += " vuserdef1, vuserdef2, vuserdef3, vuserdef4, vuserdef5, vuserdef6, flargess, dbizdate, crowno, hsl,";
	sql += " vuserdef7, vuserdef8, vuserdef9, vuserdef10, vuserdef11, vuserdef12, vuserdef13, vuserdef14, vuserdef15, vuserdef16, vuserdef17, vuserdef18, vuserdef19, vuserdef20,";
	sql += " pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10,";
	sql += " pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20, cvendorid, pk_corp";	
	sql += " from ic_general_b ";
	sql += " where dr = 0 and cgeneralbid in ";

	Vector vTemp = new Vector();
	vTemp.addElement(keys[0]);
	for (int i = 1; i < keys.length; i++) {
		if (!vTemp.contains(keys[i]))
			vTemp.addElement(keys[i]);
	}

	String sTemp[] = new String[vTemp.size()];
	vTemp.copyInto(sTemp);
	//临时表
	try {
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU31, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	/*
		sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
		for(int i = 0; i < sTemp.length - 1; i++) sql += " cgeneralbid in " + sTemp[i] + " or ";
		sql += " cgeneralbid in " + sTemp[sTemp.length - 1] + ")";
	*/
	//按行号排序
	sql += " order by cgeneralhid, crowno";

	Hashtable t = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			GeneralHItemVO generalB = new GeneralHItemVO();
			// cgeneralbid :
			String cgeneralbid = rs.getString(1);
			generalB.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
			// cgeneralhid :
			String cgeneralhid = rs.getString(2);
			generalB.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
			// cmangid :
			String cmangid = rs.getString(3);
			generalB.setCinventoryid(cmangid == null ? null : cmangid.trim());
			// vbatchcode :
			String vbatchcode = rs.getString(4);
			generalB.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
			// vfree1 :
			String vfree1 = rs.getString(5);
			generalB.setVfree1(vfree1 == null ? null : vfree1.trim());
			// vfree2 :
			String vfree2 = rs.getString(6);
			generalB.setVfree2(vfree2 == null ? null : vfree2.trim());
			// vfree3 :
			String vfree3 = rs.getString(7);
			generalB.setVfree3(vfree3 == null ? null : vfree3.trim());
			// vfree4 :
			String vfree4 = rs.getString(8);
			generalB.setVfree4(vfree4 == null ? null : vfree4.trim());
			// vfree5 :
			String vfree5 = rs.getString(9);
			generalB.setVfree5(vfree5 == null ? null : vfree5.trim());
			// castunitid :
			String castunitid = rs.getString(10);
			generalB.setCastunitid(castunitid == null ? null : castunitid.trim());
			// ninassistnum :
			Object ninassistnum = rs.getObject(11);
			generalB.setNinassistnum(ninassistnum == null ? new UFDouble(0.0) : new UFDouble(ninassistnum.toString()));
			// nplannedprice :
			Object nplannedprice = rs.getObject(12);
			generalB.setNplannedprice(nplannedprice == null ? new UFDouble(0.0) : new UFDouble(nplannedprice.toString()));
			// nplannedmny :
			Object nplannedmny = rs.getObject(13);
			generalB.setNplannedmny(nplannedmny == null ? new UFDouble(0.0) : new UFDouble(nplannedmny.toString()));
			// csourcebillhid :
			String csourcebillhid = rs.getString(14);
			generalB.setCsourcebillhid(csourcebillhid == null ? null : csourcebillhid.trim());
			// csourcebillbid :
			String csourcebillbid = rs.getString(15);
			generalB.setCsourcebillbid(csourcebillbid == null ? null : csourcebillbid.trim());
			// csourcetype :
			String csourcetype = rs.getString(16);
			generalB.setCsourcetype(csourcetype == null ? null : csourcetype.trim());
			// vsourcebillcode :
			String vsourcebillcode = rs.getString(17);
			generalB.setVsourcebillcode(vsourcebillcode == null ? null : vsourcebillcode.trim());
			// cprojectid :
			String cprojectid = rs.getString(18);
			generalB.setCprojectid(cprojectid == null ? null : cprojectid.trim());
			// bzgflag :
			String bzgflag = rs.getString(19);
			generalB.setBzgflag(bzgflag == null ? null : new UFBoolean(bzgflag.trim()));
			// cfirsttype :
			String cfirsttype = rs.getString(20);
			generalB.setCfirsttype(cfirsttype == null ? null : cfirsttype.trim());
			// cfirstbillhid :
			String cfirstbillhid = rs.getString(21);
			generalB.setCfirstbillhid(cfirstbillhid == null ? null : cfirstbillhid.trim());
			// cfirstbillbid :
			String cfirstbillbid = rs.getString(22);
			generalB.setCfirstbillbid(cfirstbillbid == null ? null : cfirstbillbid.trim());
			// cprojectphaseid :
			String cprojectphaseid = rs.getString(23);
			generalB.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());
			// vuserdef1 :
			String vuserdef1 = rs.getString(24);
			generalB.setVuserdef1(vuserdef1 == null ? null : vuserdef1.trim());
			// vuserdef2 :
			String vuserdef2 = rs.getString(25);
			generalB.setVuserdef2(vuserdef2 == null ? null : vuserdef2.trim());
			// vuserdef3 :
			String vuserdef3 = rs.getString(26);
			generalB.setVuserdef3(vuserdef3 == null ? null : vuserdef3.trim());
			// vuserdef4 :
			String vuserdef4 = rs.getString(27);
			generalB.setVuserdef4(vuserdef4 == null ? null : vuserdef4.trim());
			// vuserdef5 :
			String vuserdef5 = rs.getString(28);
			generalB.setVuserdef5(vuserdef5 == null ? null : vuserdef5.trim());
			// vuserdef6 :
			String vuserdef6 = rs.getString(29);
			generalB.setVuserdef6(vuserdef6 == null ? null : vuserdef6.trim());
			// flargess :
			String flargess = rs.getString(30);
			generalB.setFlargess(flargess == null ? new UFBoolean(false) : new UFBoolean(flargess.trim()));
			//dbizdate
			String dbizdate = rs.getString(31);
			generalB.setDbizdate(dbizdate == null ? null : new UFDate(dbizdate.trim(), false));
			// crowno :
			String strTmp = rs.getString(32);
			generalB.setCrowno(strTmp);
			// hsl :
			Object oTmp = rs.getObject(33);
			generalB.setHsl(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));

			// vuserdef7 :
			String vuserdef7 = rs.getString(34);
			generalB.setVuserdef7(vuserdef7 == null ? null : vuserdef7.trim());
			// vuserdef8 :
			String vuserdef8 = rs.getString(35);
			generalB.setVuserdef8(vuserdef8 == null ? null : vuserdef8.trim());
			// vuserdef9 :
			String vuserdef9 = rs.getString(36);
			generalB.setVuserdef9(vuserdef9 == null ? null : vuserdef9.trim());
			// vuserdef10 :
			String vuserdef10 = rs.getString(37);
			generalB.setVuserdef10(vuserdef10 == null ? null : vuserdef10.trim());

			// vuserdef11 :
			String vuserdef11 = rs.getString(38);
			generalB.setVuserdef11(vuserdef11 == null ? null : vuserdef11.trim());
			// vuserdef12 :
			String vuserdef12 = rs.getString(39);
			generalB.setVuserdef12(vuserdef12 == null ? null : vuserdef12.trim());
			// vuserdef13 :
			String vuserdef13 = rs.getString(40);
			generalB.setVuserdef13(vuserdef13 == null ? null : vuserdef13.trim());
			// vuserdef14 :
			String vuserdef14 = rs.getString(41);
			generalB.setVuserdef14(vuserdef14 == null ? null : vuserdef14.trim());
			// vuserdef15 :
			String vuserdef15 = rs.getString(42);
			generalB.setVuserdef15(vuserdef15 == null ? null : vuserdef15.trim());
			// vuserdef16 :
			String vuserdef16 = rs.getString(43);
			generalB.setVuserdef16(vuserdef16 == null ? null : vuserdef16.trim());
			// vuserdef17 :
			String vuserdef17 = rs.getString(44);
			generalB.setVuserdef17(vuserdef17 == null ? null : vuserdef17.trim());
			// vuserdef18 :
			String vuserdef18 = rs.getString(45);
			generalB.setVuserdef18(vuserdef18 == null ? null : vuserdef18.trim());
			// vuserdef19 :
			String vuserdef19 = rs.getString(46);
			generalB.setVuserdef19(vuserdef19 == null ? null : vuserdef19.trim());
			// vuserdef20 :
			String vuserdef20 = rs.getString(47);
			generalB.setVuserdef20(vuserdef20 == null ? null : vuserdef20.trim());
			
			// pk_defdoc1 :
			String pk_defdoc1 = rs.getString(48);
			generalB.setPk_defdoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
			// pk_defdoc2 :
			String pk_defdoc2 = rs.getString(49);
			generalB.setPk_defdoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
			// pk_defdoc3 :
			String pk_defdoc3 = rs.getString(50);
			generalB.setPk_defdoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
			// pk_defdoc4 :
			String pk_defdoc4 = rs.getString(51);
			generalB.setPk_defdoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
			// pk_defdoc5 :
			String pk_defdoc5 = rs.getString(52);
			generalB.setPk_defdoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
			// pk_defdoc6 :
			String pk_defdoc6 = rs.getString(53);
			generalB.setPk_defdoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
			// pk_defdoc7 :
			String pk_defdoc7 = rs.getString(54);
			generalB.setPk_defdoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
			// pk_defdoc8 :
			String pk_defdoc8 = rs.getString(55);
			generalB.setPk_defdoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
			// pk_defdoc9 :
			String pk_defdoc9 = rs.getString(56);
			generalB.setPk_defdoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
			// pk_defdoc10 :
			String pk_defdoc10 = rs.getString(57);
			generalB.setPk_defdoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());

			// pk_defdoc11 :
			String pk_defdoc11 = rs.getString(58);
			generalB.setPk_defdoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
			// pk_defdoc12 :
			String pk_defdoc12 = rs.getString(59);
			generalB.setPk_defdoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
			// pk_defdoc13 :
			String pk_defdoc13 = rs.getString(60);
			generalB.setPk_defdoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
			// pk_defdoc14 :
			String pk_defdoc14 = rs.getString(61);
			generalB.setPk_defdoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
			// pk_defdoc15 :
			String pk_defdoc15 = rs.getString(62);
			generalB.setPk_defdoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
			// pk_defdoc16 :
			String pk_defdoc16 = rs.getString(63);
			generalB.setPk_defdoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
			// pk_defdoc17 :
			String pk_defdoc17 = rs.getString(64);
			generalB.setPk_defdoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
			// pk_defdoc18 :
			String pk_defdoc18 = rs.getString(65);
			generalB.setPk_defdoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
			// pk_defdoc19 :
			String pk_defdoc19 = rs.getString(66);
			generalB.setPk_defdoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
			// pk_defdoc20 :
			String pk_defdoc20 = rs.getString(67);
			generalB.setPk_defdoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());

			String cvendorid = rs.getString(68);
			generalB.setCvendorid(cvendorid == null ? null : cvendorid.trim());
			String pk_corp = rs.getString(69);
			generalB.setPk_corp(pk_corp == null ? null : pk_corp.trim());

			if (t.get(cgeneralbid) == null)
				t.put(cgeneralbid, generalB);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockBodyForIA", new Object[] { keys });
	/*************************************************************/
	Vector v = new Vector();
	for (int i = 0; i < keys.length; i++) {
		GeneralHItemVO bodyVO = new GeneralHItemVO();
		Object oTemp = t.get(keys[i]);
		if (oTemp != null)
			bodyVO = (GeneralHItemVO) oTemp;
		v.addElement(bodyVO);
	}
	if (v.size() > 0) {
		GeneralHItemVO bodyVO[] = new GeneralHItemVO[v.size()];
		v.copyInto(bodyVO);
		return bodyVO;
	}
	return null;

}

/**
 * 功能描述:查询期初暂估入库单表体
 * 输入参数:String, 查询条件串
 * 返回值:GeneralHItemVO[] ， 入库单表体VO
 * 异常处理:SQLException
 * 作者：熊海情
 * 修改：晁志平 2004-06-01 增加到货计划行ID属性
 */
public GeneralHItemVO[] queryStockBodyForInitial(String sCondition) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockBodyForInitial", new Object[]{sCondition});
	/*************************************************************/

	String sql ="select cgeneralbid, cgeneralhid, cinventoryid, vbatchcode, vfree1, vfree2, vfree3, vfree4, vfree5, dvalidate, dbizdate, dstandbydate, vproductbatch, nshouldoutnum, nshouldoutassistnum, noutnum, noutassistnum, nshouldinnum, castunitid, nneedinassistnum, ninnum, ninassistnum, ntranoutnum, nprice, nmny, nplannedprice, nplannedmny, csourcebillhid, csourcebillbid, csourcetype, vsourcebillcode, fchecked, cprojectid, ccostobject, ccorrespondbid, ccorrespondhid, ccorrespondtype, ccorrespondcode, flargess, vuserdef1, vuserdef2, vuserdef3, vuserdef4, vuserdef5, vuserdef6, bzgflag, isok, cwp, ts, crowno, corder_bb1id, dzgdate,";
	sql += " bzgyfflag, pk_reqcorp, pk_invoicecorp, pk_reqstoorg, pk_creqwareid from ic_general_b ";
	sql += sCondition;

	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	Vector v = new Vector();
	try {
		con = getConnection();

		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			GeneralHItemVO generalB = new GeneralHItemVO();
			// cgeneralbid :
			String cgeneralbid = rs.getString(1);
			generalB.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
			// cgeneralhid :
			String cgeneralhid = rs.getString(2);
			generalB.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
			// cmangid :
			String cmangid = rs.getString(3);
			generalB.setCinventoryid(cmangid == null ? null : cmangid.trim());
			// vbatchcode :
			String vbatchcode = rs.getString(4);
			generalB.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
			// vfree1 :
			String vfree1 = rs.getString(5);
			generalB.setVfree1(vfree1 == null ? null : vfree1.trim());
			// vfree2 :
			String vfree2 = rs.getString(6);
			generalB.setVfree2(vfree2 == null ? null : vfree2.trim());
			// vfree3 :
			String vfree3 = rs.getString(7);
			generalB.setVfree3(vfree3 == null ? null : vfree3.trim());
			// vfree4 :
			String vfree4 = rs.getString(8);
			generalB.setVfree4(vfree4 == null ? null : vfree4.trim());
			// vfree5 :
			String vfree5 = rs.getString(9);
			generalB.setVfree5(vfree5 == null ? null : vfree5.trim());
			// dvalidate :
			String dvalidate = rs.getString(10);
			generalB.setDvalidate(dvalidate == null ? null : new UFDate(dvalidate.trim(),false));
			// dbizdate :
			String dbizdate = rs.getString(11);
			generalB.setDbizdate(dbizdate == null ? null : new UFDate(dbizdate.trim(),false));
			// dstandbydate :
			String dstandbydate = rs.getString(12);
			generalB.setDstandbydate(dstandbydate == null ? null : new UFDate(dstandbydate.trim(),false));
			// vproductbatch :
			String vproductbatch = rs.getString(13);
			generalB.setVproductbatch(vproductbatch == null ? null : vproductbatch.trim());
			// nshouldoutnum :
			Object nshouldoutnum = rs.getObject(14);
			generalB.setNshouldoutnum(nshouldoutnum == null ? new UFDouble(0.0) : new UFDouble(nshouldoutnum.toString()));
			// nshouldoutassistnum :
			Object nshouldoutassistnum = rs.getObject(15);
			generalB.setNshouldoutassistnum(nshouldoutassistnum == null ? new UFDouble(0.0) : new UFDouble(nshouldoutassistnum.toString()));
			// noutnum :
			Object noutnum = rs.getObject(16);
			generalB.setNoutnum(noutnum == null ? new UFDouble(0.0) : new UFDouble(noutnum.toString()));
			// noutassistnum :
			Object noutassistnum = rs.getObject(17);
			generalB.setNoutassistnum(noutassistnum == null ? new UFDouble(0.0) : new UFDouble(noutassistnum.toString()));
			// nshouldinnum :
			Object nshouldinnum = rs.getObject(18);
			generalB.setNshouldinnum(nshouldinnum == null ? new UFDouble(0.0) : new UFDouble(nshouldinnum.toString()));
			// castunitid :
			String castunitid = rs.getString(19);
			generalB.setCastunitid(castunitid == null ? null : castunitid.trim());
			// nneedinassistnum :
			Object nneedinassistnum = rs.getObject(20);
			generalB.setNneedinassistnum(nneedinassistnum == null ? new UFDouble(0.0) : new UFDouble(nneedinassistnum.toString()));
			// ninnum :
			Object ninnum = rs.getObject(21);
			generalB.setNinnum(ninnum == null ? new UFDouble(0.0) : new UFDouble(ninnum.toString()));
			// ninassistnum :
			Object ninassistnum = rs.getObject(22);
			generalB.setNinassistnum(ninassistnum == null ? new UFDouble(0.0) : new UFDouble(ninassistnum.toString()));
			// ntranoutnum :
			Object ntranoutnum = rs.getObject(23);
			generalB.setNtranoutnum(ntranoutnum == null ? new UFDouble(0.0) : new UFDouble(ntranoutnum.toString()));
			// nprice :
			Object nprice = rs.getObject(24);
			generalB.setNprice(nprice == null ? new UFDouble(0.0) : new UFDouble(nprice.toString()));
			// nmny :
			Object nmny = rs.getObject(25);
			generalB.setNmny(nmny == null ? new UFDouble(0.0) : new UFDouble(nmny.toString()));
			// nplannedprice :
			Object nplannedprice = rs.getObject(26);
			generalB.setNplannedprice(nplannedprice == null ? new UFDouble(0.0) : new UFDouble(nplannedprice.toString()));
			// nplannedmny :
			Object nplannedmny = rs.getObject(27);
			generalB.setNplannedmny(nplannedmny == null ? new UFDouble(0.0) : new UFDouble(nplannedmny.toString()));
			// csourcebillhid :
			String csourcebillhid = rs.getString(28);
			generalB.setCsourcebillhid(csourcebillhid == null ? null : csourcebillhid.trim());
			// csourcebillbid :
			String csourcebillbid = rs.getString(29);
			generalB.setCsourcebillbid(csourcebillbid == null ? null : csourcebillbid.trim());
			// csourcetype :
			String csourcetype = rs.getString(30);
			generalB.setCsourcetype(csourcetype == null ? null : csourcetype.trim());
			// vsourcebillcode :
			String vsourcebillcode = rs.getString(31);
			generalB.setVsourcebillcode(vsourcebillcode == null ? null : vsourcebillcode.trim());
			// fchecked :
			Integer fchecked = (Integer)rs.getObject(32);
			generalB.setFchecked(fchecked == null ? null : fchecked);
			// cprojectid :
			String cprojectid = rs.getString(33);
			generalB.setCprojectid(cprojectid == null ? null : cprojectid.trim());
			// ccostobject :
			String ccostobject = rs.getString(34);
			generalB.setCcostobject(ccostobject == null ? null : ccostobject.trim());
			// ccorrespondbid :
			String ccorrespondbid = rs.getString(35);
			generalB.setCcorrespondbid(ccorrespondbid == null ? null : ccorrespondbid.trim());
			// ccorrespondhid :
			String ccorrespondhid = rs.getString(36);
			generalB.setCcorrespondhid(ccorrespondhid == null ? null : ccorrespondhid.trim());
			// ccorrespondtype :
			String ccorrespondtype = rs.getString(37);
			generalB.setCcorrespondtype(ccorrespondtype == null ? null : ccorrespondtype.trim());
			// ccorrespondcode :
			String ccorrespondcode = rs.getString(38);
			generalB.setCcorrespondcode(ccorrespondcode == null ? null : ccorrespondcode.trim());
			// flargess :
			String flargess = rs.getString(39);
			generalB.setFlargess(flargess == null ? null : new UFBoolean(flargess.trim()));
			// vuserdef1 :
			String vuserdef1 = rs.getString(40);
			generalB.setVuserdef1(vuserdef1 == null ? null : vuserdef1.trim());
			// vuserdef2 :
			String vuserdef2 = rs.getString(41);
			generalB.setVuserdef2(vuserdef2 == null ? null : vuserdef2.trim());
			// vuserdef3 :
			String vuserdef3 = rs.getString(42);
			generalB.setVuserdef3(vuserdef3 == null ? null : vuserdef3.trim());
			// vuserdef4 :
			String vuserdef4 = rs.getString(43);
			generalB.setVuserdef4(vuserdef4 == null ? null : vuserdef4.trim());
			// vuserdef5 :
			String vuserdef5 = rs.getString(44);
			generalB.setVuserdef5(vuserdef5 == null ? null : vuserdef5.trim());
			// vuserdef6 :
			String vuserdef6 = rs.getString(45);
			generalB.setVuserdef6(vuserdef6 == null ? null : vuserdef6.trim());
			// bzgflag :
			String bzgflag = rs.getString(46);
			generalB.setBzgflag(bzgflag == null ? null : new UFBoolean(bzgflag.trim()));
			// isok :
			String isok = rs.getString(47);
			generalB.setIsok(isok == null ? null : new UFBoolean(isok.trim()));
			// cwp :
			String cwp = rs.getString(48);
			generalB.setCwp(cwp == null ? null : cwp.trim());
			// ts :
			String ts = rs.getString(49);
			generalB.setTs(ts == null ? null : ts.trim());
			// crowno :
			String crowno = rs.getString(50);
			generalB.setCrowno(crowno == null ? null : crowno.trim());
			// corder_bb1id :
			String corder_bb1id = rs.getString(51);
			generalB.setCorder_bb1id(corder_bb1id == null ? null : corder_bb1id.trim());
			// dbizdate :
			String dzgdate = rs.getString(52);
			generalB.setDzgdate(dzgdate == null ? null : new UFDate(dzgdate.trim(),false));
			// temp :
			String temp = rs.getString(53);
			generalB.setBzgyfflag(temp == null ? new UFBoolean(false) : new UFBoolean(temp));
			// temp :
			temp = rs.getString(54);
			generalB.setPk_reqcorp(temp == null ? null : temp);
			// temp :
			temp = rs.getString(55);
			generalB.setPk_invoicecorp(temp == null ? null : temp);
			// temp :
			temp = rs.getString(56);
			generalB.setPk_reqstoorg(temp == null ? null : temp);
			// temp :
			temp = rs.getString(57);
			generalB.setPk_creqwareid(temp == null ? null : temp);

			v.addElement(generalB);
		}

	}
	finally {
		try {
			if (rs != null) {
				rs.close();
			}
		}catch (Exception e) {}
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockBodyForInitial", new Object[]{sCondition});
	/*************************************************************/

	if(v.size() > 0){
		GeneralHItemVO bodyVO[] = new GeneralHItemVO[v.size()];
		v.copyInto(bodyVO);
		return bodyVO;
	}
	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:查询期初暂估入库单表头
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public GeneralHHeaderVO[] queryStockHead(String unitCode,String sCondition) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockHead", new Object[]{unitCode,sCondition});
	/*************************************************************/

	String sql = "";
	if (unitCode != null) {
		sql = "select distinct A.cgeneralhid, A.pk_corp, cbiztype, cbilltypecode, vbillcode, dbilldate, cwarehouseid, cdispatcherid, ";
		sql += "cdptid, cwhsmanagerid, coperatorid, cregister, dauditdate, cauditorid, daccountdate, A.cinventoryid, ccustomerid, ";
		sql += "vdiliveraddress, cdilivertypeid, cwastewarehouseid, cbizid, cproviderid, vnote, fbillflag, fspecialflag, ";
		sql += "A.vuserdef1, A.vuserdef2, A.vuserdef3, A.vuserdef4, A.vuserdef5, A.vuserdef6, A.ts, A.pk_purcorp ";
		sql += "from ic_general_h A, ic_general_b B where A.pk_corp = ? and A.dr = 0 and B.dr = 0 and upper(cbilltypecode) = '4T' and A.cgeneralhid = B.cgeneralhid";
	}
	else {
		sql = "select distinct A.cgeneralhid, A.pk_corp, cbiztype, cbilltypecode, vbillcode, dbilldate, cwarehouseid, cdispatcherid, ";
		sql += "cdptid, cwhsmanagerid, coperatorid, cregister, dauditdate, cauditorid, daccountdate, A.cinventoryid, ccustomerid, ";
		sql += "vdiliveraddress, cdilivertypeid, cwastewarehouseid, cbizid, cproviderid, vnote, fbillflag, fspecialflag, ";
		sql += "A.vuserdef1, A.vuserdef2, A.vuserdef3, A.vuserdef4, A.vuserdef5, A.vuserdef6, A.ts, A.pk_purcorp ";
		sql += "from ic_general_h A, ic_general_b B where A.dr = 0 and B.dr = 0 and upper(cbilltypecode) = '4T' and A.cgeneralhid = B.cgeneralhid";
	}
	sql+=sCondition;

	GeneralHHeaderVO generalHs[] = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		if (unitCode != null) {
			stmt.setString(1, unitCode);
		}
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			GeneralHHeaderVO generalH = new GeneralHHeaderVO();
			// cgeneralhid :
			String cgeneralhid = rs.getString(1);
			generalH.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			generalH.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// cbiztype :
			String cbiztype = rs.getString(3);
			generalH.setCbiztype(cbiztype == null ? null : cbiztype.trim());
			// cbilltypecode :
			String cbilltypecode = rs.getString(4);
			generalH.setCbilltypecode(cbilltypecode == null ? null : cbilltypecode.trim());
			// vbillcode :
			String vbillcode = rs.getString(5);
			generalH.setVbillcode(vbillcode == null ? null : vbillcode.trim());
			// dbilldate :
			String dbilldate = rs.getString(6);
			generalH.setDbilldate(dbilldate == null ? null : new UFDate(dbilldate.trim(),false));
			// cwarehouseid :
			String cwarehouseid = rs.getString(7);
			generalH.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
			// cdispatcherid :
			String cdispatcherid = rs.getString(8);
			generalH.setCdispatcherid(cdispatcherid == null ? null : cdispatcherid.trim());
			// cdptid :
			String cdptid = rs.getString(9);
			generalH.setCdptid(cdptid == null ? null : cdptid.trim());
			// cwhsmanagerid :
			String cwhsmanagerid = rs.getString(10);
			generalH.setCwhsmanagerid(cwhsmanagerid == null ? null : cwhsmanagerid.trim());
			// coperatorid :
			String coperatorid = rs.getString(11);
			generalH.setCoperatorid(coperatorid == null ? null : coperatorid.trim());
			// cregister :
			String cregister = rs.getString(12);
			generalH.setCregister(cregister == null ? null : cregister.trim());
			// dauditdate :
			String dauditdate = rs.getString(13);
			generalH.setDauditdate(dauditdate == null ? null : new UFDate(dauditdate.trim(),false));
			// cauditorid :
			String cauditorid = rs.getString(14);
			generalH.setCauditorid(cauditorid == null ? null : cauditorid.trim());
			// daccountdate :
			String daccountdate = rs.getString(15);
			generalH.setDaccountdate(daccountdate == null ? null : new UFDate(daccountdate.trim(),false));
			// cmangid :
			String cmangid = rs.getString(16);
			generalH.setCinventoryid(cmangid == null ? null : cmangid.trim());
			// ccustomerid :
			String ccustomerid = rs.getString(17);
			generalH.setCcustomerid(ccustomerid == null ? null : ccustomerid.trim());
			// vdiliveraddress :
			String vdiliveraddress = rs.getString(18);
			generalH.setVdiliveraddress(vdiliveraddress == null ? null : vdiliveraddress.trim());
			// cdilivertypeid :
			String cdilivertypeid = rs.getString(19);
			generalH.setCdilivertypeid(cdilivertypeid == null ? null : cdilivertypeid.trim());
			// cwastewarehouseid :
			String cwastewarehouseid = rs.getString(20);
			generalH.setCwastewarehouseid(cwastewarehouseid == null ? null : cwastewarehouseid.trim());
			// cbizid :
			String cbizid = rs.getString(21);
			generalH.setCbizid(cbizid == null ? null : cbizid.trim());
			// cproviderid :
			String cproviderid = rs.getString(22);
			generalH.setCproviderid(cproviderid == null ? null : cproviderid.trim());
			// vnote :
			String vnote = rs.getString(23);
			generalH.setVnote(vnote == null ? null : vnote.trim());
			// fbillflag :
			Integer fbillflag = (Integer)rs.getObject(24);
			generalH.setFbillflag(fbillflag == null ? null : fbillflag);
			// fspecialflag :
			Integer fspecialflag = (Integer)rs.getObject(25);
			generalH.setFspecialflag(fspecialflag == null ? null : fspecialflag);
			// vuserdef1 :
			String vuserdef1 = rs.getString(26);
			generalH.setVuserdef1(vuserdef1 == null ? null : vuserdef1.trim());
			// vuserdef2 :
			String vuserdef2 = rs.getString(27);
			generalH.setVuserdef2(vuserdef2 == null ? null : vuserdef2.trim());
			// vuserdef3 :
			String vuserdef3 = rs.getString(28);
			generalH.setVuserdef3(vuserdef3 == null ? null : vuserdef3.trim());
			// vuserdef4 :
			String vuserdef4 = rs.getString(29);
			generalH.setVuserdef4(vuserdef4 == null ? null : vuserdef4.trim());
			// vuserdef5 :
			String vuserdef5 = rs.getString(30);
			generalH.setVuserdef5(vuserdef5 == null ? null : vuserdef5.trim());
			// vuserdef6 :
			String vuserdef6 = rs.getString(31);
			generalH.setVuserdef6(vuserdef6 == null ? null : vuserdef6.trim());
			// ts :
			String ts = rs.getString(32);
			generalH.setTs(ts == null ? null : ts.trim());
			// pk_purcorp :
			String pk_purcorp = rs.getString(33);
			generalH.setPk_purcorp(pk_purcorp == null ? null : pk_purcorp.trim());

			v.addElement(generalH);
		}

		if(rs != null){
			rs.close();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	generalHs = new GeneralHHeaderVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(generalHs);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockHead", new Object[]{unitCode,sCondition});
	/*************************************************************/

	return generalHs;
}

/**
 * 此处插入方法说明。
 * 功能描述:查询入库单表头。服务于存货核算。
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public GeneralHHeaderVO[] queryStockHeadForIA(String sgeneralhid[]) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockHeadForIA", new Object[] { sgeneralhid });
	/*************************************************************/

	String sql = "select cgeneralhid, A.pk_corp, cbiztype, dbilldate, cwarehouseid, cdptid, cwhsmanagerid, cbizid,";
	sql += " cregister, daccountdate, cdispatcherid, cproviderid, vnote, vuserdef1, vuserdef2, vuserdef3, vuserdef4,";
	sql += " vuserdef5, vuserdef6, vbillcode, cbilltypecode, vuserdef7, vuserdef8, vuserdef9, vuserdef10, ";
	sql += " vuserdef11, vuserdef12, vuserdef13, vuserdef14, vuserdef15, vuserdef16, vuserdef17, vuserdef18, vuserdef19, vuserdef20, ";
	sql += "pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, ";
	sql += "pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20, A.pk_calbody, iscalculatedinvcost ";	
	sql += " from ic_general_h A,bd_stordoc B";
	sql += " where A.dr = 0 and cwarehouseid = pk_stordoc and cgeneralhid in ";

	Vector vTemp = new Vector();
	vTemp.addElement(sgeneralhid[0]);
	for (int i = 1; i < sgeneralhid.length; i++) {
		if (!vTemp.contains(sgeneralhid[i]))
			vTemp.addElement(sgeneralhid[i]);
	}

	String sTemp[] = new String[vTemp.size()];
	vTemp.copyInto(sTemp);
	//临时表
	try {
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU32, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	/*
		sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
		for(int i = 0; i < sTemp.length - 1; i++) sql += " cgeneralhid in " + sTemp[i] + " or ";
		sql += " cgeneralhid in " + sTemp[sTemp.length - 1] + ")";
	*/
	Hashtable t = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			GeneralHHeaderVO generalH = new GeneralHHeaderVO();
			// cgeneralhid :
			String cgeneralhid = rs.getString(1);
			generalH.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			generalH.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// cbiztype :
			String cbiztype = rs.getString(3);
			generalH.setCbiztype(cbiztype == null ? null : cbiztype.trim());
			// dbilldate :
			String dbilldate = rs.getString(4);
			generalH.setDbilldate(dbilldate == null ? null : new UFDate(dbilldate.trim(), false));
			// cwarehouseid :
			String cwarehouseid = rs.getString(5);
			generalH.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
			// cdptid :
			String cdptid = rs.getString(6);
			generalH.setCdptid(cdptid == null ? null : cdptid.trim());
			// cwhsmanagerid :
			String cwhsmanagerid = rs.getString(7);
			generalH.setCwhsmanagerid(cwhsmanagerid == null ? null : cwhsmanagerid.trim());
			// cbizid :
			String cbizid = rs.getString(8);
			generalH.setCbizid(cbizid);
			generalH.setCoperatorid(cbizid); // 兼容以前　Czp 2004-07-21
			// cregister :
			String cregister = rs.getString(9);
			generalH.setCregister(cregister == null ? null : cregister.trim());
			// daccountdate :
			String daccountdate = rs.getString(10);
			generalH.setDaccountdate(daccountdate == null ? null : new UFDate(daccountdate.trim(), false));
			// cdispatcherid :
			String cdispatcherid = rs.getString(11);
			generalH.setCdispatcherid(cdispatcherid == null ? null : cdispatcherid.trim());
			// cproviderid :
			String cproviderid = rs.getString(12);
			generalH.setCproviderid(cproviderid == null ? null : cproviderid.trim());
			// vnote :
			String vnote = rs.getString(13);
			generalH.setVnote(vnote == null ? null : vnote.trim());
			// vuserdef1 :
			String vuserdef1 = rs.getString(14);
			generalH.setVuserdef1(vuserdef1 == null ? null : vuserdef1.trim());
			// vuserdef2 :
			String vuserdef2 = rs.getString(15);
			generalH.setVuserdef2(vuserdef2 == null ? null : vuserdef2.trim());
			// vuserdef3 :
			String vuserdef3 = rs.getString(16);
			generalH.setVuserdef3(vuserdef3 == null ? null : vuserdef3.trim());
			// vuserdef4 :
			String vuserdef4 = rs.getString(17);
			generalH.setVuserdef4(vuserdef4 == null ? null : vuserdef4.trim());
			// vuserdef5 :
			String vuserdef5 = rs.getString(18);
			generalH.setVuserdef5(vuserdef5 == null ? null : vuserdef5.trim());
			// vuserdef6 :
			String vuserdef6 = rs.getString(19);
			generalH.setVuserdef6(vuserdef6 == null ? null : vuserdef6.trim());
			// vbillcode :
			String vbillcode = rs.getString(20);
			generalH.setVbillcode(vbillcode == null ? null : vbillcode.trim());
			// cbilltypecode :
			String cbilltypecode = rs.getString(21);
			generalH.setCbilltypecode(cbilltypecode == null ? null : cbilltypecode.trim());
			// vuserdef7 :
			String vuserdef7 = rs.getString(22);
			generalH.setVuserdef7(vuserdef7 == null ? null : vuserdef7.trim());
			// vuserdef8 :
			String vuserdef8 = rs.getString(23);
			generalH.setVuserdef8(vuserdef8 == null ? null : vuserdef8.trim());
			// vuserdef9 :
			String vuserdef9 = rs.getString(24);
			generalH.setVuserdef9(vuserdef9 == null ? null : vuserdef9.trim());
			// vuserdef10 :
			String vuserdef10 = rs.getString(25);
			generalH.setVuserdef10(vuserdef10 == null ? null : vuserdef10.trim());

			// vuserdef11 :
			String vuserdef11 = rs.getString(26);
			generalH.setVuserdef11(vuserdef11 == null ? null : vuserdef11.trim());
			// vuserdef12 :
			String vuserdef12 = rs.getString(27);
			generalH.setVuserdef12(vuserdef12 == null ? null : vuserdef12.trim());
			// vuserdef13 :
			String vuserdef13 = rs.getString(28);
			generalH.setVuserdef13(vuserdef13 == null ? null : vuserdef13.trim());
			// vuserdef14 :
			String vuserdef14 = rs.getString(29);
			generalH.setVuserdef14(vuserdef14 == null ? null : vuserdef14.trim());
			// vuserdef15 :
			String vuserdef15 = rs.getString(30);
			generalH.setVuserdef15(vuserdef15 == null ? null : vuserdef15.trim());
			// vuserdef16 :
			String vuserdef16 = rs.getString(31);
			generalH.setVuserdef16(vuserdef16 == null ? null : vuserdef16.trim());
			// vuserdef17 :
			String vuserdef17 = rs.getString(32);
			generalH.setVuserdef17(vuserdef17 == null ? null : vuserdef17.trim());
			// vuserdef18 :
			String vuserdef18 = rs.getString(33);
			generalH.setVuserdef18(vuserdef18 == null ? null : vuserdef18.trim());
			// vuserdef19 :
			String vuserdef19 = rs.getString(34);
			generalH.setVuserdef19(vuserdef19 == null ? null : vuserdef19.trim());
			// vuserdef20 :
			String vuserdef20 = rs.getString(35);
			generalH.setVuserdef20(vuserdef20 == null ? null : vuserdef20.trim());
			
			// pk_defdoc1 :
			String pk_defdoc1 = rs.getString(36);
			generalH.setPk_defdoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
			// pk_defdoc2 :
			String pk_defdoc2 = rs.getString(37);
			generalH.setPk_defdoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
			// pk_defdoc3 :
			String pk_defdoc3 = rs.getString(38);
			generalH.setPk_defdoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
			// pk_defdoc4 :
			String pk_defdoc4 = rs.getString(39);
			generalH.setPk_defdoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
			// pk_defdoc5 :
			String pk_defdoc5 = rs.getString(40);
			generalH.setPk_defdoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
			// pk_defdoc6 :
			String pk_defdoc6 = rs.getString(41);
			generalH.setPk_defdoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
			// pk_defdoc7 :
			String pk_defdoc7 = rs.getString(42);
			generalH.setPk_defdoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
			// pk_defdoc8 :
			String pk_defdoc8 = rs.getString(43);
			generalH.setPk_defdoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
			// pk_defdoc9 :
			String pk_defdoc9 = rs.getString(44);
			generalH.setPk_defdoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
			// pk_defdoc10 :
			String pk_defdoc10 = rs.getString(45);
			generalH.setPk_defdoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());

			// pk_defdoc11 :
			String pk_defdoc11 = rs.getString(46);
			generalH.setPk_defdoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
			// pk_defdoc12 :
			String pk_defdoc12 = rs.getString(47);
			generalH.setPk_defdoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
			// pk_defdoc13 :
			String pk_defdoc13 = rs.getString(48);
			generalH.setPk_defdoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
			// pk_defdoc14 :
			String pk_defdoc14 = rs.getString(49);
			generalH.setPk_defdoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
			// pk_defdoc15 :
			String pk_defdoc15 = rs.getString(50);
			generalH.setPk_defdoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
			// pk_defdoc16 :
			String pk_defdoc16 = rs.getString(51);
			generalH.setPk_defdoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
			// pk_defdoc17 :
			String pk_defdoc17 = rs.getString(52);
			generalH.setPk_defdoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
			// pk_defdoc18 :
			String pk_defdoc18 = rs.getString(53);
			generalH.setPk_defdoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
			// pk_defdoc19 :
			String pk_defdoc19 = rs.getString(54);
			generalH.setPk_defdoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
			// pk_defdoc20 :
			String pk_defdoc20 = rs.getString(55);
			generalH.setPk_defdoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
			// pk_defdoc20 :
			pk_defdoc20 = rs.getString(56);
			generalH.setCstoreorganization(pk_defdoc20 == null ? null : pk_defdoc20.trim());
      pk_defdoc20 = rs.getString(57);
      generalH.setBcalculatecost(pk_defdoc20 == null ? new UFBoolean(false) : new UFBoolean(pk_defdoc20.trim()));
			
			if (t.get(cgeneralhid) == null)
				t.put(cgeneralhid, generalH);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStockHeadForIA", new Object[] { sgeneralhid });
	/*************************************************************/

	Vector v = new Vector();
	for (int i = 0; i < sgeneralhid.length; i++) {
		GeneralHHeaderVO headVO = new GeneralHHeaderVO();
		Object oTemp = t.get(sgeneralhid[i]);
		if (oTemp != null)
			headVO = (GeneralHHeaderVO) oTemp;
		v.addElement(headVO);
	}
	if (v.size() > 0) {
		GeneralHHeaderVO headVO[] = new GeneralHHeaderVO[v.size()];
		v.copyInto(headVO);
		return headVO;
	}
	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得仓库对应的库存组织ID
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public String[] queryStoreOrgID(String cwarehouseid[]) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStoreOrgID", new Object[] { cwarehouseid });
	/*************************************************************/

	String sql = "select pk_stordoc, pk_calbody from bd_stordoc where dr = 0 and pk_stordoc in ";

	//临时表
	String strSetId = null;
	try {
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(
				cwarehouseid,
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU33,
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	/*
		String sTemp[] = nc.bs.pu.pub.PubDMO.getInSetsByIds(cwarehouseid);
	*/
	if (strSetId == null) {
		return new String[cwarehouseid.length];
	}
	/*
		for (int i = 0; i < sTemp.length - 1; i++)
			sql += " pk_stordoc in " + sTemp[i] + " or ";
		sql += " pk_stordoc in " + sTemp[sTemp.length - 1] + ")";
	*/
	Hashtable t = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			String s1 = rs.getString(1);
			String s2 = rs.getString(2);
			if (s1 != null && s1.trim().length() > 0 && s2 != null && s2.trim().length() > 0)
				t.put(s1, s2);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryStoreOrgID", new Object[] { cwarehouseid });
	/*************************************************************/

	String s[] = new String[cwarehouseid.length];
	for (int i = 0; i < s.length; i++) {
		String s1 = cwarehouseid[i];
		if (s1 != null && s1.trim().length() > 0) {
			Object o = t.get(s1);
			if (o != null)
				s[i] = o.toString();
		}
	}
	return s;
}

/*
 * 获取存货对应的税率
 */
public Hashtable queryInvTaxRate(String cbaseid[]) throws SQLException {

	String sql = "select A.pk_invbasdoc, B.taxratio from bd_invbasdoc A, bd_taxitems B where A.dr = 0 and B.dr = 0";
	sql += " and A.pk_taxitems = B.pk_taxitems and A.pk_invbasdoc in ";

	//临时表
	String strSetId = null;
	try {
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTempTbl.insertTempTable(
				cbaseid,
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU33,
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sql += strSetId;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}

	Hashtable t = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			String s = rs.getString(1);
			Object o = rs.getObject(2);
			if (s != null && s.trim().length() > 0 && o != null && o.toString().trim().length() > 0) t.put(s, o);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	return t;
}
/**
 * 此处插入方法说明。
 * 功能描述:刷新订单查询(不包括费用属性的存货，且订单已审批和入库累计数量不大于订单数量)
 *			若订单被修订,只能查询修订后的订单
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public OorderVO[] refreshOrder(OorderVO orderVOs[]) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "refreshOrder", new Object[]{orderVOs});
	/*************************************************************/

	String sql = "select corder_bid, A.corderid, vordercode, cmangid, cbaseid, nordernum, nmoney, cwarehouseid, A.pk_corp, naccumstorenum, dorderdate, cbiztype, cvendormangid, cvendorbaseid, cdeptid, A.cemployeeid, pk_arrvstoorg, vfree1, vfree2, vfree3, vfree4, vfree5, cprojectid, cprojectphaseid ";
	sql +="from po_order A, po_order_b B, bd_invbasdoc C ";
	sql +="where forderstatus = 3 and iisactive <> 3 and A.dr = 0 and B.dr = 0 and B.corderid = ? and B.corder_bid = ? and A.corderid = B.corderid and cbaseid = pk_invbasdoc and upper(laborflag) = 'N' and upper(discountflag) = 'N' and abs(naccumstorenum) < abs(nordernum)";

	OorderVO orders[] = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;

	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		for(int i=0;i<orderVOs.length;i++){
			stmt.setString(1, orderVOs[i].getCorderid());
			stmt.setString(2, orderVOs[i].getCorder_bid());
			rs = stmt.executeQuery();
		//
			while (rs.next()) {
				OorderVO order = new OorderVO();
				// corder_bid :
				String corder_bid = rs.getString(1);
				order.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
				// corderid :
				String corderid = rs.getString(2);
				order.setCorderid(corderid == null ? null : corderid.trim());
				// vordercode :
				String vordercode = rs.getString(3);
				order.setVordercode(vordercode == null ? null : vordercode.trim());
				// cmangid :
				String cmangid = rs.getString(4);
				order.setCmangid(cmangid == null ? null : cmangid.trim());
				// cbaseid :
				String cbaseid = rs.getString(5);
				order.setCbaseid(cbaseid == null ? null : cbaseid.trim());
				// nordernum :
				Object nordernum = rs.getObject(6);
				order.setNordernum(nordernum == null ? new UFDouble(0.0) : new UFDouble(nordernum.toString()));
				// nmoney :
				Object nmoney = rs.getObject(7);
				order.setNmoney(nmoney == null ? new UFDouble(0.0) : new UFDouble(nmoney.toString()));
				// cwarehouseid :
				String cwarehouseid = rs.getString(8);
				order.setCwarehouseid(cwarehouseid == null ? "" : cwarehouseid.trim());
				// pk_corp :
				String pk_corp = rs.getString(9);
				order.setPk_corp(pk_corp == null ? null : pk_corp.trim());
				// naccumstorenum :
				Object naccumstorenum = rs.getObject(10);
				order.setNaccumstorenum(naccumstorenum == null ? new UFDouble(0.0) : new UFDouble(naccumstorenum.toString()));
				// dorderdate :
				String dorderdate = rs.getString(11);
				order.setDdate(dorderdate == null ? null : new UFDate(dorderdate.trim(),false));
				// cbiztype :
				String cbiztype = rs.getString(12);
				order.setCbiztype(cbiztype == null ? null : cbiztype.trim());
				// cvendormangid :
				String cvendormangid = rs.getString(13);
				order.setCvendormangid(cvendormangid == null ? null : cvendormangid.trim());
				// cvendorbaseid :
				String cvendorbaseid = rs.getString(14);
				order.setCvendorbaseid(cvendorbaseid == null ? null : cvendorbaseid.trim());
				// cdeptid :
				String cdeptid = rs.getString(15);
				order.setCdeptid(cdeptid == null ? "" : cdeptid.trim());
				// cemployeeid :
				String cemployeeid = rs.getString(16);
				order.setCemployeeid(cemployeeid == null ? "" : cemployeeid.trim());
				// cstoreorganization :
				String cstoreorganization = rs.getString(17);
				order.setCstoreorganization(cstoreorganization == null ? "" : cstoreorganization.trim());
				// vfree1 :
				String vfree1 = rs.getString(18);
				order.setVfree1(vfree1 == null ? null : vfree1.trim());
				// vfree2 :
				String vfree2 = rs.getString(19);
				order.setVfree2(vfree2 == null ? null : vfree2.trim());
				// vfree3 :
				String vfree3 = rs.getString(20);
				order.setVfree3(vfree3 == null ? null : vfree3.trim());
				// vfree4 :
				String vfree4 = rs.getString(21);
				order.setVfree4(vfree4 == null ? null : vfree4.trim());
				// vfree5 :
				String vfree5 = rs.getString(22);
				order.setVfree5(vfree5 == null ? null : vfree5.trim());
				// cprojectid :
				String cprojectid = rs.getString(23);
				order.setCprojectid(cprojectid == null ? null : cprojectid.trim());
				// cprojectphaseid :
				String cprojectphaseid = rs.getString(24);
				order.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());

				v.addElement(order);
			}
			if(rs != null) rs.close();
		}
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}
	orders = new OorderVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(orders);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "refreshOrder", new Object[]{orderVOs});
	/*************************************************************/

	return orders;
}

/**
 * 功能描述:按价格方式处理暂估数据
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2003/05/27
 */
public EstimateVO[] replacePriceForEstimate(EstimateVO VOs[], ArrayList paraList) throws SQLException {

	if (VOs == null || VOs.length == 0)
		return VOs;
	String sEstPriceSource = (String)paraList.get(0); 
	int nPriceDecimal = ((Integer)paraList.get(1)).intValue();
	int nMoneyDecimal = ((Integer)paraList.get(2)).intValue();
	String sPricePolicy = (String)paraList.get(3);
	if (sEstPriceSource == null || sEstPriceSource.trim().length() == 0)
		return VOs;

	ArrayList listJHJ = null;
	Vector vMangId = new Vector();
	Vector vCalBId = new Vector();
	Vector vWareId = new Vector();
	int iLen = VOs.length;
	for (int i = 0; i < iLen; i++) {
		vMangId.addElement(VOs[i].getCmangid());
		vCalBId.addElement(VOs[i].getCcalbodyid());
		vWareId.addElement(VOs[i].getCwarehouseid());
	}
	String[] saMangId = new String[iLen];
	vMangId.copyInto(saMangId);
	String[] saCalBId = new String[iLen];
	vCalBId.copyInto(saCalBId);
	String[] saWareId = new String[iLen];
	vWareId.copyInto(saWareId);
	//
	String unitCode = VOs[0].getPk_corp();
	String sql = null;

	//获取参数PO45:计划价存货是否按计划价暂估
	String sPara = "N";
	try{
		ISysInitQry myService = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		SysInitVO initVO = myService.queryByParaCode(unitCode,"PO45");
		if(initVO != null) sPara = initVO.getValue();
	} catch (Exception e) {
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000021")/*@res "获取参数PO45时出现异常，请稍后再试！"*/);
	}
	
	//获取计划价,参考成本和计价方式
	nc.bs.ps.cost.CostanalyseDMO jhjDmo = null;
	try {
		jhjDmo = new nc.bs.ps.cost.CostanalyseDMO();
		if (sEstPriceSource.trim().equals("计划价") || sPara.equals("Y") || sPara.equals("是")) listJHJ = jhjDmo.queryPlanRefCost(VOs[0].getPk_corp(),saMangId, saCalBId, saWareId);
	} catch (Exception e) {
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000020")/*@res "获取计划价时出现异常，请稍后再试！"*/);
	}
	UFDouble nPlanPrice[] = null, nPriceMethod[] = null;
	if(listJHJ != null && listJHJ.size() >= 3){
		nPlanPrice = (UFDouble[]) listJHJ.get(0);
		nPriceMethod = (UFDouble[]) listJHJ.get(2);
	}

	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	if (sEstPriceSource.trim().equals("订单价")){
		try {
			con = getConnection();

			Hashtable t21 = new Hashtable(), t61 = new Hashtable();//key为订单行ID,value为订单数量,订单本币金额,订单本币价税合计
			Vector v21 = new Vector(), v61 = new Vector();
			for(int i = 0; i < iLen; i++){
				if(VOs[i].getCfirsttype() != null && VOs[i].getCfirsttype().equals(ScmConst.PO_Order) && VOs[i].getCfirstbillbid() != null && !v21.contains(VOs[i].getCfirstbillbid())) v21.addElement(VOs[i].getCfirstbillbid());
				if(VOs[i].getCfirsttype() != null && VOs[i].getCfirsttype().equals(ScmConst.SC_Order) && VOs[i].getCfirstbillbid() != null && !v61.contains(VOs[i].getCfirstbillbid())) v61.addElement(VOs[i].getCfirstbillbid());			
			}
			
			if(v21.size() > 0){
				//获取采购订单本币价格
				String sqlsql = "select corder_bid, nordernum, nmoney, ntaxpricemny from po_order_b where dr = 0 and corder_bid in ";
				String sOrderBID[] = new String[v21.size()];
				v21.copyInto(sOrderBID);
				//临时表
				String strSetId = null;
				try {
					nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
					strSetId = dmoTempTbl.insertTempTable(sOrderBID, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
					if (strSetId == null || strSetId.trim().equals("()")) strSetId = " ('ErrorPk') ";
					sqlsql += strSetId;
				} catch (Exception e) {
					throw new SQLException(e.getMessage());
				}

				stmt = con.prepareStatement(sqlsql);
				rs = stmt.executeQuery();
				String s = null;
				Object o1 = null, o2 = null, o3 = null;
				UFDouble d1 = null, d2 = null, d3 = null;
				while(rs.next()){
					s = rs.getString(1);
					o1 = rs.getObject(2);
					o2 = rs.getObject(3);
					o3 = rs.getObject(4);
					if(s != null && o1 != null && o2 != null && o3 != null){
						d1 = new UFDouble(o1.toString());
						d2 = new UFDouble(o2.toString());
						d3 = new UFDouble(o3.toString());
						t21.put(s, new UFDouble[]{d1,d2,d3});
					}
				}
				if(rs != null) rs.close();
				if(stmt != null) stmt.close();
			}
			
			if(v61.size() > 0){
				//获取委外订单本币价格
				String sqlsql = "select corder_bid, nordernum, nmoney, nsummny from sc_order_b where dr = 0 and corder_bid in ";
				String sOrderBID[] = new String[v61.size()];
				v61.copyInto(sOrderBID);
				//临时表
				String strSetId = null;
				try {
					nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
					strSetId = dmoTempTbl.insertTempTable(sOrderBID, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
					if (strSetId == null || strSetId.trim().equals("()")) strSetId = " ('ErrorPk') ";
					sqlsql += strSetId;
				} catch (Exception e) {
					throw new SQLException(e.getMessage());
				}

				stmt = con.prepareStatement(sqlsql);
				rs = stmt.executeQuery();
				String s = null;
				Object o1 = null, o2 = null, o3 = null;
				UFDouble d1 = null, d2 = null, d3 = null;
				while(rs.next()){
					s = rs.getString(1);
					o1 = rs.getObject(2);
					o2 = rs.getObject(3);
					o3 = rs.getObject(4);
					if(s != null && o1 != null && o2 != null && o3 != null){
						d1 = new UFDouble(o1.toString());
						d2 = new UFDouble(o2.toString());
						d3 = new UFDouble(o3.toString());
						t61.put(s, new UFDouble[]{d1,d2,d3});
					}
				}
				if(rs != null) rs.close();
				if(stmt != null) stmt.close();
			}
			
			//设置订单本币价格
			for(int i = 0; i < iLen; i++){
				if(VOs[i].getCfirsttype() != null && VOs[i].getCfirsttype().equals(ScmConst.PO_Order) && VOs[i].getCfirstbillbid() != null && t21.get(VOs[i].getCfirstbillbid()) != null){
          //采购订单
					UFDouble dd[] = (UFDouble[])t21.get(VOs[i].getCfirstbillbid());
					if(VOs[i].getNinnum().equals(dd[0]) && Math.abs(VOs[i].getNinnum().doubleValue()) > 0){							
						//如果入库数量=订单数量,先计算金额,再计算单价
						VOs[i].setBMoney(new UFBoolean(true));
						if(sPricePolicy.equals("无税价格优先")){
							double d = PubDMO.getRoundDouble(nMoneyDecimal,dd[1].doubleValue());
							VOs[i].setNmoney(new UFDouble(d));
							d = d / VOs[i].getNinnum().doubleValue();
							d = PubDMO.getRoundDouble(nPriceDecimal, d);
							VOs[i].setNprice(new UFDouble(d));	
							VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
						}else{
							double d = PubDMO.getRoundDouble(nMoneyDecimal,dd[2].doubleValue());
							VOs[i].setNtotalmoney(new UFDouble(d));
							d = d / VOs[i].getNinnum().doubleValue();
							d = PubDMO.getRoundDouble(nPriceDecimal, d);
							VOs[i].setNtaxprice(new UFDouble(d));	
							VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
						}
					}else if(Math.abs(dd[0].doubleValue()) > 0){							
						//否则,先计算单价,再计算金额
						VOs[i].setBMoney(new UFBoolean(false));
						if(sPricePolicy.equals("无税价格优先")){
							double d = dd[1].doubleValue() / dd[0].doubleValue();
							d = PubDMO.getRoundDouble(nPriceDecimal, d);
							VOs[i].setNprice(new UFDouble(d));
							d = d * VOs[i].getNinnum().doubleValue();
							d = PubDMO.getRoundDouble(nMoneyDecimal, d);
							VOs[i].setNmoney(new UFDouble(d));
							VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
						}else{
							double d = dd[2].doubleValue() / dd[0].doubleValue();
							d = PubDMO.getRoundDouble(nPriceDecimal, d);
							VOs[i].setNtaxprice(new UFDouble(d));
							d = d * VOs[i].getNinnum().doubleValue();
							d = PubDMO.getRoundDouble(nMoneyDecimal, d);
							VOs[i].setNtotalmoney(new UFDouble(d));	
							VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
						}
					}else{
						if(sPricePolicy.equals("无税价格优先")){
							VOs[i].setNprice(new UFDouble(0));
							VOs[i].setNmoney(new UFDouble(0));
							VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
						}else{
							VOs[i].setNtaxprice(new UFDouble(0));
							VOs[i].setNtotalmoney(new UFDouble(0));	
							VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
						}
					}
          
				}else if(VOs[i].getCfirsttype() != null && VOs[i].getCfirsttype().equals(ScmConst.SC_Order) && VOs[i].getCfirstbillbid() != null && t61.get(VOs[i].getCfirstbillbid()) != null){
          //委外订单
          UFDouble dd[] = (UFDouble[])t61.get(VOs[i].getCfirstbillbid());
          if(VOs[i].getNinnum().equals(dd[0]) && Math.abs(VOs[i].getNinnum().doubleValue()) > 0){
            //如果入库数量=订单数量,先计算金额,再计算单价
            VOs[i].setBMoney(new UFBoolean(true));
            if(sPricePolicy.equals("无税价格优先")){
              double d = PubDMO.getRoundDouble(nMoneyDecimal,dd[1].doubleValue());
              VOs[i].setNmoney(new UFDouble(d));
              d = d / VOs[i].getNinnum().doubleValue();
              d = PubDMO.getRoundDouble(nPriceDecimal, d);
              VOs[i].setNprice(new UFDouble(d));
              VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
            }else{
              double d = PubDMO.getRoundDouble(nMoneyDecimal,dd[2].doubleValue());
              VOs[i].setNtotalmoney(new UFDouble(d));
              d = d / VOs[i].getNinnum().doubleValue();
              d = PubDMO.getRoundDouble(nPriceDecimal, d);
              VOs[i].setNtaxprice(new UFDouble(d)); 
              VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
            }
          }else if(Math.abs(dd[0].doubleValue()) > 0){
            //否则,先计算单价,再计算金额
            VOs[i].setBMoney(new UFBoolean(false));
            if(sPricePolicy.equals("无税价格优先")){
              double d = dd[1].doubleValue() / dd[0].doubleValue();
              d = PubDMO.getRoundDouble(nPriceDecimal, d);
              VOs[i].setNprice(new UFDouble(d));
              d = d * VOs[i].getNinnum().doubleValue();
              d = PubDMO.getRoundDouble(nMoneyDecimal, d);
              VOs[i].setNmoney(new UFDouble(d));
              VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
            }else{
              double d = dd[2].doubleValue() / dd[0].doubleValue();
              d = PubDMO.getRoundDouble(nPriceDecimal, d);
              VOs[i].setNtaxprice(new UFDouble(d));
              d = d * VOs[i].getNinnum().doubleValue();
              d = PubDMO.getRoundDouble(nMoneyDecimal, d);
              VOs[i].setNtotalmoney(new UFDouble(d)); 
              VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
            }
          }else{
            if(sPricePolicy.equals("无税价格优先")){
              VOs[i].setNprice(new UFDouble(0));
              VOs[i].setNmoney(new UFDouble(0));  
              VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
            }else{
              VOs[i].setNtaxprice(new UFDouble(0));
              VOs[i].setNtotalmoney(new UFDouble(0)); 
              VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
            }
          } 
          
        }else{
          //自制
					if(sPricePolicy.equals("无税价格优先")){
						VOs[i].setNprice(new UFDouble(0));
						VOs[i].setNmoney(new UFDouble(0));
						VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
					}else{
						VOs[i].setNtaxprice(new UFDouble(0));
						VOs[i].setNtotalmoney(new UFDouble(0));	
						VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
					}
				}
			}
		
		} finally {
			try {
				if (stmt != null) stmt.close();
			} catch (Exception e) {}
			try {
				if (con != null) con.close();
			} catch (Exception e) {}
		}
		
		for (int i = 0; i < iLen; i++) {
			if((sPara.equals("是") || sPara.equals("Y")) && nPlanPrice != null && nPlanPrice.length > 0 && nPlanPrice.length == iLen && nPriceMethod[i] != null && nPriceMethod[i].doubleValue() == 5){
				VOs[i].setNprice(nPlanPrice[i] == null ? new UFDouble(0.0) : nPlanPrice[i]);
				UFDouble nNum = VOs[i].getNinnum();
				if (nNum != null) {
					double d = nNum.doubleValue() * VOs[i].getNprice().doubleValue();
					VOs[i].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
					VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
				}
			}
		}
		return VOs;
	}

	//
	if (sEstPriceSource.trim().equals("计划价")) {
		//控制程序用，不用于查询
		sql = "select 1 from bd_produce where 1<0 ";
		
	} else if (sEstPriceSource.trim().equals("最新进价")) {
			
		try {
			java.util.ArrayList listCorp = new java.util.ArrayList();
			java.util.ArrayList listInv = new java.util.ArrayList();
			java.util.ArrayList listTmp = null;
			for (int i = 0; i < VOs.length; i++) {
				listTmp = new java.util.ArrayList();
				listTmp.add(new Integer(i));
				listTmp.add(VOs[i].getPk_purcorp());
				listCorp.add(listTmp);
				listTmp = new java.util.ArrayList();
				listTmp.add(new Integer(i));
				listTmp.add(VOs[i].getCbaseid());
				listInv.add(listTmp);
			}
			nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
			String strTblNameCorp =
				dmo.getTempStringTable(
					nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU58,
					new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "ccalbodyid" },
					new String[] { "int", "char(20)" },
					nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
					listCorp);
			String strTblNameInv =
				dmo.getTempStringTable(
					nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU59,
					new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "cmangid" },
					new String[] { "int", "char(20)" },
					nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
					listInv);

			sql = "select A.pk_corp, B.cbaseid, B.nmoney, B.nordernum, B.ntaxpricemny, A.dorderdate, B.ts from po_order A, po_order_b B, " + strTblNameCorp + " C, " + strTblNameInv + " D ";
			sql += "where A.dr = 0 and B.dr = 0 and A.corderid = B.corderid and B.iisactive <> 3 and A.pk_corp = C.ccalbodyid and B.cbaseid = D.cmangid ";
			sql += "and C." + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU + " = D." + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU;

		} catch (Exception e) {
			throw new SQLException(e.getMessage());
		}
		sql += " order by A.dorderdate desc, B.ts desc";
		
	}else if (sEstPriceSource.trim().equals("最新结算价")) {			
		//临时表
		String strSetId = null;
		try {
			nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
			strSetId = dmoTempTbl.insertTempTable(saMangId, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
			if (strSetId == null || strSetId.trim().equals("()")) strSetId = " ('ErrorPk') ";
		} catch (Exception e) {
			throw new SQLException(e.getMessage());
		}

		sql = "select B.cmangid, B.nprice, A.dsettledate, B.ts from po_settlebill A, po_settlebill_b B ";
		sql += "where A.dr = 0 and B.dr = 0 and A.csettlebillid = B.csettlebillid and B.nprice is not null and B.cmangid in ";
		sql += strSetId;

		sql += " order by A.dsettledate desc, B.ts desc";
	}

	if (sql == null)
		return VOs;

	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();

		if (sEstPriceSource.trim().equals("计划价") && listJHJ != null && listJHJ.size() > 0) {
			if (nPlanPrice != null && nPlanPrice.length > 0 && nPlanPrice.length == iLen) {
				for (int i = 0; i < iLen; i++) {
					VOs[i].setNprice(new UFDouble(0));
					VOs[i].setNmoney(new UFDouble(0));
					VOs[i].setNprice(nPlanPrice[i] == null ? new UFDouble(0.0) : nPlanPrice[i]);
					UFDouble nNum = VOs[i].getNinnum();
					if (nNum != null) {
						double d = nNum.doubleValue() * VOs[i].getNprice().doubleValue();
						VOs[i].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
						VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
					}
				}
			}
			
		}else if (sEstPriceSource.trim().equals("最新结算价")) {
			//最新结算价
			Hashtable t = new Hashtable();
			while (rs.next()) {
				String s = rs.getString(1);
				Object o = rs.getObject(2);
				if (s != null && s.trim().length() > 0 && o != null && o.toString().trim().length() > 0 && t.get(s) == null) {
					t.put(s, new UFDouble(o.toString()));
				}
			}
			if (rs != null)
				rs.close();

			for (int i = 0; i < iLen; i++) {
				VOs[i].setNprice(new UFDouble(0));
				VOs[i].setNmoney(new UFDouble(0));
				UFDouble nPrice = new UFDouble(0);
				if(t.get(VOs[i].getCmangid()) != null){
					nPrice = (UFDouble)t.get(VOs[i].getCmangid());
				}
				VOs[i].setNprice(nPrice);
				UFDouble nNum = VOs[i].getNinnum();
				if (nNum != null) {
					double d = nNum.doubleValue() * VOs[i].getNprice().doubleValue();
					VOs[i].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
					VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
				}
			}
			
		} else if (sEstPriceSource.trim().equals("最新进价")) {
			//最新进价
			Hashtable t = new Hashtable();//key为采购公司PK+存货基础ID,value为订单数量,订单本币金额,订单本币价税合计
			while (rs.next()) {
				String s = rs.getString(1);
				String ss = rs.getString(2);
				UFDouble nMoney = null;
				UFDouble nNum = null;
				UFDouble nSumMny = null;
				Object oTemp = rs.getObject(3);
				if (oTemp != null && oTemp.toString().trim().length() > 0){
					nMoney = new UFDouble(oTemp.toString());
				}
				oTemp = rs.getObject(4);
				if (oTemp != null && oTemp.toString().trim().length() > 0)
					nNum = new UFDouble(oTemp.toString());
				oTemp = rs.getObject(5);
				if (oTemp != null && oTemp.toString().trim().length() > 0)
					nSumMny = new UFDouble(oTemp.toString());				
				if (s != null && s.trim().length() > 0 && ss != null && ss.trim().length() > 0 && t.get(s+ss) == null) {
					t.put(s+ss, new UFDouble[] { nNum, nMoney, nSumMny });
				}
			}
			if (rs != null)
				rs.close();

			for (int i = 0; i < VOs.length; i++) {
				if(sPricePolicy.equals("无税价格优先")){
					VOs[i].setNprice(new UFDouble(0));
					VOs[i].setNmoney(new UFDouble(0));
					Object oTemp = t.get(VOs[i].getPk_purcorp() + VOs[i].getCbaseid());
					if (oTemp != null) {
						UFDouble data[] = (UFDouble[]) oTemp;
						UFDouble nMoney = data[1];
						UFDouble nNum = data[0];
						if (nMoney != null && nNum != null && Math.abs(nNum.doubleValue()) > 0) {
							double d = PubDMO.getRoundDouble(nPriceDecimal,nMoney.doubleValue() / nNum.doubleValue());
							VOs[i].setNprice(new UFDouble(d));
							nNum = VOs[i].getNinnum();
							if (nNum != null) {
								d = nNum.doubleValue() * VOs[i].getNprice().doubleValue();
								VOs[i].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
							}
						}
					}
					VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
				}else{
					VOs[i].setNtaxprice(new UFDouble(0));
					VOs[i].setNtotalmoney(new UFDouble(0));
					Object oTemp = t.get(VOs[i].getPk_purcorp() + VOs[i].getCbaseid());
					if (oTemp != null) {
						UFDouble data[] = (UFDouble[]) oTemp;
						UFDouble nSumMny = data[2];
						UFDouble nNum = data[0];
						if (nSumMny != null && nNum != null && Math.abs(nNum.doubleValue()) > 0) {
							double d = PubDMO.getRoundDouble(nPriceDecimal,nSumMny.doubleValue() / nNum.doubleValue());
							VOs[i].setNtaxprice(new UFDouble(d));
							nNum = VOs[i].getNinnum();
							if (nNum != null) {
								d = nNum.doubleValue() * VOs[i].getNprice().doubleValue();
								VOs[i].setNtotalmoney(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
							}
						}
					}
					VOs[i].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
				}
				
				if((sPara.equals("是") || sPara.equals("Y")) && nPlanPrice != null && nPlanPrice.length > 0 && nPlanPrice.length == iLen && nPriceMethod[i] != null && nPriceMethod[i].doubleValue() == 5){
					VOs[i].setNprice(nPlanPrice[i] == null ? new UFDouble(0.0) : nPlanPrice[i]);
					UFDouble nNum = VOs[i].getNinnum();
					if (nNum != null) {
						double d = nNum.doubleValue() * VOs[i].getNprice().doubleValue();
						VOs[i].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
						VOs[i].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
					}
				}
			}
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	return VOs;
}

/**
 * 此处插入方法说明。
 * 功能描述:入库单签字暂估获取暂估单价方式处理
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2003/11/29
 */
public IGeneralBillVO[] replacePriceForGeneralBillVO(IGeneralBillVO VOs[], ArrayList paraList) throws SQLException {

	if (VOs == null || VOs.length == 0)
		return VOs;
	int nPriceDecimal = ((Integer)paraList.get(0)).intValue();
	int nMoneyDecimal = ((Integer)paraList.get(1)).intValue();
	String sPricePolicy = (String)paraList.get(2);

	//获取暂估单价方式
	String unitCode = VOs[0].getHeaderVO().getPk_corp();
	String sEstPriceSource = null;
	String sPara = "N";//PO45
	try {
		ISysInitQry initDMO = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		Hashtable t = initDMO.queryBatchParaValues(unitCode,new String[]{"PO27","PO45"});
		if(t == null || t.size() == 0) return VOs;
		if(t.get("PO27") != null) sEstPriceSource = (String)t.get("PO27");
		if(t.get("PO45") != null) sPara = (String)t.get("PO45");
	} catch (Exception e) {
		/*未正确获取暂估单价方式，处理为不设置默认暂估单价!此异常不影响业务流程不必抛出*/
		SCMEnv.out(e);
		return VOs;
	}

	if (sEstPriceSource == null || sEstPriceSource.trim().length() == 0)
		return VOs;

	ArrayList listJHJ = null;
	Vector vMangId = new Vector();
	Vector vCalBId = new Vector();
	Vector vWareId = new Vector();
	for (int i = 0; i < VOs.length; i++) {
		GeneralBillItemVO bodyVO[] = (GeneralBillItemVO[]) VOs[i].getChildrenVO();
		GeneralBillHeaderVO headVO = (GeneralBillHeaderVO) VOs[i].getParentVO();
		if(bodyVO == null || bodyVO.length == 0) continue;
		for(int j = 0; j < bodyVO.length; j++){
			vMangId.addElement(bodyVO[j].getCinvmanid());
			vCalBId.addElement(headVO.getPk_calbody());
			vWareId.addElement(headVO.getCwarehouseid());
		}
	}
	String[] saMangId = new String[vMangId.size()];
	vMangId.copyInto(saMangId);
	String[] saCalBId = new String[vMangId.size()];
	vCalBId.copyInto(saCalBId);
	String[] saWareId = new String[vMangId.size()];
	vWareId.copyInto(saWareId);

	//获取计划价,参考成本和计价方式
	nc.bs.ps.cost.CostanalyseDMO jhjDmo = null;
	try {
		jhjDmo = new nc.bs.ps.cost.CostanalyseDMO();
		if(sEstPriceSource.trim().equals("计划价") || sPara.equals("Y") || sPara.equals("是")) listJHJ = jhjDmo.queryPlanRefCost(unitCode, saMangId, saCalBId, saWareId);
	} catch (Exception e) {
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000020")/*@res "获取计划价时出现异常，请稍后再试！"*/);
	}
	UFDouble nPlanPrice[] = null, nPriceMethod[] = null;
	if(listJHJ != null && listJHJ.size() >= 3){
		nPlanPrice = (UFDouble[]) listJHJ.get(0);
		nPriceMethod = (UFDouble[]) listJHJ.get(2);
	}
	
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	if (sEstPriceSource.trim().equals("订单价")){
		try {
			con = getConnection();

			Hashtable t21 = new Hashtable(), t61 = new Hashtable();
			Vector v21 = new Vector(), v61 = new Vector();
			for(int i = 0; i < VOs.length; i++){
				GeneralBillItemVO bodyVO[] = (GeneralBillItemVO[]) VOs[i].getChildrenVO();
				for(int j = 0; j < bodyVO.length; j++){
					if(bodyVO[j].getCfirsttype() != null && bodyVO[j].getCfirsttype().equals(ScmConst.PO_Order) && bodyVO[j].getCfirstbillbid() != null && !v21.contains(bodyVO[j].getCfirstbillbid())) v21.addElement(bodyVO[j].getCfirstbillbid());
					if(bodyVO[j].getCfirsttype() != null && bodyVO[j].getCfirsttype().equals(ScmConst.SC_Order) && bodyVO[j].getCfirstbillbid() != null && !v61.contains(bodyVO[j].getCfirstbillbid())) v61.addElement(bodyVO[j].getCfirstbillbid());
				}
			}
			
			if(v21.size() > 0){
				//获取采购订单本币价格
				String sqlsql = "select corder_bid, nordernum, nmoney, ntaxpricemny from po_order_b where dr = 0 and corder_bid in ";
				String sOrderBID[] = new String[v21.size()];
				v21.copyInto(sOrderBID);
				//临时表
				String strSetId = null;
				try {
					nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
					strSetId = dmoTempTbl.insertTempTable(sOrderBID, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
					if (strSetId == null || strSetId.trim().equals("()")) strSetId = " ('ErrorPk') ";
					sqlsql += strSetId;
				} catch (Exception e) {
					throw new SQLException(e.getMessage());
				}

				stmt = con.prepareStatement(sqlsql);
				rs = stmt.executeQuery();
				String s = null;
				Object o1 = null, o2 = null, o3 = null;
				UFDouble d1 = null, d2 = null, d3 = null;
				while(rs.next()){
					s = rs.getString(1);
					o1 = rs.getObject(2);
					o2 = rs.getObject(3);
					o3 = rs.getObject(4);
					if(s != null && o1 != null && o2 != null && o3 != null){
						d1 = new UFDouble(o1.toString());
						d2 = new UFDouble(o2.toString());
						d3 = new UFDouble(o3.toString());
						t21.put(s, new UFDouble[]{d1,d2,d3});
					}
				}
				if(rs != null) rs.close();
				if(stmt != null) stmt.close();
			}
			
			if(v61.size() > 0){
				//获取委外订单本币价格
				String sqlsql = "select corder_bid, nordernum, nmoney, nsummny from sc_order_b where dr = 0 and corder_bid in ";
				String sOrderBID[] = new String[v61.size()];
				v61.copyInto(sOrderBID);
				//临时表
				String strSetId = null;
				try {
					nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
					strSetId = dmoTempTbl.insertTempTable(sOrderBID, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
					if (strSetId == null || strSetId.trim().equals("()")) strSetId = " ('ErrorPk') ";
					sqlsql += strSetId;
				} catch (Exception e) {
					throw new SQLException(e.getMessage());
				}

				stmt = con.prepareStatement(sqlsql);
				rs = stmt.executeQuery();
				String s = null;
				Object o1 = null, o2 = null, o3 = null;
				UFDouble d1 = null, d2 = null, d3 = null;
				while(rs.next()){
					s = rs.getString(1);
					o1 = rs.getObject(2);
					o2 = rs.getObject(3);
					o3 = rs.getObject(4);
					if(s != null && o1 != null && o2 != null && o3 != null){
						d1 = new UFDouble(o1.toString());
						d2 = new UFDouble(o2.toString());
						d3 = new UFDouble(o3.toString());
						t61.put(s, new UFDouble[]{d1,d2,d3});
					}
				}
				if(rs != null) rs.close();
				if(stmt != null) stmt.close();
			}
			
			//设置订单本币价格
			for(int i = 0; i < VOs.length; i++){
				IGeneralBillItemVO bodyVO[] = (IGeneralBillItemVO[]) VOs[i].getChildrenVO();
				for(int j = 0; j < bodyVO.length; j++){
					if(bodyVO[j].getCfirsttype() != null && bodyVO[j].getCfirsttype().equals(ScmConst.PO_Order) && bodyVO[j].getCfirstbillbid() != null && t21.get(bodyVO[j].getCfirstbillbid()) != null){
            //采购订单
						UFDouble dd[] = (UFDouble[])t21.get(bodyVO[j].getCfirstbillbid());
						if(bodyVO[j].getNinnum().equals(dd[0]) && Math.abs(bodyVO[j].getNinnum().doubleValue()) > 0){
							//如果入库数量=订单数量,先计算金额,再计算单价
							bodyVO[j].setBMoney(new UFBoolean(true));
							if(sPricePolicy.equals("无税价格优先")){
								double d = PubDMO.getRoundDouble(nMoneyDecimal,dd[1].doubleValue());
								bodyVO[j].setNmny(new UFDouble(d));
								d = d / bodyVO[j].getNinnum().doubleValue();
								d = PubDMO.getRoundDouble(nPriceDecimal, d);
								bodyVO[j].setNprice(new UFDouble(d));
								bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
							}else{
								double d = PubDMO.getRoundDouble(nMoneyDecimal,dd[2].doubleValue());
								bodyVO[j].setNtaxmny(new UFDouble(d));
								d = d / bodyVO[j].getNinnum().doubleValue();
								d = PubDMO.getRoundDouble(nPriceDecimal, d);
								bodyVO[j].setNtaxprice(new UFDouble(d));	
								bodyVO[j].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
							}
						}else if(Math.abs(dd[0].doubleValue()) > 0){
							//否则,先计算单价,再计算金额
							bodyVO[j].setBMoney(new UFBoolean(false));
							if(sPricePolicy.equals("无税价格优先")){
								double d = dd[1].doubleValue() / dd[0].doubleValue();
								d = PubDMO.getRoundDouble(nPriceDecimal, d);
								bodyVO[j].setNprice(new UFDouble(d));
								d = d * bodyVO[j].getNinnum().doubleValue();
								d = PubDMO.getRoundDouble(nMoneyDecimal, d);
								bodyVO[j].setNmny(new UFDouble(d));
								bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
							}else{
								double d = dd[2].doubleValue() / dd[0].doubleValue();
								d = PubDMO.getRoundDouble(nPriceDecimal, d);
								bodyVO[j].setNtaxprice(new UFDouble(d));
								d = d * bodyVO[j].getNinnum().doubleValue();
								d = PubDMO.getRoundDouble(nMoneyDecimal, d);
								bodyVO[j].setNtaxmny(new UFDouble(d));	
								bodyVO[j].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
							}
						}else{
							if(sPricePolicy.equals("无税价格优先")){
								bodyVO[j].setNprice(new UFDouble(0));
								bodyVO[j].setNmny(new UFDouble(0));	
								bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
							}else{
								bodyVO[j].setNtaxprice(new UFDouble(0));
								bodyVO[j].setNtaxmny(new UFDouble(0));	
								bodyVO[j].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
							}
						}
            
					}else if(bodyVO[j].getCfirsttype() != null && bodyVO[j].getCfirsttype().equals(ScmConst.SC_Order) && bodyVO[j].getCfirstbillbid() != null && t61.get(bodyVO[j].getCfirstbillbid()) != null){
            //委外订单
            UFDouble dd[] = (UFDouble[])t61.get(bodyVO[j].getCfirstbillbid());
            if(bodyVO[j].getNinnum().equals(dd[0]) && Math.abs(bodyVO[j].getNinnum().doubleValue()) > 0){
              //如果入库数量=订单数量,先计算金额,再计算单价
              bodyVO[j].setBMoney(new UFBoolean(true));
              if(sPricePolicy.equals("无税价格优先")){
                double d = PubDMO.getRoundDouble(nMoneyDecimal,dd[1].doubleValue());
                bodyVO[j].setNmny(new UFDouble(d));
                d = d / bodyVO[j].getNinnum().doubleValue();
                d = PubDMO.getRoundDouble(nPriceDecimal, d);
                bodyVO[j].setNprice(new UFDouble(d));
                bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
              }else{
                double d = PubDMO.getRoundDouble(nMoneyDecimal,dd[2].doubleValue());
                bodyVO[j].setNtaxmny(new UFDouble(d));
                d = d / bodyVO[j].getNinnum().doubleValue();
                d = PubDMO.getRoundDouble(nPriceDecimal, d);
                bodyVO[j].setNtaxprice(new UFDouble(d));  
                bodyVO[j].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
              }
            }else if(Math.abs(dd[0].doubleValue()) > 0){
              //否则,先计算单价,再计算金额
              bodyVO[j].setBMoney(new UFBoolean(false));
              if(sPricePolicy.equals("无税价格优先")){
                double d = dd[1].doubleValue() / dd[0].doubleValue();
                d = PubDMO.getRoundDouble(nPriceDecimal, d);
                bodyVO[j].setNprice(new UFDouble(d));
                d = d * bodyVO[j].getNinnum().doubleValue();
                d = PubDMO.getRoundDouble(nMoneyDecimal, d);
                bodyVO[j].setNmny(new UFDouble(d));
                bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
              }else{
                double d = dd[2].doubleValue() / dd[0].doubleValue();
                d = PubDMO.getRoundDouble(nPriceDecimal, d);
                bodyVO[j].setNtaxprice(new UFDouble(d));
                d = d * bodyVO[j].getNinnum().doubleValue();
                d = PubDMO.getRoundDouble(nMoneyDecimal, d);
                bodyVO[j].setNtaxmny(new UFDouble(d));  
                bodyVO[j].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
              }
            }else{
              if(sPricePolicy.equals("无税价格优先")){
                bodyVO[j].setNprice(new UFDouble(0));
                bodyVO[j].setNmny(new UFDouble(0)); 
                bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
              }else{
                bodyVO[j].setNtaxprice(new UFDouble(0));
                bodyVO[j].setNtaxmny(new UFDouble(0));  
                bodyVO[j].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
              }
            }
            
          }else{
            //自制
						if(sPricePolicy.equals("无税价格优先")){
							bodyVO[j].setNprice(new UFDouble(0));
							bodyVO[j].setNmny(new UFDouble(0));
							bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
						}else{
							bodyVO[j].setNtaxprice(new UFDouble(0));
							bodyVO[j].setNtaxmny(new UFDouble(0));	
							bodyVO[j].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
						}
					}
				}
			}
		
		} finally {
			try {
				if (stmt != null) stmt.close();
			} catch (Exception e) {}
			try {
				if (con != null) con.close();
			} catch (Exception e) {}
		}
		
		int k = 0;
		for (int i = 0; i < VOs.length; i++) {
			IGeneralBillItemVO bodyVO[] = (IGeneralBillItemVO[])VOs[i].getChildrenVO();
			if (bodyVO == null || bodyVO.length == 0)
				continue;
			for (int j = 0; j < bodyVO.length; j++) {
				if((sPara.equals("是") || sPara.equals("Y")) && nPlanPrice != null && nPlanPrice.length > 0 && nPriceMethod[k] != null && nPriceMethod[k].doubleValue() == 5){
					bodyVO[j].setNprice(nPlanPrice[k]);
					UFDouble nNum = bodyVO[j].getNinnum();
					if (nNum != null) {
						double d = nNum.doubleValue() * bodyVO[j].getNprice().doubleValue();
						bodyVO[j].setNmny(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
					}
					bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
				}
				k++;
			}
		}

		return VOs;
	}

	String strTblNameCorp = null;
	String strTblNameInv = null;
	try {
		java.util.ArrayList listCorp = new java.util.ArrayList();
		java.util.ArrayList listInv = new java.util.ArrayList();
		java.util.ArrayList listTmp = null;
		int k = 0;
		for (int i = 0; i < VOs.length; i++) {
			GeneralBillHeaderVO headVO = VOs[i].getHeaderVO();
			IGeneralBillItemVO bodyVO[] = (IGeneralBillItemVO[])VOs[i].getChildrenVO();
			if (bodyVO == null || bodyVO.length == 0)
				continue;
			for (int j = 0; j < bodyVO.length; j++) {
				listTmp = new java.util.ArrayList();
				listTmp.add(new Integer(k));
				listTmp.add(headVO.getAttributeValue("pk_purcorp"));
				listCorp.add(listTmp);
				listTmp = new java.util.ArrayList();
				listTmp.add(new Integer(k));
				listTmp.add(bodyVO[j].getCinvbasid());
				listInv.add(listTmp);
				k++;
			}
		}
		nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
		strTblNameCorp =
			dmo.getTempStringTable(
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU58,
				new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "ccalbodyid" },
				new String[] { "int", "char(20)" },
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
				listCorp);
		strTblNameInv =
			dmo.getTempStringTable(
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU59,
				new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "cmangid" },
				new String[] { "int", "char(20)" },
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
				listInv);
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	//
	String sql = null;
	if (sEstPriceSource.trim().equals("计划价")) {
		sql = "select 1 from bd_produce where 1<0 ";

	} else if (sEstPriceSource.trim().equals("最新进价")) {
		sql = "select A.pk_corp, B.cbaseid, B.nmoney, B.nordernum, B.ntaxpricemny, A.dorderdate, B.ts from po_order A, po_order_b B, " + strTblNameCorp + " C, " + strTblNameInv + " D ";
		sql += "where A.dr = 0 and B.dr = 0 and A.corderid = B.corderid and B.iisactive <> 3 and A.pk_corp = C.ccalbodyid and B.cbaseid = D.cmangid ";
		sql += "and C." + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU + " = D." + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU;
		sql += " order by dorderdate desc, B.ts desc";
		
	}else if (sEstPriceSource.trim().equals("最新结算价")) {			
		//临时表
		String strSetId = null;
		try {
			nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
			strSetId = dmoTempTbl.insertTempTable(saMangId, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
			if (strSetId == null || strSetId.trim().equals("()")) strSetId = " ('ErrorPk') ";
		} catch (Exception e) {
			throw new SQLException(e.getMessage());
		}

		sql = "select B.cmangid, B.nprice, A.dsettledate, B.ts from po_settlebill A, po_settlebill_b B ";
		sql += "where A.dr = 0 and B.dr = 0 and A.csettlebillid = B.csettlebillid and B.nprice is not null and B.cmangid in ";
		sql += strSetId;

		sql += " order by A.dsettledate desc, B.ts desc";
	}

	if (sql == null)
		return VOs;

	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();

		if (sEstPriceSource.trim().equals("计划价")) {
			int k = 0;
			for (int i = 0; i < VOs.length; i++) {
				IGeneralBillItemVO bodyVO[] = (IGeneralBillItemVO[])VOs[i].getChildrenVO();
				if (bodyVO == null || bodyVO.length == 0)
					continue;
				for (int j = 0; j < bodyVO.length; j++) {
					bodyVO[j].setNprice(new UFDouble(0));
					bodyVO[j].setNmny(new UFDouble(0));
					if (nPlanPrice != null && nPlanPrice.length > 0) {
						bodyVO[j].setNprice(nPlanPrice[k]);
						UFDouble nNum = bodyVO[j].getNinnum();
						if (nNum != null) {
							double d = nNum.doubleValue() * bodyVO[j].getNprice().doubleValue();
							bodyVO[j].setNmny(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
						}
					}
					k++;
					bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
				}
			}

		}else if (sEstPriceSource.trim().equals("最新结算价")) {
			//最新结算价
			Hashtable t = new Hashtable();
			while (rs.next()) {
				String s = rs.getString(1);
				Object o = rs.getObject(2);
				if (s != null && s.trim().length() > 0 && o != null && o.toString().trim().length() > 0 && t.get(s) == null) {
					t.put(s, new UFDouble(o.toString()));
				}
			}
			if (rs != null)
				rs.close();

			for (int i = 0; i < VOs.length; i++) {
				IGeneralBillItemVO bodyVO[] = (IGeneralBillItemVO[])VOs[i].getChildrenVO();
				if (bodyVO == null || bodyVO.length == 0)
					continue;
				for (int j = 0; j < bodyVO.length; j++) {
					bodyVO[j].setNprice(new UFDouble(0));
					bodyVO[j].setNmny(new UFDouble(0));
					
					UFDouble nPrice = new UFDouble(0);
					if(t.get(bodyVO[j].getCinvmanid()) != null) nPrice = (UFDouble) t.get(bodyVO[j].getCinvmanid());
					bodyVO[j].setNprice(nPrice);
					UFDouble nNum = bodyVO[j].getNinnum();
					if (nNum != null) {
						double d = nNum.doubleValue() * bodyVO[j].getNprice().doubleValue();
						bodyVO[j].setNmny(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
					}
					bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
				}
			}

		} else if (sEstPriceSource.trim().equals("最新进价")) {
			//最新进价
			Hashtable t = new Hashtable();
			while (rs.next()) {
				String s = rs.getString(1);
				String ss = rs.getString(2);
				UFDouble nMoney = null;
				UFDouble nNum = null;
				UFDouble nSumMny = null;
				Object oTemp = rs.getObject(3);
				if (oTemp != null && oTemp.toString().trim().length() > 0){
					nMoney = new UFDouble(oTemp.toString());					
				}
				oTemp = rs.getObject(4);
				if (oTemp != null && oTemp.toString().trim().length() > 0)
					nNum = new UFDouble(oTemp.toString());
				oTemp = rs.getObject(5);
				if (oTemp != null && oTemp.toString().trim().length() > 0)
					nSumMny = new UFDouble(oTemp.toString());
				if (s != null && s.trim().length() > 0 && ss != null && ss.trim().length() > 0 && t.get(s+ss) == null) {
					t.put(s+ss, new UFDouble[] { nNum, nMoney, nSumMny });
				}
			}
			if (rs != null)
				rs.close();

			int k = 0;
			for (int i = 0; i < VOs.length; i++) {
				GeneralBillHeaderVO headVO = VOs[i].getHeaderVO();
				IGeneralBillItemVO bodyVO[] = (IGeneralBillItemVO[])VOs[i].getChildrenVO();
				if (bodyVO == null || bodyVO.length == 0)
					continue;
				for (int j = 0; j < bodyVO.length; j++) {
					if(sPricePolicy.equals("无税价格优先")){
						bodyVO[j].setNprice(new UFDouble(0));
						bodyVO[j].setNmny(new UFDouble(0));
						Object oTemp = t.get(headVO.getAttributeValue("pk_purcorp")+bodyVO[j].getCinvbasid());
						if (oTemp != null) {
							UFDouble data[] = (UFDouble[]) oTemp;
							UFDouble nMoney = data[1];
							UFDouble nNum = data[0];
							if (nMoney != null && nNum != null && Math.abs(nNum.doubleValue()) > 0) {
								double d = PubDMO.getRoundDouble(nPriceDecimal,nMoney.doubleValue() / nNum.doubleValue());
								bodyVO[j].setNprice(new UFDouble(d));
								nNum = bodyVO[j].getNinnum();
								if (nNum != null) {
									d = nNum.doubleValue() * bodyVO[j].getNprice().doubleValue();
									bodyVO[j].setNmny(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
								}
							}
						}
						bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
					}else{
						bodyVO[j].setNtaxprice(new UFDouble(0));
						bodyVO[j].setNtaxmny(new UFDouble(0));
						Object oTemp = t.get(headVO.getAttributeValue("pk_purcorp")+bodyVO[j].getCinvbasid());
						if (oTemp != null) {
							UFDouble data[] = (UFDouble[]) oTemp;
							UFDouble nSumMny = data[2];
							UFDouble nNum = data[0];
							if (nSumMny != null && nNum != null && Math.abs(nNum.doubleValue()) > 0) {
								double d = PubDMO.getRoundDouble(nPriceDecimal,nSumMny.doubleValue() / nNum.doubleValue());
								bodyVO[j].setNtaxprice(new UFDouble(d));
								nNum = bodyVO[j].getNinnum();
								if (nNum != null) {
									d = nNum.doubleValue() * bodyVO[j].getNprice().doubleValue();
									bodyVO[j].setNtaxmny(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
								}
							}
						}
						bodyVO[j].setNPricePolicy(RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE);
					}
					
					if((sPara.equals("是") || sPara.equals("Y")) && nPlanPrice != null && nPlanPrice.length > 0 && nPriceMethod[k] != null && nPriceMethod[k].doubleValue() == 5){
						bodyVO[j].setNprice(nPlanPrice[k]);
						UFDouble nNum = bodyVO[j].getNinnum();
						if (nNum != null && nPlanPrice[k] != null) {
							double d = nNum.doubleValue() * bodyVO[j].getNprice().doubleValue();
							bodyVO[j].setNmny(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
						}
						bodyVO[j].setNPricePolicy(RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE);
					}
					k++;
				}
			}
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	return VOs;
}

/**
 * 此处插入方法说明。
 * 功能描述:
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2003/06/19
 */
public OorderVO[] replacePriceForOrder(OorderVO VOs[], String sEstPriceSource,int nPriceDecimal,int nMoneyDecimal) throws SQLException {

	if (VOs == null || VOs.length == 0)
		return VOs;
	if (sEstPriceSource == null || sEstPriceSource.trim().length() == 0)
		return VOs;

	ArrayList listJHJ = null;
	Vector vMangId = new Vector();
	Vector vCalBId = new Vector();
	Vector vWareId = new Vector();
	int iLen = VOs.length;
	for (int i = 0; i < iLen; i++) {
		vMangId.addElement(VOs[i].getCmangid());
		if(VOs[i].getCorder_bb1id() != null){
			//有到货计划
			vCalBId.addElement(VOs[i].getCstoreorganization());
		}else{
			//无到货计划
			vCalBId.addElement(VOs[i].getPk_arrvstoorg());
		}
		vWareId.addElement(VOs[i].getCwarehouseid());
	}
	String[] saMangId = new String[iLen];
	vMangId.copyInto(saMangId);
	String[] saCalBId = new String[iLen];
	vCalBId.copyInto(saCalBId);
	String[] saWareId = new String[iLen];
	vWareId.copyInto(saWareId);
	//
	String unitCode = VOs[0].getPk_corp();
	String sql = null;

	//获取参数PO45:计划价存货是否按计划价暂估
	String sPara = "N";
	try{
		ISysInitQry myService = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		SysInitVO initVO = myService.queryByParaCode(unitCode,"PO45");
		if(initVO != null) sPara = initVO.getValue();
	} catch (Exception e) {
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000021")/*@res "获取参数PO45时出现异常，请稍后再试！"*/);
	}

	//获取计划价,参考成本和计价方式
	nc.bs.ps.cost.CostanalyseDMO jhjDmo = null;
	try {
		jhjDmo = new nc.bs.ps.cost.CostanalyseDMO();
		if (sEstPriceSource.trim().equals("计划价") || sPara.equals("Y") || sPara.equals("是")) listJHJ = jhjDmo.queryPlanRefCost(VOs[0].getPk_arrvcorp(),saMangId, saCalBId, saWareId);
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	UFDouble nPlanPrice[] = null, nPriceMethod[] = null;
	if(listJHJ != null && listJHJ.size() >= 3){
		nPlanPrice = (UFDouble[]) listJHJ.get(0);
		nPriceMethod = (UFDouble[]) listJHJ.get(2);
	}

  Connection con = null;
  PreparedStatement stmt = null;
  ResultSet rs = null;

  if (sEstPriceSource.trim().equals("订单价")){
    try {
      con = getConnection();

      Hashtable t21 = new Hashtable();//key为订单行ID,value为订单数量,订单本币金额,订单本币价税合计
      Vector v21 = new Vector();
      for(int i = 0; i < iLen; i++){
        v21.addElement(VOs[i].getCorder_bid());
      }
      
      if(v21.size() > 0){
        //获取采购订单本币价格
        String sqlsql = "select corder_bid, nordernum, nmoney, ntaxpricemny from po_order_b where dr = 0 and corder_bid in ";
        String sOrderBID[] = new String[v21.size()];
        v21.copyInto(sOrderBID);
        //临时表
        String strSetId = null;
        try {
          nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
          strSetId = dmoTempTbl.insertTempTable(sOrderBID, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
          if (strSetId == null || strSetId.trim().equals("()")) strSetId = " ('ErrorPk') ";
          sqlsql += strSetId;
        } catch (Exception e) {
          throw new SQLException(e.getMessage());
        }

        stmt = con.prepareStatement(sqlsql);
        rs = stmt.executeQuery();
        String s = null;
        Object o1 = null, o2 = null, o3 = null;
        UFDouble d1 = null, d2 = null, d3 = null;
        while(rs.next()){
          s = rs.getString(1);
          o1 = rs.getObject(2);
          o2 = rs.getObject(3);
          o3 = rs.getObject(4);
          if(s != null && o1 != null && o2 != null && o3 != null){
            d1 = new UFDouble(o1.toString());
            d2 = new UFDouble(o2.toString());
            d3 = new UFDouble(o3.toString());
            t21.put(s, new UFDouble[]{d1,d2,d3});
          }
        }
        if(rs != null) rs.close();
        if(stmt != null) stmt.close();
      }
      
      if(t21.size() > 0){
        //设置采购订单本币价格
        for(int i = 0; i < iLen; i++){
          if(t21.get(VOs[i].getCorder_bid()) != null){
            UFDouble dd[] = (UFDouble[])t21.get(VOs[i].getCorder_bid());
            //如果入库数量=订单数量,先计算金额,再计算单价
            double d = PubDMO.getRoundDouble(nMoneyDecimal,dd[1].doubleValue());
            VOs[i].setNmoney(new UFDouble(d));
            d = d / VOs[i].getNordernum().doubleValue();
            d = PubDMO.getRoundDouble(nPriceDecimal, d);
            VOs[i].setNprice(new UFDouble(d));  
          }
        }
      }
           
    } finally {
      try {
        if (stmt != null) stmt.close();
      } catch (Exception e) {}
      try {
        if (con != null) con.close();
      } catch (Exception e) {}
    }
    
    for (int i = 0; i < iLen; i++) {
      if((sPara.equals("是") || sPara.equals("Y")) && nPlanPrice != null && nPlanPrice.length > 0 && nPlanPrice.length == iLen && nPriceMethod[i] != null && nPriceMethod[i].doubleValue() == 5){
        VOs[i].setNprice(nPlanPrice[i] == null ? new UFDouble(0.0) : nPlanPrice[i]);
        UFDouble nNum = VOs[i].getNordernum();
        if (nNum != null) {
          double d = nNum.doubleValue() * VOs[i].getNprice().doubleValue();
          VOs[i].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
        }
      }
    }
    return VOs;
  }  
  
	//临时表
	String strTblNameCorp = null;
	String strTblNameInv = null;
	try {
		java.util.ArrayList listCorp = new java.util.ArrayList();
		java.util.ArrayList listInv = new java.util.ArrayList();
		java.util.ArrayList listTmp = null;
		for (int i = 0; i < VOs.length; i++) {
			listTmp = new java.util.ArrayList();
			listTmp.add(new Integer(i));
			listTmp.add(VOs[i].getPk_corp());
			listCorp.add(listTmp);
			listTmp = new java.util.ArrayList();
			listTmp.add(new Integer(i));
			listTmp.add(VOs[i].getCbaseid());
			listInv.add(listTmp);
		}
		nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
		strTblNameCorp =
			dmo.getTempStringTable(
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU58,
				new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "ccalbodyid" },
				new String[] { "int", "char(20)" },
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
				listCorp);
		strTblNameInv =
			dmo.getTempStringTable(
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU59,
				new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "cmangid" },
				new String[] { "int", "char(20)" },
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
				listInv);
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	//
	if (sEstPriceSource.trim().equals("计划价")) {
		sql = "select 1 from bd_produce where 1<0 ";
		
	} else if (sEstPriceSource.trim().equals("最新进价")) {
		sql = "select A.pk_corp, B.cbaseid, B.ts, B.nmoney, B.nordernum, A.dorderdate from po_order A, po_order_b B, " + strTblNameCorp + " C, " + strTblNameInv + " D ";
		sql += "where A.dr = 0 and B.dr = 0 and A.corderid = B.corderid and B.iisactive <> 3 and A.pk_corp = C.ccalbodyid and B.cbaseid = D.cmangid ";
		sql += "and C." + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU + " = D." + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU;
		sql += " order by dorderdate desc, B.ts desc";
		
	}else if (sEstPriceSource.trim().equals("最新结算价")) {			
		//临时表
		String strSetId = null;
		try {
			nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
			strSetId = dmoTempTbl.insertTempTable(saMangId, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU34, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
			if (strSetId == null || strSetId.trim().equals("()")) strSetId = " ('ErrorPk') ";
		} catch (Exception e) {
			throw new SQLException(e.getMessage());
		}

		sql = "select B.cmangid, B.nprice, A.dsettledate, B.ts from po_settlebill A, po_settlebill_b B ";
		sql += "where A.dr = 0 and B.dr = 0 and A.csettlebillid = B.csettlebillid and B.nprice is not null and B.cmangid in ";
		sql += strSetId;

		sql += " order by A.dsettledate desc, B.ts desc";
	}

	if (sql == null)
		return VOs;

	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();

		if (sEstPriceSource.trim().equals("计划价")) {
			//计划价
			for (int i = 0; i < VOs.length; i++) {
				if(nPlanPrice != null && nPlanPrice.length > 0){
					if(nPlanPrice[i] == null) nPlanPrice[i] = new UFDouble(0);
					double d = PubDMO.getRoundDouble(nPriceDecimal, nPlanPrice[i].doubleValue());
					VOs[i].setNprice(new UFDouble(d));
					d = d * VOs[i].getNordernum().doubleValue();
					d = PubDMO.getRoundDouble(nMoneyDecimal, d);
					VOs[i].setNmoney(new UFDouble(d));
				}
			}

		}else if (sEstPriceSource.trim().equals("最新结算价")) {
			//最新结算价
			Hashtable t = new Hashtable();
			while (rs.next()) {
				String s = rs.getString(1);
				Object o = rs.getObject(2);
				if (s != null && s.trim().length() > 0 && o != null && o.toString().trim().length() > 0 && t.get(s) == null) {
					t.put(s, new UFDouble(o.toString()));
				}
			}
			if (rs != null)
				rs.close();

			for (int i = 0; i < VOs.length; i++) {
				UFDouble nPrice = new UFDouble(0);
				if(t.get(VOs[i].getCmangid()) != null) nPrice = (UFDouble)t.get(VOs[i].getCmangid());
				double d = PubDMO.getRoundDouble(nPriceDecimal, nPrice.doubleValue());
				VOs[i].setNprice(new UFDouble(d));
				d = d * VOs[i].getNordernum().doubleValue();
				d = PubDMO.getRoundDouble(nMoneyDecimal, d);
				VOs[i].setNmoney(new UFDouble(d));
			}

		} else if (sEstPriceSource.trim().equals("最新进价")) {
			//最新进价
			Hashtable t = new Hashtable();
			while (rs.next()) {
				String s = rs.getString(1);
				String ss = rs.getString(2);
				UFDouble nMoney = null;
				UFDouble nNum = null;
				Object oTemp = rs.getObject(4);
				if (oTemp != null && oTemp.toString().trim().length() > 0)
					nMoney = new UFDouble(oTemp.toString());
				oTemp = rs.getObject(5);
				if (oTemp != null && oTemp.toString().trim().length() > 0)
					nNum = new UFDouble(oTemp.toString());
				if (s != null && s.trim().length() > 0 && ss != null && ss.trim().length() > 0 && t.get(s+ss) == null) {
					t.put(s+ss, new UFDouble[] { nNum, nMoney });
				}
			}
			if (rs != null)
				rs.close();

			for (int i = 0; i < VOs.length; i++) {
				Object oTemp = t.get(VOs[i].getPk_corp()+VOs[i].getCbaseid());
				if (oTemp != null) {
					UFDouble data[] = (UFDouble[]) oTemp;
					UFDouble nMoney = data[1];
					UFDouble nNum = data[0];
					if (nMoney != null && nNum != null && Math.abs(nNum.doubleValue()) > 0) {
						double d = PubDMO.getRoundDouble(nPriceDecimal,nMoney.doubleValue() / nNum.doubleValue());
						VOs[i].setNprice(new UFDouble(d));
						d = d * VOs[i].getNordernum().doubleValue();
						d = PubDMO.getRoundDouble(nMoneyDecimal, d);
						VOs[i].setNmoney(new UFDouble(d));
					}
				}
				if((sPara.equals("是") || sPara.equals("Y")) && nPlanPrice != null && nPlanPrice.length > 0 && nPriceMethod[i] != null && nPriceMethod[i].doubleValue() == 5){
					double d = PubDMO.getRoundDouble(nPriceDecimal, nPlanPrice[i].doubleValue());
					VOs[i].setNprice(new UFDouble(d));
					d = d * VOs[i].getNordernum().doubleValue();
					d = PubDMO.getRoundDouble(nMoneyDecimal, d);
					VOs[i].setNmoney(new UFDouble(d));					
				}
			}
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	return VOs;
}

/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2001-7-11)
 * @param generalBb3 nc.vo.ps.estimate.GeneralBb3VO
 * @exception java.sql.SQLException 异常说明。
 */
public void updateBb3(GeneralBb3VO generalBb3[]) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "updateBb3", new Object[]{generalBb3});
	/*************************************************************/

	String sql = "update ic_general_bb3 set npprice = ?, npmoney = ?, nmaterialmoney = ?, nzgyfprice = ?, nzgyfmoney = ? where cgeneralbid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con, sql);
		for(int i = 0; i < generalBb3.length; i++){
			// update non PK fields:
			if (generalBb3[i].getNpprice() == null) {
				stmt.setNull(1, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(1, generalBb3[i].getNpprice().toBigDecimal());
			}
			if (generalBb3[i].getNpmoney() == null) {
				stmt.setNull(2, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(2, generalBb3[i].getNpmoney().toBigDecimal());
			}
			if (generalBb3[i].getNmaterialmoney() == null) {
				stmt.setNull(3, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(3, generalBb3[i].getNmaterialmoney().toBigDecimal());
			}
			
			if (generalBb3[i].getNzgyfprice() == null) {
				stmt.setNull(4, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(4, generalBb3[i].getNzgyfprice().toBigDecimal());
			}
			if (generalBb3[i].getNzgyfmoney() == null) {
				stmt.setNull(5, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(5, generalBb3[i].getNzgyfmoney().toBigDecimal());
			}

			// find record by PK fields:
			stmt.setString(6, generalBb3[i].getCgeneralbid());
			//
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "updateBb3", new Object[]{generalBb3});
	/*************************************************************/
}

/**
 * 此处插入方法说明。
 * 功能描述:更新标准入库单结算子表(暂估/反暂调用)
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期：2002/05/30
 */
public void updateBillBb3(GeneralBb3VO generalBb3[]) throws java.sql.SQLException {

	String sql = "update ic_general_bb3 set npprice = ?, npmoney = ?, nzgyfprice = ?, nzgyfmoney = ?, nmaterialmoney = ? where cgeneralbid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con, sql);
		for(int i = 0; i < generalBb3.length; i++){
			// update non PK fields:
			if (generalBb3[i].getNpprice() == null) {
				stmt.setNull(1, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(1, generalBb3[i].getNpprice().toBigDecimal());
			}
			if (generalBb3[i].getNpmoney() == null) {
				stmt.setNull(2, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(2, generalBb3[i].getNpmoney().toBigDecimal());
			}
			
			if (generalBb3[i].getNzgyfprice() == null) {
				stmt.setNull(3, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(3, generalBb3[i].getNzgyfprice().toBigDecimal());
			}
			if (generalBb3[i].getNzgyfmoney() == null) {
				stmt.setNull(4, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(4, generalBb3[i].getNzgyfmoney().toBigDecimal());
			}
			if (generalBb3[i].getNmaterialmoney() == null) {
				stmt.setNull(5, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(5, generalBb3[i].getNmaterialmoney().toBigDecimal());
			}
			
			// find record by PK fields:
			stmt.setString(6, generalBb3[i].getCgeneralbid());
			//
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

}

/**
 * 此处插入方法说明。
 * 功能描述:更新标准入库单体(暂估/反暂调用)
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期：2002/05/30
 */
public void updateBillBody(GeneralHItemVO generalB[]) throws java.sql.SQLException {

	String sql = "update ic_general_b set bzgflag = ?, dzgdate = ?, bzgyfflag = ? where cgeneralbid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con, sql);
		for(int i = 0; i < generalB.length; i++){
			// update non PK fields:
			if (generalB[i].getBzgflag() == null) {
				stmt.setNull(1, Types.CHAR);
			}
			else {
				stmt.setString(1, generalB[i].getBzgflag().toString());
			}
			//暂估日期
			if (generalB[i].getDzgdate() == null) {
				stmt.setNull(2, Types.CHAR);
			}
			else {
				stmt.setString(2, generalB[i].getDzgdate().toString());
			}
			if (generalB[i].getBzgyfflag() == null) {
				stmt.setNull(3, Types.CHAR);
			}
			else {
				stmt.setString(3, generalB[i].getBzgyfflag().toString());
			}
						
			// find record by PK fields:
			stmt.setString(4, generalB[i].getCgeneralbid());
			//
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

}

/**
 * 此处插入方法说明。
 * 功能描述:更新入库单体
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public void updateBody(GeneralHItemVO generalB[]) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "updateBody", new Object[]{generalB});
	/*************************************************************/

	String sql = "update ic_general_b set cgeneralhid = ?, cinventoryid = ?, vbatchcode = ?, vfree1 = ?, vfree2 = ?, vfree3 = ?, vfree4 = ?, vfree5 = ?, dvalidate = ?, dbizdate = ?, dstandbydate = ?, vproductbatch = ?, nshouldoutnum = ?, nshouldoutassistnum = ?, noutnum = ?, noutassistnum = ?, nshouldinnum = ?, castunitid = ?, nneedinassistnum = ?, ninnum = ?, ninassistnum = ?, ntranoutnum = ?, nprice = ?, nmny = ?, nplannedprice = ?, nplannedmny = ?, csourcebillhid = ?, csourcebillbid = ?, csourcetype = ?, vsourcebillcode = ?, fchecked = ?, cprojectid = ?, ccostobject = ?, ccorrespondbid = ?, ccorrespondhid = ?, ccorrespondtype = ?, ccorrespondcode = ?, flargess = ?, bzgflag = ?, isok = ?, cwp = ? , dzgdate = ?, crowno = ?, bzgyfflag = ?, pk_reqcorp = ?, pk_invoicecorp = ?, pk_reqstoorg = ?, pk_creqwareid = ? where cgeneralbid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = prepareStatement(con, sql);
		for(int i = 0; i < generalB.length; i++){
			// update non PK fields:
			if (generalB[i].getCgeneralhid() == null) {
				stmt.setNull(1, Types.CHAR);
			}
			else {
				stmt.setString(1, generalB[i].getCgeneralhid());
			}
			if (generalB[i].getCinventoryid() == null) {
				stmt.setNull(2, Types.CHAR);
			}
			else {
				stmt.setString(2, generalB[i].getCinventoryid());
			}
			if (generalB[i].getVbatchcode() == null) {
				stmt.setNull(3, Types.CHAR);
			}
			else {
				stmt.setString(3, generalB[i].getVbatchcode());
			}
			if (generalB[i].getVfree1() == null) {
				stmt.setNull(4, Types.CHAR);
			}
			else {
				stmt.setString(4, generalB[i].getVfree1());
			}
			if (generalB[i].getVfree2() == null) {
				stmt.setNull(5, Types.CHAR);
			}
			else {
				stmt.setString(5, generalB[i].getVfree2());
			}
			if (generalB[i].getVfree3() == null) {
				stmt.setNull(6, Types.CHAR);
			}
			else {
				stmt.setString(6, generalB[i].getVfree3());
			}
			if (generalB[i].getVfree4() == null) {
				stmt.setNull(7, Types.CHAR);
			}
			else {
				stmt.setString(7, generalB[i].getVfree4());
			}
			if (generalB[i].getVfree5() == null) {
				stmt.setNull(8, Types.CHAR);
			}
			else {
				stmt.setString(8, generalB[i].getVfree5());
			}
			if (generalB[i].getDvalidate() == null) {
				stmt.setNull(9, Types.CHAR);
			}
			else {
				stmt.setString(9, generalB[i].getDvalidate().toString());
			}
			if (generalB[i].getDbizdate() == null) {
				stmt.setNull(10, Types.CHAR);
			}
			else {
				stmt.setString(10, generalB[i].getDbizdate().toString());
			}
			if (generalB[i].getDstandbydate() == null) {
				stmt.setNull(11, Types.CHAR);
			}
			else {
				stmt.setString(11, generalB[i].getDstandbydate().toString());
			}
			if (generalB[i].getVproductbatch() == null) {
				stmt.setNull(12, Types.CHAR);
			}
			else {
				stmt.setString(12, generalB[i].getVproductbatch());
			}
			if (generalB[i].getNshouldoutnum() == null) {
				stmt.setNull(13, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(13, generalB[i].getNshouldoutnum().toBigDecimal());
			}
			if (generalB[i].getNshouldoutassistnum() == null) {
				stmt.setNull(14, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(14, generalB[i].getNshouldoutassistnum().toBigDecimal());
			}
			if (generalB[i].getNoutnum() == null) {
				stmt.setNull(15, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(15, generalB[i].getNoutnum().toBigDecimal());
			}
			if (generalB[i].getNoutassistnum() == null) {
				stmt.setNull(16, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(16, generalB[i].getNoutassistnum().toBigDecimal());
			}
			if (generalB[i].getNshouldinnum() == null) {
				stmt.setNull(17, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(17, generalB[i].getNshouldinnum().toBigDecimal());
			}
			if (generalB[i].getCastunitid() == null) {
				stmt.setNull(18, Types.CHAR);
			}
			else {
				stmt.setString(18, generalB[i].getCastunitid());
			}
			if (generalB[i].getNneedinassistnum() == null) {
				stmt.setNull(19, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(19, generalB[i].getNneedinassistnum().toBigDecimal());
			}
			if (generalB[i].getNinnum() == null) {
				stmt.setNull(20, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(20, generalB[i].getNinnum().toBigDecimal());
			}
			if (generalB[i].getNinassistnum() == null) {
				stmt.setNull(21, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(21, generalB[i].getNinassistnum().toBigDecimal());
			}
			if (generalB[i].getNtranoutnum() == null) {
				stmt.setNull(22, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(22, generalB[i].getNtranoutnum().toBigDecimal());
			}
			if (generalB[i].getNprice() == null) {
				stmt.setNull(23, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(23, generalB[i].getNprice().toBigDecimal());
			}
			if (generalB[i].getNmny() == null) {
				stmt.setNull(24, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(24, generalB[i].getNmny().toBigDecimal());
			}
			if (generalB[i].getNplannedprice() == null) {
				stmt.setNull(25, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(25, generalB[i].getNplannedprice().toBigDecimal());
			}
			if (generalB[i].getNplannedmny() == null) {
				stmt.setNull(26, Types.INTEGER);
			}
			else {
				stmt.setBigDecimal(26, generalB[i].getNplannedmny().toBigDecimal());
			}
			if (generalB[i].getCsourcebillhid() == null) {
				stmt.setNull(27, Types.CHAR);
			}
			else {
				stmt.setString(27, generalB[i].getCsourcebillhid());
			}
			if (generalB[i].getCsourcebillbid() == null) {
				stmt.setNull(28, Types.CHAR);
			}
			else {
				stmt.setString(28, generalB[i].getCsourcebillbid());
			}
			if (generalB[i].getCsourcetype() == null) {
				stmt.setNull(29, Types.CHAR);
			}
			else {
				stmt.setString(29, generalB[i].getCsourcetype());
			}
			if (generalB[i].getVsourcebillcode() == null) {
				stmt.setNull(30, Types.CHAR);
			}
			else {
				stmt.setString(30, generalB[i].getVsourcebillcode());
			}
			if (generalB[i].getFchecked() == null) {
				stmt.setNull(31, Types.INTEGER);
			}
			else {
				stmt.setInt(31, generalB[i].getFchecked().intValue());
			}
			if (generalB[i].getCprojectid() == null) {
				stmt.setNull(32, Types.CHAR);
			}
			else {
				stmt.setString(32, generalB[i].getCprojectid());
			}
			if (generalB[i].getCcostobject() == null) {
				stmt.setNull(33, Types.CHAR);
			}
			else {
				stmt.setString(33, generalB[i].getCcostobject());
			}
			if (generalB[i].getCcorrespondbid() == null) {
				stmt.setNull(34, Types.CHAR);
			}
			else {
				stmt.setString(34, generalB[i].getCcorrespondbid());
			}
			if (generalB[i].getCcorrespondhid() == null) {
				stmt.setNull(35, Types.CHAR);
			}
			else {
				stmt.setString(35, generalB[i].getCcorrespondhid());
			}
			if (generalB[i].getCcorrespondtype() == null) {
				stmt.setNull(36, Types.CHAR);
			}
			else {
				stmt.setString(36, generalB[i].getCcorrespondtype());
			}
			if (generalB[i].getCcorrespondcode() == null) {
				stmt.setNull(37, Types.CHAR);
			}
			else {
				stmt.setString(37, generalB[i].getCcorrespondcode());
			}
			if (generalB[i].getFlargess() == null) {
				stmt.setNull(38, Types.CHAR);
			}
			else {
				stmt.setString(38, generalB[i].getFlargess().toString());
			}
			if (generalB[i].getBzgflag() == null) {
				stmt.setNull(39, Types.CHAR);
			}
			else {
				stmt.setString(39, generalB[i].getBzgflag().toString());
			}
			if (generalB[i].getIsok() == null) {
				stmt.setNull(40, Types.CHAR);
			}
			else {
				stmt.setString(40, generalB[i].getIsok().toString());
			}
			if (generalB[i].getCwp() == null) {
				stmt.setNull(41, Types.CHAR);
			}
			else {
				stmt.setString(41, generalB[i].getCwp());
			}

			//暂估日期
			if (generalB[i].getDzgdate() == null) {
				stmt.setNull(42, Types.CHAR);
			}
			else {
				stmt.setString(42, generalB[i].getDzgdate().toString());
			}
			if (generalB[i].getCrowno() == null) {
				stmt.setNull(43, Types.CHAR);
			}
			else {
				stmt.setString(43, generalB[i].getCrowno());
			}
			
			if (generalB[i].getBzgyfflag() == null) {
				stmt.setNull(44, Types.CHAR);
			}
			else {
				stmt.setString(44, generalB[i].getBzgyfflag().toString());
			}
			if (generalB[i].getPk_reqcorp() == null) {
				stmt.setNull(45, Types.CHAR);
			}
			else {
				stmt.setString(45, generalB[i].getPk_reqcorp());
			}
			if (generalB[i].getPk_invoicecorp() == null) {
				stmt.setNull(46, Types.CHAR);
			}
			else {
				stmt.setString(46, generalB[i].getPk_invoicecorp());
			}
			if (generalB[i].getPk_reqstoorg() == null) {
				stmt.setNull(47, Types.CHAR);
			}
			else {
				stmt.setString(47, generalB[i].getPk_reqstoorg());
			}
			if (generalB[i].getPk_creqwareid() == null) {
				stmt.setNull(48, Types.CHAR);
			}
			else {
				stmt.setString(48, generalB[i].getPk_creqwareid());
			}

			// find record by PK fields:
			stmt.setString(49, generalB[i].getPrimaryKey());
			//
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "updateBody", new Object[]{generalB});
	/*************************************************************/
}

/**
 * 此处插入方法说明。
 * 功能描述:更新入库单头
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public void updateHead(GeneralHHeaderVO generalH) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "updateHead", new Object[]{generalH});
	/*************************************************************/

	String sql = "update ic_general_h set pk_corp = ?, cbiztype = ?, cbilltypecode = ?, vbillcode = ?, dbilldate = ?, cwarehouseid = ?, cdispatcherid = ?, cdptid = ?, cwhsmanagerid = ?, coperatorid = ?, cregister = ?, dauditdate = ?, cauditorid = ?, daccountdate = ?, cinventoryid = ?, ccustomerid = ?, vdiliveraddress = ?, cdilivertypeid = ?, cwastewarehouseid = ?, cbizid = ?, cproviderid = ?, vnote = ?, fbillflag = ?, fspecialflag = ?, pk_calbody = ?, pk_purcorp = ? where cgeneralhid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		// update non PK fields:
		if (generalH.getPk_corp() == null) {
			stmt.setNull(1, Types.CHAR);
		}
		else {
			stmt.setString(1, generalH.getPk_corp());
		}
		if (generalH.getCbiztype() == null) {
			stmt.setNull(2, Types.CHAR);
		}
		else {
			stmt.setString(2, generalH.getCbiztype());
		}
		if (generalH.getCbilltypecode() == null) {
			stmt.setNull(3, Types.CHAR);
		}
		else {
			stmt.setString(3, generalH.getCbilltypecode());
		}
		if (generalH.getVbillcode() == null) {
			stmt.setNull(4, Types.CHAR);
		}
		else {
			stmt.setString(4, generalH.getVbillcode());
		}
		if (generalH.getDbilldate() == null) {
			stmt.setNull(5, Types.CHAR);
		}
		else {
			stmt.setString(5, generalH.getDbilldate().toString());
		}
		if (generalH.getCwarehouseid() == null) {
			stmt.setNull(6, Types.CHAR);
		}
		else {
			stmt.setString(6, generalH.getCwarehouseid());
		}
		if (generalH.getCdispatcherid() == null) {
			stmt.setNull(7, Types.CHAR);
		}
		else {
			stmt.setString(7, generalH.getCdispatcherid());
		}
		if (generalH.getCdptid() == null) {
			stmt.setNull(8, Types.CHAR);
		}
		else {
			stmt.setString(8, generalH.getCdptid());
		}
		if (generalH.getCwhsmanagerid() == null) {
			stmt.setNull(9, Types.CHAR);
		}
		else {
			stmt.setString(9, generalH.getCwhsmanagerid());
		}
		if (generalH.getCoperatorid() == null) {
			stmt.setNull(10, Types.CHAR);
		}
		else {
			stmt.setString(10, generalH.getCoperatorid());
		}
		if (generalH.getCregister() == null) {
			stmt.setNull(11, Types.CHAR);
		}
		else {
			stmt.setString(11, generalH.getCregister());
		}
		if (generalH.getDauditdate() == null) {
			stmt.setNull(12, Types.CHAR);
		}
		else {
			stmt.setString(12, generalH.getDauditdate().toString());
		}
		if (generalH.getCauditorid() == null) {
			stmt.setNull(13, Types.CHAR);
		}
		else {
			stmt.setString(13, generalH.getCauditorid());
		}
		if (generalH.getDaccountdate() == null) {
			stmt.setNull(14, Types.CHAR);
		}
		else {
			stmt.setString(14, generalH.getDaccountdate().toString());
		}
		if (generalH.getCinventoryid() == null) {
			stmt.setNull(15, Types.CHAR);
		}
		else {
			stmt.setString(15, generalH.getCinventoryid());
		}
		if (generalH.getCcustomerid() == null) {
			stmt.setNull(16, Types.CHAR);
		}
		else {
			stmt.setString(16, generalH.getCcustomerid());
		}
		if (generalH.getVdiliveraddress() == null) {
			stmt.setNull(17, Types.CHAR);
		}
		else {
			stmt.setString(17, generalH.getVdiliveraddress());
		}
		if (generalH.getCdilivertypeid() == null) {
			stmt.setNull(18, Types.CHAR);
		}
		else {
			stmt.setString(18, generalH.getCdilivertypeid());
		}
		if (generalH.getCwastewarehouseid() == null) {
			stmt.setNull(19, Types.CHAR);
		}
		else {
			stmt.setString(19, generalH.getCwastewarehouseid());
		}
		if (generalH.getCbizid() == null) {
			stmt.setNull(20, Types.CHAR);
		}
		else {
			stmt.setString(20, generalH.getCbizid());
		}
		if (generalH.getCproviderid() == null) {
			stmt.setNull(21, Types.CHAR);
		}
		else {
			stmt.setString(21, generalH.getCproviderid());
		}
		if (generalH.getVnote() == null) {
			stmt.setNull(22, Types.CHAR);
		}
		else {
			stmt.setString(22, generalH.getVnote());
		}
		if (generalH.getFbillflag() == null) {
			stmt.setNull(23, Types.INTEGER);
		}
		else {
			stmt.setInt(23, generalH.getFbillflag().intValue());
		}
		if (generalH.getFspecialflag() == null) {
			stmt.setNull(24, Types.INTEGER);
		}
		else {
			stmt.setInt(24, generalH.getFspecialflag().intValue());
		}
		if (generalH.getCstoreorganization() == null) {
			stmt.setNull(25, Types.CHAR);
		}
		else {
			stmt.setString(25, generalH.getCstoreorganization());
		}
		if (generalH.getPk_purcorp() == null) {
			stmt.setNull(26, Types.CHAR);
		}
		else {
			stmt.setString(26, generalH.getPk_purcorp());
		}
		
		// find record by PK fields:
		stmt.setString(27, generalH.getPrimaryKey());
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "updateHead", new Object[]{generalH});
	/*************************************************************/
}

/**
 * 功能描述:修改订单累计入库数量
 * 输入参数:ArrayList{boolean[]是否到货计划,String[]订单行或到货计划;UFDouble[]累计入库增量}
 * 返回值:void
 * 异常处理:SQLException
 * 作者：熊海情
 * 修改：晁志平 增加回写到货计划处理
 */
public void updateOrderStockNum(ArrayList list) throws java.sql.SQLException {

	String sql1 = "update po_order_b set naccumstorenum = coalesce(naccumstorenum,0) + (?) where corder_bid = ? ";
	String sql2 = "update po_order_bb1 set naccumstorenum = coalesce(naccumstorenum,0) + (?) where corder_bb1id = ? ";

	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	boolean[] isPlanLines = (boolean[]) list.get(0);
	String[] saKey = (String[]) list.get(1);
	UFDouble[] uaNumAdded = (UFDouble[]) list.get(2);
	String strPkCorp = (String) list.get(3);
	Vector vBId = new Vector();
	Vector vBNum = new Vector();
	Vector vBB1Num = new Vector();
	Vector vBB1Id = new Vector();
	int iLen = isPlanLines.length;
	for (int i = 0; i < iLen; i++) {
		if (isPlanLines[i]) {
			vBB1Id.addElement(saKey[i]);
			vBB1Num.addElement(uaNumAdded[i]);
		} else {
			vBId.addElement(saKey[i]);
			vBNum.addElement(uaNumAdded[i]);
		}
	}
	try {
		con = getConnection();
		int iSize = 0;
		//订单行
		if (vBId.size() > 0) {
			stmt = prepareStatement(con, sql1);
			iSize = vBId.size();
			for (int i = 0; i < iSize; i++) {
				stmt.setDouble(1, ((UFDouble) vBNum.elementAt(i)).doubleValue());
				stmt.setString(2, (String) vBId.elementAt(i));
				executeUpdate(stmt);
			}
			executeBatch(stmt);
			//检查数量容差(期初暂估入库单没有退货)
			String strCtrl = getCtrlStringPu(strPkCorp);
			if ("不保存".equals(strCtrl)) {
				UFDouble ufdRate = getCtrlRatePu(strPkCorp);
				String strCheckB =
					"select corder_bid, nordernum, naccumstorenum from po_order_b where dr = 0 and (";
				for (int i = 0; i < iSize; i++) {
					if (i == 0)
						strCheckB += "corder_bid ='";
					else
						strCheckB += "or corder_bid ='";
					strCheckB += vBId.elementAt(i);
					strCheckB += "' ";
				}
				strCheckB += ") ";
				stmt = prepareStatement(con, strCheckB);
				rs = stmt.executeQuery();
				Object oTemp1 = null, oTemp2 = null;
				UFDouble d1 = new UFDouble(0), d2 = new UFDouble(0);
				while (rs.next()) {
					String sId = rs.getString(1);
					oTemp1 = rs.getObject(2);
					oTemp2 = rs.getObject(3);
					if(oTemp1 != null) d1 = new UFDouble(oTemp1.toString());
					if(oTemp2 != null) d2 = new UFDouble(oTemp2.toString());
					if(d1.doubleValue() < 0){
						d1 = new UFDouble(-d1.doubleValue());
						d2 = new UFDouble(-d2.doubleValue());
					}
					if (sId != null) {
						d1 = new UFDouble(d1.doubleValue() * (1 + ufdRate.doubleValue()));
						if(d1.doubleValue() > 0 && d2.doubleValue() > d1.doubleValue()) throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000091")/*@res "存在入库单实收数量超出订单行数量容差范围"*/);					
					}
				}
			}
		}
		//到货计划
		if (vBB1Id.size() > 0) {
			stmt = prepareStatement(con, sql2);
			iSize = vBB1Id.size();
			for (int i = 0; i < iSize; i++) {
				stmt.setDouble(1, ((UFDouble) vBB1Num.elementAt(i)).doubleValue());
				stmt.setString(2, (String) vBB1Id.elementAt(i));
				executeUpdate(stmt);
			}
			executeBatch(stmt);
			//检查数量容差(期初暂估入库单没有退货)
			String strCtrl = getCtrlStringPu(strPkCorp);
			if ("不保存".equals(strCtrl)) {
				UFDouble ufdRate = getCtrlRatePu(strPkCorp);
				String strCheckBB1 =
					"select corder_bb1id, nordernum, naccumstorenum from po_order_bb1 where dr = 0 and (";
				for (int i = 0; i < iSize; i++) {
					if (i == 0)
						strCheckBB1 += "corder_bb1id ='";
					else
						strCheckBB1 += "or corder_bb1id ='";
					strCheckBB1 += vBB1Id.elementAt(i);
					strCheckBB1 += "' ";
				}
				strCheckBB1 += ") ";
				stmt = prepareStatement(con, strCheckBB1);
				rs = stmt.executeQuery();
				Object oTemp1 = null, oTemp2 = null;
				UFDouble d1 = new UFDouble(0), d2 = new UFDouble(0);
				while (rs.next()) {
					String sId = rs.getString(1);
					oTemp1 = rs.getObject(2);
					oTemp2 = rs.getObject(3);
					if(oTemp1 != null) d1 = new UFDouble(oTemp1.toString());
					if(oTemp2 != null) d2 = new UFDouble(oTemp2.toString());
					if(d1.doubleValue() < 0){
						d1 = new UFDouble(-d1.doubleValue());
						d2 = new UFDouble(-d2.doubleValue());
					}
					if (sId != null) {
						d1 = new UFDouble(d1.doubleValue() * (1 + ufdRate.doubleValue()));
						if(d1.doubleValue() > 0 && d2.doubleValue() > d1.doubleValue()) throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000092")/*@res "存在入库单实收数量超出订单到货计划数量容差范围"*/);					
					}
				}
			}
		}
	} catch (SQLException e) {
		throw e;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
}

/**
 * 功能:指定入库单行ID[],判断是否存在反暂过单据行
 * 参数:Vector ,入库单行ID[]
 * 异常:SQLException
 * 创建:2004-06-16
 * 作者:晁志平
 *
 */
public void checkExistAntiEsti(Vector vBid) throws SQLException {
	checkExistBadStatus(vBid, "and dr = 0 and bzgflag = 'N' ", nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000087")/*@res "入库单已经反暂过，请刷新界面再操作"*/);
}

/**
 * 功能:指定入库单行ID[],判断是否存在反暂过单据行
 * 参数:Vector,入库单行ID[];String ,条件串
 * 异常:SQLException
 * 创建:2004-06-16
 * 作者:晁志平
 *
 */
private void checkExistBadStatus(Vector vBid, String strWherePart, String strErrMsg) throws SQLException {

	String sql = "select count(*) from ic_general_b where cgeneralbid in ";
	if (vBid == null || vBid.size() == 0)
		return;
	int iSize = vBid.size();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	String strSetId = null;
	try {
		String[] saBid = new String[iSize];
		vBid.copyInto(saBid);
		nc.bs.scm.pub.TempTableDMO dmoTmpTbl = new nc.bs.scm.pub.TempTableDMO();
		strSetId =
			dmoTmpTbl.insertTempTable(saBid, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU51, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().length() == 0)
			strSetId = "('ErrorIdByCzp')";
		sql += strSetId + " ";
		sql += strWherePart;
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		int iExistCnt = 0;
		if (rs.next()) {
			Integer iCnt = (Integer) rs.getObject(1);
			iExistCnt = iCnt == null ? 0 : iCnt.intValue();
		}
		if (0 < iExistCnt) {
			throw new SQLException(strErrMsg);
		}
	} catch (SQLException e) {
		throw e;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

}

/**
 * 功能:指定入库单行ID[],判断是否存在暂估过单据行
 * 参数:Vector ,入库单行ID[]
 * 异常:SQLException
 * 创建:2004-06-16
 * 作者:晁志平
 *
 */
public void checkExistEsti(Vector vBid) throws SQLException {
	checkExistBadStatus(vBid, "and dr = 0 and bzgflag = 'Y' ", nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000088")/*@res "入库单已经暂估过，请刷新界面再操作"*/);
}



/**zhwj
 * 功能:指定入库单行ID[],判断是否存在暂估过单据行
 * 参数:Vector ,入库单行ID[]
 * 异常:SQLException
 * 创建:2004-06-16
 * 作者:晁志平
 *
 */
public void checkExistEsti_yf(Vector vBid) throws SQLException {
	checkExistBadStatus(vBid, "and dr = 0 and nvl(vuserdef19,'未暂估且未结算') <> '未暂估且未结算' ", nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000088")/*@res "入库单已经暂估过，请刷新界面再操作"*/);
}


/**
 * 功能:查询期初暂估入库单表体--临时表方案
 * 输入:String[],入库单表头ID[]；String[],入库单表头TS[]
 * 返回:GeneralHItemVO[]
 * 异常:SQLException
 * 日期:2003/02/20
 * 修改:晁志平 FOR V30 效率优化，采用临时表方案拼接查询条件
 */
public GeneralHItemVO[] queryInitialBodys(String[] saHId, String[] saHTs) throws SQLException {
	/*创建临时表:
	 *nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU100
	 *nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU94
	 */
	Vector vAllKey = new Vector(); //除重复ID
	Vector vHid = new Vector();
	Vector vHts = new Vector();
	int iLen = saHId.length;
	for (int i = 0; i < iLen; i++) {
		if (saHId[i] == null) {
			continue;
		}
		if (saHTs[i] == null) {
			saHTs[i] = "2000-01-01 00:00:00";
		}
		if (vAllKey.contains(saHId[i] + saHTs[i])) {
			continue;
		}
		vHid.add(saHId[i]);
		vHts.add(saHTs[i]);
		vAllKey.add(saHId[i] + saHTs[i]);
	}
	java.util.ArrayList listTblDataId = new java.util.ArrayList();
	java.util.ArrayList listTblDataTs = new java.util.ArrayList();
	java.util.ArrayList listTmp = null;
	iLen = vAllKey.size();
	for (int i = 0; i < iLen; i++) {
		listTmp = new java.util.ArrayList();
		listTmp.add(new Integer(i));
		listTmp.add(vHid.elementAt(i));
		listTblDataId.add(listTmp);
		listTmp = new java.util.ArrayList();
		listTmp.add(new Integer(i));
		listTmp.add(vHts.elementAt(i));
		listTblDataTs.add(listTmp);
	}
	String strTblNameTs = null;
	String strTblNameId = null;
	try {
		nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
		strTblNameTs =
			dmo.getTempStringTable(
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU100,
				new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "cts" },
				new String[] { "int", "char(19)" },
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
				listTblDataTs);
		strTblNameId =
			dmo.getTempStringTable(
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU94,
				new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "cmangid" },
				new String[] { "int", "char(20)" },
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
				listTblDataId);
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	//拼接SQL
	String sql =
		"select cgeneralbid, A.cgeneralhid, A.cinventoryid, vbatchcode, vfree1, vfree2, vfree3, vfree4, vfree5, dvalidate, dbizdate, dstandbydate, vproductbatch, nshouldoutnum, nshouldoutassistnum, noutnum, noutassistnum, nshouldinnum, castunitid, nneedinassistnum, ninnum, ninassistnum, ntranoutnum, nprice, nmny, nplannedprice, nplannedmny, csourcebillhid, csourcebillbid, csourcetype, vsourcebillcode, fchecked, cprojectid, ccostobject, ccorrespondbid, ccorrespondhid, ccorrespondtype, ccorrespondcode, flargess, A.vuserdef1, A.vuserdef2, A.vuserdef3, A.vuserdef4, A.vuserdef5, A.vuserdef6, bzgflag, isok, cwp, A.ts, crowno, corder_bb1id "
			+ "from ic_general_b as A, ic_general_h as B,"
			+ strTblNameId
			+ " as hid,"
			+ strTblNameTs
			+ " as tts "
			+ "where A.cgeneralhid = B.cgeneralhid and B.cgeneralhid = hid.cmangid and B.ts = tts.cts and hid."
			+ nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU
			+ " = tts."
			+ nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU
			+ " and A.dr = 0 and B.dr = 0 ";
	//
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();

		stmt = con.prepareStatement(sql);

		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			GeneralHItemVO generalB = new GeneralHItemVO();
			// cgeneralbid :
			String cgeneralbid = rs.getString(1);
			generalB.setCgeneralbid(cgeneralbid == null ? null : cgeneralbid.trim());
			// cgeneralhid :
			String cgeneralhid = rs.getString(2);
			generalB.setCgeneralhid(cgeneralhid == null ? null : cgeneralhid.trim());
			// cmangid :
			String cmangid = rs.getString(3);
			generalB.setCinventoryid(cmangid == null ? null : cmangid.trim());
			// vbatchcode :
			String vbatchcode = rs.getString(4);
			generalB.setVbatchcode(vbatchcode == null ? null : vbatchcode.trim());
			// vfree1 :
			String vfree1 = rs.getString(5);
			generalB.setVfree1(vfree1 == null ? null : vfree1.trim());
			// vfree2 :
			String vfree2 = rs.getString(6);
			generalB.setVfree2(vfree2 == null ? null : vfree2.trim());
			// vfree3 :
			String vfree3 = rs.getString(7);
			generalB.setVfree3(vfree3 == null ? null : vfree3.trim());
			// vfree4 :
			String vfree4 = rs.getString(8);
			generalB.setVfree4(vfree4 == null ? null : vfree4.trim());
			// vfree5 :
			String vfree5 = rs.getString(9);
			generalB.setVfree5(vfree5 == null ? null : vfree5.trim());
			// dvalidate :
			String dvalidate = rs.getString(10);
			generalB.setDvalidate(dvalidate == null ? null : new UFDate(dvalidate.trim(), false));
			// dbizdate :
			String dbizdate = rs.getString(11);
			generalB.setDbizdate(dbizdate == null ? null : new UFDate(dbizdate.trim(), false));
			// dstandbydate :
			String dstandbydate = rs.getString(12);
			generalB.setDstandbydate(dstandbydate == null ? null : new UFDate(dstandbydate.trim(), false));
			// vproductbatch :
			String vproductbatch = rs.getString(13);
			generalB.setVproductbatch(vproductbatch == null ? null : vproductbatch.trim());
			// nshouldoutnum :
			Object nshouldoutnum = rs.getObject(14);
			generalB.setNshouldoutnum(nshouldoutnum == null ? new UFDouble(0.0) : new UFDouble(nshouldoutnum.toString()));
			// nshouldoutassistnum :
			Object nshouldoutassistnum = rs.getObject(15);
			generalB.setNshouldoutassistnum(
				nshouldoutassistnum == null ? new UFDouble(0.0) : new UFDouble(nshouldoutassistnum.toString()));
			// noutnum :
			Object noutnum = rs.getObject(16);
			generalB.setNoutnum(noutnum == null ? new UFDouble(0.0) : new UFDouble(noutnum.toString()));
			// noutassistnum :
			Object noutassistnum = rs.getObject(17);
			generalB.setNoutassistnum(noutassistnum == null ? new UFDouble(0.0) : new UFDouble(noutassistnum.toString()));
			// nshouldinnum :
			Object nshouldinnum = rs.getObject(18);
			generalB.setNshouldinnum(nshouldinnum == null ? new UFDouble(0.0) : new UFDouble(nshouldinnum.toString()));
			// castunitid :
			String castunitid = rs.getString(19);
			generalB.setCastunitid(castunitid == null ? null : castunitid.trim());
			// nneedinassistnum :
			Object nneedinassistnum = rs.getObject(20);
			generalB.setNneedinassistnum(nneedinassistnum == null ? new UFDouble(0.0) : new UFDouble(nneedinassistnum.toString()));
			// ninnum :
			Object ninnum = rs.getObject(21);
			generalB.setNinnum(ninnum == null ? new UFDouble(0.0) : new UFDouble(ninnum.toString()));
			// ninassistnum :
			Object ninassistnum = rs.getObject(22);
			generalB.setNinassistnum(ninassistnum == null ? new UFDouble(0.0) : new UFDouble(ninassistnum.toString()));
			// ntranoutnum :
			Object ntranoutnum = rs.getObject(23);
			generalB.setNtranoutnum(ntranoutnum == null ? new UFDouble(0.0) : new UFDouble(ntranoutnum.toString()));
			// nprice :
			Object nprice = rs.getObject(24);
			generalB.setNprice(nprice == null ? new UFDouble(0.0) : new UFDouble(nprice.toString()));
			// nmny :
			Object nmny = rs.getObject(25);
			generalB.setNmny(nmny == null ? new UFDouble(0.0) : new UFDouble(nmny.toString()));
			// nplannedprice :
			Object nplannedprice = rs.getObject(26);
			generalB.setNplannedprice(nplannedprice == null ? new UFDouble(0.0) : new UFDouble(nplannedprice.toString()));
			// nplannedmny :
			Object nplannedmny = rs.getObject(27);
			generalB.setNplannedmny(nplannedmny == null ? new UFDouble(0.0) : new UFDouble(nplannedmny.toString()));
			// csourcebillhid :
			String csourcebillhid = rs.getString(28);
			generalB.setCsourcebillhid(csourcebillhid == null ? null : csourcebillhid.trim());
			// csourcebillbid :
			String csourcebillbid = rs.getString(29);
			generalB.setCsourcebillbid(csourcebillbid == null ? null : csourcebillbid.trim());
			// csourcetype :
			String csourcetype = rs.getString(30);
			generalB.setCsourcetype(csourcetype == null ? null : csourcetype.trim());
			// vsourcebillcode :
			String vsourcebillcode = rs.getString(31);
			generalB.setVsourcebillcode(vsourcebillcode == null ? null : vsourcebillcode.trim());
			// fchecked :
			Integer fchecked = (Integer) rs.getObject(32);
			generalB.setFchecked(fchecked == null ? null : fchecked);
			// cprojectid :
			String cprojectid = rs.getString(33);
			generalB.setCprojectid(cprojectid == null ? null : cprojectid.trim());
			// ccostobject :
			String ccostobject = rs.getString(34);
			generalB.setCcostobject(ccostobject == null ? null : ccostobject.trim());
			// ccorrespondbid :
			String ccorrespondbid = rs.getString(35);
			generalB.setCcorrespondbid(ccorrespondbid == null ? null : ccorrespondbid.trim());
			// ccorrespondhid :
			String ccorrespondhid = rs.getString(36);
			generalB.setCcorrespondhid(ccorrespondhid == null ? null : ccorrespondhid.trim());
			// ccorrespondtype :
			String ccorrespondtype = rs.getString(37);
			generalB.setCcorrespondtype(ccorrespondtype == null ? null : ccorrespondtype.trim());
			// ccorrespondcode :
			String ccorrespondcode = rs.getString(38);
			generalB.setCcorrespondcode(ccorrespondcode == null ? null : ccorrespondcode.trim());
			// flargess :
			String flargess = rs.getString(39);
			generalB.setFlargess(flargess == null ? null : new UFBoolean(flargess.trim()));
			// vuserdef1 :
			String vuserdef1 = rs.getString(40);
			generalB.setVuserdef1(vuserdef1 == null ? null : vuserdef1.trim());
			// vuserdef2 :
			String vuserdef2 = rs.getString(41);
			generalB.setVuserdef2(vuserdef2 == null ? null : vuserdef2.trim());
			// vuserdef3 :
			String vuserdef3 = rs.getString(42);
			generalB.setVuserdef3(vuserdef3 == null ? null : vuserdef3.trim());
			// vuserdef4 :
			String vuserdef4 = rs.getString(43);
			generalB.setVuserdef4(vuserdef4 == null ? null : vuserdef4.trim());
			// vuserdef5 :
			String vuserdef5 = rs.getString(44);
			generalB.setVuserdef5(vuserdef5 == null ? null : vuserdef5.trim());
			// vuserdef6 :
			String vuserdef6 = rs.getString(45);
			generalB.setVuserdef6(vuserdef6 == null ? null : vuserdef6.trim());
			// bzgflag :
			String bzgflag = rs.getString(46);
			generalB.setBzgflag(bzgflag == null ? null : new UFBoolean(bzgflag.trim()));
			// isok :
			String isok = rs.getString(47);
			generalB.setIsok(isok == null ? null : new UFBoolean(isok.trim()));
			// cwp :
			String cwp = rs.getString(48);
			generalB.setCwp(cwp == null ? null : cwp.trim());
			// ts :
			String ts = rs.getString(49);
			generalB.setTs(ts == null ? null : ts.trim());
			// crowno :
			String crowno = rs.getString(50);
			generalB.setCrowno(crowno == null ? null : crowno.trim());
			// corder_bb1id :
			String corder_bb1id = rs.getString(51);
			generalB.setCorder_bb1id(corder_bb1id == null ? null : corder_bb1id.trim());

			v.addElement(generalB);
		}
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	if (v.size() > 0) {
		GeneralHItemVO bodyVO[] = new GeneralHItemVO[v.size()];
		v.copyInto(bodyVO);
		return bodyVO;
	}

	return null;
}






/**zhwj
 * 功能：查询入库单(暂估、反暂共用)
 * 输入：公司主键、查询条件串、暂估标志
 * 返回：暂估VO[]
 * 创建：2001-5-30
 * 作者：熊海情
 * 修改：晁志平 FOR V30 效率优化
 */
public EstimateVO[] queryEstimate_yf(String unitCode, String sCondition, String sZG) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryEstimate", new Object[] { unitCode, sCondition, sZG });
	/*************************************************************/
	String sql =
		"select A.vuserdef1,A.vuserdef2,A.vuserdef3,A.vuserdef4,A.vuserdef5,A.vuserdef6,A.vuserdef7,A.vuserdef8,A.vuserdef9,A.vuserdef10,";
	sql += "A.cdispatcherid,A.cbizid,A.vnote,A.cwhsmanagerid,A.cdptid,A.cbilltypecode,";
	sql
		+= "B.cprojectid,B.cprojectphaseid,B.cfirsttype,B.cfirstbillbid,B.cfirstbillhid,B.ninassistnum,B.hsl,B.nplannedmny,B.castunitid,B.dbizdate,";

	sql
		+= "vbillcode, dbilldate, cproviderid, A.cgeneralhid, B.cgeneralbid, B.cinventoryid, B.vuserdef1, B.vuserdef2, B.vuserdef3, B.vuserdef4, B.vuserdef5, B.vuserdef6, B.vfree1, B.vfree2, B.vfree3, B.vfree4, B.vfree5, ninnum,";
	sql
		+= "naccountnum1, naccountmny, A.cwarehouseid, A.pk_corp, nmaterialmoney, cgeneralbb3, A.ts, B.ts, C.ts, cbiztype, vbatchcode,csourcebillhid, csourcebillbid, B.crowno, A.pk_calbody,";
	if (sZG.toUpperCase().equals("Y")) {
		sql += "nvl(man.def20,0) npprice, nvl(ninnum,0)*nvl(man.def20,0) npmoney, dzgdate, ";
	} else {
		sql += "nvl(man.def20,0) nprice, nvl(ninnum,0)*nvl(man.def20,0) nmny, dzgdate, ";
	}
	
	sql += "A.vuserdef11,A.vuserdef12,A.vuserdef13,A.vuserdef14,A.vuserdef15,A.vuserdef16,A.vuserdef17,A.vuserdef18,A.vuserdef19,A.vuserdef20, ";
	sql += "A.pk_defdoc1,A.pk_defdoc2,A.pk_defdoc3,A.pk_defdoc4,A.pk_defdoc5,A.pk_defdoc6,A.pk_defdoc7,A.pk_defdoc8,A.pk_defdoc9,A.pk_defdoc10, ";
	sql += "A.pk_defdoc11,A.pk_defdoc12,A.pk_defdoc13,A.pk_defdoc14,A.pk_defdoc15,A.pk_defdoc16,A.pk_defdoc17,A.pk_defdoc18,A.pk_defdoc19,A.pk_defdoc20, ";
	sql += "B.vuserdef7,B.vuserdef8,B.vuserdef9,B.vuserdef10,B.vuserdef11,B.vuserdef12,B.vuserdef13,B.vuserdef14,B.vuserdef15,B.vuserdef16,B.vuserdef17,B.vuserdef18,B.vuserdef19,B.vuserdef20, ";
	sql += "B.pk_defdoc1,B.pk_defdoc2,B.pk_defdoc3,B.pk_defdoc4,B.pk_defdoc5,B.pk_defdoc6,B.pk_defdoc7,B.pk_defdoc8,B.pk_defdoc9,B.pk_defdoc10, ";
	sql += "B.pk_defdoc11,B.pk_defdoc12,B.pk_defdoc13,B.pk_defdoc14,B.pk_defdoc15,B.pk_defdoc16,B.pk_defdoc17,B.pk_defdoc18,B.pk_defdoc19,B.pk_defdoc20,B.cvendorid, ";
	sql += "bzgyfflag,nzgyfprice,nzgyfmoney,B.pk_invoicecorp,pk_purcorp,vfirstbillcode,iscalculatedinvcost ";

	sql += "from ic_general_h A,ic_general_b B,ic_general_bb3 C,bd_invmandoc   man, bd_stordoc S, bd_busitype BT,po_order_b     pob,bd_defdoc      def ";
	sql
		+= "where A.cbiztype = BT.pk_busitype " +
				"and A.cwarehouseid = S.pk_stordoc " +
				"and cbilltypecode = '45' " +
				"and A.dr = 0 and B.dr = 0 " +
				"and A.cgeneralhid=B.cgeneralhid " +
				"and A.cgeneralhid=C.cgeneralhid " +
				"and B.cgeneralbid=C.cgeneralbid " +
				//"and (A.fbillflag = 3 or A.fbillflag = 4) "+
	            "and b.cfirstbillbid=pob.corder_bid "+
	            "and b.cinventoryid = man.pk_invmandoc "+
			    "and pob.pk_defdoc17=def.pk_defdoc(+) "+ 
			    "and nvl(def.docname,'否')='是' ";
//	sql += "and upper(bzgflag) = '" + sZG + "' ";//zhwj
	//zhwj 
	if (sZG.toUpperCase().equals("N")){
		sql += "and nvl(B.vuserdef19,'未暂估且未结算') = '未暂估且未结算' ";
	}else {
//		sql += "and nvl(B.vuserdef19,'未暂估且未结算') in ('已暂估且未结算','已暂估部分结算') ";
		sql += "and nvl(B.vuserdef19,'未暂估且未结算') = '已暂估且未结算' ";
	}
	
	
	if (unitCode != null) {
		sql += "and A.pk_corp = " + "'" + unitCode + "' ";
	}
	 
	//zhwj
		sCondition = sCondition.replaceAll("A.cwarehouseid", "cwarehouseid");
		sCondition = sCondition.replaceAll("cwarehouseid", "A.cwarehouseid");
		
	
	sql += sCondition + " ";

	//已结算的入库单不能暂估
	if (sZG.toUpperCase().equals("N"))
//		sql += "and naccountnum1 = 0.0 and abs(ninnum) > 0.0 ";//zhwj 系统结算 回写naccountnum1，则不能暂估或反暂估，当运费暂估通过nvl(B.vuserdef19,'未暂估且未结算') in ('已暂估且未结算','已暂估部分结算')反判断
		sql += "and  abs(ninnum) > 0.0 ";
		
	//已结算的暂估入库单不能取消暂估
	if (sZG.toUpperCase().equals("Y"))
//		sql += "and naccountnum1 = 0.0 ";//zhwj 系统结算 回写naccountnum1，
		sql += "and 1=1 ";

	//按入库单号 + 行号排序列
	sql += "order by vbillcode, crowno ";

	EstimateVO[] estimates = null;
	Vector v = new Vector();
	Vector vMangID = new Vector();
	Vector vBaseID = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		Vector vv = new Vector();
		ResultSet rs = stmt.executeQuery();
		//
		String strTmp = null;
		Object oTmp = null;
		int iIdx = 0;
		EstimateVO estimate = null;
		while (rs.next()) {
			iIdx = 1;
			estimate = new EstimateVO();
			// A.vuserdef1-10
			estimate.setVuserdefh1(rs.getString(iIdx++));
			estimate.setVuserdefh2(rs.getString(iIdx++));
			estimate.setVuserdefh3(rs.getString(iIdx++));
			estimate.setVuserdefh4(rs.getString(iIdx++));
			estimate.setVuserdefh5(rs.getString(iIdx++));
			estimate.setVuserdefh6(rs.getString(iIdx++));
			estimate.setVuserdefh7(rs.getString(iIdx++));
			estimate.setVuserdefh8(rs.getString(iIdx++));
			estimate.setVuserdefh9(rs.getString(iIdx++));
			estimate.setVuserdefh10(rs.getString(iIdx++));
			// cdispathcerid
			estimate.setCdispatcherid(rs.getString(iIdx++));
			// coperatorid
			estimate.setCoperatorid(rs.getString(iIdx++));
			// vnote
			estimate.setVnote(rs.getString(iIdx++));
			// cwhsmanagerid
			estimate.setCwhsmanagerid(rs.getString(iIdx++));
			// cdptid
			estimate.setCdptid(rs.getString(iIdx++));
			// cbilltypecode
			estimate.setCbilltypecode(rs.getString(iIdx++));
			//B.cprojectid,
			estimate.setCprojectid(rs.getString(iIdx++));
			//B.cprojectphaseid,
			estimate.setCprojectphaseid(rs.getString(iIdx++));
			//B.cfirsttype,
			estimate.setCfirsttype(rs.getString(iIdx++));
			//B.cfirstbillbid,
			estimate.setCfirstbillbid(rs.getString(iIdx++));
			//B.cfirstbillhid,
			estimate.setCfirstbillhid(rs.getString(iIdx++));
			//B.ninassistnum,
			oTmp = rs.getObject(iIdx++);
			estimate.setNinassistnum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			//B.hsl,
			oTmp = rs.getObject(iIdx++);
			estimate.setHsl(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			//B.nplannedmny,
			oTmp = rs.getObject(iIdx++);
			estimate.setNplannedmny(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			//B.castunitid,
			estimate.setCastunitid(rs.getString(iIdx++));
			//B.dbizdate,
			strTmp = rs.getString(iIdx++);
			estimate.setDbizdate(strTmp == null ? null : new UFDate(strTmp.trim(), false));
			// vbillcode :
			strTmp = rs.getString(iIdx++);
			estimate.setVbillcode(strTmp == null ? null : strTmp.trim());
			// dbilldate :
			strTmp = rs.getString(iIdx++);
			estimate.setDbilldate(strTmp == null ? null : new UFDate(strTmp.trim(), false));
			// cproviderid :
			strTmp = rs.getString(iIdx++);
			estimate.setCprovidermangid(strTmp == null ? null : strTmp.trim());
			// cgeneralhid :
			strTmp = rs.getString(iIdx++);
			estimate.setCgeneralhid(strTmp == null ? null : strTmp.trim());
			// cgeneralbid :
			strTmp = rs.getString(iIdx++);
			estimate.setCgeneralbid(strTmp == null ? null : strTmp.trim());
			// cmangid :
			strTmp = rs.getString(iIdx++);
			estimate.setCmangid(strTmp == null ? null : strTmp.trim());
			// vuserdef1 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef1(strTmp == null ? null : strTmp.trim());
			// vuserdef2 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef2(strTmp == null ? null : strTmp.trim());
			// vuserdef3 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef3(strTmp == null ? null : strTmp.trim());
			// vuserdef4 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef4(strTmp == null ? null : strTmp.trim());
			// vuserdef5 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef5(strTmp == null ? null : strTmp.trim());
			// vuserdef6 :
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef6(strTmp == null ? null : strTmp.trim());
			// vfree1 :
			strTmp = rs.getString(iIdx++);
			estimate.setVfree1(strTmp == null ? null : strTmp.trim());
			// vfree2 :
			strTmp = rs.getString(iIdx++);
			estimate.setVfree2(strTmp == null ? null : strTmp.trim());
			// vfree3 :
			strTmp = rs.getString(iIdx++);
			estimate.setVfree3(strTmp == null ? null : strTmp.trim());
			// vfree4 :
			strTmp = rs.getString(iIdx++);
			estimate.setVfree4(strTmp == null ? null : strTmp.trim());
			// vfree5 :
			strTmp = rs.getString(iIdx++);
			estimate.setVfree5(strTmp == null ? null : strTmp.trim());
			// ninnum :
			oTmp = rs.getObject(iIdx++);
			estimate.setNinnum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nsettlenum :
			oTmp = rs.getObject(iIdx++);
			estimate.setNsettlenum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nsettlemny :
			oTmp = rs.getObject(iIdx++);
			estimate.setNsettlemny(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// cwarehouseid :
			strTmp = rs.getString(iIdx++);
			estimate.setCwarehouseid(strTmp == null ? null : strTmp.trim());
			// cunitid :
			strTmp = rs.getString(iIdx++);
			estimate.setPk_corp(strTmp == null ? null : strTmp.trim());
			// nmaterialmoney :
			oTmp = rs.getObject(iIdx++);
			estimate.setNmaterialmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// cgeneralbb3 :
			strTmp = rs.getString(iIdx++);
			estimate.setCgeneralbb3(strTmp == null ? null : strTmp.trim());
			// ts1 :
			strTmp = rs.getString(iIdx++);
			estimate.setTs1(strTmp == null ? null : strTmp.trim());
			// ts2 :
			strTmp = rs.getString(iIdx++);
			estimate.setTs2(strTmp == null ? null : strTmp.trim());
			// ts3 :
			strTmp = rs.getString(iIdx++);
			estimate.setTs3(strTmp == null ? null : strTmp.trim());
			// cbiztype :
			strTmp = rs.getString(iIdx++);
			estimate.setCbiztype(strTmp == null ? null : strTmp.trim());
			// vbatchcode :
			strTmp = rs.getString(iIdx++);
			estimate.setVbatchcode(strTmp == null ? null : strTmp.trim());
			// csourcebillhid :
			strTmp = rs.getString(iIdx++);
			estimate.setCsourcebillhid(strTmp == null ? null : strTmp.trim());
			// csourcebillbid :
			strTmp = rs.getString(iIdx++);
			estimate.setCsourcebillbid(strTmp == null ? null : strTmp.trim());
			// crowno :
			strTmp = rs.getString(iIdx++);
			estimate.setAttributeValue("crowno", strTmp);
			// pk_calbody :
			strTmp = rs.getString(iIdx++);
			estimate.setCcalbodyid(strTmp == null ? null : strTmp.trim());
			// nprice :
			oTmp = rs.getObject(iIdx++);
			estimate.setNprice(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nmoney :
			oTmp = rs.getObject(iIdx++);
			estimate.setNmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// dzgdate :
			strTmp = rs.getString(iIdx++);
			estimate.setDzgdate(strTmp == null ? null : new UFDate(strTmp.trim(), false));

			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdefh20(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch1(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch2(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch3(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch4(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch5(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch6(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch7(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch8(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch9(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch10(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdoch20(strTmp == null ? "" : strTmp.trim());
			
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef7(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef8(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef9(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef10(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVuserdef20(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb1(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb2(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb3(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb4(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb5(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb6(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb7(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb8(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb9(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb10(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_defdocb20(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString(iIdx++);
			estimate.setCvendorid(strTmp == null ? "" : strTmp.trim());			
			strTmp = rs.getString(iIdx++);
			estimate.setBzgyf(strTmp == null ? new UFBoolean(false) : new UFBoolean(strTmp.trim()));			
			// nzgyfprice :
			oTmp = rs.getObject(iIdx++);
			estimate.setNtaxprice(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nzgyfmoney :
			oTmp = rs.getObject(iIdx++);
			estimate.setNtotalmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// cunitid :
			strTmp = rs.getString(iIdx++);
			estimate.setPk_invoicecorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setPk_purcorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString(iIdx++);
			estimate.setVfirstbillcode(strTmp == null ? null : strTmp.trim());			
      strTmp = rs.getString(iIdx++);
      estimate.setBcalculatecost(strTmp == null ? new UFBoolean(false) : new UFBoolean(strTmp.trim()));      
			
			vv.addElement(estimate);
		}
		if (rs != null)
			rs.close();
		if (stmt != null)
			stmt.close();

		if (vv.size() > 0) {
			String sqlsql =
				"select pk_invmandoc, A.pk_invbasdoc from bd_invmandoc A, bd_invbasdoc B where A.dr = 0 and B.dr = 0 and A.pk_corp = '"
					+ unitCode
					+ "' ";
			sqlsql += "and A.pk_invbasdoc = B.pk_invbasdoc and upper(laborflag) = 'N' and upper(discountflag) = 'N' ";
			//sqlsql += "and upper(sellproxyflag) = 'N' and ("; /**CZP DELETED FOR XY 2004-04-27*/
			sqlsql += "and pk_invmandoc in ";
			Vector vTemp = new Vector();
			vTemp.addElement(((saleEstimateVO) vv.elementAt(0)).getPk_invmandoc());
			for (int i = 1; i < vv.size(); i++) {
				if (!vTemp.contains(((saleEstimateVO) vv.elementAt(i)).getPk_invmandoc()))
					vTemp.addElement(((saleEstimateVO) vv.elementAt(i)).getPk_invmandoc());
			}
			String sTemp[] = new String[vTemp.size()];
			vTemp.copyInto(sTemp);
			//临时表
			try {
				String strSetId = null;
				nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
				strSetId =
					dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU25, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
				if (strSetId == null || strSetId.trim().equals("()")) {
					strSetId = " ('ErrorPk') ";
				}
				sqlsql += strSetId;
			} catch (Exception e) {
				throw new SQLException(e.getMessage());
			}
			/*
					sTemp = nc.bs.pu.pub.PubDMO.getInSetsByIds(sTemp);
					for (int i = 0; i < sTemp.length - 1; i++)
						sqlsql += " pk_invmandoc in " + sTemp[i] + " or ";
					sqlsql += " pk_invmandoc in " + sTemp[sTemp.length - 1] + ")";
			*/
			stmt = con.prepareStatement(sqlsql);
			rs = stmt.executeQuery();
			while (rs.next()) {
				vMangID.addElement(rs.getString(1));
				vBaseID.addElement(rs.getString(2));
			}
			if (rs != null)
				rs.close();
			if (stmt != null)
				stmt.close();

			for (int i = 0; i < vv.size(); i++) {
				saleEstimateVO tempVO = (saleEstimateVO) vv.elementAt(i);
				if (vMangID.contains(tempVO.getPk_invmandoc())) {
					int j = vMangID.indexOf(tempVO.getPk_invmandoc());
					if (j >= 0)
						tempVO.setCbaseid((String) vBaseID.elementAt(j));
					v.addElement(tempVO);
				}
			}
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	if (v.size() > 0) {
		estimates = new EstimateVO[v.size()];
		for (int i = 0; i < v.size(); i++)
			estimates[i] = new EstimateVO();
		v.copyInto(estimates);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryEstimate", new Object[] { unitCode, sCondition, sZG });
	/*************************************************************/

	return estimates;
}



public void backICStatus(EstimateVO[] vOs,String status,String date) throws BusinessException{
	BaseDAO basdao = new BaseDAO();
	if(vOs!=null&&vOs.length>0){
		for(int i=0;i<vOs.length;i++){
			String cgeneralbid = vOs[i].getCgeneralbid()==null?"":vOs[i].getCgeneralbid().toString();
			
			//回写
			String sql = "update ic_general_b set vuserdef19='"+status+"',vuserdef20='"+date+"' where cgeneralbid='"+cgeneralbid+"'";
			basdao.executeUpdate(sql);
		}
	}
	
	
}

public void backICStatus_wwyf(wwEstimateVO[] vOs,String status,String date) throws BusinessException{
	BaseDAO basdao = new BaseDAO();
	if(vOs!=null&&vOs.length>0){
		for(int i=0;i<vOs.length;i++){
			String cgeneralbid = vOs[i].getCgeneralbid()==null?"":vOs[i].getCgeneralbid().toString();
			
			//回写
			String sql = "update ic_general_b set vuserdef19='"+status+"',vuserdef20='"+date+"' where cgeneralbid='"+cgeneralbid+"'";
			basdao.executeUpdate(sql);
		}
	}
	
	
}


public void backICStatus_sale(saleEstimateVO[] vOs,String status,String date) throws BusinessException{
	BaseDAO basdao = new BaseDAO();
	if(vOs!=null&&vOs.length>0){
		for(int i=0;i<vOs.length;i++){
			String cgeneralbid = vOs[i].getCgeneralbid()==null?"":vOs[i].getCgeneralbid().toString();
			
			//回写
			String sql = "update ic_general_b set vuserdef19='"+status+"',vuserdef20='"+date+"' where cgeneralbid='"+cgeneralbid+"'";
			basdao.executeUpdate(sql);
		}
	}
	
	
}


/**zhwj
 * 功能:指定入库单行ID[],判断是否存在反暂过单据行
 * 参数:Vector ,入库单行ID[]
 * 异常:SQLException
 * 创建:2004-06-16
 * 作者:晁志平
 *
 */
public void checkExistAntiEsti_yf(Vector vBid) throws SQLException {
	checkExistBadStatus(vBid, "and dr = 0 and nvl(vuserdef19,'未暂估且未结算') = '未暂估且未结算' ", nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000087")/*@res "入库单已经反暂过，请刷新界面再操作"*/);
}

/**
 * 功能：查询委外加工入库单(暂估、反暂共用)
 * 输入：公司主键、查询条件串、暂估标志
 * 返回：暂估VO[]
 * 创建：2014-10-17
 * 作者：王凯飞
 */
public wwEstimateVO[] queryEstimate_ww(String unitCode, String sCondition, String sZG) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.ps.estimate.EstimateDMO", "queryEstimate_ww", new Object[] { unitCode, sCondition, sZG });
	/*************************************************************/
	StringBuffer sql = new StringBuffer();
	sql.append(" select  A.vuserdef1, ") 
	.append("                 A.vuserdef2, ") 
	.append("                 A.vuserdef3, ") 
	.append("                 A.vuserdef4, ") 
	.append("                 A.vuserdef5, ") 
	.append("                 A.vuserdef6, ") 
	.append("                 A.vuserdef7, ") 
	.append("                 A.vuserdef8, ") 
	.append("                 A.vuserdef9, ") 
	.append("                 A.vuserdef10, ") 
	.append("                 A.cdispatcherid, ") 
	.append("                 A.cbizid, ") 
	.append("                 A.vnote, ") 
	.append("                 A.cwhsmanagerid, ") 
	.append("                 A.cdptid, ") 
	.append("                 A.cbilltypecode, ") 
	.append("                 B.cprojectid, ") 
	.append("                 B.cprojectphaseid, ") 
	.append("                 B.cfirsttype, ") 
	.append("                 B.cfirstbillbid, ") 
	.append("                 B.cfirstbillhid, ") 
	.append("                 B.ninassistnum, ") 
	.append("                 B.hsl, ") 
	.append("                 B.nplannedmny, ") 
	.append("                 B.castunitid, ") 
	.append("                 B.dbizdate, ") 
	.append("                 a.vbillcode, ") 
	.append("                 a.dbilldate, ") 
	.append("                 a.cproviderid, ") 
	.append("                 A.cgeneralhid, ") 
	.append("                 B.cgeneralbid, ") 
	.append("                 B.cinventoryid, ") 
	.append("                 B.vuserdef1 vuserdef1b, ") 
	.append("                 B.vuserdef2 vuserdef2b, ") 
	.append("                 B.vuserdef3 vuserdef3b, ") 
	.append("                 B.vuserdef4 vuserdef4b, ") 
	.append("                 B.vuserdef5 vuserdef5b, ") 
	.append("                 B.vuserdef6 vuserdef6b, ") 
	.append("                 B.vfree1, ") 
	.append("                 B.vfree2, ") 
	.append("                 B.vfree3, ") 
	.append("                 B.vfree4, ") 
	.append("                 B.vfree5, ") 
//	.append("                 b.ninnum, ") 备份
	.append("                 nvl(b.ninnum, 0) - nvl(c.nsignnum,0) ninnum,  ") 
	.append("                 b.nprice, ") //单价
	.append("                 b.nmny, ") //金额
	.append("                 c.naccountnum1, ") 
	.append("                 c.naccountmny, ") 
	.append("                 A.cwarehouseid, ") 
	.append("                 A.pk_corp, ") 
	.append("                 c.nmaterialmoney, ") 
	.append("                 c.cgeneralbb3, ") 
	.append("                 A.ts ts1, ") 
	.append("                 B.ts ts2, ") 
	.append("                 C.ts ts3, ") 
	.append("                 a.cbiztype, ") 
	.append("                 b.vbatchcode, ") 
	.append("                 b.csourcebillhid, ") 
	.append("                 b.csourcebillbid, ") 
	.append("                 B.crowno, ") 
	.append("                 A.pk_calbody, ") ;


	if (sZG.toUpperCase().equals("Y")) {
		sql.append("nvl(man.def20,0) npprice, nvl(b.ninnum,0)*nvl(man.def20,0) npmoney, dzgdate, ");
	} else {
		sql.append("nvl(man.def20,0) nprice, nvl(b.ninnum,0)*nvl(man.def20,0) nmny, dzgdate, ");
	}
	
	sql.append("        A.vuserdef11, ") 
	.append("        A.vuserdef12, ") 
	.append("        A.vuserdef13, ") 
	.append("        A.vuserdef14, ") 
	.append("        A.vuserdef15, ") 
	.append("        A.vuserdef16, ") 
	.append("        A.vuserdef17, ") 
	.append("        A.vuserdef18, ") 
	.append("        A.vuserdef19, ") 
	.append("        A.vuserdef20, ") 
	.append("        A.pk_defdoc1, ") 
	.append("        A.pk_defdoc2, ") 
	.append("        A.pk_defdoc3, ") 
	.append("        A.pk_defdoc4, ") 
	.append("        A.pk_defdoc5, ") 
	.append("        A.pk_defdoc6, ") 
	.append("        A.pk_defdoc7, ") 
	.append("        A.pk_defdoc8, ") 
	.append("        A.pk_defdoc9, ") 
	.append("        A.pk_defdoc10, ") 
	.append("        A.pk_defdoc11, ") 
	.append("        A.pk_defdoc12, ") 
	.append("        A.pk_defdoc13, ") 
	.append("        A.pk_defdoc14, ") 
	.append("        A.pk_defdoc15, ") 
	.append("        A.pk_defdoc16, ") 
	.append("        A.pk_defdoc17, ") 
	.append("        A.pk_defdoc18, ") 
	.append("        A.pk_defdoc19, ") 
	.append("        A.pk_defdoc20, ") 
	.append("        B.vuserdef7 vuserdef7b, ") 
	.append("        B.vuserdef8 vuserdef8b, ") 
	.append("        B.vuserdef9 vuserdef9b, ") 
	.append("        B.vuserdef10 vuserdef10b, ") 
	.append("        B.vuserdef11 vuserdef11b, ") 
	.append("        B.vuserdef12 vuserdef12b, ") 
	.append("        B.vuserdef13 vuserdef13b, ") 
	.append("        B.vuserdef14 vuserdef14b, ") 
	.append("        B.vuserdef15 vuserdef15b, ") 
	.append("        B.vuserdef16 vuserdef16b, ") 
	.append("        B.vuserdef17 vuserdef17b, ") 
	.append("        B.vuserdef18 vuserdef18b, ") 
	.append("        B.vuserdef19 vuserdef19b, ") 
	.append("        B.vuserdef20 vuserdef20b, ") 
	.append("        B.pk_defdoc1 pk_defdoc1b, ") 
	.append("        B.pk_defdoc2 pk_defdoc2b, ") 
	.append("        B.pk_defdoc3 pk_defdoc3b, ") 
	.append("        B.pk_defdoc4 pk_defdoc4b, ") 
	.append("        B.pk_defdoc5 pk_defdoc5b, ") 
	.append("        B.pk_defdoc6 pk_defdoc6b, ") 
	.append("        B.pk_defdoc7 pk_defdoc7b, ") 
	.append("        B.pk_defdoc8 pk_defdoc8b, ") 
	.append("        B.pk_defdoc9 pk_defdoc9b, ") 
	.append("        B.pk_defdoc10 pk_defdoc10b, ") 
	.append("        B.pk_defdoc11 pk_defdoc11b, ") 
	.append("        B.pk_defdoc12 pk_defdoc12b, ") 
	.append("        B.pk_defdoc13 pk_defdoc13b, ") 
	.append("        B.pk_defdoc14 pk_defdoc14b, ") 
	.append("        B.pk_defdoc15 pk_defdoc15b, ") 
	.append("        B.pk_defdoc16 pk_defdoc16b, ") 
	.append("        B.pk_defdoc17 pk_defdoc17b, ") 
	.append("        B.pk_defdoc18 pk_defdoc18b, ") 
	.append("        B.pk_defdoc19 pk_defdoc19b, ") 
	.append("        B.pk_defdoc20 pk_defdoc20b, ") 
	.append("        B.cvendorid, ") 
	.append("                 b.bzgyfflag, ") 
	.append("                 c.nzgyfprice, ") 
	.append("                 c.nzgyfmoney, ") 
	.append("                 B.pk_invoicecorp, ") 
	.append("                 a.pk_purcorp, ") 
	.append("                 b.vfirstbillcode, ") 
	.append("                 s.iscalculatedinvcost, ") 
	.append("                 man.pk_invmandoc, ") 
	.append("                 scb.cbaseid, ") 
	.append("                 scb.idiscounttaxtype ") ;

	sql.append("  FROM ic_general_h a ") 
	.append("  INNER JOIN ic_general_b b ") 
	.append("     ON a.cgeneralhid = b.cgeneralhid ") 
	.append("  left join bd_stordoc s ") 
	.append("     on a.cwarehouseid = s.pk_stordoc ") 
	.append("  INNER JOIN ic_general_bb3 c ") 
	.append("     ON b.cgeneralbid = c.cgeneralbid ") 
	.append("   LEFT OUTER JOIN sc_order_b scb ") 
	.append("     ON b.cfirstbillhid = scb.corderid ") 
	.append("    AND b.cfirstbillbid = scb.corder_bid ") 
	.append("   LEFT OUTER JOIN sc_order sc ") 
	.append("     ON sc.corderid = scb.corderid ") 
	.append("   LEFT OUTER JOIN bd_cumandoc cum ") 
	.append("     ON a.cproviderid = cum.pk_cumandoc ") 
	.append("  INNER JOIN bd_invmandoc man ") 
	.append("     ON b.cinventoryid = man.pk_invmandoc ") ;

	sql.append("  where (a.fbillflag = 3 OR a.fbillflag = 4) ") 
	.append("    AND a.dr = 0 ") 
	.append("    AND b.dr = 0 ") 
	.append("    AND nvl(b.flargess, 'N') = 'N' ") 
	.append("    AND c.dr = 0 ") 
	.append("    AND b.ninnum IS NOT NULL ") 
	.append("    AND a.cbilltypecode = '47' ") 
	.append("    AND man.sealflag = 'N' ") 
	.append("    AND ((b.cfirsttype IS NULL) OR ") 
	.append("        (sc.dr = 0 AND scb.dr = 0 AND ") 
	.append("        b.cfirsttype = '61')) ") 
	.append("    AND (cum.frozenflag IS NULL OR cum.frozenflag = 'N') ") ;

	if (sZG.toUpperCase().equals("N")){
		sql.append("and nvl(B.vuserdef19,'未暂估且未结算') = '未暂估且未结算' ");
		sql.append(" and nvl(B.isok,'N') = 'N' ");//结算完毕标志
	}else {
//		sql += "and nvl(B.vuserdef19,'未暂估且未结算') in ('已暂估且未结算','已暂估部分结算') ";
		sql.append("and nvl(B.vuserdef19,'未暂估且未结算') = '已暂估且未结算' ");
	}
	
	
	if (unitCode != null) {
		sql.append("and A.pk_corp = " + "'" + unitCode + "' ");
	}
	 
	//zhwj
		sCondition = sCondition.replaceAll("A.cwarehouseid", "cwarehouseid");
		sCondition = sCondition.replaceAll("cwarehouseid", "A.cwarehouseid");
		
	
	sql.append(sCondition + " ");

	//已结算的入库单不能暂估
	if (sZG.toUpperCase().equals("N"))
//		sql += "and naccountnum1 = 0.0 and abs(ninnum) > 0.0 ";//zhwj 系统结算 回写naccountnum1，则不能暂估或反暂估，当运费暂估通过nvl(B.vuserdef19,'未暂估且未结算') in ('已暂估且未结算','已暂估部分结算')反判断
		sql.append("and  nvl(b.ninnum,0) - nvl(c.nsignnum,0) > 0.0 ");
		
	//已结算的暂估入库单不能取消暂估
	if (sZG.toUpperCase().equals("Y"))
//		sql += "and naccountnum1 = 0.0 ";//zhwj 系统结算 回写naccountnum1，
		sql .append("and 1=1 ");

	//按入库单号 + 行号排序列
	sql.append("order by a.vbillcode");
	wwEstimateVO[] estimates = null;
	Vector v = new Vector();
	Vector vMangID = new Vector();
	Vector vBaseID = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		Vector vv = new Vector();
		ResultSet rs = stmt.executeQuery();
		//
		String strTmp = null;
		Object oTmp = null;
		int iIdx = 0;
		wwEstimateVO estimate = null;
		while (rs.next()) {
			iIdx = 1;
			estimate = new wwEstimateVO();
			// A.vuserdef1-10
			estimate.setVuserdefh1(rs.getString("vuserdef1"));
			estimate.setVuserdefh2(rs.getString("vuserdef2"));
			estimate.setVuserdefh3(rs.getString("vuserdef3"));
			estimate.setVuserdefh4(rs.getString("vuserdef4"));
			estimate.setVuserdefh5(rs.getString("vuserdef5"));
			estimate.setVuserdefh6(rs.getString("vuserdef6"));
			estimate.setVuserdefh7(rs.getString("vuserdef7"));
			estimate.setVuserdefh8(rs.getString("vuserdef8"));
			estimate.setVuserdefh9(rs.getString("vuserdef9"));
			estimate.setVuserdefh10(rs.getString("vuserdef10"));
			estimate.setCdispatcherid(rs.getString("cdispatcherid"));
			// coperatorid
			estimate.setCoperatorid(rs.getString("cbizid"));
			// vnote
			estimate.setVnote(rs.getString("vnote"));
			// cwhsmanagerid
			estimate.setCwhsmanagerid(rs.getString("cwhsmanagerid"));
			// cdptid
			estimate.setCdptid(rs.getString("cdptid"));
			// cbilltypecode
			estimate.setCbilltypecode(rs.getString("cbilltypecode"));
			//B.cprojectid,
			estimate.setCprojectid(rs.getString("cprojectid"));
			//B.cprojectphaseid,
			estimate.setCprojectphaseid(rs.getString("cprojectphaseid"));
			//B.cfirsttype,
			estimate.setCfirsttype(rs.getString("cfirsttype"));
			//B.cfirstbillbid,
			estimate.setCfirstbillbid(rs.getString("cfirstbillbid"));
			//B.cfirstbillhid,
			estimate.setCfirstbillhid(rs.getString("cfirstbillhid"));
			//B.ninassistnum,
			oTmp = rs.getObject("ninassistnum");
			estimate.setNinassistnum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			//B.hsl,
			oTmp = rs.getObject("hsl");
			estimate.setHsl(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			//B.nplannedmny,
			oTmp = rs.getObject("nplannedmny");
			estimate.setNplannedmny(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			//B.castunitid,
			estimate.setCastunitid(rs.getString("castunitid"));
			//B.dbizdate,
			strTmp = rs.getString("dbizdate");
			estimate.setDbizdate(strTmp == null ? null : new UFDate(strTmp.trim(), false));
			// vbillcode :
			strTmp = rs.getString("vbillcode");
			estimate.setVbillcode(strTmp == null ? null : strTmp.trim());
			// dbilldate :
			strTmp = rs.getString("dbilldate");
			estimate.setDbilldate(strTmp == null ? null : new UFDate(strTmp.trim(), false));
			// cproviderid :
			strTmp = rs.getString("cproviderid");
			estimate.setCprovidermangid(strTmp == null ? null : strTmp.trim());
			// cgeneralhid :
			strTmp = rs.getString("cgeneralhid");
			estimate.setCgeneralhid(strTmp == null ? null : strTmp.trim());
			// cgeneralbid :
			strTmp = rs.getString("cgeneralbid");
			estimate.setCgeneralbid(strTmp == null ? null : strTmp.trim());
			// cmangid :
			strTmp = rs.getString("cinventoryid");
			estimate.setCmangid(strTmp == null ? null : strTmp.trim());
			// vuserdef1 :
			strTmp = rs.getString("vuserdef1b");
			estimate.setVuserdef1(strTmp == null ? null : strTmp.trim());
			// vuserdef2 :
			strTmp = rs.getString("vuserdef2b");
			estimate.setVuserdef2(strTmp == null ? null : strTmp.trim());
			// vuserdef3 :
			strTmp = rs.getString("vuserdef3b");
			estimate.setVuserdef3(strTmp == null ? null : strTmp.trim());
			// vuserdef4 :
			strTmp = rs.getString("vuserdef4b");
			estimate.setVuserdef4(strTmp == null ? null : strTmp.trim());
			// vuserdef5 :
			strTmp = rs.getString("vuserdef5b");
			estimate.setVuserdef5(strTmp == null ? null : strTmp.trim());
			// vuserdef6 :
			strTmp = rs.getString("vuserdef6b");
			estimate.setVuserdef6(strTmp == null ? null : strTmp.trim());
			// vfree1 :
			strTmp = rs.getString("vfree1");
			estimate.setVfree1(strTmp == null ? null : strTmp.trim());
			// vfree2 :
			strTmp = rs.getString("vfree2");
			estimate.setVfree2(strTmp == null ? null : strTmp.trim());
			// vfree3 :
			strTmp = rs.getString("vfree3");
			estimate.setVfree3(strTmp == null ? null : strTmp.trim());
			// vfree4 :
			strTmp = rs.getString("vfree4");
			estimate.setVfree4(strTmp == null ? null : strTmp.trim());
			// vfree5 :
			strTmp = rs.getString("vfree5");
			estimate.setVfree5(strTmp == null ? null : strTmp.trim());
			// noutnum :
			oTmp = rs.getObject("ninnum");
			estimate.setNinnum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nprice :
			oTmp = rs.getObject("nprice");
			estimate.setNprice(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nmny :
			oTmp = rs.getObject("nmny");
			estimate.setNmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nsettlenum :
			oTmp = rs.getObject("naccountnum1");
			estimate.setNsettlenum(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nsettlemny :
			oTmp = rs.getObject("naccountmny");
			estimate.setNsettlemny(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// cwarehouseid :
			strTmp = rs.getString("cwarehouseid");
			estimate.setCwarehouseid(strTmp == null ? null : strTmp.trim());
			// cunitid :
			strTmp = rs.getString("pk_corp");
			estimate.setPk_corp(strTmp == null ? null : strTmp.trim());
			// nmaterialmoney :
			oTmp = rs.getObject("nmaterialmoney");
			estimate.setNmaterialmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// cgeneralbb3 :
			strTmp = rs.getString("cgeneralbb3");
			estimate.setCgeneralbb3(strTmp == null ? null : strTmp.trim());
			// ts1 :
			strTmp = rs.getString("ts1");
			estimate.setTs1(strTmp == null ? null : strTmp.trim());
			// ts2 :
			strTmp = rs.getString("ts2");
			estimate.setTs2(strTmp == null ? null : strTmp.trim());
			// ts3 :
			strTmp = rs.getString("ts3");
			estimate.setTs3(strTmp == null ? null : strTmp.trim());
			// cbiztype :
			strTmp = rs.getString("cbiztype");
			estimate.setCbiztype(strTmp == null ? null : strTmp.trim());
			// vbatchcode :
			strTmp = rs.getString("vbatchcode");
			estimate.setVbatchcode(strTmp == null ? null : strTmp.trim());
			// csourcebillhid :
			strTmp = rs.getString("csourcebillhid");
			estimate.setCsourcebillhid(strTmp == null ? null : strTmp.trim());
			// csourcebillbid :
			strTmp = rs.getString("csourcebillbid");
			estimate.setCsourcebillbid(strTmp == null ? null : strTmp.trim());
			// crowno :
			strTmp = rs.getString("crowno");
			estimate.setAttributeValue("crowno", strTmp);
			// pk_calbody :
			strTmp = rs.getString("pk_calbody");
			estimate.setCcalbodyid(strTmp == null ? null : strTmp.trim());
			
			// nprice :
			if (sZG.toUpperCase().equals("N")){
				oTmp = rs.getObject("nprice");
				estimate.setNprice(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			}else {
				oTmp = rs.getObject("npprice");
				estimate.setNprice(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			}
			// nmoney :
			if (sZG.toUpperCase().equals("N")){
				oTmp = rs.getObject("nmny");
				estimate.setNmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			}else {
				oTmp = rs.getObject("npmoney");
				estimate.setNmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			}
			// dzgdate :
			strTmp = rs.getString("vuserdef20b");
			estimate.setDzgdate(strTmp == null ? null : new UFDate(strTmp.trim(), false));

			strTmp = rs.getString("vuserdef11");
			estimate.setVuserdefh11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef12");
			estimate.setVuserdefh12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef13");
			estimate.setVuserdefh13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef14");
			estimate.setVuserdefh14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef15");
			estimate.setVuserdefh15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef16");
			estimate.setVuserdefh16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef17");
			estimate.setVuserdefh17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef18");
			estimate.setVuserdefh18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef19");
			estimate.setVuserdefh19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef20");
			estimate.setVuserdefh20(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString("pk_defdoc1");
			estimate.setPk_defdoch1(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc2");
			estimate.setPk_defdoch2(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc3");
			estimate.setPk_defdoch3(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc4");
			estimate.setPk_defdoch4(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc5");
			estimate.setPk_defdoch5(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc6");
			estimate.setPk_defdoch6(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc7");
			estimate.setPk_defdoch7(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc8");
			estimate.setPk_defdoch8(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc9");
			estimate.setPk_defdoch9(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc10");
			estimate.setPk_defdoch10(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString("pk_defdoc11");
			estimate.setPk_defdoch11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc12");
			estimate.setPk_defdoch12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc13");
			estimate.setPk_defdoch13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc14");
			estimate.setPk_defdoch14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc15");
			estimate.setPk_defdoch15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc16");
			estimate.setPk_defdoch16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc17");
			estimate.setPk_defdoch17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc18");
			estimate.setPk_defdoch18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc19");
			estimate.setPk_defdoch19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc20");
			estimate.setPk_defdoch20(strTmp == null ? "" : strTmp.trim());
			
			strTmp = rs.getString("vuserdef7b");
			estimate.setVuserdef7(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef8b");
			estimate.setVuserdef8(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef9b");
			estimate.setVuserdef9(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef10b");
			estimate.setVuserdef10(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString("vuserdef11b");
			estimate.setVuserdef11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef12b");
			estimate.setVuserdef12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef13b");
			estimate.setVuserdef13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef14b");
			estimate.setVuserdef14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef15b");
			estimate.setVuserdef15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef16b");
			estimate.setVuserdef16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef17b");
			estimate.setVuserdef17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef18b");
			estimate.setVuserdef18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef19b");
			estimate.setVuserdef19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("vuserdef20b");
			estimate.setVuserdef20(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc1b");
			estimate.setPk_defdocb1(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc2b");
			estimate.setPk_defdocb2(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc3b");
			estimate.setPk_defdocb3(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc4b");
			estimate.setPk_defdocb4(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc5b");
			estimate.setPk_defdocb5(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc6b");
			estimate.setPk_defdocb6(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc7b");
			estimate.setPk_defdocb7(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc8b");
			estimate.setPk_defdocb8(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc9b");
			estimate.setPk_defdocb9(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc10b");
			estimate.setPk_defdocb10(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString("pk_defdoc11b");
			estimate.setPk_defdocb11(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc12b");
			estimate.setPk_defdocb12(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc13b");
			estimate.setPk_defdocb13(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc14b");
			estimate.setPk_defdocb14(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc15b");
			estimate.setPk_defdocb15(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc16b");
			estimate.setPk_defdocb16(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc17b");
			estimate.setPk_defdocb17(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc18b");
			estimate.setPk_defdocb18(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc19b");
			estimate.setPk_defdocb19(strTmp == null ? "" : strTmp.trim());
			strTmp = rs.getString("pk_defdoc20b");
			estimate.setPk_defdocb20(strTmp == null ? "" : strTmp.trim());

			strTmp = rs.getString("cvendorid");
			estimate.setCvendorid(strTmp == null ? "" : strTmp.trim());			
			strTmp = rs.getString("bzgyfflag");
			estimate.setBzgyf(strTmp == null ? new UFBoolean(false) : new UFBoolean(strTmp.trim()));			
			// nzgyfprice :
			oTmp = rs.getObject("nzgyfprice");
			estimate.setNtaxprice(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// nzgyfmoney :
			oTmp = rs.getObject("nzgyfmoney");
			estimate.setNtotalmoney(oTmp == null ? new UFDouble(0.0) : new UFDouble(oTmp.toString()));
			// cunitid :
			strTmp = rs.getString("pk_invoicecorp");
			estimate.setPk_invoicecorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString("pk_purcorp");
			estimate.setPk_purcorp(strTmp == null ? null : strTmp.trim());
			strTmp = rs.getString("vfirstbillcode");
			estimate.setVfirstbillcode(strTmp == null ? null : strTmp.trim());			
			strTmp = rs.getString("iscalculatedinvcost");
			estimate.setBcalculatecost(strTmp == null ? new UFBoolean(false) : new UFBoolean(strTmp.trim()));      
			strTmp = rs.getString("pk_invmandoc");
			estimate.setPk_invmandoc(strTmp == null ? null : strTmp.trim());      
			strTmp = rs.getString("cbaseid");
			estimate.setCbaseid(strTmp == null ? null : strTmp.trim());      
			oTmp = rs.getString("idiscounttaxtype");
			estimate.setIdiscounttaxtype(oTmp == null ? new Integer(0) : new Integer(oTmp.toString()));      
			
			vv.addElement(estimate);
		}
		if (rs != null)
			rs.close();
		if (stmt != null)
			stmt.close();
		
		if (vv.size() > 0) {
			/*
			String sqlsql =
				"select pk_invmandoc, A.pk_invbasdoc from bd_invmandoc A, bd_invbasdoc B where A.dr = 0 and B.dr = 0 and A.pk_corp = '"
					+ unitCode
					+ "' ";
			sqlsql += "and A.pk_invbasdoc = B.pk_invbasdoc and upper(laborflag) = 'N' and upper(discountflag) = 'N' ";
			sqlsql += "and pk_invmandoc in ";
			Vector vTemp = new Vector();
			vTemp.addElement(((wwEstimateVO) vv.elementAt(0)).getPk_invmandoc());
			for (int i = 1; i < vv.size(); i++) {
				if (!vTemp.contains(((wwEstimateVO) vv.elementAt(i)).getPk_invmandoc()))
					vTemp.addElement(((wwEstimateVO) vv.elementAt(i)).getPk_invmandoc());
			}
			String sTemp[] = new String[vTemp.size()];
			vTemp.copyInto(sTemp);
			//临时表
			try {
				String strSetId = null;
				nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
				strSetId =
					dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU25, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
				if (strSetId == null || strSetId.trim().equals("()")) {
					strSetId = " ('ErrorPk') ";
				}
				sqlsql += strSetId;
			} catch (Exception e) {
				throw new SQLException(e.getMessage());
			}
			stmt = con.prepareStatement(sqlsql);
			rs = stmt.executeQuery();
			while (rs.next()) {
				vMangID.addElement(rs.getString(1));
				vBaseID.addElement(rs.getString(2));
			}
			if (rs != null)
				rs.close();
			if (stmt != null)
				stmt.close();
			*/
			for (int i = 0; i < vv.size(); i++) {
				wwEstimateVO tempVO = (wwEstimateVO) vv.elementAt(i);
				v.addElement(tempVO);
				/*
				if (vMangID.contains(tempVO.getPk_invmandoc())) {
					int j = vMangID.indexOf(tempVO.getPk_invmandoc());
					if (j >= 0)
						tempVO.setCbaseid((String) vBaseID.elementAt(j));
					v.addElement(tempVO);
				}
				*/
			}
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	if (v.size() > 0) {
		estimates = new wwEstimateVO[v.size()];
		for (int i = 0; i < v.size(); i++)
			estimates[i] = new wwEstimateVO();
		v.copyInto(estimates);
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.ps.estimate.wwEstimateDMO", "queryEstimate", new Object[] { unitCode, sCondition, sZG });
	/*************************************************************/

	return estimates;
}

}