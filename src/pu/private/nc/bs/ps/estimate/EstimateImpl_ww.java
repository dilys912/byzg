/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.ps.estimate;

import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;

import nc.bs.dao.BaseDAO;
import nc.bs.dao.DAOException;
import nc.bs.ep.dj.DJZBBO;
import nc.bs.framework.common.NCLocator;
import nc.bs.ps.settle.SettleDMO;
import nc.bs.ps.vmi.VMIDMO;
import nc.bs.pu.pub.PubDMO;
import nc.bs.pub.billcodemanage.BillcodeGenerater;
import nc.bs.pub.formulaparse.FormulaParse;
import nc.bs.pub.pf.PfUtilTools;
import nc.impl.ia.bill.BillImpl;
import nc.itf.arap.pub.IArapForGYLPublic;
import nc.itf.arap.pub.IArapForGYLPublic2;
import nc.itf.ia.bill.IBill;
import nc.itf.ia.service.IIAToPUBill;
import nc.itf.ic.service.IICToPU_ICATP;
import nc.itf.ps.estimate.IEstimate_ww;
import nc.itf.ps.estimate.IEstimate_wwyf;
import nc.itf.ps.estimate.IEstimate_yf;
import nc.itf.pu.inter.IPuToIc_EstimateImpl;
import nc.itf.pu.pub.fw.LockTool;
import nc.itf.uap.busibean.ISysInitQry;
import nc.itf.uap.pf.IPFMetaModel;
import nc.itf.uap.sf.ICreateCorpQueryService;
import nc.itf.uap.sfapp.IBillcodeRuleService;
import nc.jdbc.framework.processor.ColumnProcessor;
import nc.jdbc.framework.processor.MapListProcessor;
import nc.ui.pub.ClientEnvironment;
import nc.vo.arap.change.VoTools;
import nc.vo.ep.dj.DJZBHeaderVO;
import nc.vo.ep.dj.DJZBItemVO;
import nc.vo.ep.dj.DJZBVO;
import nc.vo.hbbb.meetaccount.GetDataCondVO;
import nc.vo.ia.bill.BillHeaderVO;
import nc.vo.ia.bill.BillItemVO;
import nc.vo.ia.bill.BillVO;
import nc.vo.ic.pub.bill.GeneralBillHeaderVO;
import nc.vo.ic.pub.bill.GeneralBillItemVO;
import nc.vo.ic.pub.bill.GeneralBillVO;
import nc.vo.ps.estimate.EstimateVO;
import nc.vo.ps.estimate.GeneralBb3VO;
import nc.vo.ps.estimate.GeneralHHeaderVO;
import nc.vo.ps.estimate.GeneralHItemVO;
import nc.vo.ps.estimate.GeneralHVO;
import nc.vo.ps.estimate.IGeneralBillItemVO;
import nc.vo.ps.estimate.IGeneralBillVO;
import nc.vo.ps.estimate.saleEstimateVO;
import nc.vo.ps.estimate.wwEstimateVO;
import nc.vo.ps.settle.OorderVO;
import nc.vo.ps.settle.SettlebillHeaderVO;
import nc.vo.ps.settle.SettlebillItemVO;
import nc.vo.ps.settle.SettlebillVO;
import nc.vo.ps.settle.StockVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.VOStatus;
import nc.vo.pub.formulaset.VarryVO;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.pfflow04.MessagedriveVO;
import nc.vo.pub.query.ConditionVO;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.ic.bill.FreeVO;
import nc.vo.scm.pu.RelationsCalVO;
import nc.vo.scm.pub.SCMEnv;
import nc.vo.scm.pub.session.ClientLink;
import nc.vo.scm.qc.bill.CheckbillVO;
import nc.vo.scm.relacal.SCMRelationsCal;
 
/**
 * Estimate的BO类
 *
 * 创建日期：(2001-5-30)
 * @author：
 */
public class EstimateImpl_ww implements IPuToIc_EstimateImpl,nc.itf.pu.inter.IPuToSc_EstimateBO, IEstimate_ww,nc.bs.pub.para.IBeforSaveSysinit{

/**
 * EstimateImpl 构造子注解。
 */
public EstimateImpl_ww() {
	super();
}

//zhwj 
private String[] status = new String[]{
		"未暂估且未结算",
		"已暂估且未结算",
		"已暂估部分结算",
		"已结算",
		"已结案"
};



/**
 * 功能描述:取消暂估
 * 输入参数:EstimateVO[],当前操作员ID
 * 作者：熊海情
 * 创建：2001-5-24 14:41:50
 * 修改：晁志平　FOR　V30
 */
public void antiEstimate(EstimateVO VOs[], String cOperator)
	throws BusinessException {
	EstimateDMO dmo = null;
	ICreateCorpQueryService myService0 = null;
	boolean bLock = false;

	nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
	timerDebug.start();
	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("传递参数为空，直接返回");
		return;
	}
	//组合所有需要加锁的主键
	String sKeys[] = getEstimateLockKeys(VOs);

	try {
		dmo = new EstimateDMO();
		//对单据加锁
		bLock = LockTool.setLockForPks(sKeys, cOperator);
		if (!bLock) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000000")/*@res "正在进行相关操作，请稍后再试！"*/);
		}

		timerDebug.addExecutePhase("组合所有需要加锁的主键及对单据加锁");

		//判断时间戳是否改变
		String sMessage = isTimeStampChanged(VOs);
		if (sMessage != null && sMessage.length() > 0) {
			sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000001")/*@res "请刷新！\n"*/;
			throw new BusinessException(sMessage);
		}

		timerDebug.addExecutePhase("判断时间戳是否改变");

		Vector vGeneralHID = new Vector();
		Vector vGeneralBID = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			vGeneralHID.addElement(VOs[i].getCgeneralhid());
			vGeneralBID.addElement(VOs[i].getCgeneralbid());
		}
		//刷新状态：是否已经反暂过(存在则抛异常)
		if (vGeneralBID.size() > 0) {
			dmo.checkExistAntiEsti(vGeneralBID);
		}

		timerDebug.addExecutePhase("刷新状态：是否已经反暂过(存在则抛异常)");

		//判断是否全部反暂
		if (vGeneralHID.size() > 0) {
			String sGeneralhid[] = new String[vGeneralHID.size()];
			vGeneralHID.copyInto(sGeneralhid);
			String sGeneralbid[] = new String[vGeneralBID.size()];
			vGeneralBID.copyInto(sGeneralbid);

			//判断是否全部反暂
			UFBoolean bAll[] = dmo.isAntiEstimateAll(sGeneralhid, sGeneralbid);
			vGeneralHID = new Vector(); //全部反暂
			vGeneralBID = new Vector(); //部分反暂
			for (int i = 0; i < bAll.length; i++) {
				if (bAll[i].booleanValue())
					vGeneralHID.addElement(sGeneralhid[i]);
				else
					vGeneralBID.addElement(sGeneralbid[i]);
			}
		} else {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000002")/*@res "入库单不存在!"*/);
		}

		timerDebug.addExecutePhase("判断是否全部反暂");

		//
		Vector vAllBodyVoB = new Vector();
		Vector vAllBodyVoBB3 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			GeneralHItemVO bodyVO = new GeneralHItemVO();
			bodyVO.setBzgflag(new UFBoolean(false));
			bodyVO.setBzgyfflag(new UFBoolean(false));
			bodyVO.setDzgdate(null);
			bodyVO.setCgeneralbid(VOs[i].getCgeneralbid());
			vAllBodyVoB.addElement(bodyVO);
			
			GeneralBb3VO bb3VO = new GeneralBb3VO();			
			bb3VO.setNpprice(null);
			bb3VO.setNpmoney(null);
			bb3VO.setNzygfprice(null);
			bb3VO.setNzgyfmoney(null);
			bb3VO.setNmaterialmoney(null);
			bb3VO.setCgeneralbid(VOs[i].getCgeneralbid());
			vAllBodyVoBB3.addElement(bb3VO);
		}
		if (vAllBodyVoB.size() > 0) {
			GeneralHItemVO[] bodyVOs = new GeneralHItemVO[vAllBodyVoB.size()];
			vAllBodyVoB.copyInto(bodyVOs);
			dmo.updateBillBody(bodyVOs);
		}
		if (vAllBodyVoBB3.size() > 0) {
			GeneralBb3VO bb3VOs[] = new GeneralBb3VO[vAllBodyVoBB3.size()];
			vAllBodyVoBB3.copyInto(bb3VOs);
			dmo.updateBillBb3(bb3VOs);
		}
		//
		timerDebug.addExecutePhase("入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费");

		if (VOs != null && VOs.length > 0) {
			String unitCode = VOs[0].getPk_corp();
			//判断存货核算是否启用
			myService0 = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			boolean bIAStartUp = myService0.isEnabled(unitCode, "IA");
			if (bIAStartUp) {
				//入库单反暂时,删除存货核算的相应单据
				if (vGeneralHID.size() > 0) {
					//入库单头ID唯一性组合
					Vector vTemp = new Vector();
					vTemp.addElement(((String) vGeneralHID.elementAt(0)).trim());
					for (int i = 1; i < vGeneralHID.size(); i++) {
						String s1 = ((String) vGeneralHID.elementAt(i)).trim();
						if (!vTemp.contains(s1))
							vTemp.addElement(s1);
					}
					String sGeneralhid[] = new String[vTemp.size()];
					vTemp.copyInto(sGeneralhid);
					deleteBillFromOutter(sGeneralhid, unitCode, cOperator);
				}
				timerDebug.addExecutePhase("按入库单“表头ID[]”删除存货核算单据");

				if (vGeneralBID.size() > 0) {
					String sGeneralbid[] = new String[vGeneralBID.size()];
					vGeneralBID.copyInto(sGeneralbid);
					deleteBillFromOutterPart(sGeneralbid, cOperator);
				}
				timerDebug.addExecutePhase("按入库单“表体ID[]”删除存货核算单据");
			}
			
			if(myService0.isEnabled(unitCode, "AP")){
				//应付启用,删除暂估应付
				//******
				deleteBillForZGAP(VOs);
				//******
			}
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		PubDMO.throwBusinessException(e);
	} finally {
		try {
//			if (myService != null) {
				//对单据解锁
				if (bLock)
					LockTool.releaseLockForPks(sKeys, cOperator);
//			}
		} catch (Exception e) {
			/*调用采购公用方法按规范抛出异常*/
			PubDMO.throwBusinessException(e);
		}
	}
	timerDebug.showAllExecutePhase("取消暂估BS时间分布：");
}

private void deleteBillForZGAP(EstimateVO VOs[])
throws BusinessException {
	Vector v1 = new Vector();
	for(int i = 0; i < VOs.length; i++){
		if(VOs[i].getBzgyf().booleanValue()) v1.addElement(VOs[i]);
	}
	EstimateVO VO[] = new EstimateVO[v1.size()];
	v1.copyInto(VO);
	
	if(VO != null && VO.length > 0){
		v1 = new Vector();
		for (int i = 0; i < VO.length; i++) {
			// 生成应付单体
			DJZBItemVO bodyVO = new DJZBItemVO();
			bodyVO.setDdlx(VO[i].getCgeneralhid()); // 上层单据ID
			bodyVO.setDdhh(VO[i].getCgeneralbid()); // 上层单据行ID(暂传“上层单据ID”)						
			
			DJZBVO tempVO = new DJZBVO();
			tempVO.setParentVO(new DJZBHeaderVO());
			tempVO.setChildrenVO(new DJZBItemVO[]{bodyVO});
			
			v1.addElement(tempVO);
		}

		DJZBVO apVOs[] = new DJZBVO[v1.size()];
		v1.copyInto(apVOs);
	
		IArapForGYLPublic iArap = (IArapForGYLPublic) NCLocator.getInstance().lookup(IArapForGYLPublic.class.getName());
		for(int i = 0; i < apVOs.length; i++){
			iArap.deleteEffForCG(apVOs[i]);
		}
	}
}
/**
 * 功能描述:反暂估(入库单取消签字调用)
 * 输入参数:GeneralBillVO[]
 * 返回值:void
 * 异常处理:java.rmi.RemoteException
 * 日期：2003/06/10
 * 作者：熊海情
 * 修改：晁志平　FOR　V30
 */
public void antiEstimateBatch(GeneralBillVO VOs[]) throws BusinessException {

	ICreateCorpQueryService myService0 = null;
	nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
	timerDebug.start();
	try {
		EstimateDMO dmo = new EstimateDMO();
		String cOperator = VOs[0].getHeaderVO().getCoperatoridnow(); //当前操作员

		Vector vGeneralHID = new Vector();
		Vector vGeneralBID = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			GeneralBillItemVO bodyVO[] = VOs[i].getItemVOs();
			if (bodyVO == null || bodyVO.length == 0)
				continue;
			for (int j = 0; j < bodyVO.length; j++) {
				vGeneralHID.addElement(bodyVO[j].getCgeneralhid());
				vGeneralBID.addElement(bodyVO[j].getCgeneralbid());
			}
		}
		//刷新状态：是否已经反暂过(存在则抛异常)
		if (vGeneralBID.size() > 0) {
			dmo.checkExistAntiEsti(vGeneralBID);
		}
		timerDebug.addExecutePhase("刷新状态：是否已经反暂过(存在则抛异常)");

		//判断是否全部反暂
		if (vGeneralHID.size() > 0) {
			String sGeneralhid[] = new String[vGeneralHID.size()];
			vGeneralHID.copyInto(sGeneralhid);
			String sGeneralbid[] = new String[vGeneralBID.size()];
			vGeneralBID.copyInto(sGeneralbid);
			UFBoolean bAll[] = dmo.isAntiEstimateAll(sGeneralhid, sGeneralbid);
			vGeneralHID = new Vector(); //全部反暂
			vGeneralBID = new Vector(); //部分反暂
			for (int i = 0; i < bAll.length; i++) {
				if (bAll[i].booleanValue())
					vGeneralHID.addElement(sGeneralhid[i]);
				else
					vGeneralBID.addElement(sGeneralbid[i]);
			}
		} else {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000002")/*@res "入库单不存在!"*/);
		}
		timerDebug.addExecutePhase("判断是否全部反暂");

		//入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费
		Vector v1 = new Vector();
		Vector v2 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			GeneralBillItemVO bodyVO[] = VOs[i].getItemVOs();
			if (bodyVO == null || bodyVO.length == 0)
				continue;
			for (int j = 0; j < bodyVO.length; j++) {
				GeneralHItemVO tempBodyVO = new GeneralHItemVO();
				tempBodyVO.setCgeneralbid(bodyVO[j].getCgeneralbid());
				tempBodyVO.setDzgdate(null);
				tempBodyVO.setBzgflag(new UFBoolean(false));
				tempBodyVO.setBzgyfflag(new UFBoolean(false));
				v1.addElement(tempBodyVO);
				
				GeneralBb3VO bb3VO = new GeneralBb3VO();
				bb3VO.setCgeneralbid(bodyVO[j].getCgeneralbid());
				bb3VO.setNpprice(null);
				bb3VO.setNpmoney(null);
				bb3VO.setNzygfprice(null);
				bb3VO.setNzgyfmoney(null);
				bb3VO.setNmaterialmoney(null);
				v2.addElement(bb3VO);
			}
		}

		if (v1.size() > 0) {
			GeneralHItemVO[] bodyVOs = new GeneralHItemVO[v1.size()];
			v1.copyInto(bodyVOs);
			dmo.updateBillBody(bodyVOs);
		}
		if (v2.size() > 0) {
			GeneralBb3VO bb3VOs[] = new GeneralBb3VO[v2.size()];
			v2.copyInto(bb3VOs);
			dmo.updateBillBb3(bb3VOs);
		}
		timerDebug.addExecutePhase("入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费");

		//反暂时,删除存货核算的相应单据
		if (VOs != null && VOs.length > 0) {
			String unitCode = VOs[0].getHeaderVO().getPk_corp();
			myService0 = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			boolean bIAStartUp = myService0.isEnabled(unitCode, "IA");

			if (bIAStartUp) {

				if (vGeneralHID.size() > 0) {
					//入库单头ID唯一性组合
					Vector vTemp = new Vector();
					vTemp.addElement(((String) vGeneralHID.elementAt(0)).trim());
					for (int i = 1; i < vGeneralHID.size(); i++) {
						String s1 = ((String) vGeneralHID.elementAt(i)).trim();
						if (!vTemp.contains(s1))
							vTemp.addElement(s1);
					}

					String sGeneralhid[] = new String[vTemp.size()];
					vTemp.copyInto(sGeneralhid);

					deleteBillFromOutter(sGeneralhid, unitCode, cOperator);
				}

				if (vGeneralBID.size() > 0) {
					String sGeneralbid[] = new String[vGeneralBID.size()];
					vGeneralBID.copyInto(sGeneralbid);

					deleteBillFromOutterPart(sGeneralbid, cOperator);
				}

			}
			
			if(myService0.isEnabled(unitCode, "AP")){
				//应付启用,删除暂估应付
				//******
				if(VOs != null && VOs.length > 0){
					v1 = new Vector();
					for (int i = 0; i < VOs.length; i++) {
						GeneralBillItemVO bodyVO[] = VOs[i].getItemVOs();
						if (bodyVO == null || bodyVO.length == 0)
							continue;
						Object oZGYF = null;
						UFBoolean bZGYF = new UFBoolean(false);
						for (int j = 0; j < bodyVO.length; j++) {						
							// 生成应付单体
							oZGYF = bodyVO[j].getAttributeValue("bzgyfflag");
							if(oZGYF == null) continue;
							bZGYF = new UFBoolean(oZGYF.toString());
							if(!bZGYF.booleanValue()) continue;
							DJZBItemVO tempBodyVO = new DJZBItemVO();
							tempBodyVO.setDdlx(bodyVO[j].getCgeneralhid()); // 上层单据ID
							tempBodyVO.setDdhh(bodyVO[j].getCgeneralbid()); // 上层单据行ID(暂传“上层单据ID”)						
							
							DJZBVO tempVO = new DJZBVO();
							tempVO.setParentVO(new DJZBHeaderVO());
							tempVO.setChildrenVO(new DJZBItemVO[]{tempBodyVO});
							
							v1.addElement(tempVO);
						}
					}

					DJZBVO apVOs[] = new DJZBVO[v1.size()];
					v1.copyInto(apVOs);
				
					if(apVOs != null && apVOs.length > 0){
						IArapForGYLPublic iArap = (IArapForGYLPublic) NCLocator.getInstance().lookup(IArapForGYLPublic.class.getName());
						for(int i = 0; i < apVOs.length; i++){
							iArap.deleteEffForCG(apVOs[i]);
						}
					}
				}
				//******
			}
		}
		timerDebug.addExecutePhase("反暂时,删除存货核算的相应单据");

		timerDebug.showAllExecutePhase("采购提供接口：反暂估(入库单取消签字调用)时间分布");
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		PubDMO.throwBusinessException(e);
	}

}
/**
 * 功能描述:反暂估
 * 输入参数:VO[],当前操作员ID
 * 返回值:void
 * 异常处理:NamingException,RemoteException,SQLException
 * 作者：熊海情
 * 修改：晁志平 FOR　V30
 * 修改：晁志平　解藕
 */
public void antiEstimateForSc(CircularlyAccessibleValueObject[] voaVO, String cOperator)
throws BusinessException {
    if(!(voaVO instanceof EstimateVO[])){
        SCMEnv.out("程序BUG：委外加工反暂估时传入错误的参数类型："+voaVO.getClass());
        SCMEnv.out("正确的参数类型应该为：“EstimateVO[]”");
        return;
    }
    if (voaVO == null || voaVO.length == 0) {
		SCMEnv.out("传入参数为空，直接返回！方法调用层次如下：");
		return;
	}
    EstimateVO[] VOs = (EstimateVO[]) voaVO;
	nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
	timerDebug.start();

	EstimateDMO dmo = null;
	ICreateCorpQueryService myService0 = null;
	try {
		dmo = new EstimateDMO();
		Vector v1 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			v1.addElement(VOs[i].getCgeneralbid());
		}
		//刷新状态：是否已经反暂过(存在则抛异常)
		if (v1.size() > 0) {
			dmo.checkExistAntiEsti(v1);
		}
		timerDebug.addExecutePhase("刷新状态：是否已经反暂过(存在则抛异常)");

		//入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费
		int iLen = VOs.length;
		Vector vAllBodyVo = new Vector();
		Vector vAllBody3Vo = new Vector();
		for (int i = 0; i < iLen; i++) {
			GeneralHItemVO bodyVO = new GeneralHItemVO();
			bodyVO.setCgeneralbid(VOs[i].getCgeneralbid());
			bodyVO.setBzgflag(new UFBoolean(false));
			bodyVO.setBzgyfflag(new UFBoolean(false));
			bodyVO.setDzgdate(null);
			vAllBodyVo.addElement(bodyVO);
			
			GeneralBb3VO bb3VO = new GeneralBb3VO();
			bb3VO.setCgeneralbid(VOs[i].getCgeneralbid());
			bb3VO.setNpprice(null);
			bb3VO.setNpmoney(null);
			bb3VO.setNzygfprice(null);
			bb3VO.setNzgyfmoney(null);
			bb3VO.setNmaterialmoney(null);
			vAllBody3Vo.addElement(bb3VO);
		}
		if (vAllBodyVo.size() > 0) {
			GeneralHItemVO bodyVO[] = new GeneralHItemVO[vAllBodyVo.size()];
			vAllBodyVo.copyInto(bodyVO);
			dmo.updateBillBody(bodyVO);
		}
		if (vAllBody3Vo.size() > 0) {
			GeneralBb3VO bb3VO[] = new GeneralBb3VO[vAllBody3Vo.size()];
			vAllBody3Vo.copyInto(bb3VO);
			dmo.updateBillBb3(bb3VO);
		}
		timerDebug.addExecutePhase("入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费");

		//反暂时,删除存货核算的相应单据
		if (VOs != null && VOs.length > 0) {
			String unitCode = VOs[0].getPk_corp();
			myService0 = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			boolean bIAStartUp = myService0.isEnabled(unitCode, "IA");
			if (bIAStartUp) {
				Vector vGeneralHID = new Vector();
				vGeneralHID.addElement(VOs[0].getCgeneralhid().trim());
				for (int i = 1; i < VOs.length; i++) {
					String s1 = VOs[i].getCgeneralhid().trim();
					if (!vGeneralHID.contains(s1))
						vGeneralHID.addElement(s1);
				}
				if (vGeneralHID.size() > 0) {
					String sGeneralhid[] = new String[vGeneralHID.size()];
					vGeneralHID.copyInto(sGeneralhid);
					deleteBillFromOutter(sGeneralhid, unitCode, cOperator);
				} else {
					throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000002")/*@res "入库单不存在!"*/);
				}
			}
		}
		timerDebug.addExecutePhase("反暂时,删除存货核算的相应单据时间分布");

		timerDebug.showAllExecutePhase("采购给委外加工提供的接口，反暂估时间分布");
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		PubDMO.throwBusinessException(e);
	} finally {
	}
}

/**
 * 功能描述:取消暂估--按入库单表头ID删除存货核算系统数据
 * 输入参数:EstimateVO[],公司主键,当前操作员ID
 * 作者：熊海情
 * 创建：2001-5-24 14:41:50
 * 修改：晁志平　FOR　V30
 */
private void deleteBillFromOutter(String cGeneralhid[], String cPkCorp, String cOperator)
	throws BusinessException {
	try {
		nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
		timerDebug.start();

//		IIAToPUBill myService = (IIAToPUBill) new InterServBO().getInterInstance(ProductCode.PROD_IA,InterRegister.IA0101);
		IIAToPUBill myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
		myService.deleteBillFromOutterArray(cGeneralhid, cPkCorp, cOperator);
		timerDebug.showExecuteTime("取消暂估-按入库单表体ID删除存货核算系统数据<BillBO.deleteBillFromOutterArray()>时间");
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 功能描述:取消暂估--按入库单表体ID删除存货核算系统数据
 * 输入参数:EstimateVO[],当前操作员ID
 * 作者：熊海情
 * 创建：2001-5-24 14:41:50
 * 修改：晁志平　FOR　V30
 */
private void deleteBillFromOutterPart(String cGeneralbid[], String cOperator) throws BusinessException {
	try {
		nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
		timerDebug.start();
//		IIAToPUBill myService = (IIAToPUBill) new InterServBO().getInterInstance(ProductCode.PROD_IA,InterRegister.IA0101);
		IIAToPUBill myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
		myService.deleteBillItemForPUs(cGeneralbid, cOperator);
		timerDebug.showExecuteTime("取消暂估-按入库单表体ID删除存货核算系统数据<BillBO.deleteBillItemForPUs()>时间");
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 功能描述:作废期初暂估入库单,并修改订单的累计入库数量
 * 输入参数:ArrayList
 			 |-GeneralHVO[] , 入库单VO
 			 |-String	，操作员ID
 			 |-String	，公司主键
 * 返回值:无
 * 异常处理:javax.naming.NamingException, java.rmi.RemoteException, java.sql.SQLException
 * 作者：熊海情
 * 修改：晁志平 V30  2004-06-03 增加数量容差控制
 */
public void discard(ArrayList listPara)
	throws BusinessException {

	if (listPara == null || listPara.size() < 3) {
		SCMEnv.out("程序BUG：传入参数为空，直接返回!");
		return;
	}

	GeneralHVO[] VOs = (GeneralHVO[]) listPara.get(0);
	String cOperator = (String) listPara.get(1);
	String strPkCorp = (String) listPara.get(2);

	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("传入参数为空，直接返回!");
		return;
	}
	int iLen = VOs.length;
	boolean bLock = false;
	//组合所有需要加锁的主键
	String sKeys[] = getGeneralLockKeys(VOs);
	try {
		EstimateDMO dmo = new EstimateDMO();
		
		//对单据加锁
		bLock = LockTool.setLockForPks(sKeys, cOperator);
		if (!bLock) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000000")/*@res "正在进行相关操作，请稍后再试！"*/);
		}

		//刷新期初暂估入库单状态
		ArrayList listStatus = dmo.queryInitialBillStatus(VOs);
		for (int i = 0; i < iLen; i++) {
			ArrayList list = (ArrayList) listStatus.get(i);
			UFBoolean bSettled = (UFBoolean) list.get(0);
			UFBoolean bDeleted = (UFBoolean) list.get(1);
			UFBoolean bInvoice = (UFBoolean) list.get(2);

			if (bDeleted.booleanValue()){
				String[] value = new String[]{String.valueOf(i + 1)};
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000003",null,value)/*@res "入库单" + CommonConstant.BEGIN_MARK + (i + 1) + CommonConstant.END_MARK + "已作废！"*/);
			}
			if (bSettled.booleanValue()){
				String[] value = new String[]{String.valueOf(i + 1)};
				throw new BusinessException( nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000004",null,value)/*@res "入库单" + CommonConstant.BEGIN_MARK + (i + 1) + CommonConstant.END_MARK +"已结算，不能作废！"*/);
	        }
			if(bInvoice.booleanValue()){
				String[] value = new String[]{String.valueOf(i + 1)};
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000086",null,value)/*@res "入库单" + CommonConstant.BEGIN_MARK + (i + 1) + CommonConstant.END_MARK +"已开票，不能作废！"*/);
			}
	  }

		//判断时间戳是否改变
		String sMessage = isTimeStampChangedForGeneral(VOs);
		if (sMessage != null && sMessage.length() > 0) {
			sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000001")/*@res "请刷新！\n"*/;
			throw new BusinessException(sMessage);
		}

		//改写可用量 2003/09/30 xhq
//		IICToPU_ICATP atp = (IICToPU_ICATP) new InterServBO().getInterInstance(ProductCode.PROD_IC,InterRegister.IC0050);
		IICToPU_ICATP atp = (IICToPU_ICATP) NCLocator.getInstance().lookup(IICToPU_ICATP.class.getName());
		for (int i = 0; i < iLen; i++) {
			String pk_calbody = dmo.getStorIDByWarehouseID(VOs[i].getHeadVO().getCwarehouseid());
			if (pk_calbody != null && pk_calbody.trim().length() > 0) {
				VOs[i].getHeadVO().setCstoreorganization(pk_calbody);
			}
			atp.modifyATPWhenDeleteBill(getChangedVO(VOs[i], false));
		}
		//作废期初暂估入库单
		dmo.discard(VOs, strPkCorp);
		//回退单据号
		for (int i = 0; i < iLen; i++) {
			returnBillCode(VOs[i].getHeadVO());
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	} finally {
		try {
//			if (myService != null) {
				//对单据解锁
				if (bLock)
					LockTool.releaseLockForPks(sKeys, cOperator);
//			}
		} catch (Exception e) {
			/*调用采购公用方法按规范抛出异常*/
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
	}
}

/**
 * 此处插入方法说明。
 * 功能描述:
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:
 */
private Vector doModification(StockVO stockVOs[],StockVO negStockVOs[],SettlebillItemVO settlebillItemVOs[],String cOperator,UFDate dCurrDate) {
	//修改入库单
	for(int i = 0; i < stockVOs.length; i++){
		if(negStockVOs[i] == null) continue;

		int nCount = -1;//确定位置
		String s1 = stockVOs[i].getCgeneralbid();
		for(int j = 0; j < settlebillItemVOs.length; j++){
			String s2 = settlebillItemVOs[j].getCstockrow();
			if(s2 != null && s1.equals(s2)){
				nCount = j;
				break;
			}
		}
		if(nCount < 0) continue;

		//修改累计结算数量
		UFDouble d1 = settlebillItemVOs[nCount].getNsettlenum();
		if(d1 != null){
			double d = stockVOs[i].getNaccumsettlenum().doubleValue() + d1.doubleValue();
			stockVOs[i].setNaccumsettlenum(new UFDouble(d));
		}
		//修改累计结算金额
		UFDouble d2 = stockVOs[i].getNprice();
		if(d1 != null && d2 != null){
			double d = stockVOs[i].getNaccumsettlemny().doubleValue() + d1.doubleValue() * d2.doubleValue();
			stockVOs[i].setNaccumsettlemny(new UFDouble(d));
		}
	}

	//修改负入库单
	for(int i = 0; i < negStockVOs.length; i++){
		if(negStockVOs[i] == null) continue;

		int nCount = -1;//确定位置
		String s1 = negStockVOs[i].getCgeneralbid();
		for(int j = 0; j < settlebillItemVOs.length; j++){
			String s2 = settlebillItemVOs[j].getCstockrow();
			if(s2 != null && s1.equals(s2)){
				nCount = j;
				break;
			}
		}
		if(nCount < 0) continue;

		//修改累计结算数量
		UFDouble d1 = settlebillItemVOs[nCount].getNsettlenum();
		if(d1 != null){
			double d = negStockVOs[i].getNaccumsettlenum().doubleValue() + d1.doubleValue();
			negStockVOs[i].setNaccumsettlenum(new UFDouble(d));
		}
		//修改累计结算金额
		UFDouble d2 = negStockVOs[i].getNprice();
		if(d1 != null && d2 != null){
			double d = negStockVOs[i].getNaccumsettlemny().doubleValue() + d1.doubleValue() * d2.doubleValue();
			negStockVOs[i].setNaccumsettlemny(new UFDouble(d));
		}
	}

	//设置表头
	SettlebillHeaderVO head = new SettlebillHeaderVO();
	head.setPk_corp(stockVOs[0].getPk_corp());
	head.setCaccountyear(null);
	head.setDsettledate(dCurrDate);
	head.setIbillstatus(new Integer(0));
	head.setCbilltype(ScmConst.PO_SettleBill);
	head.setCoperator(cOperator);
	head.setVsettlebillcode(null);
	head.setTmaketime((new UFDateTime(new Date())).toString());

	SettlebillVO settlebillVO = new SettlebillVO(settlebillItemVOs.length);
	settlebillVO.setParentVO(head);
	settlebillVO.setChildrenVO(settlebillItemVOs);

	//组合正副入库单
	Vector vv = new Vector();
	if(stockVOs != null && stockVOs.length > 0){
		for(int i = 0; i < stockVOs.length; i++) vv.addElement(stockVOs[i]);
	}
	if(negStockVOs != null && negStockVOs.length > 0){
		for(int i = 0; i < negStockVOs.length; i++) vv.addElement(negStockVOs[i]);
	}
	StockVO tempStockVOs[] = new StockVO[vv.size()];
	vv.copyInto(tempStockVOs);

	//插入结算单，更新入库单
	long tTime = System.currentTimeMillis();
	Vector vKey = new Vector();
	try{
		//获取结算单号
		String vSettlebillcode = generateSettleCode(stockVOs[0].getPk_corp());
		settlebillVO.getHeadVO().setVsettlebillcode(vSettlebillcode);

		nc.bs.ps.settle.SettleDMO dmo = new nc.bs.ps.settle.SettleDMO();
		vKey = dmo.doOrderToInvoiceSettle(settlebillVO,tempStockVOs,null);
		tTime = System.currentTimeMillis() - tTime;
		SCMEnv.out("本次结算时间：" + tTime + " ms!");
	}catch(Exception e){
		SCMEnv.out("结算时出现异常，不影响暂估");
		/*支持结算时出现异常不回滚，此处异常不抛出*/
		return null;
	}

	//结算完毕，设置主键
	if(vKey != null && vKey.size() > 1){
		String headKey = (String) vKey.elementAt(0);
		for(int i = 1; i < vKey.size(); i++){
			String bodyKey = (String) vKey.elementAt(i);
			settlebillItemVOs[i-1].setCsettlebill_bid(bodyKey);
			settlebillItemVOs[i-1].setCsettlebillid(headKey);
		}
	}

	Vector v = new Vector();
	v.addElement(settlebillVO);
	v.addElement(stockVOs);
	v.addElement(negStockVOs);

	return v;
}

/**
 * 此处插入方法说明。
 * 功能描述:
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:
 */
private Vector doModificationForSC(StockVO stockVOs[],SettlebillItemVO settlebillItemVOs[],String cOperator,UFDate dCurrDate) {
	//修改入库单
	for(int i = 0; i < stockVOs.length; i++){
		int nCount = -1;//确定位置
		String s1 = stockVOs[i].getCgeneralbid();
		for(int j = 0; j < settlebillItemVOs.length; j++){
			String s2 = settlebillItemVOs[j].getCstockrow();
			if(s2 != null && s1.equals(s2)){
				nCount = j;
				break;
			}
		}
		if(nCount < 0) continue;

		//修改累计结算数量
		UFDouble d1 = settlebillItemVOs[nCount].getNsettlenum();
		if(d1 != null){
			double d = stockVOs[i].getNaccumsettlenum().doubleValue() + d1.doubleValue();
			stockVOs[i].setNaccumsettlenum(new UFDouble(d));
		}
		//修改累计结算金额
		UFDouble d2 = stockVOs[i].getNprice();
		if(d1 != null && d2 != null){
			double d = stockVOs[i].getNaccumsettlemny().doubleValue() + d1.doubleValue() * d2.doubleValue();
			stockVOs[i].setNaccumsettlemny(new UFDouble(d));
		}
	}

	//设置表头
	SettlebillHeaderVO head = new SettlebillHeaderVO();
	head.setPk_corp(stockVOs[0].getPk_corp());
	head.setCaccountyear(null);
	head.setDsettledate(dCurrDate);
	head.setIbillstatus(new Integer(0));
	head.setCbilltype(ScmConst.PO_SettleBill);
	head.setCoperator(cOperator);
	head.setVsettlebillcode(null);
	head.setTmaketime((new UFDateTime(new Date())).toString());

	SettlebillVO settlebillVO = new SettlebillVO(settlebillItemVOs.length);
	settlebillVO.setParentVO(head);
	settlebillVO.setChildrenVO(settlebillItemVOs);

	//插入结算单，更新入库单
	long tTime = System.currentTimeMillis();
	Vector vKey = new Vector();
	try{
		//获取结算单号
		String vSettlebillcode = generateSettleCode(stockVOs[0].getPk_corp());
		settlebillVO.getHeadVO().setVsettlebillcode(vSettlebillcode);

		nc.bs.ps.settle.SettleDMO dmo = new nc.bs.ps.settle.SettleDMO();
		vKey = dmo.doOrderToInvoiceSettle(settlebillVO,stockVOs,null);
		tTime = System.currentTimeMillis() - tTime;
		SCMEnv.out("本次结算时间：" + tTime + " ms!");
	}catch(Exception e){
		SCMEnv.out("结算时出现异常，不影响暂估(SC)");
		/*支持结算时出现异常不回滚，此处异常不抛出*/
		return null;
	}

	//结算完毕，设置主键
	if(vKey != null && vKey.size() > 1){
		String headKey = (String) vKey.elementAt(0);
		for(int i = 1; i < vKey.size(); i++){
			String bodyKey = (String) vKey.elementAt(i);
			settlebillItemVOs[i-1].setCsettlebill_bid(bodyKey);
			settlebillItemVOs[i-1].setCsettlebillid(headKey);
		}
	}

	Vector v = new Vector();
	v.addElement(settlebillVO);
	v.addElement(stockVOs);

	return v;
}

/**
 * 功能描述:保存入库单,并修改订单的累计入库数量
 * 输入参数:
 * 返回值:[[入库单头主键+新增入库单行主键+入库单号（新增入库单时）],[入库单头时间戳+更新的入库单行时间戳+更新的入库单子子表3行时间戳]]
 * 异常处理:
 */
public ArrayList doSave(GeneralHVO VO, boolean bAdd, ArrayList lModify, String cOperator, OorderVO orderVOs[])
	throws BusinessException {

	String sTime = (new UFDateTime(new Date())).toString();

	GeneralHHeaderVO headVO = VO.getHeadVO();
	GeneralHItemVO bodyVO[] = VO.getBodyVO();
	GeneralBb3VO bb3VO[] = VO.getGrandVO();
	
	headVO.setFreplenishflag(new Integer(0));
	if(bodyVO != null && bodyVO.length > 0){
		for(int i = 0; i < bodyVO.length; i++){
			if(bodyVO[i].getNinnum() != null && bodyVO[i].getNinnum().doubleValue() < 0){
				headVO.setFreplenishflag(new Integer(1));
				break;
			}
		}
	}

	ArrayList list1 = new ArrayList();
	ArrayList list2 = new ArrayList();
	Vector vData0 = new Vector();
	Vector vDataBB3 = new Vector();
	EstimateDMO dmo = null;
	
	try{
		dmo = new EstimateDMO();
	}catch (Exception e) {
		SCMEnv.out(e);
		throw new BusinessException(e.getMessage());
	}

	//存货库存组织匹配检查
	Vector vTemp0 = new Vector();
	for (int i = 0; i < bodyVO.length; i++){
		if(bodyVO[i].getBodyEditStatus() != 3) vTemp0.addElement(bodyVO[i].getCbaseid());
	}
	String sBaseID[] = new String[vTemp0.size()];
	vTemp0.copyInto(sBaseID);
	UFBoolean bTemp[] = null;
  try{
    bTemp = dmo.isInvBelongWarehouse(sBaseID, headVO.getCwarehouseid());
  }catch(Exception e){
    throw new BusinessException(e.getMessage());
  }
	String sError = "";
	for (int i = 0; i < bTemp.length; i++) {
		if (!bTemp[i].booleanValue()){
			String[] value = new String[]{String.valueOf(i + 1)};
			sError +=nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000005",null,value)/*@res  "行" + CommonConstant.BEGIN_MARK + (i + 1) + CommonConstant.END_MARK + "存货不属于库存组织，不能保存！\n"*/;
		
		}
	}
	if (sError.trim().length() > 0) {
		throw new BusinessException(sError);
	}

	//通过仓库ID获得库存组织ID
	if (headVO != null) {
		String cwarehouseid = headVO.getCwarehouseid();
		if (cwarehouseid != null && cwarehouseid.trim().length() > 0) {
			try {
				String pk_calbody = dmo.getStorIDByWarehouseID(cwarehouseid);
				if (pk_calbody != null && pk_calbody.trim().length() > 0) {
					headVO.setCstoreorganization(pk_calbody);
				}
			} catch (Exception e) {
				SCMEnv.out(e);
				throw new BusinessException(e.getMessage());
			}
		}
	}
	//

	if (bAdd) {
		//增加入库单
		boolean bLock = false;
		String sKey[] = null;
		try {
			//获得需要加锁的主键（订单）
			sKey = getOrderLockKeys(orderVOs);

			//对单据加锁
			bLock = LockTool.setLockForPks(sKey, cOperator);
			if (!bLock) {
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000000")/*@res "正在进行相关操作，请稍后再试！"*/);
			}
			//判断时间戳是否改变
			String sMessage = isTimeStampChangedForOrder(orderVOs);
			if (sMessage != null && sMessage.length() > 0) {
				sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000001")/*@res "请刷新！\n"*/;
				throw new BusinessException(sMessage);
			}

			//获得入库单号
			String vBillCode = getBillCode(headVO);
			headVO.setVbillcode(vBillCode);

			headVO.setTmaketime(sTime);
			headVO.setTlastmoditime(sTime);
			headVO.setTaccounttime(sTime);

			//

			//改写可用量 2003/09/30 xhq
//			IICToPU_ICATP atp = (IICToPU_ICATP) new InterServBO().getInterInstance(ProductCode.PROD_IC,InterRegister.IC0050);
			IICToPU_ICATP atp = (IICToPU_ICATP) NCLocator.getInstance().lookup(IICToPU_ICATP.class.getName());
			atp.modifyATP(getChangedVO(VO, bAdd));
			//

			String key = dmo.insertHead(headVO);
			list1.add(key);
			vData0.addElement(key);

			String key0[] = dmo.insertBody(bodyVO, key, headVO.getPk_corp());

			for (int i = 0; i < bodyVO.length; i++) {
				bb3VO[i].setNpprice(bodyVO[i].getNprice());
				bb3VO[i].setNpmoney(bodyVO[i].getNmny());
				bb3VO[i].setNaccountnum1(new UFDouble(0.0));
				bb3VO[i].setNaccountmny(new UFDouble(0.0));
				list1.add(key0[i]);
				vData0.addElement(key0[i]);
			}
			String keybb3[] = dmo.insertBb3(bb3VO, key0, key, headVO.getPk_corp());
			if (keybb3 != null) {
				int iLen = keybb3.length;
				for (int i = 0; i < iLen; i++) {
					vDataBB3.addElement(keybb3[i]);
				}
			}
			//
			list1.add(vBillCode);
			//

			for (int i = 0; i < key0.length; i++) {
				bodyVO[i].setCgeneralhid(key);
				bodyVO[i].setCgeneralbid(key0[i]);
			}

			//修改订单数据
			dmo.updateOrderStockNum(lModify);

		} catch (Exception e) {
			/*调用采购公用方法按规范抛出异常*/
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		} finally {
			try {
//				if (myService != null) {
					//对单据解锁
					if (bLock)
						LockTool.releaseLockForPks(sKey, cOperator);
//				}
			} catch (Exception e) {
				SCMEnv.out(e);
				throw new BusinessException(e.getMessage());
			}
		}
	} else {
		boolean bLock = false;

		//组合需要加锁的主键
		Vector vTemp = new Vector();
		vTemp.addElement(VO.getHeadVO().getCgeneralhid());
		for (int i = 0; i < bodyVO.length; i++) {
			if (bodyVO[i].getBodyEditStatus() == 3 || bodyVO[i].getBodyEditStatus() == 2) {
				vTemp.addElement(bodyVO[i].getCgeneralbid());
				vTemp.addElement(bb3VO[i].getCgeneralbb3());
			}
		}
		String sKey[] = new String[vTemp.size()];
		vTemp.copyInto(sKey);

		try {
			//对单据加锁
			bLock = LockTool.setLockForPks(sKey, cOperator);
			if (!bLock)
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000000")/*@res "正在进行相关操作，请稍后再试！"*/);

			String key = (String) headVO.getAttributeValue("cgeneralhid");

			headVO.setTlastmoditime(sTime);
			headVO.setTaccounttime(sTime);

			//刷新期初暂估入库单状态
			GeneralHVO tempVO[] = new GeneralHVO[1];
			tempVO[0] = VO;
			ArrayList listStatus = dmo.queryInitialBillStatus(tempVO);
			ArrayList list = (ArrayList) listStatus.get(0);
			UFBoolean bSettled = (UFBoolean) list.get(0);
			UFBoolean bDeleted = (UFBoolean) list.get(1);
			UFBoolean bInvoice = (UFBoolean) list.get(2);

			if (bDeleted.booleanValue())
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000006")/*@res "入库单已作废，不能保存！"*/);
			if (bSettled.booleanValue())
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000007")/*@res "入库单已结算，不能保存！"*/);
			if(bInvoice.booleanValue())
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000087")/*@res "入库单已开票，不能保存！"*/);
			
			//判断时间戳是否改变
			String sMessage = isTimeStampChangedForGeneral(new GeneralHVO[] { VO });
			if (sMessage != null && sMessage.length() > 0) {
				sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000001")/*@res "请刷新！\n"*/;
				throw new BusinessException(sMessage);
			}

			//改写可用量 2003/09/30 xhq
//			IICToPU_ICATP atp = (IICToPU_ICATP) new InterServBO().getInterInstance(ProductCode.PROD_IC,InterRegister.IC0050);
			IICToPU_ICATP atp = (IICToPU_ICATP) NCLocator.getInstance().lookup(IICToPU_ICATP.class.getName());
			atp.modifyATP(getChangedVO(VO, bAdd));
			//

			if (headVO.getHeadEditStatus() == 2) {
				//更改入库单表头
				dmo.updateHead(headVO);
				list1.add(key);
				vData0.addElement(key);
			}

			Vector vInsert1 = new Vector();
			Vector vDelete1 = new Vector();
			Vector vUpdate1 = new Vector();
			Vector vInsert2 = new Vector();
			Vector vDelete2 = new Vector();
			Vector vUpdate2 = new Vector();

			for (int i = 0; i < bodyVO.length; i++) {
				if (bodyVO[i].getBodyEditStatus() == 1) {
					vInsert1.addElement(bodyVO[i]);
					vInsert2.addElement(bb3VO[i]);
				}
				if (bodyVO[i].getBodyEditStatus() == 3) {
					vDelete1.addElement(bodyVO[i]);
					vDelete2.addElement(bb3VO[i]);
				}
				if (bodyVO[i].getBodyEditStatus() == 2) {
					vUpdate1.addElement(bodyVO[i]);
					vUpdate2.addElement(bb3VO[i]);
				}
			}

			String key0[] = null;
			String keybb3[] = null;
			//增加入库单行
			if (vInsert1.size() > 0 && vInsert2.size() > 0) {
				GeneralHItemVO itemVO[] = new GeneralHItemVO[vInsert1.size()];
				vInsert1.copyInto(itemVO);

				GeneralBb3VO grandVO[] = new GeneralBb3VO[vInsert2.size()];
				vInsert2.copyInto(grandVO);

				key0 = dmo.insertBody(itemVO, key, headVO.getPk_corp());
				keybb3 = dmo.insertBb3(grandVO, key0, key, headVO.getPk_corp());
			}

			//删除入库单行
			if (vDelete1.size() > 0 && vDelete2.size() > 0) {
				GeneralHItemVO itemVO[] = new GeneralHItemVO[vDelete1.size()];
				vDelete1.copyInto(itemVO);

				GeneralBb3VO grandVO[] = new GeneralBb3VO[vDelete2.size()];
				vDelete2.copyInto(grandVO);

				dmo.deleteBody(itemVO);
				dmo.deleteBb3(grandVO);
			}

			//更改入库单行
			if (vUpdate1.size() > 0 && vUpdate2.size() > 0) {
				GeneralHItemVO itemVO[] = new GeneralHItemVO[vUpdate1.size()];
				vUpdate1.copyInto(itemVO);

				GeneralBb3VO grandVO[] = new GeneralBb3VO[vUpdate2.size()];
				vUpdate2.copyInto(grandVO);

				dmo.updateBody(itemVO);
				dmo.updateBb3(grandVO);
			}

			int j = 0;
			for (int i = 0; i < bodyVO.length; i++) {
				if (bodyVO[i].getBodyEditStatus() == 1) {
					//增加入库单行
					list1.add(key0[j]);
					vData0.addElement(key0[j]);
					vDataBB3.addElement(keybb3[j]);
					j++;
				} else if (bodyVO[i].getBodyEditStatus() == 3) {
					//删除入库单行
				} else if (bodyVO[i].getBodyEditStatus() == 2) {
					//更改入库单行
					vData0.addElement(bodyVO[i].getCgeneralbid());
					vDataBB3.addElement(bb3VO[i].getCgeneralbb3());
				} else {
					//入库单行未作任何修改
				}
			}

			//修改订单数据
			dmo.updateOrderStockNum(lModify);

		} catch (Exception e) {
			/*调用采购公用方法按规范抛出异常*/
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		} finally {
			try {
//				if (myService != null) {
					//对单据解锁
					if (bLock)
						LockTool.releaseLockForPks(sKey, cOperator);
//				}
			} catch (Exception e) {
				/*调用采购公用方法按规范抛出异常*/
				nc.bs.pu.pub.PubDMO.throwBusinessException(e);
			}
		}
	}

	if (vData0 != null && vData0.size() > 0) {
		//入库单头时间戳+更新的入库单行时间戳+更新的入库单子表行时间戳 返回
		nc.bs.pu.pub.PubDMO pubDMO = null;

		String sHeadKey[] = new String[1];
		sHeadKey[0] = (String) vData0.elementAt(0);

		String sBodyKey[] = new String[vData0.size() - 1];
		String sBb3Key[] = new String[vDataBB3.size()];
		vDataBB3.copyInto(sBb3Key);
		for (int i = 0; i < sBodyKey.length; i++)
			sBodyKey[i] = (String) vData0.elementAt(i + 1);

		try {
			pubDMO = new nc.bs.pu.pub.PubDMO();
			Object t[] = pubDMO.queryHBTsArrayByHBIDArray("45", sHeadKey, sBodyKey, sBb3Key);
			if (t != null && t.length > 0) {
				String t1[] = (String[]) t[0];
				String t2[] = (String[]) t[1];
				String t3[] = (String[]) t[2];
				if (t1 != null && t1.length > 0)
					list2.add(t1[0]);
				if (t2 != null && t2.length > 0 && t3 != null && t3.length > 0 && t2.length == t3.length) {
					for (int i = 0; i < t2.length; i++) {
						list2.add(t2[i]);
						list2.add(t3[i]);
					}
				}
			}
		} catch (Exception e) {
			/*调用采购公用方法按规范抛出异常*/
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}

		ArrayList list = new ArrayList();
		list.add(list1);
		list.add(list2);

		return list;
	}
	return null;
}

/**
 * 功能描述:暂估
 * 输入参数:VO[],当前操作员ID,当前日期
 * 创建：熊海情
 * 修改：晁志平 FOR  V30
 */
public void estimate(EstimateVO VOs[], ArrayList paraList)
	throws BusinessException {
	nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();

	EstimateDMO dmo = null;
	ICreateCorpQueryService myService0 = null;
	ISysInitQry myService1 = null;
	nc.bs.pu.pub.PubImpl myService2 = null;
	boolean bLock = false;

	String cOperator = (String)paraList.get(0);
	UFDate dCurrDate = (UFDate)paraList.get(1);
	String sEstMode = (String)paraList.get(2);
	String sDifferMode = (String)paraList.get(3);
	UFBoolean bZGYF = (UFBoolean)paraList.get(4);
	String sCurrTypeID = (String)paraList.get(5);

	//组合所有需要加锁的主键
	String sKeys[] = getEstimateLockKeys(VOs);

	timer.addExecutePhase("组合所有需要加锁的主键");
	String[] saSubLockedId = null;
	try {
		//对单据加锁
		dmo = new EstimateDMO();
		bLock = LockTool.setLockForPks(sKeys, cOperator);

		timer.addExecutePhase("加锁");

		if (!bLock)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000000")/*@res "正在进行相关操作，请稍后再试！"*/);

		//判断时间戳是否改变
		String sMessage = isTimeStampChanged(VOs);
		if (sMessage != null && sMessage.length() > 0) {
			sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000001")/*@res "请刷新！\n"*/;
			throw new BusinessException(sMessage);
		}
		timer.addExecutePhase("判断时间戳是否改变");

		Vector v1 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			v1.addElement(VOs[i].getCgeneralbid());
		}

		//状态刷新：判断是否存在已经暂估的入库单行(存在抛异常)
		if (v1.size() > 0) {
			dmo.checkExistEsti(v1);
		}
		timer.addExecutePhase("状态刷新：判断是否存在已经暂估的入库单行(存在抛异常)");

		//暂估时单价和金额的精度控制
		myService2 = new nc.bs.pu.pub.PubImpl();
		int digit[] = myService2.getDigitBatch(VOs[0].getPk_corp(), new String[] { "BD301", "BD505" });
		if (digit == null || digit.length == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000008")/*@res "获取本位币精度或单价精度异常!"*/);

		timer.addExecutePhase("暂估时单价和金额的精度控制");

		//入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费
		Vector vAllBodyVoB = new Vector();
		Vector vAllBodyVoBB3 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			GeneralHItemVO bodyVO = new GeneralHItemVO();
			bodyVO.setCgeneralbid(VOs[i].getCgeneralbid());
			bodyVO.setBzgflag(new UFBoolean(true));
			bodyVO.setDzgdate(dCurrDate);
			bodyVO.setBzgyfflag(bZGYF);
			vAllBodyVoB.addElement(bodyVO);

			GeneralBb3VO bb3VO = new GeneralBb3VO();
			if (VOs[i].getNprice() != null) {
				bb3VO.setCgeneralbid(VOs[i].getCgeneralbid());
				double d = PubDMO.getRoundDouble(digit[1], VOs[i].getNprice().doubleValue());
				bb3VO.setNpprice(new UFDouble(d));
				d = PubDMO.getRoundDouble(digit[1], VOs[i].getNtaxprice().doubleValue());
				bb3VO.setNzygfprice(new UFDouble(d));
			}
			if (VOs[i].getNmoney() != null) {
				double d = PubDMO.getRoundDouble(digit[0], VOs[i].getNmoney().doubleValue());
				bb3VO.setNpmoney(new UFDouble(d));
				d = PubDMO.getRoundDouble(digit[0], VOs[i].getNtotalmoney().doubleValue());
				bb3VO.setNzgyfmoney(new UFDouble(d));
			}
			if (VOs[i].getNmaterialmoney() != null) {
				double d = PubDMO.getRoundDouble(digit[0], VOs[i].getNmaterialmoney().doubleValue());
				bb3VO.setNmaterialmoney(new UFDouble(d));
			}
			vAllBodyVoBB3.addElement(bb3VO);
		}

		timer.addExecutePhase("打标志、计算单价金额材料费--循环赋值");

		if (vAllBodyVoB.size() > 0) {
			GeneralHItemVO[] bodyVOs = new GeneralHItemVO[vAllBodyVoB.size()];
			vAllBodyVoB.copyInto(bodyVOs);
			dmo.updateBillBody(bodyVOs);
		}

		timer.addExecutePhase("打标志、计算单价金额材料费--更新子表");

		if (vAllBodyVoBB3.size() > 0) {
			GeneralBb3VO bb3VOs[] = new GeneralBb3VO[vAllBodyVoBB3.size()];
			vAllBodyVoBB3.copyInto(bb3VOs);
			dmo.updateBillBb3(bb3VOs);
		}

		timer.addExecutePhase("打标志、计算单价金额材料费--更新子表3");

		//判断存货核算是否启用
		if (VOs != null && VOs.length > 0) {
			String unitCode = VOs[0].getPk_corp();
			myService0 = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			boolean bIAStartUp = myService0.isEnabled(unitCode, "IA");

			myService1 = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
			boolean bStockRB = true; //入库单是否红蓝对冲
			nc.vo.pub.para.SysInitVO initVO[] = myService1.querySysInit(unitCode, "PO36");
			if (initVO != null && initVO.length > 0) {
				if (initVO[0].getValue().equals("否"))
					bStockRB = false;
			}
			timer.addExecutePhase("入库单是否红蓝对冲");
			if (bIAStartUp) {
				//调用接口,向存货核算系统传送数据
				saveBillFromOutter(VOs, cOperator, dCurrDate);
				timer.addExecutePhase("调用接口,向存货核算系统传送数据[总时间]");
				//结算
				if (bStockRB) {
					saSubLockedId = settleForEstimate(VOs, cOperator, dCurrDate, sEstMode, sDifferMode);
				}
				timer.addExecutePhase("结算");
			}
			
			//暂估应付
			if(bZGYF.booleanValue() && myService0.isEnabled(unitCode, "AP")){
				ArrayList list = new ArrayList();
				list.add(sCurrTypeID);
				list.add(cOperator);
				list.add(dCurrDate);
				saveBillForARAP(VOs,list);
			}
		}
		//
		timer.showAllExecutePhase("暂估处理BS时间分布：");

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	} finally {
		try {
//			if (myService != null) {
				//对单据解锁
				if (bLock) {
					String[] saAllKey = sKeys;
					if (saSubLockedId != null && saSubLockedId.length > 0) {
						ArrayList listAll = new ArrayList();
						int iLen = saAllKey.length;
						for (int i = 0; i < iLen; i++) {
							listAll.add(saAllKey[i]);
						}
						iLen = saSubLockedId.length;
						for (int i = 0; i < iLen; i++) {
							listAll.add(saSubLockedId[i]);
						}
						saAllKey = (String[]) listAll.toArray(saAllKey);
					}
					LockTool.releaseLockForPks(sKeys, cOperator);
//				}
			}
		} catch (Exception e) {
			/*调用采购公用方法按规范抛出异常*/
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
	}
}



/*
 * 暂估应付保存
 */
public void saveBillForARAP(EstimateVO VOs[], ArrayList paraList) throws BusinessException {
	String sCurrTypeID = (String)paraList.get(0);
	String cOperator = (String)paraList.get(1);
	UFDate dCurrDate = (UFDate)paraList.get(2);
	nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();
	
	try {
		nc.bs.ps.estimate.EstimateDMO dmo = new nc.bs.ps.estimate.EstimateDMO();
		
		//2006-09-12 xhq 支持应付单单据类型配置
		IPFMetaModel myService = (IPFMetaModel) nc.bs.framework.common.NCLocator.getInstance().lookup(IPFMetaModel.class.getName());
		Hashtable tBillType = new Hashtable();//应付单据类型
		for(int i = 0; i < VOs.length; i++){
			String key = "25" + VOs[i].getCbiztype() + "APPROVE";
			if(tBillType.get(key) == null){
				MessagedriveVO driveVO[] = myService.queryAllMsgdrvVOs(null, "25", VOs[i].getCbiztype(), "APPROVE");
				if(driveVO != null && driveVO.length > 0 && driveVO[0].getPk_billtype() != null) tBillType.put(key, driveVO[0].getPk_billtype());
			}
		}
		
		Hashtable tBillTemplet = new Hashtable();//应付单据模板			
		for(int i = 0; i < VOs.length; i++){
			String key = "25" + VOs[i].getCbiztype() + "APPROVE";
			if(tBillType.get(key) == null) tBillType.put(key, "D1");					
			
			String key1 = VOs[i].getPk_corp() + tBillType.get(key);
			if(tBillTemplet.get(key1) == null){
				String ss[] = dmo.getDJDataForARAP(VOs[i].getPk_corp(), tBillType.get(key).toString());
				if(ss != null) tBillTemplet.put(key1, ss);
			}
		}

		//暂估应付时,供应商取订单发票方,发票方不存在,取供应商 2006-08-25
		Vector vTemp = new Vector();
		for(int i = 0; i < VOs.length; i++){
			String s = VOs[i].getCfirstbillhid();
			if(s != null && !vTemp.contains(s)) vTemp.addElement(s);
		}
		Hashtable t = null;
		if(vTemp.size() > 0){
			String corderid[] = new String[vTemp.size()];
			vTemp.copyInto(corderid);
			t = dmo.getOrderInvoiceReceiver(corderid);
			if(t != null && t.size() > 0){
				for(int i = 0; i < VOs.length; i++){
					String s = VOs[i].getCfirstbillhid();
					if(s != null && t.get(s) != null){
						String ss[] = (String[])t.get(s);
						VOs[i].setCprovidermangid(ss[0]);
					}
				}				
			}
		}
		
		//查询供应商基本ID
		String pk_cumandoc[] = new String[VOs.length];
		for(int i = 0; i < VOs.length; i++) pk_cumandoc[i] = VOs[i].getCprovidermangid();
		SettleDMO settleDMO = new SettleDMO();
		String pk_cubasdoc[] = settleDMO.queryVendorBaseIDForARAP(pk_cumandoc);
		if (pk_cubasdoc != null && pk_cubasdoc.length > 0) {
			for (int i = 0; i < VOs.length; i++) {
				VOs[i].setCproviderbaseid(pk_cubasdoc[i]);
			}
		}
		//查询存货基本ID
		Vector v1 = new Vector();
		for(int i = 0; i < VOs.length; i++){
			if(VOs[i].getCbaseid() == null) v1.addElement(VOs[i].getCmangid());
		}
		if(v1.size() > 0){
			pk_cumandoc = new String[v1.size()];
			v1.copyInto(pk_cumandoc);
			pk_cubasdoc = settleDMO.getInvBaseID(pk_cumandoc);
			if (pk_cubasdoc != null && pk_cubasdoc.length > 0) {
				int j = 0;
				for (int i = 0; i < VOs.length; i++) {
					if(VOs[i].getCbaseid() == null){
						VOs[i].setCbaseid(pk_cubasdoc[j]);
						j++;
					}
				}
			}
		}

    //VO转换
    GeneralBillVO icVOs[] = new GeneralBillVO[VOs.length];
    for(int i = 0; i < VOs.length; i++) icVOs[i] = switchVOFromEstimate2IC(VOs[i]);
    DJZBVO arapVO[] = (DJZBVO[]) PfUtilTools.runChangeDataAry("45", "D1", icVOs);
    if(arapVO == null || arapVO.length == 0) return;

		// 根据采购入库单生成应付单
		v1 = new Vector();
		Vector v2 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			//后续处理:应付单头
			DJZBHeaderVO headVO = (DJZBHeaderVO)arapVO[i].getParentVO();
			headVO.setVouchid(VOs[i].getCgeneralhid());

			String key = "25" + VOs[i].getCbiztype() + "APPROVE";
			String cBillType = tBillType.get(key).toString();
			String ss[] = null;
			key = VOs[i].getPk_corp() + tBillType.get(key);
			if(tBillTemplet.get(key) != null) ss = (String[])tBillTemplet.get(key);
			if (ss != null && ss.length > 0) headVO.setYwbm(ss[0]);
			
			headVO.setLrr(cOperator);
			headVO.setDjrq(dCurrDate);
			headVO.setDjkjnd(Integer.toString(VOs[i].getDbilldate()
					.getYear()));
			
			String sTemp = Integer.toString(VOs[i].getDbilldate().getMonth());
			if(sTemp.length() < 2) sTemp = "0" + sTemp;
			headVO.setDjkjqj(sTemp);
			
			headVO.setAttributeValue("zgyf",new Integer(1));//暂估应付
			// 头非空
			headVO.setPrepay(new UFBoolean(false));
			headVO.setDjlxbm(cBillType);
			headVO.setQcbz(new UFBoolean(false));
			headVO.setLybz(new Integer(4));
			headVO.setDjzt(new Integer(1));
			headVO.setDjdl("yf");
			headVO.setPzglh(new Integer(1));
			headVO.setWldx(new Integer(1));
			//
			v1.addElement(headVO);
			
			//后续处理:应付单体
			DJZBItemVO bodyVO[] = (DJZBItemVO[])arapVO[i].getChildrenVO();
			bodyVO[0].setDwbm(VOs[i].getPk_corp());
			bodyVO[0].setFb_oid(VOs[i].getCgeneralbid());

			bodyVO[0].setHbbm(VOs[i].getCproviderbaseid()); //供应商基本ID
			bodyVO[0].setCinventoryid(VOs[i].getCbaseid()); //存货基本ID

			bodyVO[0].setFbye(new UFDouble(0)); // 辅币余额

			bodyVO[0].setDffbje(new UFDouble(0)); // 贷方辅币余额
			bodyVO[0].setWldx(new Integer(1));
			
			bodyVO[0].setDdhid(VOs[i].getCfirstbillhid());//订单行ID
			bodyVO[0].setDdh(VOs[i].getVfirstbillcode());//订单号
			bodyVO[0].setCkdid(VOs[i].getCgeneralbid());//出入库单行ID
			bodyVO[0].setFphid(null);//发票行ID
			bodyVO[0].setFph(null);//发票号
			bodyVO[0].setAttributeValue("ckdh", VOs[i].getVbillcode());//出库单号
			if(VOs[i].getCfirstbillhid() != null && t != null){
				if(t.get(VOs[i].getCfirstbillhid()) != null){
					ss = (String[])t.get(VOs[i].getCfirstbillhid());
					bodyVO[0].setSfkxyh(ss[1]);//付款协议
				}
			}
			
			// 币种
			bodyVO[0].setBzbm(sCurrTypeID);
			bodyVO[0].setBbhl(new UFDouble(1));
			bodyVO[0].setFbhl(null);
			// 扣税类别
			bodyVO[0].setKslb(VOs[i].getIdiscounttaxtype());
			// 税率
			bodyVO[0].setSl(VOs[i].getNtaxrate());

			// 体非空项
			bodyVO[0].setOld_sys_flag(new UFBoolean(false));
			bodyVO[0].setFx(new Integer(-1));
			bodyVO[0].setJffbje(new UFDouble(0));
			bodyVO[0].setJfbbje(new UFDouble(0));
			bodyVO[0].setJfybje(new UFDouble(0));
			bodyVO[0].setJfybsj(new UFDouble(0));
			bodyVO[0].setJfybwsje(new UFDouble(0));

			bodyVO[0].setWbfybje(new UFDouble(0));
			bodyVO[0].setWbffbje(new UFDouble(0));
			bodyVO[0].setWbfbbje(new UFDouble(0));
			
			bodyVO[0].setYwybm(VOs[i].getCoperatorid());// 业务员
			
			//价税合计
			bodyVO[0].setDfbbje(VOs[i].getNtotalmoney());
			bodyVO[0].setDfybje(VOs[i].getNtotalmoney());
			bodyVO[0].setYbye(VOs[i].getNtotalmoney());
			bodyVO[0].setBbye(VOs[i].getNtotalmoney());
			
			// 税额
			bodyVO[0].setDfbbsj(VOs[i].getNtotalmoney().sub(VOs[i].getNmoney()));
			bodyVO[0].setDfybsj(VOs[i].getNtotalmoney().sub(VOs[i].getNmoney()));
			
			//含税单价
			bodyVO[0].setHsdj(VOs[i].getNtaxprice());
						
			bodyVO[0].setPausetransact(new UFBoolean(true));
			bodyVO[0].setOthersysflag("采购暂估");
						
			v2.addElement(bodyVO[0]);
		}

		timer.addExecutePhase("VO 对照");

		// 对应付单进行处理: 相同表头的单据组合成一张单据
		DJZBHeaderVO headVOs[] = new DJZBHeaderVO[v1.size()];
		v1.copyInto(headVOs);
		DJZBItemVO bodyVOs[] = new DJZBItemVO[v2.size()];
		v2.copyInto(bodyVOs);

		// 组合VO[]
		v1 = new Vector();
		for (int i = 0; i < headVOs.length; i++) {
			DJZBVO VO = new DJZBVO();
			VO.setParentVO(headVOs[i]);
			VO.setChildrenVO(new DJZBItemVO[]{bodyVOs[i]});
			v1.addElement(VO);
		}
		DJZBVO apVOs[] = new DJZBVO[v1.size()];
		v1.copyInto(apVOs);
		timer.addExecutePhase("组合VO[]");

		// 调用应付的VO转换工具
		if (apVOs != null && apVOs.length > 0) {
			VoTools tools = new VoTools();
			for (int i = 0; i < apVOs.length; i++) {
				apVOs[i] = (DJZBVO) tools.getSumCG((DJZBVO)apVOs[i]);
			}
		}
		timer.addExecutePhase("调用应付的VO转换工具");

		// 调用应付提供接口传送单据(保存暂估应付单)
		//******
		IArapForGYLPublic iArap = (IArapForGYLPublic) NCLocator.getInstance().lookup(IArapForGYLPublic.class.getName());
		for(int i = 0; i < apVOs.length; i++){
			iArap.saveEffForCG(apVOs[i]);
		}
		//******

		timer.addExecutePhase("调用应付提供接口传送单据");

		timer.showAllExecutePhase("无发票结算向应付传送数据时间分布--明细");

	} catch (Exception e) {
		/* 调用采购公用方法按规范抛出异常 */
		SCMEnv.out(e);
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return;
}

/*
 * 暂估应付保存
 */
public void saveBillForARAP_ww(wwEstimateVO VOs[], ArrayList paraList) throws BusinessException {
	String sCurrTypeID = (String)paraList.get(0);
	String cOperator = (String)paraList.get(1);
	UFDate dCurrDate = (UFDate)paraList.get(2);
	nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();
	
	try {
		nc.bs.ps.estimate.EstimateDMO dmo = new nc.bs.ps.estimate.EstimateDMO();
		
		//2006-09-12 xhq 支持应付单单据类型配置
		IPFMetaModel myService = (IPFMetaModel) nc.bs.framework.common.NCLocator.getInstance().lookup(IPFMetaModel.class.getName());
		Hashtable tBillType = new Hashtable();//应付单据类型
		for(int i = 0; i < VOs.length; i++){
			String key = "25" + VOs[i].getCbiztype() + "APPROVE";
			if(tBillType.get(key) == null){
				MessagedriveVO driveVO[] = myService.queryAllMsgdrvVOs(null, "25", VOs[i].getCbiztype(), "APPROVE");
				if(driveVO != null && driveVO.length > 0 && driveVO[0].getPk_billtype() != null) tBillType.put(key, driveVO[0].getPk_billtype());
			}
		}
		
		Hashtable tBillTemplet = new Hashtable();//应付单据模板			
		for(int i = 0; i < VOs.length; i++){
			String key = "25" + VOs[i].getCbiztype() + "APPROVE";
			if(tBillType.get(key) == null) tBillType.put(key, "D1");					
			
			String key1 = VOs[i].getPk_corp() + tBillType.get(key);
			if(tBillTemplet.get(key1) == null){
				String ss[] = dmo.getDJDataForARAP(VOs[i].getPk_corp(), tBillType.get(key).toString());
				if(ss != null) tBillTemplet.put(key1, ss);
			}
		}

		//暂估应付时,供应商取订单发票方,发票方不存在,取供应商 2006-08-25
		Vector vTemp = new Vector();
		for(int i = 0; i < VOs.length; i++){
			String s = VOs[i].getCfirstbillhid();
			if(s != null && !vTemp.contains(s)) vTemp.addElement(s);
		}
		Hashtable t = null;
		if(vTemp.size() > 0){
			String corderid[] = new String[vTemp.size()];
			vTemp.copyInto(corderid);
			t = dmo.getOrderInvoiceReceiver(corderid);
			if(t != null && t.size() > 0){
				for(int i = 0; i < VOs.length; i++){
					String s = VOs[i].getCfirstbillhid();
					if(s != null && t.get(s) != null){
						String ss[] = (String[])t.get(s);
						VOs[i].setCprovidermangid(ss[0]);
					}
				}				
			}
		}
		
		//查询供应商基本ID
		String pk_cumandoc[] = new String[VOs.length];
		for(int i = 0; i < VOs.length; i++) pk_cumandoc[i] = VOs[i].getCprovidermangid();
		SettleDMO settleDMO = new SettleDMO();
		String pk_cubasdoc[] = settleDMO.queryVendorBaseIDForARAP(pk_cumandoc);
		if (pk_cubasdoc != null && pk_cubasdoc.length > 0) {
			for (int i = 0; i < VOs.length; i++) {
				VOs[i].setCproviderbaseid(pk_cubasdoc[i]);
			}
		}
		//查询存货基本ID
		Vector v1 = new Vector();
		for(int i = 0; i < VOs.length; i++){
			if(VOs[i].getCbaseid() == null) v1.addElement(VOs[i].getCmangid());
		}
		if(v1.size() > 0){
			pk_cumandoc = new String[v1.size()];
			v1.copyInto(pk_cumandoc);
			pk_cubasdoc = settleDMO.getInvBaseID(pk_cumandoc);
			if (pk_cubasdoc != null && pk_cubasdoc.length > 0) {
				int j = 0;
				for (int i = 0; i < VOs.length; i++) {
					if(VOs[i].getCbaseid() == null){
						VOs[i].setCbaseid(pk_cubasdoc[j]);
						j++;
					}
				}
			}
		}

    //VO转换
    GeneralBillVO icVOs[] = new GeneralBillVO[VOs.length];
    for(int i = 0; i < VOs.length; i++){
    	icVOs[i] = switchVOFromEstimate2IC_wwyf(VOs[i]);
    }
    DJZBVO[] arapVO = new DJZBVO[icVOs.length];
    
//  GeneralBillHeaderVO hfromVO = new GeneralBillHeaderVO();
    for (int i = 0; i < icVOs.length; i++) {
    	
	  	DJZBVO tempvo = new DJZBVO();
	    DJZBHeaderVO hvo = new DJZBHeaderVO();
	  	GeneralBillHeaderVO hfromVO =(GeneralBillHeaderVO) icVOs[i].getParentVO();
	  	GeneralBillItemVO[] bfromVO =  (GeneralBillItemVO[]) icVOs[i].getChildrenVO();
  	
		hvo.setXslxbm(hfromVO.getCbiztypeid());
		hvo.setDwbm(hfromVO.getPk_corp());
		hvo.setSfkr(hfromVO.getCproviderid());
		
		DJZBItemVO[] bvo = switchVOIcToDJZBb(hfromVO,bfromVO);
		tempvo.setParentVO(hvo);
		tempvo.setChildrenVO(bvo);//bvo.toArray(new DJZBItemVO[0])
		arapVO[i] = tempvo;
	}
    
    
//    DJZBVO arapVO[] = (DJZBVO[]) PfUtilTools.runChangeDataAry("47", "D1", icVOs);
    if(arapVO == null || arapVO.length == 0) return;

		// 根据采购入库单生成应付单
		v1 = new Vector();
		Vector v2 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			//后续处理:应付单头
			DJZBHeaderVO headVO = (DJZBHeaderVO)arapVO[i].getParentVO();
			headVO.setVouchid(VOs[i].getCgeneralhid());
			headVO.setDdlx(VOs[i].getCgeneralhid());
			String key = "25" + VOs[i].getCbiztype() + "APPROVE";
			String cBillType = tBillType.get(key).toString();
			String ss[] = null;
			key = VOs[i].getPk_corp() + tBillType.get(key);
			if(tBillTemplet.get(key) != null) ss = (String[])tBillTemplet.get(key);
			if (ss != null && ss.length > 0) headVO.setYwbm(ss[0]);
			
			headVO.setLrr(cOperator);
			headVO.setDjrq(dCurrDate);
			headVO.setDjkjnd(Integer.toString(VOs[i].getDbilldate()
					.getYear()));
			
			String sTemp = Integer.toString(VOs[i].getDbilldate().getMonth());
			if(sTemp.length() < 2) sTemp = "0" + sTemp;
			headVO.setDjkjqj(sTemp);
			
			headVO.setAttributeValue("zgyf",new Integer(1));//暂估应付
			// 头非空
			headVO.setPrepay(new UFBoolean(false));
			headVO.setDjlxbm(cBillType);
			headVO.setQcbz(new UFBoolean(false));
			headVO.setLybz(new Integer(4));
			headVO.setDjzt(new Integer(1));
			headVO.setDjdl("yf");
			headVO.setPzglh(new Integer(1));
			headVO.setWldx(new Integer(1));
			headVO.setZyx29("Y");//取消暂估时用到
			//
			v1.addElement(headVO);
			
			//后续处理:应付单体
			DJZBItemVO bodyVO[] = (DJZBItemVO[])arapVO[i].getChildrenVO();
			bodyVO[0].setDwbm(VOs[i].getPk_corp());
			bodyVO[0].setFb_oid(VOs[i].getCgeneralbid());

			bodyVO[0].setHbbm(VOs[i].getCproviderbaseid()); //供应商基本ID
			bodyVO[0].setCinventoryid(VOs[i].getCbaseid()); //存货基本ID

			bodyVO[0].setFbye(new UFDouble(0)); // 辅币余额

			bodyVO[0].setDffbje(new UFDouble(0)); // 贷方辅币余额
			bodyVO[0].setWldx(new Integer(1));
			
			bodyVO[0].setDdhid(VOs[i].getCfirstbillhid());//订单行ID
			bodyVO[0].setDdh(VOs[i].getVfirstbillcode());//订单号
			bodyVO[0].setCkdid(VOs[i].getCgeneralbid());//出入库单行ID
			bodyVO[0].setFphid(null);//发票行ID
			bodyVO[0].setFph(null);//发票号
			bodyVO[0].setAttributeValue("ckdh", VOs[i].getVbillcode());//出入库单号
			if(VOs[i].getCfirstbillhid() != null && t != null){
				if(t.get(VOs[i].getCfirstbillhid()) != null){
					ss = (String[])t.get(VOs[i].getCfirstbillhid());
					bodyVO[0].setSfkxyh(ss[1]);//付款协议
				}
			}
			
			// 币种
			bodyVO[0].setBzbm(sCurrTypeID);
			bodyVO[0].setBbhl(new UFDouble(1));
			bodyVO[0].setFbhl(null);
			// 扣税类别
			bodyVO[0].setKslb(VOs[i].getIdiscounttaxtype());
			// 税率
			bodyVO[0].setSl(VOs[i].getNtaxrate());

			// 体非空项
			bodyVO[0].setOld_sys_flag(new UFBoolean(false));
			bodyVO[0].setFx(new Integer(-1));
			bodyVO[0].setJffbje(new UFDouble(0));
			bodyVO[0].setJfbbje(new UFDouble(0));
			bodyVO[0].setJfybje(new UFDouble(0));
			bodyVO[0].setJfybsj(new UFDouble(0));
			bodyVO[0].setJfybwsje(new UFDouble(0));

			bodyVO[0].setWbfybje(new UFDouble(0));
			bodyVO[0].setWbffbje(new UFDouble(0));
			bodyVO[0].setWbfbbje(new UFDouble(0));
			
			bodyVO[0].setYwybm(VOs[i].getCoperatorid());// 业务员
			
			//价税合计
			bodyVO[0].setDfbbje(VOs[i].getNtotalmoney());
			bodyVO[0].setDfybje(VOs[i].getNtotalmoney());
			bodyVO[0].setYbye(VOs[i].getNtotalmoney());
			bodyVO[0].setBbye(VOs[i].getNtotalmoney());
			
			// 税额
			bodyVO[0].setDfbbsj(VOs[i].getNtotalmoney().sub(VOs[i].getNmoney()));
			bodyVO[0].setDfybsj(VOs[i].getNtotalmoney().sub(VOs[i].getNmoney()));
			
			//含税单价
			bodyVO[0].setHsdj(VOs[i].getNtaxprice());
						
			bodyVO[0].setPausetransact(new UFBoolean(true));
			bodyVO[0].setOthersysflag("委外加工费");
			v2.addElement(bodyVO[0]);
		}

		timer.addExecutePhase("VO 对照");

		// 对应付单进行处理: 相同表头的单据组合成一张单据
		DJZBHeaderVO headVOs[] = new DJZBHeaderVO[v1.size()];
		v1.copyInto(headVOs);
		DJZBItemVO bodyVOs[] = new DJZBItemVO[v2.size()];
		v2.copyInto(bodyVOs);

		// 组合VO[]
		v1 = new Vector();
		for (int i = 0; i < headVOs.length; i++) {
			DJZBVO VO = new DJZBVO();
			VO.setParentVO(headVOs[i]);
			VO.setChildrenVO(new DJZBItemVO[]{bodyVOs[i]});
			v1.addElement(VO);
		}
		DJZBVO apVOs[] = new DJZBVO[v1.size()];
		v1.copyInto(apVOs);
		timer.addExecutePhase("组合VO[]");

		// 调用应付的VO转换工具
		if (apVOs != null && apVOs.length > 0) {
			VoTools tools = new VoTools();
			for (int i = 0; i < apVOs.length; i++) {
				apVOs[i] = (DJZBVO) tools.getSumCG((DJZBVO)apVOs[i]);
			}
		}
		timer.addExecutePhase("调用应付的VO转换工具");

		// 调用应付提供接口传送单据(保存暂估应付单)
		//******
//		IArapForGYLPublic iArap = (IArapForGYLPublic) NCLocator.getInstance().lookup(IArapForGYLPublic.class.getName());
//		for(int i = 0; i < apVOs.length; i++){
//			//iArap.saveEffForCG(apVOs[i]);
//			new DJZBBO().saveDj(apVOs[i]);
//		}
		//按单据号合并单据成应付单VO
	    DJZBVO[] aggVOs =  DJZBVOMerge(apVOs); 
	    
		IArapForGYLPublic2 iArap = (IArapForGYLPublic2) NCLocator.getInstance().lookup(IArapForGYLPublic2.class.getName());
		for(int i = 0; i < aggVOs.length; i++){
			iArap.saveEffForCG2(aggVOs[i]);
		}
		//******

		timer.addExecutePhase("调用应付提供接口传送单据");

		timer.showAllExecutePhase("无发票结算向应付传送数据时间分布--明细");

	} catch (Exception e) {
		/* 调用采购公用方法按规范抛出异常 */
		SCMEnv.out(e);
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return;
}
	
	private DJZBItemVO[] switchVOIcToDJZBb(GeneralBillHeaderVO hvo,GeneralBillItemVO[] bvo) {
	
	DJZBItemVO[] bItemvo = new DJZBItemVO[bvo.length];
	
	for (int i = 0; i < bvo.length; i++) {
		DJZBItemVO itemvo = new DJZBItemVO();
		itemvo.setPh(bvo[i].getCfirsttype());
		itemvo.setDeptid(hvo.getCdptid());
		itemvo.setDfybwsje(bvo[i].getNmny());
		itemvo.setXmbm2(bvo[i].getCprojectid());
		itemvo.setJsfsbm(hvo.getCbilltypecode());
		itemvo.setVouchid(bvo[i].getCgeneralhid());
		itemvo.setCksqsh(bvo[i].getCfirstbillbid());
		itemvo.setYbye(bvo[i].getNmny());
		itemvo.setXyzh(bvo[i].getCfirstbillhid());
		itemvo.setDfbbwsje(bvo[i].getNmny());
		itemvo.setDdhh(bvo[i].getCgeneralbid());
		itemvo.setShlye(bvo[i].getNinnum());
		itemvo.setDfybje(bvo[i].getNmny());
		itemvo.setPk_jobobjpha(bvo[i].getCprojectphaseid());
		itemvo.setChbm_cl(bvo[i].getCinventoryid());
		itemvo.setDdlx(bvo[i].getCgeneralhid());
		itemvo.setBbye(bvo[i].getNmny());
		itemvo.setDfshl(bvo[i].getNinnum());
		itemvo.setDfbbje(bvo[i].getNmny());
		itemvo.setDj(bvo[i].getNprice());
		itemvo.setSeqnum(bvo[i].getVbatchcode());
		itemvo.setHbbm(hvo.getCproviderid());
		itemvo.setKsbm_cl(hvo.getCproviderid());
		bItemvo[i]=itemvo;
	}
	return bItemvo;
}
	/**
	 * 合并应付单保存VO
	 * 王凯飞
	 * 暂估
	 * */
	private DJZBVO[] DJZBVOMerge(DJZBVO[] eveVOs) {
		
		
		HashMap<String, DJZBHeaderVO> ddlxs = new HashMap<String, DJZBHeaderVO>();
		for(int i=0;i<eveVOs.length;i++){
			DJZBHeaderVO headtmp = (DJZBHeaderVO) eveVOs[i].getParentVO();
			String ddlxtmp = headtmp.getDdlx();
			if(ddlxs.get(ddlxtmp) == null){
				ddlxs.put(ddlxtmp, headtmp);
			}
		}
		Iterator iter = ddlxs.entrySet().iterator();
		ArrayList<DJZBVO> tmplist = new ArrayList<DJZBVO>();
		while (iter.hasNext()) {
			DJZBVO djzbvoss = new DJZBVO();
			Map.Entry entry = (Map.Entry) iter.next();
			String key = (String) entry.getKey();
			DJZBHeaderVO val = (DJZBHeaderVO) entry.getValue();
			ArrayList<DJZBItemVO> itemv = new ArrayList<DJZBItemVO>();
			UFDouble sumbbje = new UFDouble(0);
			UFDouble sumybje = new UFDouble(0);
			for (int i = 0; i < eveVOs.length; i++) {
				DJZBItemVO[] btmpss = (DJZBItemVO[]) eveVOs[i].getChildrenVO();
				String btsj = btmpss[0].getDdlx();
				UFDouble bbje = btmpss[0].getDfbbje();
				UFDouble ybje = btmpss[0].getDfybje();
				if(btsj.equals(key)){
					DJZBItemVO bodyit = btmpss[0];
					itemv.add(bodyit);
					sumbbje = sumbbje.add(bbje);
					sumybje = sumybje.add(ybje);
				}
			}
			DJZBItemVO[] itemval = new DJZBItemVO[itemv.size()];
			for (int i = 0; i < itemv.size(); i++) {
				DJZBItemVO itemvs = itemv.get(i);
				itemval[i]=itemvs;
			}
			val.setBbje(sumbbje);
			val.setYbje(sumybje);
			djzbvoss.setParentVO(val);
			djzbvoss.setChildrenVO(itemval);
			tmplist.add(djzbvoss);
		}
		DJZBVO[] aggVOs = new DJZBVO[tmplist.size()];
		for (int i = 0; i < tmplist.size(); i++) {
			aggVOs[i]= tmplist.get(i);
		}
		return aggVOs;
	}
	
	/**
	 * 合并应付单保存VO
	 * 王凯飞
	 * 反暂估
	 * */
	private DJZBVO[] DJZBVOMerge1(DJZBVO[] eveVOs) {
		
		
		HashMap<String, DJZBHeaderVO> ddlxs = new HashMap<String, DJZBHeaderVO>();
		for(int i=0;i<eveVOs.length;i++){
			DJZBHeaderVO headtmp = (DJZBHeaderVO) eveVOs[i].getParentVO();
			String ddlxtmp = headtmp.getDdlx();
			if(ddlxs.get(ddlxtmp) == null){
				ddlxs.put(ddlxtmp, headtmp);
			}
		}
		Iterator iter = ddlxs.entrySet().iterator();
		ArrayList<DJZBVO> tmplist = new ArrayList<DJZBVO>();
		while (iter.hasNext()) {
			DJZBVO djzbvoss = new DJZBVO();
			Map.Entry entry = (Map.Entry) iter.next();
			String key = (String) entry.getKey();
			DJZBHeaderVO val = (DJZBHeaderVO) entry.getValue();
			ArrayList<DJZBItemVO> itemv = new ArrayList<DJZBItemVO>();
			for (int i = 0; i < eveVOs.length; i++) {
				DJZBItemVO[] btmpss = (DJZBItemVO[]) eveVOs[i].getChildrenVO();
				String btsj = btmpss[0].getDdlx();
				UFDouble bbje = btmpss[0].getDfbbje();
				UFDouble ybje = btmpss[0].getDfybje();
				if(btsj.equals(key)){
					DJZBItemVO bodyit = btmpss[0];
					itemv.add(bodyit);
				}
			}
			DJZBItemVO[] itemval = new DJZBItemVO[itemv.size()];
			for (int i = 0; i < itemv.size(); i++) {
				DJZBItemVO itemvs = itemv.get(i);
				itemval[i]=itemvs;
			}
			djzbvoss.setParentVO(val);
			djzbvoss.setChildrenVO(itemval);
			tmplist.add(djzbvoss);
		}
		DJZBVO[] aggVOs = new DJZBVO[tmplist.size()];
		for (int i = 0; i < tmplist.size(); i++) {
			aggVOs[i]= tmplist.get(i);
		}
		return aggVOs;
	}
	/**
	 * 合并委外加工收货单
	 * 王凯飞
	 * 暂估时生成存货核算委外加工收货单
	 * 
	 * */
	private DJZBVO[] DJZBVOMerge2(BillVO[] eveVOs) {
		
		
		HashMap<String, DJZBHeaderVO> ddlxs = new HashMap<String, DJZBHeaderVO>();
		for(int i=0;i<eveVOs.length;i++){
			DJZBHeaderVO headtmp = (DJZBHeaderVO) eveVOs[i].getParentVO();
			String ddlxtmp = headtmp.getDdlx();
			if(ddlxs.get(ddlxtmp) == null){
				ddlxs.put(ddlxtmp, headtmp);
			}
		}
		Iterator iter = ddlxs.entrySet().iterator();
		ArrayList<DJZBVO> tmplist = new ArrayList<DJZBVO>();
		while (iter.hasNext()) {
			DJZBVO djzbvoss = new DJZBVO();
			Map.Entry entry = (Map.Entry) iter.next();
			String key = (String) entry.getKey();
			DJZBHeaderVO val = (DJZBHeaderVO) entry.getValue();
			ArrayList<DJZBItemVO> itemv = new ArrayList<DJZBItemVO>();
			for (int i = 0; i < eveVOs.length; i++) {
				DJZBItemVO[] btmpss = (DJZBItemVO[]) eveVOs[i].getChildrenVO();
				String btsj = btmpss[0].getDdlx();
				UFDouble bbje = btmpss[0].getDfbbje();
				UFDouble ybje = btmpss[0].getDfybje();
				if(btsj.equals(key)){
					DJZBItemVO bodyit = btmpss[0];
					itemv.add(bodyit);
				}
			}
			DJZBItemVO[] itemval = new DJZBItemVO[itemv.size()];
			for (int i = 0; i < itemv.size(); i++) {
				DJZBItemVO itemvs = itemv.get(i);
				itemval[i]=itemvs;
			}
			djzbvoss.setParentVO(val);
			djzbvoss.setChildrenVO(itemval);
			tmplist.add(djzbvoss);
		}
		DJZBVO[] aggVOs = new DJZBVO[tmplist.size()];
		for (int i = 0; i < tmplist.size(); i++) {
			aggVOs[i]= tmplist.get(i);
		}
		return aggVOs;
	}
	
/**
 * 功能描述:库存采购入库单库房签字时，即时暂估
 * 输入参数:GeneralBillVO[]
 * 返回值:void
 * 异常处理:RemoteException
 * 日期:2002/05/30
 * 作者：熊海情
 * 修改：晁志平 FOR V30
 */
public void estimateBatch(AggregatedValueObject[] saVo) throws BusinessException {
    if(saVo == null){
        SCMEnv.out("程序BUG：传入参数为空!直接返回！");
        return;
    }
    if(!(saVo instanceof GeneralBillVO[])){
        SCMEnv.out("程序BUG：传入参数不是期望的类型：GeneralBillVO[]!直接返回！");
        return;
    }
    GeneralBillVO[] tempVOs = (GeneralBillVO[]) saVo;
    IGeneralBillVO VOs[] = new IGeneralBillVO[tempVOs.length];
    for(int i = 0; i < VOs.length; i++){
    	VOs[i] = new IGeneralBillVO();
    	VOs[i].setParentVO(tempVOs[i].getParentVO());
    	GeneralBillItemVO tempitemVO[] = tempVOs[i].getItemVOs();
    	IGeneralBillItemVO itemVO[] = new IGeneralBillItemVO[tempitemVO.length];
    	for(int j = 0; j < itemVO.length; j++){
    		itemVO[j] = new IGeneralBillItemVO();
    		String key[] = tempitemVO[j].getAttributeNames();
    		for(int k = 0; k < key.length; k++){
    			itemVO[j].setAttributeValue(key[k], tempitemVO[j].getAttributeValue(key[k]));
    		}
    	}
    	VOs[i].setChildrenVO(itemVO);
    }
    
	ICreateCorpQueryService myService0 = null;
	nc.bs.pu.pub.PubImpl myService1 = null;
	IIAToPUBill myService = null;
	UFBoolean bZGYF = new UFBoolean(false);
	String unitCode = ((GeneralBillHeaderVO) VOs[0].getParentVO()).getPk_corp();
	String sCurrTypeID = null;
	EstimateVO estVO[] = null;
	
	boolean bFSJJ = false;//是否分收集结模式
	String pk_arrvcorp = VOs[0].getHeaderVO().getPk_corp();
	String pk_purcorp = (String)VOs[0].getHeaderVO().getAttributeValue("pk_purcorp");
	IGeneralBillItemVO tempVO[] = (IGeneralBillItemVO[])VOs[0].getChildrenVO();
	String pk_invoicecorp = (String)tempVO[0].getAttributeValue("pk_invoicecorp");
	if(pk_purcorp.equals(pk_invoicecorp) && !pk_purcorp.equals(pk_arrvcorp)) bFSJJ = true;
	String sPricePolicy = "无税价格优先";
	
	nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();
	try {
		if(!bFSJJ){
			//暂估时单价和金额的精度获取
			myService1 = new nc.bs.pu.pub.PubImpl();
			int digit[] = myService1.getDigitBatch(VOs[0].getHeaderVO().getPk_corp(), new String[] { "BD301", "BD505" });
			if (digit == null || digit.length == 0)
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000008")/*@res "获取本位币精度或单价精度异常!"*/);
			Hashtable hInit = ((ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName())).queryBatchParaValues(unitCode,new String[]{"PO52","BD301","PO28"});
			if(hInit != null && hInit.size() > 0){
				if(hInit.get("PO52") != null){
					Object o = hInit.get("PO52");
					bZGYF = new UFBoolean(o.toString());
				}
				if(hInit.get("BD301") != null) sCurrTypeID = hInit.get("BD301").toString();
				if(hInit.get("PO28") != null) sPricePolicy = hInit.get("PO28").toString();
			}
	
			EstimateDMO dmo = new EstimateDMO();
			if (VOs == null || VOs.length == 0)
				return;
			Vector vBid = new Vector();
			for (int i = 0; i < VOs.length; i++) {
				IGeneralBillItemVO bodyVO[] = (IGeneralBillItemVO[]) VOs[i].getChildrenVO();
				if (bodyVO == null || bodyVO.length == 0)
					continue;
				for (int j = 0; j < bodyVO.length; j++) {
					UFDouble d1 = bodyVO[j].getNprice();
					UFDouble d2 = bodyVO[j].getNinnum();
					if (d1 != null && d2 != null) {
						bodyVO[j].setNmny(new UFDouble(d1.doubleValue() * d2.doubleValue()));
					}
					vBid.addElement(bodyVO[j].getCgeneralbid());
				}
			}
			//状态刷新：判断是否存在已经暂估的入库单行(存在抛异常)
			if (vBid.size() > 0) {
				dmo.checkExistEsti(vBid);
			}
	
			//暂估单价处理
			ArrayList paraList = new ArrayList();
			paraList.add(digit[1]);
			paraList.add(digit[0]);
			paraList.add(sPricePolicy);
			VOs = dmo.replacePriceForGeneralBillVO(VOs,paraList);
	
			for (int i = 0; i < VOs.length; i++) {
				GeneralBillHeaderVO headVO = (GeneralBillHeaderVO) VOs[i].getParentVO();
				IGeneralBillItemVO bodyVO[] = (IGeneralBillItemVO[]) VOs[i].getChildrenVO();
				if (bodyVO != null && bodyVO.length > 0) {
					for (int j = 0; j < bodyVO.length; j++) {
						bodyVO[j].setBzgflag(new UFBoolean(true));
						bodyVO[j].setDzgdate(headVO.getDaccountdate());
					}
				}
			}
			
			//转换VO 
			Vector vTemp = switchVOs(VOs,bZGYF,digit);
			GeneralHItemVO itemVO[] = (GeneralHItemVO[]) vTemp.elementAt(0);
			GeneralBb3VO bb3VO[] = (GeneralBb3VO[]) vTemp.elementAt(1);
			estVO = (EstimateVO[]) vTemp.elementAt(2);
			
			//更新表体
			for(int i = 0; i < itemVO.length; i++) itemVO[i].setBzgyfflag(bZGYF);
			dmo.updateBillBody(itemVO);
	
			//更新结算子表
			for (int i = 0; i < bb3VO.length; i++) {
				if (estVO[i].getNtaxprice() != null) {
					double d = PubDMO.getRoundDouble(digit[1], estVO[i].getNtaxprice().doubleValue());
					bb3VO[i].setNzygfprice(new UFDouble(d));
				}
				if (estVO[i].getNtotalmoney() != null){
					double d = PubDMO.getRoundDouble(digit[0], estVO[i].getNtotalmoney().doubleValue());
					bb3VO[i].setNzgyfmoney(new UFDouble(d));
				}
			}
			dmo.updateBillBb3(bb3VO);
		}

		//调用接口,向存货核算系统传送数据
		if (VOs != null && VOs.length > 0) {
			myService0 = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			boolean bIAStartUp = myService0.isEnabled(unitCode, "IA");
			if (bIAStartUp) {
				BillVO billVOs[] = transferIADataBatch(VOs);
				if (billVOs == null || billVOs.length == 0)
					throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000009")/*@res "无法生成存货核算单据！"*/);

				String sTime = (new UFDateTime(new Date())).toString();
				for(int i = 0; i < billVOs.length; i++){
					((BillHeaderVO)billVOs[i].getParentVO()).setTlastmaketime(sTime);
					((BillHeaderVO)billVOs[i].getParentVO()).setTmaketime(sTime);
					((BillHeaderVO)billVOs[i].getParentVO()).setClastoperatorid(((GeneralBillHeaderVO) VOs[0].getParentVO()).getCregister());
				}

				myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
				myService.saveBillFromOutterArray(billVOs,"PO","45");
			}
			
			if(myService0.isEnabled(unitCode, "AP") && bZGYF.booleanValue() && !bFSJJ){
				//应付是否启用
				//传暂估应付
				ArrayList list = new ArrayList();
				list.add(sCurrTypeID);
				list.add(VOs[0].getHeaderVO().getCregister());
				list.add(VOs[0].getHeaderVO().getDaccountdate());
				saveBillForARAP(estVO,list);
			}
		}
		timer.addExecutePhase("调用接口,向存货核算系统传送数据");

		timer.showAllExecutePhase("采购提供的接口，库存采购入库单库房签字时，即时暂估时间分布");

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		PubDMO.throwBusinessException(e);
	}

	return;
}

/*
 *库存采购入库单GeneralBillVO[]转换为GeneralHItemVO[],GeneralBb3VO[]和EstimateVO[]组成的Vector 
 */
private Vector switchVOs(IGeneralBillVO VOs[],UFBoolean bZGYF,int digit[]) throws Exception{
	Vector v1 = new Vector(); 
	Vector v2 = new Vector(); 
	Vector v3 = new Vector(), v33 = new Vector();
	int nMoneyDecimal = 0;

	//获取单价和金额精度
	ISysInitQry myService = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
	String unitCode = ((GeneralBillHeaderVO) VOs[0].getParentVO()).getPk_corp();
//	nPriceDecimal = myService.getParaInt(unitCode,"BD505");		
	UFDouble dTemp = VMIDMO.getDigitRMB(unitCode);
	while(dTemp.doubleValue() < 1){
		dTemp = dTemp.multiply(10);
		nMoneyDecimal++;
	}
	
	for (int i = 0; i < VOs.length; i++) {
		GeneralBillHeaderVO headVO = (GeneralBillHeaderVO) VOs[i].getParentVO();
		IGeneralBillItemVO bodyVO[] = (IGeneralBillItemVO[]) VOs[i].getChildrenVO();

		if (bodyVO != null && bodyVO.length > 0) {
			for (int j = 0; j < bodyVO.length; j++) {
				//GeneralHItemVO
				GeneralHItemVO itemVO = new GeneralHItemVO();
				itemVO.setCgeneralhid(bodyVO[j].getCgeneralhid());
				itemVO.setCgeneralbid(bodyVO[j].getCgeneralbid());
				itemVO.setBzgflag(new UFBoolean(true));
				itemVO.setDzgdate(headVO.getDaccountdate());
				itemVO.setBzgyfflag(bZGYF);
				v1.addElement(itemVO);

				//GeneralBb3VO
				GeneralBb3VO bb3VO = new GeneralBb3VO();
				bb3VO.setCgeneralhid(bodyVO[j].getCgeneralhid());
				bb3VO.setCgeneralbid(bodyVO[j].getCgeneralbid());
				if (bodyVO[j].getNprice() != null) {
					double d = PubDMO.getRoundDouble(digit[1], bodyVO[j].getNprice().doubleValue());
					bb3VO.setNpprice(new UFDouble(d));
				}
				if (bodyVO[j].getNmny() != null) {
					double d = PubDMO.getRoundDouble(digit[0], bodyVO[j].getNmny().doubleValue());
					bb3VO.setNpmoney(new UFDouble(d));
				}
				v2.addElement(bb3VO);
				
				//estimateVO
				EstimateVO estVO = new EstimateVO();
				estVO.setBzgyf(bZGYF);
				estVO.setCbaseid(bodyVO[j].getCinvbasid());
				estVO.setCbilltypecode(headVO.getCbilltypecode());
				estVO.setCbiztype(headVO.getCbiztypeid());
				estVO.setCdptid(headVO.getCdptid());
				estVO.setCfirstbillbid(bodyVO[j].getCfirstbillbid());
				estVO.setCfirstbillhid(bodyVO[j].getCfirstbillhid());
				estVO.setCfirsttype(bodyVO[j].getCfirsttype());
				estVO.setCgeneralbid(bodyVO[j].getCgeneralbid());
				estVO.setCgeneralhid(bodyVO[j].getCgeneralhid());
				estVO.setCmangid(bodyVO[j].getCinventoryid());
				estVO.setCoperatorid(headVO.getCoperatorid());
				estVO.setCprojectid(bodyVO[j].getCprojectid());
				estVO.setCprojectphaseid(bodyVO[j].getCprojectphaseid());
				estVO.setCprovidermangid(headVO.getCproviderid());
//				estVO.setCproviderbaseid()???
				estVO.setDbilldate(headVO.getDbilldate());
				estVO.setNinnum(bodyVO[j].getNinnum());
				
				estVO.setNprice(bodyVO[j].getNprice());
				estVO.setNmoney(bodyVO[j].getNmny());
				estVO.setNtaxprice(bodyVO[j].getNtaxprice());
				estVO.setNtotalmoney(bodyVO[j].getNtaxmny());
				
				estVO.setPk_corp(headVO.getPk_corp());
				
				estVO.setVuserdefh1(headVO.getVuserdef1());
				estVO.setVuserdefh2(headVO.getVuserdef2());
				estVO.setVuserdefh3(headVO.getVuserdef3());
				estVO.setVuserdefh4(headVO.getVuserdef4());
				estVO.setVuserdefh5(headVO.getVuserdef5());
				estVO.setVuserdefh6(headVO.getVuserdef6());	
				
				estVO.setBMoney(bodyVO[j].getBMoney());
				estVO.setNPricePolicy(bodyVO[j].getNPricePolicy());
				
				v3.addElement(estVO);
				v33.addElement(estVO.getCprovidermangid());
			}
		}
	}

	EstimateVO estimates[] = new EstimateVO[v3.size()];
	v3.copyInto(estimates);
	
	//获取供应商基本ID
	String pk_cumandoc[] = new String[v33.size()];
	v33.copyInto(pk_cumandoc);
	String pk_cubasdoc[] = new SettleDMO().queryVendorBaseIDForARAP(pk_cumandoc);
	for(int i = 0; i < pk_cubasdoc.length; i++) estimates[i].setCproviderbaseid(pk_cubasdoc[i]);

	//设置税率和价税合计, 计算含税单价和价税合计
	//如果入库单来源于订单,则税率和扣税类别取自订单行的税率和扣税类别;否则:取存货对应的税目税率,扣税类别为应税外加
//	if(bZGYF.booleanValue()){
		Vector vTemp1 = new Vector(), vTemp2 = new Vector();
		for(int i = 0; i < estimates.length; i++){
			if(estimates[i].getCfirsttype() != null && estimates[i].getCfirsttype().equals(ScmConst.PO_Order)){
				if(!vTemp1.contains(estimates[i].getCfirstbillbid())) vTemp1.addElement(estimates[i].getCfirstbillbid());
			}else if(estimates[i].getCfirsttype() == null){
				if(!vTemp2.contains(estimates[i].getCbaseid())) vTemp2.addElement(estimates[i].getCbaseid());
			}
		}
		
		//来源于订单
		if(vTemp1.size() > 0){
			String sID[] = new String[vTemp1.size()];
			vTemp1.copyInto(sID);
			Hashtable hTemp = new EstimateDMO().queryOrderTaxRate(sID);
			if(hTemp != null && hTemp.size() > 0){
				for(int i = 0; i < estimates.length; i++){
					if(estimates[i].getCfirsttype() != null 
							&& estimates[i].getCfirsttype().equals(ScmConst.PO_Order) 
							&& hTemp.get(estimates[i].getCfirstbillbid()) != null){
						Object oTemp[] = (Object[])hTemp.get(estimates[i].getCfirstbillbid());
						UFDouble nTaxRate = new UFDouble(0);
						Integer iDiscountTaxType = new Integer(1);
						if(oTemp[0] != null) nTaxRate = new UFDouble(oTemp[0].toString());
						if(oTemp[1] != null) iDiscountTaxType = (Integer) oTemp[1];
						estimates[i].setNtaxrate(nTaxRate);
						estimates[i].setIdiscounttaxtype(iDiscountTaxType);
//						estimates[i] = calculateTaxPriceForEstimateVO(estimates[i],nTaxRate,iDiscountTaxType,nPriceDecimal,nMoneyDecimal);
					}
				}
			}
		}
		
		//自制
		if(vTemp2.size() > 0){
			String cBaseID[] = new  String[vTemp2.size()];
			vTemp2.copyInto(cBaseID);
			Hashtable hTemp = new EstimateDMO().queryInvTaxRate(cBaseID);
			if(hTemp != null && hTemp.size() > 0){
				UFDouble nTaxRate = null;
				for(int i = 0; i < estimates.length; i++){
					if(estimates[i].getCfirsttype() == null && hTemp.get(estimates[i].getCbaseid()) != null){
						Object oTemp = hTemp.get(estimates[i].getCbaseid());						
						nTaxRate = new UFDouble(oTemp.toString());						
						estimates[i].setNtaxrate(nTaxRate);
						estimates[i].setIdiscounttaxtype(new Integer(1));						
					}
				}
			}
		}
//	}

	int[] descriptions = new int[] {
			SCMRelationsCal.DISCOUNT_TAX_TYPE_NAME,	//扣税类别名(应税内含，应税外加，不计税)
			SCMRelationsCal.DISCOUNT_TAX_TYPE_KEY,//扣税类别
			SCMRelationsCal.NUM,//主数量
			SCMRelationsCal.NET_PRICE_ORIGINAL,//净单价	
			SCMRelationsCal.MONEY_ORIGINAL,//金额
			SCMRelationsCal.NET_TAXPRICE_ORIGINAL,//净含税单价
			SCMRelationsCal.SUMMNY_ORIGINAL, //价税合计		--原币
			SCMRelationsCal.TAXRATE,	//税率
			SCMRelationsCal.DISCOUNT_RATE,//扣率
			SCMRelationsCal.PRICE_ORIGINAL,//单价
			SCMRelationsCal.TAXPRICE_ORIGINAL,//含税单价
			SCMRelationsCal.TAX_ORIGINAL      //税额
	};

	String sPricePolicy = myService.getParaString(unitCode, "PO28");
	int nPricePolicy = RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE;
	if(sPricePolicy != null && sPricePolicy.equals("含税价格优先")) nPricePolicy = RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE;
	
	String sChangedKey = "nprice";

	for(int i = 0; i < estimates.length; i++){
		String s = "应税内含";
		if(estimates[i].getIdiscounttaxtype().intValue() == 1) s = "应税外加";
		if(estimates[i].getIdiscounttaxtype().intValue() == 2) s = "不计税";
	
		String[] keys = new String[] {
				s,
				"idiscounttaxtype",
				"ninnum",
				"nprice",
				"nmoney",
				"ntaxprice",
				"ntotalmoney", 
				"ntaxrate",
				"ndiscountrate",
				"nnetprice",
				"nnettaxprice",
				"ntaxmoney"
		};

		if(estimates[i].getNPricePolicy() == RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE){
			if(estimates[i].getBMoney() != null && estimates[i].getBMoney().booleanValue()) sChangedKey = "ntotalmoney";
			else sChangedKey = "ntaxprice";
		}else{
			if(estimates[i].getBMoney() != null && estimates[i].getBMoney().booleanValue()) sChangedKey = "nmoney";
			else sChangedKey = "nprice";			
		}
	
		SCMRelationsCal.calculate(estimates[i], new int[] {nPricePolicy}, sChangedKey, descriptions, keys);
	}
	
	GeneralHItemVO itemVO[] = new GeneralHItemVO[v1.size()];
	v1.copyInto(itemVO);
	GeneralBb3VO bb3VO[] = new GeneralBb3VO[v2.size()];
	v2.copyInto(bb3VO);
	
	v1 = new Vector();
	v1.addElement(itemVO);
	v1.addElement(bb3VO);
	v1.addElement(estimates);
	return v1;
}

/**
 * 功能描述:暂估(委外调用)
 * 输入参数:VO[],当前操作员ID,当前日期
 * 返回值:void
 * 异常处理:NamingException,RemoteException,SQLException
 * 作者：熊海情
 * 修改：晁志平 FOR  V30
 */
public void estimateForSc(CircularlyAccessibleValueObject[] saVo, String cOperator, UFDate dCurrDate)
	throws BusinessException {
	if (saVo == null || saVo.length == 0) {
		SCMEnv.out("传入参数为空，直接返回！方法调用层次如下：");
		SCMEnv.out(new Exception());
		return;
	}
	EstimateVO[] VOs = (EstimateVO[])saVo;
	nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
	timerDebug.start();

	EstimateDMO dmo = null;
	ICreateCorpQueryService myService0 = null;
	ISysInitQry myService1 = null;
	nc.bs.pu.pub.PubImpl myService2 = null;
	try {
		dmo = new EstimateDMO();
		Vector vBid = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			vBid.addElement(VOs[i].getCgeneralbid());
		}
		//状态刷新：判断是否存在已经暂估的入库单行(存在抛异常)
		if (vBid.size() > 0) {
			dmo.checkExistEsti(vBid);
		}
		timerDebug.addExecutePhase("状态刷新：判断是否存在已经暂估的入库单行(存在抛异常)");

		//获取委外参数：计划价产品入库是否忽略差异
		myService1 = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		nc.vo.pub.para.SysInitVO initVO[] = myService1.querySysInit(VOs[0].getPk_corp(), "SC05");
		if (initVO == null || initVO.length == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000010")/*@res "无法获取委外参数SC05！"*/);
		String sCross = initVO[0].getValue(); //是否忽略差异
		timerDebug.addExecutePhase(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000011")/*@res "获取委外参数：计划价产品入库是否忽略差异"*/);

		//暂估时单价和金额的精度控制
		myService2 = new nc.bs.pu.pub.PubImpl();
		int digit[] = myService2.getDigitBatch(VOs[0].getPk_corp(), new String[] { "BD301", "BD505" });
		if (digit == null || digit.length == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000008")/*@res "获取本位币精度或单价精度异常!"*/);
		timerDebug.addExecutePhase("获取本位币精度或单价精度");

		//如果忽略差异，则根据存货基础ID和仓库ID获取存货的计价方式/计划价
		int nPriceMethod[] = new int[VOs.length];
		UFDouble dPlanPrice[] = new UFDouble[VOs.length];
		for (int i = 0; i < VOs.length; i++)
			nPriceMethod[i] = -1;
		if (sCross != null && sCross.trim().length() > 0 && sCross.equals("是")) {
			Vector vMangid = new Vector();
			Vector vWareid = new Vector();
			for (int i = 0; i < VOs.length; i++) {
				vMangid.addElement(VOs[i].getCmangid());
				vWareid.addElement(VOs[i].getCwarehouseid());
			}
			String sMangID[] = new String[vMangid.size()];
			String sWarehouseID[] = new String[vWareid.size()];
			vMangid.copyInto(sMangID);
			vWareid.copyInto(sWarehouseID);
			ArrayList list = dmo.queryPriceMethod(sMangID, sWarehouseID);
			if (list != null && list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					ArrayList list0 = (ArrayList) list.get(i);
					nPriceMethod[i] = ((Integer) list0.get(0)).intValue();
					dPlanPrice[i] = (UFDouble) list0.get(1);
				}
			}
		}
		timerDebug.addExecutePhase("如果忽略差异，则根据存货基础ID和仓库ID获取存货的计价方式/计划价");

		//
		String sTemp[] = new String[vBid.size()];
		vBid.copyInto(sTemp);

		ArrayList list1 = dmo.queryStockBody(sTemp);
		timerDebug.addExecutePhase("查询入库单表体数据");

		ArrayList list2 = dmo.queryBb3(VOs);
		timerDebug.addExecutePhase("查询入库单子表3数据");

		Vector v1 = new Vector();
		Vector v2 = new Vector();

		//入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费
		Vector vAllBodyVoB = new Vector();
		Vector vAllBodyVoBB3 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			GeneralHItemVO bodyVO[] = (GeneralHItemVO[]) list1.get(i);
			GeneralBb3VO bb3VO[] = (GeneralBb3VO[]) list2.get(i);

			if (bodyVO != null && bodyVO.length > 0) {
				for (int j = 0; j < bodyVO.length; j++) {
					if (nPriceMethod[j] == 5) {
						//计划价产品入库时,入库单行为非暂估、结算完毕状态，单价为计划价
						bodyVO[j].setIsok(new UFBoolean(true));
						bodyVO[j].setBzgflag(new UFBoolean(true));
						bodyVO[j].setDzgdate(dCurrDate);
						VOs[i].setNprice(dPlanPrice[i]);
						double d = VOs[i].getNinnum().doubleValue() * VOs[i].getNprice().doubleValue();
						VOs[i].setNmoney(new UFDouble(d));
						VOs[i].setNmaterialmoney(new UFDouble(0.0));

						v2.addElement(VOs[i]);
					} else {
						bodyVO[j].setBzgflag(new UFBoolean(true));
						bodyVO[j].setDzgdate(dCurrDate);

						v1.addElement(VOs[i]);
					}
					vAllBodyVoB.addElement(bodyVO[j]);
				}
			}
			if (bb3VO != null && bb3VO.length > 0) {
				for (int j = 0; j < bb3VO.length; j++) {
					if (VOs[i].getNprice() != null) {
						double d = PubDMO.getRoundDouble(digit[1], VOs[i].getNprice().doubleValue());
						bb3VO[j].setNpprice(new UFDouble(d));
					}
					if (VOs[i].getNmoney() != null) {
						double d = PubDMO.getRoundDouble(digit[0], VOs[i].getNmoney().doubleValue());
						bb3VO[j].setNpmoney(new UFDouble(d));
					}
					if (VOs[i].getNmaterialmoney() != null) {
						double d = PubDMO.getRoundDouble(digit[0], VOs[i].getNmaterialmoney().doubleValue());
						bb3VO[j].setNmaterialmoney(new UFDouble(d));
					}
					vAllBodyVoBB3.addElement(bb3VO[j]);
				}
			}
		}
		if (vAllBodyVoB.size() > 0) {
			GeneralHItemVO[] bodyVOs = new GeneralHItemVO[vAllBodyVoB.size()];
			vAllBodyVoB.copyInto(bodyVOs);
			dmo.updateBody(bodyVOs);
		}
		if (vAllBodyVoBB3.size() > 0) {
			GeneralBb3VO bb3VOs[] = new GeneralBb3VO[vAllBodyVoBB3.size()];
			vAllBodyVoBB3.copyInto(bb3VOs);
			dmo.updateBb3(bb3VOs);
		}
		timerDebug.addExecutePhase("入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费");

		//调用接口,向存货核算系统传送数据
		if (VOs != null && VOs.length > 0) {
			String unitCode = VOs[0].getPk_corp();
			myService0 = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			boolean bIAStartUp = myService0.isEnabled(unitCode, "IA");

			if (bIAStartUp) {
				if (v1.size() > 0) {
					EstimateVO VOs1[] = new EstimateVO[v1.size()];
					v1.copyInto(VOs1);
					
					//获取库存单据信息
					VOs1 = queryBillInfoForIA(VOs1);
					//
					saveBillFromOutter(VOs1, cOperator, dCurrDate);
				}
				if (v2.size() > 0) {
					EstimateVO VOs2[] = new EstimateVO[v2.size()];
					v2.copyInto(VOs2);
          
          VOs2 = queryBillInfoForIA(VOs2);
          
					saveBillFromOutterForSC(VOs2, cOperator, dCurrDate);
				}
			}
		}
		timerDebug.addExecutePhase("调用接口,向存货核算系统传送数据");

		timerDebug.showAllExecutePhase("采购提供接口，暂估(委外调用)时间分布");
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

private EstimateVO[] queryBillInfoForIA(EstimateVO VOs[]) throws BusinessException{
	try{
		//查询存货表体VO所需的数据
		Vector v = queryStockBodyForIA(VOs);
		if (v == null || v.size() == 0) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000018")/*@res "查询存货表体VO所需的数据,没有符合条件的数据！"*/);
		}
	
		//设置存货表体VO所需的数据
		for (int i = 0; i < VOs.length; i++) {
			Vector vTemp = (Vector) v.elementAt(i);
			GeneralHItemVO itemVO = (GeneralHItemVO) vTemp.elementAt(0);
	
			VOs[i].setVfree1(itemVO.getVfree1());
			VOs[i].setVfree2(itemVO.getVfree2());
			VOs[i].setVfree3(itemVO.getVfree3());
			VOs[i].setVfree4(itemVO.getVfree4());
			VOs[i].setVfree5(itemVO.getVfree5());
		
			VOs[i].setVuserdef1(itemVO.getVuserdef1());
			VOs[i].setVuserdef2(itemVO.getVuserdef2());
			VOs[i].setVuserdef3(itemVO.getVuserdef3());
			VOs[i].setVuserdef4(itemVO.getVuserdef4());
			VOs[i].setVuserdef5(itemVO.getVuserdef5());
			VOs[i].setVuserdef6(itemVO.getVuserdef6());
			VOs[i].setVuserdef7(itemVO.getVuserdef7());
			VOs[i].setVuserdef8(itemVO.getVuserdef8());
			VOs[i].setVuserdef9(itemVO.getVuserdef9());
			VOs[i].setVuserdef10(itemVO.getVuserdef10());
	
			VOs[i].setVuserdef11(itemVO.getVuserdef11());
			VOs[i].setVuserdef12(itemVO.getVuserdef12());
			VOs[i].setVuserdef13(itemVO.getVuserdef13());
			VOs[i].setVuserdef14(itemVO.getVuserdef14());
			VOs[i].setVuserdef15(itemVO.getVuserdef15());
			VOs[i].setVuserdef16(itemVO.getVuserdef16());
			VOs[i].setVuserdef17(itemVO.getVuserdef17());
			VOs[i].setVuserdef18(itemVO.getVuserdef18());
			VOs[i].setVuserdef19(itemVO.getVuserdef19());
			VOs[i].setVuserdef20(itemVO.getVuserdef20());
			
			VOs[i].setPk_defdocb1(itemVO.getPk_defdoc1());
			VOs[i].setPk_defdocb2(itemVO.getPk_defdoc2());
			VOs[i].setPk_defdocb3(itemVO.getPk_defdoc3());
			VOs[i].setPk_defdocb4(itemVO.getPk_defdoc4());
			VOs[i].setPk_defdocb5(itemVO.getPk_defdoc5());
			VOs[i].setPk_defdocb6(itemVO.getPk_defdoc6());
			VOs[i].setPk_defdocb7(itemVO.getPk_defdoc7());
			VOs[i].setPk_defdocb8(itemVO.getPk_defdoc8());
			VOs[i].setPk_defdocb9(itemVO.getPk_defdoc9());
			VOs[i].setPk_defdocb10(itemVO.getPk_defdoc10());
	
			VOs[i].setPk_defdocb11(itemVO.getPk_defdoc11());
			VOs[i].setPk_defdocb12(itemVO.getPk_defdoc12());
			VOs[i].setPk_defdocb13(itemVO.getPk_defdoc13());
			VOs[i].setPk_defdocb14(itemVO.getPk_defdoc14());
			VOs[i].setPk_defdocb15(itemVO.getPk_defdoc15());
			VOs[i].setPk_defdocb16(itemVO.getPk_defdoc16());
			VOs[i].setPk_defdocb17(itemVO.getPk_defdoc17());
			VOs[i].setPk_defdocb18(itemVO.getPk_defdoc18());
			VOs[i].setPk_defdocb19(itemVO.getPk_defdoc19());
			VOs[i].setPk_defdocb20(itemVO.getPk_defdoc20());
			
			VOs[i].setCprojectid(itemVO.getCprojectid());
			VOs[i].setCprojectphaseid(itemVO.getCprojectphaseid());
			
			VOs[i].setCvendorid(itemVO.getCvendorid());
		}
	
		//查询存货表头VO所需的数据
		String sGeneralhid[] = new String[VOs.length];
		String sWarehouseid[] = new String[VOs.length];
		for(int i = 0; i < VOs.length; i++){
			sGeneralhid[i] = VOs[i].getCgeneralhid();
			sWarehouseid[i] = VOs[i].getCwarehouseid();
		}
	
		Vector vv = queryStockHeadForIA(sGeneralhid, sWarehouseid);
		if (vv == null || vv.size() == 0) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000019")/*@res "查询存货表头VO所需的数据,没有符合条件的数据！"*/);
		}
	
		//设置存货表头VO所需的数据
		for (int i = 0; i < VOs.length; i++) {
			Vector vTemp = (Vector) vv.elementAt(i);
			GeneralHHeaderVO hVO = (GeneralHHeaderVO) vTemp.elementAt(0);
	
			VOs[i].setVuserdefh1(hVO.getVuserdef1());
			VOs[i].setVuserdefh2(hVO.getVuserdef2());
			VOs[i].setVuserdefh3(hVO.getVuserdef3());
			VOs[i].setVuserdefh4(hVO.getVuserdef4());
			VOs[i].setVuserdefh5(hVO.getVuserdef5());
			VOs[i].setVuserdefh6(hVO.getVuserdef6());
			VOs[i].setVuserdefh7(hVO.getVuserdef7());
			VOs[i].setVuserdefh8(hVO.getVuserdef8());
			VOs[i].setVuserdefh9(hVO.getVuserdef9());
			VOs[i].setVuserdefh10(hVO.getVuserdef10());
			
			VOs[i].setVuserdefh11(hVO.getVuserdef11());
			VOs[i].setVuserdefh12(hVO.getVuserdef12());
			VOs[i].setVuserdefh13(hVO.getVuserdef13());
			VOs[i].setVuserdefh14(hVO.getVuserdef14());
			VOs[i].setVuserdefh15(hVO.getVuserdef15());
			VOs[i].setVuserdefh16(hVO.getVuserdef16());
			VOs[i].setVuserdefh17(hVO.getVuserdef17());
			VOs[i].setVuserdefh18(hVO.getVuserdef18());
			VOs[i].setVuserdefh19(hVO.getVuserdef19());
			VOs[i].setVuserdefh20(hVO.getVuserdef20());
			
			VOs[i].setPk_defdoch1(hVO.getPk_defdoc1());
			VOs[i].setPk_defdoch2(hVO.getPk_defdoc2());
			VOs[i].setPk_defdoch3(hVO.getPk_defdoc3());
			VOs[i].setPk_defdoch4(hVO.getPk_defdoc4());
			VOs[i].setPk_defdoch5(hVO.getPk_defdoc5());
			VOs[i].setPk_defdoch6(hVO.getPk_defdoc6());
			VOs[i].setPk_defdoch7(hVO.getPk_defdoc7());
			VOs[i].setPk_defdoch8(hVO.getPk_defdoc8());
			VOs[i].setPk_defdoch9(hVO.getPk_defdoc9());
			VOs[i].setPk_defdoch10(hVO.getPk_defdoc10());
	
			VOs[i].setPk_defdoch11(hVO.getPk_defdoc11());
			VOs[i].setPk_defdoch12(hVO.getPk_defdoc12());
			VOs[i].setPk_defdoch13(hVO.getPk_defdoc13());
			VOs[i].setPk_defdoch14(hVO.getPk_defdoc14());
			VOs[i].setPk_defdoch15(hVO.getPk_defdoc15());
			VOs[i].setPk_defdoch16(hVO.getPk_defdoc16());
			VOs[i].setPk_defdoch17(hVO.getPk_defdoc17());
			VOs[i].setPk_defdoch18(hVO.getPk_defdoc18());
			VOs[i].setPk_defdoch19(hVO.getPk_defdoc19());
			VOs[i].setPk_defdoch20(hVO.getPk_defdoc20());	
			
			VOs[i].setCdispatcherid(hVO.getCdispatcherid());
      VOs[i].setBcalculatecost(hVO.getBcalculatecost());
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

	return VOs;
}
/**
 * 此处插入方法说明。
 * 功能描述:生成结算单体
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2003/05/30
 */
private SettlebillItemVO[] generateSettlebillItem(StockVO stockVOs[],StockVO negStockVOs[]) {
	if(negStockVOs == null || negStockVOs.length == 0) return null;

	//生成结算单
	Vector v = new Vector();
	for(int i = 0; i < negStockVOs.length; i++){
		if(negStockVOs[i] == null) continue;

		SettlebillItemVO bodyVO = new SettlebillItemVO();
		bodyVO.setPk_corp(negStockVOs[i].getPk_corp());
		bodyVO.setCinvoice_bid(null);
		bodyVO.setCinvoiceid(null);
		bodyVO.setCstockrow(negStockVOs[i].getCgeneralbid());
		bodyVO.setCstockid(negStockVOs[i].getCgeneralhid());
		bodyVO.setCmangid(negStockVOs[i].getCmangid());
		bodyVO.setCbaseid(negStockVOs[i].getCbaseid());

		//结算数量：入库单行未结算数量
		bodyVO.setNsettlenum(negStockVOs[i].getNnosettlenum());
		//结算单价：暂估单价
		bodyVO.setNprice(negStockVOs[i].getNprice());
		//结算金额：结算单价*结算数量
		UFDouble d1 = bodyVO.getNprice();
		if(d1 == null) d1 = new UFDouble(0);
		double d = bodyVO.getNsettlenum().doubleValue() * d1.doubleValue();
		bodyVO.setNmoney(new UFDouble(d));

		//暂估金额：入库单行暂估单价*结算数量
		d1 = negStockVOs[i].getNprice();
		if(d1 == null) d1 = new UFDouble(0);
		d = bodyVO.getNsettlenum().doubleValue() * d1.doubleValue();
		bodyVO.setNgaugemny(new UFDouble(d));

		//获得入库单号
		bodyVO.setVbillcode(negStockVOs[i].getVbillcode());
		//获得发票号
		bodyVO.setVinvoicecode(null);
		v.addElement(bodyVO);

		SettlebillItemVO bodyVO1 = new SettlebillItemVO();
		bodyVO1.setPk_corp(stockVOs[i].getPk_corp());
		bodyVO1.setCinvoice_bid(null);
		bodyVO1.setCinvoiceid(null);
		bodyVO1.setCstockrow(stockVOs[i].getCgeneralbid());
		bodyVO1.setCstockid(stockVOs[i].getCgeneralhid());
		bodyVO1.setCmangid(stockVOs[i].getCmangid());
		bodyVO1.setCbaseid(stockVOs[i].getCbaseid());

		//结算数量：入库单行未结算数量
		bodyVO1.setNsettlenum(stockVOs[i].getNnosettlenum());
		//结算单价：暂估单价
		bodyVO1.setNprice(stockVOs[i].getNprice());
		//结算金额：结算单价*结算数量
		d1 = bodyVO1.getNprice();
		if(d1 == null) d1 = new UFDouble(0);
		d = bodyVO1.getNsettlenum().doubleValue() * d1.doubleValue();
		bodyVO1.setNmoney(new UFDouble(d));

		//暂估金额：入库单行暂估单价*结算数量
		d1 = stockVOs[i].getNprice();
		if(d1 == null) d1 = new UFDouble(0);
		d = bodyVO1.getNsettlenum().doubleValue() * d1.doubleValue();
		bodyVO1.setNgaugemny(new UFDouble(d));

		//获得入库单号
		bodyVO1.setVbillcode(stockVOs[i].getVbillcode());
		//获得发票号
		bodyVO1.setVinvoicecode(null);
		v.addElement(bodyVO1);
	}

	if(v.size() == 0) return null;

	SettlebillItemVO settlebillItemVOs[] = new SettlebillItemVO[v.size()];
	v.copyInto(settlebillItemVOs);

	return settlebillItemVOs;
}

/**
 * 此处插入方法说明。
 * 功能描述:生成结算单体
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2003/05/30
 */
private SettlebillItemVO[] generateSettlebillItemForSC(StockVO VOs[]) {
	//生成结算单
	Vector v = new Vector();
	for(int i = 0; i < VOs.length; i++){
		SettlebillItemVO bodyVO = new SettlebillItemVO();
		bodyVO.setPk_corp(VOs[i].getPk_corp());
		bodyVO.setCinvoice_bid(null);
		bodyVO.setCinvoiceid(null);
		bodyVO.setCstockrow(VOs[i].getCgeneralbid());
		bodyVO.setCstockid(VOs[i].getCgeneralhid());
		bodyVO.setCmangid(VOs[i].getCmangid());
		bodyVO.setCbaseid(VOs[i].getCbaseid());

		//结算数量：入库单行未结算数量
		bodyVO.setNsettlenum(VOs[i].getNinnum());
		//结算单价：暂估单价
		bodyVO.setNprice(VOs[i].getNprice());
		//结算金额：结算单价*结算数量
		UFDouble d1 = bodyVO.getNprice();
		if(d1 == null) d1 = new UFDouble(0);
		double d = bodyVO.getNsettlenum().doubleValue() * d1.doubleValue();
		bodyVO.setNmoney(new UFDouble(d));

		//暂估金额：入库单行暂估单价*结算数量
		bodyVO.setNgaugemny(new UFDouble(d));

		//获得入库单号
		bodyVO.setVbillcode(VOs[i].getVbillcode());
		//获得发票号
		bodyVO.setVinvoicecode(null);
		v.addElement(bodyVO);

	}

	if(v.size() == 0) return null;

	SettlebillItemVO settlebillItemVOs[] = new SettlebillItemVO[v.size()];
	v.copyInto(settlebillItemVOs);

	return settlebillItemVOs;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得结算单号
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2003/05/30
 */
private String generateSettleCode(String pk_corp) throws BusinessException {
	//获取结算单号
	String vSettlebillcode = "";
	BillcodeGenerater myService = null;
	try {
		nc.bs.ps.settle.SettleDMO dmo = new nc.bs.ps.settle.SettleDMO();
		myService = new BillcodeGenerater();
		nc.vo.pub.billcodemanage.BillCodeObjValueVO vo = new nc.vo.pub.billcodemanage.BillCodeObjValueVO();
		vo.setAttributeValue("公司", pk_corp);
		do {
			vSettlebillcode = myService.getBillCode(ScmConst.PO_SettleBill, pk_corp, null, vo);
		} while (dmo.isSettlebillCodeDuplicate(pk_corp, vSettlebillcode));
	} catch (Exception e) {
		SCMEnv.out(e);
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	} 
	return vSettlebillcode;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得入库单号
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2002/04/05
 */

private String getBillCode(GeneralHHeaderVO head)
	throws BusinessException {
	String vBillcode = null;
	BillcodeGenerater myService = null;

	//获取入库单号
	try {
		nc.vo.pub.billcodemanage.BillCodeObjValueVO vo = new nc.vo.pub.billcodemanage.BillCodeObjValueVO();

		String sNames[] = { "仓库", "当前操作员", "收发类别" };
		String sKeys[] = { "cwarehouseid", "coperatorid", "cdispatcherid" };
		for (int i = 0; i < sNames.length; i++) {
			Object o = head.getAttributeValue(sKeys[i]);
			vo.setAttributeValue(sNames[i], o);
		}
		vo.setAttributeValue("库存组织", getStoreOrg(head.getCwarehouseid()));

		vBillcode = head.getVbillcode();
		if (vBillcode == null || vBillcode.length() == 0)
			vBillcode = null;

		myService = new BillcodeGenerater();

		vBillcode = myService.getBillCode("45", head.getPk_corp(), vBillcode, vo);
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

	return vBillcode;
}

/**
 * 此处插入方法说明。
 * 功能描述:期初暂估采购入库单保存时，调用可用量接口，将采购入库单VO转换为标准的入库单VO
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2003/10/08
 */
private GeneralBillVO getChangedVO(GeneralHVO sourceVO, boolean bAdd) {
	GeneralHHeaderVO headVO = sourceVO.getHeadVO();
	GeneralHItemVO bodyVO[] = sourceVO.getBodyVO();
	if(headVO == null || bodyVO == null || bodyVO.length == 0) return null;

	GeneralBillHeaderVO head = new GeneralBillHeaderVO();
	head.setCgeneralhid(headVO.getCgeneralhid());
	head.setPk_corp(headVO.getPk_corp());
	head.setCbiztypeid(headVO.getCbiztype());
	head.setCbilltypecode(headVO.getCbilltypecode());
	head.setVbillcode(headVO.getVbillcode());
	head.setDbilldate(headVO.getDbilldate());
	head.setCwarehouseid(headVO.getCwarehouseid());
	head.setCdispatcherid(headVO.getCdispatcherid());
	head.setCdptid(headVO.getCdptid());
	head.setCoperatorid(headVO.getCoperatorid());
	head.setCregister(headVO.getCregister());
	head.setCauditorid(headVO.getCauditorid());
	head.setCinventoryid(headVO.getCinventoryid());
	head.setCcustomerid(headVO.getCcustomerid());
	head.setVdiliveraddress(headVO.getVdiliveraddress());
	head.setCdilivertypeid(headVO.getCdilivertypeid());
	head.setCwastewarehouseid(headVO.getCwastewarehouseid());
	head.setCbizid(headVO.getCbizid());
	head.setCproviderid(headVO.getCproviderid());
	head.setVnote(headVO.getVnote());
	head.setFbillflag(headVO.getFbillflag());
	head.setVuserdef1(headVO.getVuserdef1());
	head.setVuserdef2(headVO.getVuserdef2());
	head.setVuserdef3(headVO.getVuserdef3());
	head.setVuserdef4(headVO.getVuserdef4());
	head.setVuserdef5(headVO.getVuserdef5());
	head.setVuserdef6(headVO.getVuserdef6());
	head.setPk_calbody(headVO.getCstoreorganization());
	head.setTs(headVO.getTs());

	if(bAdd){
		head.setStatus(nc.vo.pub.VOStatus.NEW);
	}else{
		int n = headVO.getHeadEditStatus();
		if(n == 0) head.setStatus(nc.vo.pub.VOStatus.UNCHANGED);
		if(n == 1) head.setStatus(nc.vo.pub.VOStatus.NEW);
		if(n == 2) head.setStatus(nc.vo.pub.VOStatus.UPDATED);
		if(n == 3) head.setStatus(nc.vo.pub.VOStatus.DELETED);
	}

	Vector vTemp = new Vector();
	for(int i = 0; i < bodyVO.length; i++){
		GeneralBillItemVO body = new GeneralBillItemVO();
		body.setCgeneralhid(bodyVO[i].getCgeneralhid());
		body.setCgeneralbid(bodyVO[i].getCgeneralbid());
		body.setCinventoryid(bodyVO[i].getCinventoryid());
		body.setNshouldoutnum(bodyVO[i].getNshouldoutnum());
		body.setNshouldoutassistnum(bodyVO[i].getNshouldoutassistnum());
		body.setNoutnum(bodyVO[i].getNoutnum());
		body.setNoutassistnum(bodyVO[i].getNoutassistnum());
		body.setNshouldinnum(bodyVO[i].getNshouldinnum());
		body.setNneedinassistnum(bodyVO[i].getNneedinassistnum());
		body.setNinnum(bodyVO[i].getNinnum());
		body.setNinassistnum(bodyVO[i].getNinassistnum());
		body.setNtranoutnum(bodyVO[i].getNtranoutnum());
		body.setNprice(bodyVO[i].getNprice());
		body.setNmny(bodyVO[i].getNmny());
		body.setNplannedprice(bodyVO[i].getNplannedprice());
		body.setNplannedmny(bodyVO[i].getNplannedmny());
		body.setCsourcebillhid(bodyVO[i].getCsourcebillhid());
		body.setCsourcebillbid(bodyVO[i].getCsourcebillbid());
		body.setCsourcetype(bodyVO[i].getCsourcetype());
		body.setVsourcebillcode(bodyVO[i].getVsourcebillcode());
		body.setFlargess(bodyVO[i].getFlargess());
		body.setBzgflag(bodyVO[i].getBzgflag());
		body.setIsok(bodyVO[i].getIsok());
		body.setCfirsttype(bodyVO[i].getCfirsttype());
		body.setCfirstbillhid(bodyVO[i].getCfirstbillhid());
		body.setCfirstbillbid(bodyVO[i].getCfirstbillbid());
		body.setCrowno(bodyVO[i].getCrowno());
		body.setTs(bodyVO[i].getTs());

		if(bAdd){
			body.setStatus(nc.vo.pub.VOStatus.NEW);
		}else{
			int n = bodyVO[i].getBodyEditStatus();
			if(n == 0) body.setStatus(nc.vo.pub.VOStatus.UNCHANGED);
			if(n == 1) body.setStatus(nc.vo.pub.VOStatus.NEW);
			if(n == 2) body.setStatus(nc.vo.pub.VOStatus.UPDATED);
			if(n == 3) body.setStatus(nc.vo.pub.VOStatus.DELETED);
		}

		vTemp.addElement(body);
	}
	GeneralBillItemVO body[] = new GeneralBillItemVO[vTemp.size()];
	vTemp.copyInto(body);

	GeneralBillVO destVO = new GeneralBillVO();
	destVO.setParentVO(head);
	destVO.setChildrenVO(body);

	return destVO;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得需要加锁的主键集合
 * 输入参数:暂估入库单VO集合
 * 返回值:
 * 异常处理:
 * @return java.lang.String[]
 * @param VOs nc.vo.ps.estimate.EstimateVO[]
 */
private String[] getEstimateLockKeys(EstimateVO[] VOs) {
	if(VOs==null || VOs.length==0) return null;

	Vector v=new Vector();

	//入库单表头主键唯一性集合
	v.addElement(VOs[0].getCgeneralhid().trim());
	for(int i = 1; i < VOs.length; i++){
		String s1 = VOs[i].getCgeneralhid().trim();
		if(!v.contains(s1)) v.addElement(s1);
	}

	//入库单表体主键唯一性集合
	v.addElement(VOs[0].getCgeneralbid().trim());
	for(int i = 1; i < VOs.length; i++){
		String s1 = VOs[i].getCgeneralbid().trim();
		if(!v.contains(s1)) v.addElement(s1);
	}

	//入库单结算子表主键唯一性集合
	v.addElement(VOs[0].getCgeneralbb3().trim());
	for(int i = 1; i < VOs.length; i++){
		String s1 = VOs[i].getCgeneralbb3().trim();
		if(!v.contains(s1)) v.addElement(s1);
	}

	//返回
	if(v.size()>0){
		String keys[]=new String[v.size()];
		v.copyInto(keys);
		return keys;
	}

	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得需要加锁的主键集合
 * 输入参数:暂估入库单VO集合
 * 返回值:
 * 异常处理:
 * @return java.lang.String[]
 * @param VOs nc.vo.ps.estimate.EstimateVO[]
 */
private String[] getEstimateLockKeys_ww(wwEstimateVO[] VOs) {
	if(VOs==null || VOs.length==0) return null;

	Vector v=new Vector();

	//入库单表头主键唯一性集合
	v.addElement(VOs[0].getCgeneralhid().trim());
	for(int i = 1; i < VOs.length; i++){
		String s1 = VOs[i].getCgeneralhid().trim();
		if(!v.contains(s1)) v.addElement(s1);
	}

	//入库单表体主键唯一性集合
	v.addElement(VOs[0].getCgeneralbid().trim());
	for(int i = 1; i < VOs.length; i++){
		String s1 = VOs[i].getCgeneralbid().trim();
		if(!v.contains(s1)) v.addElement(s1);
	}

	//入库单结算子表主键唯一性集合
	v.addElement(VOs[0].getCgeneralbb3().trim());
	for(int i = 1; i < VOs.length; i++){
		String s1 = VOs[i].getCgeneralbb3().trim();
		if(!v.contains(s1)) v.addElement(s1);
	}

	//返回
	if(v.size()>0){
		String keys[]=new String[v.size()];
		v.copyInto(keys);
		return keys;
	}

	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得自由项0,供显示
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public String[][] getFreeItem0(GeneralHVO VOs[]) throws BusinessException {
	if (VOs == null || VOs.length == 0)
		return null;
	String ss[][] = new String[VOs.length][];

	try {
		EstimateDMO dmo = new EstimateDMO();
		//获得所有自由项0
		ArrayList list = dmo.getFreeItem0(VOs);
		//分配自由项0
		for (int k = 0; k < VOs.length; k++) {
			ArrayList list1 = (ArrayList) list.get(k);

			GeneralHItemVO bodyVO[] = VOs[k].getBodyVO();
			if (list1 == null || list1.size() == 0) {
				ss[k] = null;
				continue;
			}
			String s[] = new String[bodyVO.length];

			for (int i = 0; i < bodyVO.length; i++) {
				FreeVO freeVO = null;
				Object obj = list1.get(i);

				if (obj == null) {
					s[i] = null;
					continue;
				}
				freeVO = (FreeVO) obj;

				Vector vName = new Vector();
				for (int j = 1; j <= 10; j++) {
					Object temp = freeVO.getAttributeValue("vfreename" + j);
					if (temp != null && temp.toString().trim().length() > 0)
						vName.addElement(temp);
				}
				if (vName.size() == 0) {
					s[i] = null;
					continue;
				}

				Vector vValue = new Vector();
				for (int j = 1; j <= 5; j++) {
					Object temp = bodyVO[i].getAttributeValue("vfree" + j);
					if (temp != null && temp.toString().trim().length() > 0)
						vValue.addElement(temp);
				}
				if (vValue.size() == 0) {
					s[i] = null;
					continue;
				}

				s[i] = "";
				for (int j = 0; j < vValue.size(); j++)
					s[i] += "[" + vName.elementAt(j) + ":" + vValue.elementAt(j) + "]";
			}

			ss[k] = s;
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

	return ss;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得需要加锁的主键集合
 * 输入参数:入库单VO集合
 * 返回值:
 * 异常处理:
 * @return java.lang.String[]
 * @param VOs nc.vo.ps.estimate.EstimateVO[]
 */
private String[] getGeneralLockKeys(GeneralHVO[] VOs) {
	if(VOs==null || VOs.length==0) return null;

	Vector v=new Vector();

	for(int i=0;i<VOs.length;i++){
		v.addElement(VOs[i].getHeadVO().getCgeneralhid());

		GeneralHItemVO items[]=VOs[i].getBodyVO();
		for(int j=0;j<items.length;j++) v.addElement(items[j].getCgeneralbid());

		GeneralBb3VO bb3VOs[]=VOs[i].getGrandVO();
		for(int j=0;j<bb3VOs.length;j++) v.addElement(bb3VOs[j].getCgeneralbb3());
	}

	//返回
	if(v.size()>0){
		String keys[]=new String[v.size()];
		v.copyInto(keys);
		return keys;
	}

	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:获得需要加锁的主键集合(订单)
 * 输入参数:订单VO
 * 返回值:
 * 异常处理:
 * 日期:2002/04/10
 */
private String[] getOrderLockKeys(OorderVO VOs[]) {
	//组合所有需要加锁的主键
	Vector v=new Vector();

	//订单主键唯一性集合
	if(VOs != null && VOs.length > 0){
		//订单表头主键唯一性集合
		v.addElement(VOs[0].getCorderid().trim());
		for(int i = 1; i < VOs.length; i++){
			String s1 = VOs[i].getCorderid().trim();
			if(!v.contains(s1)) v.addElement(s1);
		}

		//订单表体主键唯一性集合
		v.addElement(VOs[0].getCorder_bid().trim());
		for(int i = 1; i < VOs.length; i++){
			String s1 = VOs[i].getCorder_bid().trim();
			if(!v.contains(s1)) v.addElement(s1);
		}
	}

	String sLockedKeys[] = new String[v.size()];
	v.copyInto(sLockedKeys);

	return sLockedKeys;
}

/**
 * 此处插入方法说明。
 * 功能描述:业务员的主键获得所属部门的ID
 * 输入参数:业务员ID
 * 返回值:部门ID
 * 异常处理:
 */
public String getRefDeptKey(String cPsnID) throws BusinessException{
	FormulaParse f = new FormulaParse();

	//获得部门
	String sExpress="getColValue(bd_psndoc,pk_deptdoc,pk_psndoc,cPsnID)";
	f.setExpress(sExpress);
	VarryVO varry = f.getVarry();
	Hashtable table=new Hashtable();
	String sParam[]=new String[1];
	sParam[0]=cPsnID;
	table.put(varry.getVarry()[0],sParam);
	f.setDataS(table);
	String sDeptID[]=f.getValueS();

	if(sDeptID!=null && sDeptID.length>0) return sDeptID[0];
	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:业务员的主键获得所属部门的名称
 * 输入参数:业务员ID
 * 返回值:部门名称
 * 异常处理:
 */
public String getRefDeptName(String cPsnID) throws BusinessException{
	FormulaParse f = new FormulaParse();

	//获得部门
	String sExpress="getColValue(bd_psndoc,pk_deptdoc,pk_psndoc,cPsnID)";
	f.setExpress(sExpress);
	VarryVO varry = f.getVarry();
	Hashtable table=new Hashtable();
	String sParam[]=new String[1];
	sParam[0]=cPsnID;
	table.put(varry.getVarry()[0],sParam);
	f.setDataS(table);
	String sDeptID[]=f.getValueS();

	sExpress="getColValue(bd_deptdoc,deptname,pk_deptdoc,cDeptID)";
	f.setExpress(sExpress);
	varry = f.getVarry();
	table.put(varry.getVarry()[0],sDeptID);
	f.setDataS(table);
	String sDeptName[]=f.getValueS();

	if(sDeptName!=null && sDeptName.length>0) return sDeptName[0];
	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:业务员的主键转换为其在人员档案中的主键
 * 输入参数:当前操作员ID
 * 返回值:当前操作员在人员档案中的ID
 * 异常处理:
 */
public String getRefOperatorKey(String cOperatorID) throws BusinessException{
	FormulaParse f = new FormulaParse();

	//获得业务员
	String sExpress="getColValue(sm_userandclerk,pk_psndoc,userid,cOperatorID)";
	f.setExpress(sExpress);
	VarryVO varry = f.getVarry();
	Hashtable table=new Hashtable();
	String sParam[]=new String[1];
	sParam[0]=cOperatorID;
	table.put(varry.getVarry()[0],sParam);
	f.setDataS(table);
	String sPsnKey[]=f.getValueS();

	if(sPsnKey!=null && sPsnKey.length>0) return sPsnKey[0];
	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:
 * @return java.lang.String
 * @param sSource java.lang.String
 * @param sReplace java.lang.String
 */
private String getReplacedSQL(String sSource, String sOld,String sReplace) {
	if(sReplace == null || sReplace.trim().length() == 0) return sSource;

	int nStart = sSource.indexOf(sOld);
	if(nStart < 0) return sSource;
	int nMiddle = sSource.indexOf("'",nStart + 1);
	if(nMiddle < 0) return sSource;
	int nEnd = sSource.indexOf("'",nMiddle + 1);

	String s1 = sSource.substring(0,nStart);
	String s2 = sSource.substring(nEnd + 1);

	String s = s1 + sReplace + s2;

	return s;
}


/**
 * 此处插入方法说明。
 * 功能描述:业务类型ID获得收发类别(提供批次处理)
 * 输入参数:业务类型ID
 * 返回值:收发类别ID
 * 异常处理:
 * 修改日期：2003/02/11 xhq
 */
public String[] getRSModeBatch(String cBusitypeID[]) throws BusinessException{
	FormulaParse f = new FormulaParse();

	//获得收发类别
	String sExpress="getColValue(bd_busitype,receipttype,pk_busitype,cBusitypeID)";
	f.setExpress(sExpress);
	VarryVO varry = f.getVarry();
	Hashtable table=new Hashtable();
	table.put(varry.getVarry()[0],cBusitypeID);
	f.setDataS(table);
	String sRSMode[]=f.getValueS();

	if(sRSMode!=null && sRSMode.length>0) return sRSMode;
	return null;
}

/**
 * 功能:获得需要加锁的主键集合
 * 输入:入库单VO集合
 * 返回:String[]
 * 创建:2004-06-24
 * 作者:晁志平
 */
private String[] getStockLockKeys(StockVO[] VOs) {
	if(VOs==null || VOs.length==0) return null;

	Vector v=new Vector();

	//入库单表头主键唯一性集合
	for(int i = 0; i < VOs.length; i++){
		if(VOs[i] == null) continue;
		String s1 = VOs[i].getCgeneralhid();
		if(s1 != null && !v.contains(s1)) v.addElement(s1);
	}

	//入库单表体主键唯一性集合
	for(int i = 0; i < VOs.length; i++){
		if(VOs[i] == null) continue;
		String s1 = VOs[i].getCgeneralbid();
		if(s1 != null && !v.contains(s1)) v.addElement(s1);
	}

	//入库单结算子表主键唯一性集合
	for(int i = 0; i < VOs.length; i++){
		if(VOs[i] == null) continue;
		String s1 = VOs[i].getCgeneralbb3();
		if(s1 != null && !v.contains(s1)) v.addElement(s1);
	}

	//返回
	if(v.size()>0){
		String keys[]=new String[v.size()];
		v.copyInto(keys);
		return keys;
	}

	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:仓库ID获得库存组织ID
 * 输入参数:仓库ID
 * 返回值:库存组织ID
 * 异常处理:
 */
public String getStoreOrg(String cWarehouseID) throws BusinessException{
	FormulaParse f = new FormulaParse();

	//获得库存组织ID
	String sExpress="getColValue(bd_stordoc,pk_calbody,pk_stordoc,cWarehouseID)";
	f.setExpress(sExpress);
	VarryVO varry = f.getVarry();
	Hashtable table=new Hashtable();
	String sParam[]=new String[1];
	sParam[0]=cWarehouseID;
	table.put(varry.getVarry()[0],sParam);
	f.setDataS(table);
	String sStoreOrg[]=f.getValueS();

	if(sStoreOrg!=null && sStoreOrg.length>0) return sStoreOrg[0];
	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:判断入库单的单据号是否重复
 * 输入参数:单位编码，单据号，表头主键（修改时）
 * 返回值:无
 * 异常处理:无
 */
public boolean isCodeDuplicate(String unitCode, String billCode, String key)
	throws BusinessException {

	boolean b = false;
	try {
		EstimateDMO dmo = new EstimateDMO();
		b = dmo.isCodeDuplicate(unitCode, billCode, key);
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return b;
}

/**
 * 功能:并发处理时间戳(暂估)
 * 输入:暂估VO[]
 * 返回:String,错误提示字符串
 * 异常:RemoteException
 * 日期:2002/04/10
 * 作者:熊海情
 * 修改:晁志平 FOR  V30 修正BUG：未查询到新时间戳时未报错
 */
private String isTimeStampChanged(EstimateVO VOs[]) throws BusinessException {

	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("输入参数为空，直接返回!调用堆栈如下：");
		SCMEnv.out(new Exception());
		return null;
	}

	int iLen = VOs.length;

	String saHid[] = new String[iLen];
	String saHts[] = new String[iLen];
	String saBid[] = new String[iLen];
	String saBts[] = new String[iLen];
	String saBbid[] = new String[iLen];
	String saBbts[] = new String[iLen];

	for (int i = 0; i < iLen; i++) {
		saHid[i] = VOs[i].getCgeneralhid();
		saHts[i] = VOs[i].getTs1();
		saBid[i] = VOs[i].getCgeneralbid();
		saBts[i] = VOs[i].getTs2();
		saBbid[i] = VOs[i].getCgeneralbb3();
		saBbts[i] = VOs[i].getTs3();
	}

	return isTimeStampChanged45(saHid, saHts, saBid, saBts, saBbid, saBbts);
}

/**
 * 功能:并发处理时间戳(暂估)
 * 输入:暂估VO[]
 * 返回:String,错误提示字符串
 * 异常:RemoteException
 * 日期:2002/04/10
 * 作者:王凯飞
 */
private String isTimeStampChanged_wwyf(wwEstimateVO VOs[]) throws BusinessException {

	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("输入参数为空，直接返回!调用堆栈如下：");
		SCMEnv.out(new Exception());
		return null;
	}

	int iLen = VOs.length;

	String saHid[] = new String[iLen];
	String saHts[] = new String[iLen];
	String saBid[] = new String[iLen];
	String saBts[] = new String[iLen];
	String saBbid[] = new String[iLen];
	String saBbts[] = new String[iLen];

	for (int i = 0; i < iLen; i++) {
		saHid[i] = VOs[i].getCgeneralhid();
		saHts[i] = VOs[i].getTs1();
		saBid[i] = VOs[i].getCgeneralbid();
		saBts[i] = VOs[i].getTs2();
		saBbid[i] = VOs[i].getCgeneralbb3();
		saBbts[i] = VOs[i].getTs3();
	}

	return isTimeStampChanged45(saHid, saHts, saBid, saBts, saBbid, saBbts);
}

/**
 * 功能:并发处理时间戳(采购入库单)
 * 参数：
	String[] saHid, 采购入库单表头ID
	String[] saHts, 采购入库单表头ID对应的时间戳
	String[] saBid, 采购入库单表体ID
	String[] saBts, 采购入库单表体ID对应的时间戳
	String[] saBbid,采购入库单子表3ID
	String[] saBbts,采购入库单子表3ID对应的时间戳
 * 返回:错误串
 * 日期:2004-06-23
 * 作者：晁志平
 */
private String isTimeStampChanged45(
	String[] saHid,
	String[] saHts,
	String[] saBid,
	String[] saBts,
	String[] saBbid,
	String[] saBbts)
	throws BusinessException {
	String sMessage = "";
	int iLen = 0;
	try {
		nc.bs.pu.pub.PubDMO pubDMO = new nc.bs.pu.pub.PubDMO();
		Object oaTs[] = pubDMO.queryHBTsArrayByHBIDArray("45", saHid, saBid, saBbid);
		String saHts1[] = null;
		String saBts1[] = null;
		String saBbts1[] = null;
		if (oaTs != null && oaTs.length > 0) {
			saHts1 = (String[]) oaTs[0];
			saBts1 = (String[]) oaTs[1];
			saBbts1 = (String[]) oaTs[2];
		} else {
			SCMEnv.out("程序BUG：nc.bs.pu.pub.PubDMO.queryHBTsArrayByHBIDArray(String,String[],String[],String[])返回NULL");
			return null;
		}
		String strTmp0 = null, strTmp1 = null;
		//判断表头时间戳是否改变
		if (saHid != null && saHid.length > 0) {
			iLen = saHts == null ? 0 : saHts.length;
			if (saHts1 != null && saHts1.length > 0 && saHts1.length == iLen) {
				for (int i = 0; i < iLen; i++) {
					strTmp0 = saHts[i] == null ? "" : saHts[i].trim();
					strTmp1 = saHts1[i] == null ? "" : saHts1[i].trim();
					if (!strTmp0.equals(strTmp1)) {
						sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000012")/*@res "入库单表头发生并发操作！\n"*/;
						break;
					}
				}
			} else {
				sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000012")/*@res "入库单表头发生并发操作！\n"*/;
			}
		}
		//判断表体时间戳是否改变
		if (saBid != null && saBid.length > 0) {
			iLen = saBts == null ? 0 : saBts.length;
			if (saBts1 != null && saBts1.length > 0 && saBts1.length == iLen) {
				for (int i = 0; i < iLen; i++) {
					strTmp0 = saBts[i] == null ? "" : saBts[i].trim();
					strTmp1 = saBts1[i] == null ? "" : saBts1[i].trim();
					if (!strTmp0.equals(strTmp1)) {
						sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000013")/*@res "入库单表体发生并发操作！\n"*/;
						break;
					}
				}
			} else {
				sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000013")/*@res "入库单表体发生并发操作！\n"*/;
			}
		}
		//判断子子表时间戳是否改变
		if (saBbid != null && saBbid.length > 0) {
			iLen = saBbts == null ? 0 : saBbts.length;
			if (saBbts1 != null && saBbts1.length > 0 && saBbts1.length == iLen) {
				for (int i = 0; i < iLen; i++) {
					strTmp0 = saBbts[i] == null ? "" : saBbts[i].trim();
					strTmp1 = saBbts1[i] == null ? "" : saBbts1[i].trim();
					if (!strTmp0.equals(strTmp1)) {
						sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000014")/*@res "入库单子子表发生并发操作！\n"*/;
						break;
					}
				}
			} else {
				sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000014")/*@res "入库单子子表发生并发操作！\n"*/;
			}
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return sMessage;
}

/**
 * 功能:并发处理时间戳(期初暂估时对期初暂估入库单)
 * 输入:GeneralHVO[]
 * 返回:错误串
 * 异常:RemoteException
 * 日期:2002/04/10
 * 作者:熊海情
 * 修改:晁志平 FOR V30 修正BUG：未查询到时间戳时未抛异常
 */
private String isTimeStampChangedForGeneral(GeneralHVO VOs[]) throws BusinessException {

	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("输入参数为空，直接返回!调用堆栈如下：");
		SCMEnv.out(new Exception());
		return null;
	}
	int iLen = VOs.length;
	Vector vId = new Vector();
	Vector vTs = new Vector();
	//表头ID及TS
	for (int i = 0; i < iLen; i++) {
		if (VOs[i] == null || VOs[i].getHeadVO() == null) {
			continue;
		}
		vId.addElement(VOs[i].getHeadVO().getCgeneralhid());
		vTs.addElement(VOs[i].getHeadVO().getTs());
	}
	String[] saHid = null, saHts = null;
	if (vId.size() > 0) {
		saHid = new String[vId.size()];
		vId.copyInto(saHid);
		saHts = new String[vId.size()];
		vTs.copyInto(saHts);
	}
	//表体ID及TS
	GeneralHItemVO[] bodyVOs = null;
	vId = new Vector();
	vTs = new Vector();
	int jLen = 0;
	for (int i = 0; i < iLen; i++) {
		bodyVOs = VOs[i].getBodyVO();
		jLen = bodyVOs == null ? 0 : bodyVOs.length;
		for (int j = 0; j < jLen; j++) {
			if (bodyVOs[j] == null) {
				continue;
			}
			vId.addElement(bodyVOs[j].getCgeneralbid());
			vTs.addElement(bodyVOs[j].getTs());
		}
	}
	String[] saBid = null, saBts = null;
	if (vId.size() > 0) {
		saBid = new String[vId.size()];
		vId.copyInto(saBid);
		saBts = new String[vId.size()];
		vTs.copyInto(saBts);
	}
	//表体子表3ID及TS
	GeneralBb3VO[] bodyB3VOs = null;
	vId = new Vector();
	vTs = new Vector();
	for (int i = 0; i < iLen; i++) {
		bodyB3VOs = VOs[i].getGrandVO();
		jLen = bodyB3VOs == null ? 0 : bodyB3VOs.length;
		for (int j = 0; j < jLen; j++) {
			if (bodyB3VOs[j] == null) {
				continue;
			}
			vId.addElement(bodyB3VOs[j].getCgeneralbb3());
			vTs.addElement(bodyB3VOs[j].getTs());
		}
	}
	String[] saBbid = null, saBbts = null;
	if (vId.size() > 0) {
		saBbid = new String[vId.size()];
		vId.copyInto(saBbid);
		saBbts = new String[vId.size()];
		vTs.copyInto(saBbts);
	}
	//
	return isTimeStampChanged45(saHid, saHts, saBid, saBts, saBbid, saBbts);
}

/**
 * 功能:并发处理时间戳(期初暂估时对订单)
 * 输入:OorderVO[]
 * 返回:错误串
 * 异常:RemoteException
 * 日期:2002/04/10
 * 作者:熊海情
 * 修改:晁志平 FOR V30 修正BUG：未查询到时间戳时未抛异常
 */
private String isTimeStampChangedForOrder(OorderVO VOs[]) throws BusinessException {

	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("输入参数为空，直接返回!调用堆栈如下：");
		SCMEnv.out(new Exception());
		return null;
	}

	int iLen = VOs.length;

	String sMessage = "";

	try {
		nc.bs.pu.pub.PubDMO pubDMO = new nc.bs.pu.pub.PubDMO();

		String[] saHid = new String[VOs.length];
		String[] saBid = new String[VOs.length];
		for (int i = 0; i < VOs.length; i++) {
			saHid[i] = VOs[i].getCorderid();
			saBid[i] = VOs[i].getCorder_bid();
		}
		//并发处理
		Object[] oaTs = pubDMO.queryHBTsArrayByHBIDArray(ScmConst.PO_Order, saHid, saBid, null);
		String[] saHts = null;
		String[] saBts = null;
		if (oaTs != null && oaTs.length > 0) {
			saHts = (String[]) oaTs[0];
			saBts = (String[]) oaTs[1];
		} else {
			SCMEnv.out("程序BUG：nc.bs.pu.pub.PubDMO.queryHBTsArrayByHBIDArray(String,String[],String[],String[])返回NULL");
			return null;
		}
		String strTsOld = null, strTsNew = null;
		//判断表头时间戳是否改变
		if (saHts != null && saHts.length > 0 && saHts.length == iLen) {
			for (int i = 0; i < VOs.length; i++) {
				strTsOld = saHts[i] == null ? "" : saHts[i].trim();
				strTsNew = VOs[i].getTs1() == null ? "" : VOs[i].getTs1().trim();
				if (!strTsOld.equals(strTsNew)) {
					sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000015")/*@res "表头已改变！\n"*/;
					break;
				}
			}
		} else {
			sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000015")/*@res "表头已改变！\n"*/;
		}
		//判断表体时间戳是否改变
		if (saBts != null && saBts.length > 0 && saBts.length == iLen) {
			for (int i = 0; i < VOs.length; i++) {
				strTsOld = saBts[i] == null ? "" : saBts[i].trim();
				strTsNew = VOs[i].getTs2() == null ? "" : VOs[i].getTs2().trim();
				if (!strTsOld.equals(strTsNew)) {
					sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000016")/*@res "表体已改变！\n"*/;
					break;
				}
			}
		} else {
			sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000016")/*@res "表体已改变！\n"*/;
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

	return sMessage;
}

/**
 * 支持数据权限处理，拆分查询条件是用户录入自定义查询条件，还是UI端系统拼接的数据权限查询条件
 * @param voaCond
 * @return{0、非权限条件VO[]；1、权限条件查询串}
 */
private ArrayList dealCondVosForPowerForOrder(ConditionVO[] voaCond){
  
  //拆分用户录入VO、数据权限VO
  ArrayList listUserInputVos = new ArrayList();
  ArrayList listPowerVos = new ArrayList();
  
  int iLen = voaCond.length;
  
  for(int i=0; i<iLen; i++){
    if(voaCond[i].getOperaCode().trim().equalsIgnoreCase("IS") && voaCond[i].getValue().trim().equalsIgnoreCase("NULL")){
      listPowerVos.add(voaCond[i]);
      i++;
      listPowerVos.add(voaCond[i]);
    }else{
      listUserInputVos.add(voaCond[i]);
    }
  }
  
  //组织返回VO
  ArrayList listRet = new ArrayList();
  
  //用户录入
  ConditionVO[] voaCondUserInput = null;
  if(listUserInputVos.size() > 0){
    voaCondUserInput = new ConditionVO[listUserInputVos.size()];
    listUserInputVos.toArray(voaCondUserInput);
  }
  listRet.add(voaCondUserInput);
  
  //数据权限VO==>查询条件串
  ConditionVO[] voaCondPower = null;
  if(listPowerVos.size() > 0){
    voaCondPower = new ConditionVO[listPowerVos.size()];
    listPowerVos.toArray(voaCondPower);
    String strPowerWherePart = voaCondPower[0].getWhereSQL(voaCondPower);
    //将非标准的字段替换掉
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "custcode", "b.pk_cubasdoc");
//    
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "invcode", "b.pk_invbasdoc");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "cbaseid", "po_order_b.cbaseid");    
//    
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "cinvclassid", "po_order_b.cbaseid");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "invclasscode", "pk_invbasdoc");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "bd_invcl where 0=0  and pk_invcl", "bd_invcl, bd_invbasdoc where bd_invcl.pk_invcl = bd_invbasdoc.pk_invcl and bd_invcl.pk_invcl");
    //
    listRet.add(strPowerWherePart);
  }else{
    listRet.add(null);
  }
  
  return listRet;    
}

/**
 * 支持数据权限处理，拆分查询条件是用户录入自定义查询条件，还是UI端系统拼接的数据权限查询条件
 * @param voaCond
 * @return{0、非权限条件VO[]；1、权限条件查询串}
 */
private ArrayList dealCondVosForPower(ConditionVO[] voaCond){
  
  //拆分用户录入VO、数据权限VO
  ArrayList listUserInputVos = new ArrayList();
  ArrayList listPowerVos = new ArrayList();
  
  int iLen = voaCond.length;
  
  for(int i=0; i<iLen; i++){
    if(voaCond[i].getOperaCode().trim().equalsIgnoreCase("IS") && voaCond[i].getValue().trim().equalsIgnoreCase("NULL")){
      listPowerVos.add(voaCond[i]);
      i++;
      listPowerVos.add(voaCond[i]);
    }else{
      listUserInputVos.add(voaCond[i]);
    }
  }
  
  //组织返回VO
  ArrayList listRet = new ArrayList();
  
  //用户录入
  ConditionVO[] voaCondUserInput = null;
  if(listUserInputVos.size() > 0){
    voaCondUserInput = new ConditionVO[listUserInputVos.size()];
    listUserInputVos.toArray(voaCondUserInput);
  }
  listRet.add(voaCondUserInput);
  
  //数据权限VO==>查询条件串
  ConditionVO[] voaCondPower = null;
  if(listPowerVos.size() > 0){
    voaCondPower = new ConditionVO[listPowerVos.size()];
    listPowerVos.toArray(voaCondPower);
    String strPowerWherePart = voaCondPower[0].getWhereSQL(voaCondPower);
    //将非标准的字段替换掉
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "custcode", "pk_cumandoc");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "cvendorbaseid", "cproviderid");
    
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "psncode", "pk_psndoc");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "coperator", "cbizid");

    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "invcode is  NULL ) or (invcode", "cinvbasid is  NULL ) or (cinvbasid");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "invcode", "b.pk_invbasdoc");
    
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "cinvclassid", "cinvbasid");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "invclasscode", "pk_invbasdoc");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "bd_invcl where 0=0  and pk_invcl", "bd_invcl, bd_invbasdoc where bd_invcl.pk_invcl = bd_invbasdoc.pk_invcl and bd_invcl.pk_invcl");
//   
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "deptcode", "pk_deptdoc");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "cdeptid", "cdptid"); 
    
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "storcode", "pk_stordoc"); 
    //
    listRet.add(strPowerWherePart);
  }else{
    listRet.add(null);
  }
  
  return listRet;    
}

/**
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 创建日期：(2001-5-30)
 * @return nc.vo.ps.estimate.EstimateVO[] 查到的VO对象数组
 * @param unitCode int
 * @exception java.rmi.RemoteException 异常说明。
 */
public EstimateVO[] queryEstimate(String unitCode, ConditionVO conditionVO[], String sZG, String sEstPriceSource)
	throws BusinessException {

	EstimateVO[] estimates = null;
	int nPriceDecimal = 2;
	int nMoneyDecimal = 0;
	
	try {
		//分解查询条件
		String sCondition = "";
    
    ArrayList listRet = dealCondVosForPower(conditionVO);
    conditionVO = (ConditionVO[]) listRet.get(0);
    String strDataPowerSql = (String) listRet.get(1);

		for (int i = 0; i < conditionVO.length; i++) {
			String sName = conditionVO[i].getFieldCode().trim();
			String sOpera = conditionVO[i].getOperaCode().trim();
			String sValue = conditionVO[i].getValue();
			String sSQL = conditionVO[i].getSQLStr();
			String sReplace = null;

			if (sName.equals("dbilldate") && sValue != null && sValue.length() > 0) {
				sReplace = "dbilldate " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}else if (sName.equals("dzgdate") && sValue != null && sValue.length() > 0) {
				sReplace = "dzgdate " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}else if (sName.equals("vbillcode") && sValue != null && sValue.length() > 0) {
				sReplace = "vbillcode " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cvendorbaseid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cproviderid in (select pk_cumandoc from bd_cumandoc A, bd_cubasdoc B where A.pk_corp = '"
							+ unitCode
							+ "' and custcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "' and A.pk_cubasdoc = B.pk_cubasdoc and (custflag = '1' or custflag = '3'))";
				else
					sReplace =
						"cproviderid in (select pk_cumandoc from bd_cumandoc A, bd_cubasdoc B where custcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "'and A.pk_cubasdoc = B.pk_cubasdoc and (custflag = '1' or custflag = '3'))";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cdeptid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cdptid in (select pk_deptdoc from bd_deptdoc where pk_corp = '"
							+ unitCode
							+ "' and deptcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				else
					sReplace = "cdptid in (select pk_deptdoc from bd_deptdoc where deptcode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cbiztype") && sValue != null && sValue.length() > 0) {
				sReplace = "cbiztype in (select pk_busitype from bd_busitype where busicode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("coperator") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cbizid in (select pk_psndoc from bd_psndoc where pk_corp = '"
							+ unitCode
							+ "' and psncode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				else
					sReplace = "cbizid in (select pk_psndoc from bd_psndoc where psncode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cbillmaker") && sValue != null && sValue.length() > 0) {
				sReplace = "A.coperatorid in (select cuserid from sm_user where user_code " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("invcode")) {
				if (unitCode != null) {
					sReplace = "B.cinvbasid in (select pk_invbasdoc from bd_invbasdoc ";
					sReplace += "where bd_invbasdoc.invcode ";
					sReplace += sOpera;
					sReplace += "'";
					sReplace += sValue;
					sReplace += "') ";
				} else {
					sReplace = "B.cinvbasid in (select pk_invbasdoc from bd_invbasdoc ";
					sReplace += "where bd_invbasdoc.invcode ";
					sReplace += sOpera;
					sReplace += "'";
					sReplace += sValue;
					sReplace += "') ";
				}
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}
			//入库单头自定义项
			else if (sName.indexOf("vuserdef") >= 0 && sValue != null && sValue.length() > 0) {
				sReplace = "A." + sName + " " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}else if (sName.equals("cinvclassid") && sValue != null && sValue.length() > 0) {
				try {
					nc.bs.ps.estimate.EstimateDMO ddmo = new nc.bs.ps.estimate.EstimateDMO();
					String sClassCode[] = ddmo.getSubInvClassCode(sValue);

					if (sClassCode != null && sClassCode.length > 0) {
						sValue = "(";
						for (int j = 0; j < sClassCode.length; j++) {
							if (j < sClassCode.length - 1)
								sValue += "invclasscode " + sOpera + " '" + sClassCode[j] + "' or ";
							else
								sValue += "invclasscode " + sOpera + " '" + sClassCode[j] + "')";
						}
						sReplace =
							"B.cinvbasid in (select A.pk_invbasdoc from bd_invbasdoc A,bd_invcl C where "
								+ "A.pk_invcl = C.pk_invcl and "
								+ sValue
								+ ")";
					} else {
						sReplace =
							"B.cinvbasid in (select A.pk_invbasdoc from bd_invbasdoc A,bd_invcl C where "
								+ "A.pk_invcl = C.pk_invcl and invclasscode "
								+ sOpera
								+ " '"
								+ sValue
								+ "')";
					}
					String s = getReplacedSQL(sSQL, sName, sReplace);
					sCondition += s;
				} catch (Exception e) {
					/*不影响业务操作，此异常不必抛出*/
					SCMEnv.out(e);
					return null;
				}
			} else if (sName.equals("cwarehouseid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cwarehouseid in (select pk_stordoc from bd_stordoc where pk_corp = '"
							+ unitCode
							+ "' and storcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				else
					sReplace = "cwarehouseid in (select pk_stordoc from bd_stordoc where storcode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
				
			}  else if (sName.equals("cprojectid") && sValue != null && sValue.length() > 0) {
				sReplace = "B.cprojectid in (select B.pk_jobmngfil from bd_jobbasfil A, bd_jobmngfil B where A.jobcode " + sOpera + " '" + sValue + "' and A.pk_jobbasfil = B.pk_jobbasfil)";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} 

		}
		sCondition = PubDMO.processFirst(sCondition);
				
		//过滤赠品行
		sCondition += " and coalesce(B.flargess,'N') = 'N' ";
		//仓库“是否计算存货成本”属性过滤
		sCondition += " and (coalesce(S.iscalculatedinvcost,'N') = 'Y' or A.cwarehouseid is null) ";
		//VMI业务类型入库单不暂估
		sCondition += " and BT.verifyrule not in ('V','N')  ";
		
		//不支持跨公司暂估
		if (sZG.trim().equals("N")) sCondition += " and A.pk_corp = B.pk_invoicecorp ";
		//

    if(strDataPowerSql != null) sCondition += " and " + strDataPowerSql;
		
		EstimateDMO dmo = new EstimateDMO();
		estimates = dmo.queryEstimate(unitCode, sCondition, sZG);
		
		//获取单价和金额精度
		ISysInitQry myService = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		nPriceDecimal = myService.getParaInt(unitCode,"BD505");	
		String sPricePolicy = myService.getParaString(unitCode, "PO28");
		if(sPricePolicy == null) sPricePolicy = "无税价格优先";

		UFDouble d = VMIDMO.getDigitRMB(unitCode);
		while(d.doubleValue() < 1){
			d = d.multiply(10);
			nMoneyDecimal++;
		}

		//
		if (sZG.trim().equals("N") && sEstPriceSource != null && sEstPriceSource.trim().length() > 0){
			ArrayList paraList = new ArrayList();
			paraList.add(sEstPriceSource);
			paraList.add(new Integer(nPriceDecimal));
			paraList.add(new Integer(nMoneyDecimal));
			paraList.add(sPricePolicy);
			estimates = dmo.replacePriceForEstimate(estimates, paraList);
		}
		
		if(estimates != null && estimates.length > 0) {
			
			//设置税率和价税合计, 计算含税单价和价税合计
			//如果入库单来源于订单,则税率和扣税类别取自订单行的税率和扣税类别;否则前台处理:取存货对应的税目税率,扣税类别为应税外加
			Vector vTemp = new Vector();
			for(int i = 0; i < estimates.length; i++){
				if(estimates[i].getCfirsttype() != null && estimates[i].getCfirsttype().equals(ScmConst.PO_Order)){
					if(!vTemp.contains(estimates[i].getCfirstbillbid())) vTemp.addElement(estimates[i].getCfirstbillbid());
				}
			}
			if(vTemp.size() > 0){
				String sID[] = new String[vTemp.size()];
				vTemp.copyInto(sID);
				Hashtable hTemp = dmo.queryOrderTaxRate(sID);
				if(hTemp != null && hTemp.size() > 0){
					for(int i = 0; i < estimates.length; i++){
						if(estimates[i].getCfirsttype() != null && estimates[i].getCfirsttype().equals(ScmConst.PO_Order) && hTemp.get(estimates[i].getCfirstbillbid()) != null){
							Object oTemp[] = (Object[])hTemp.get(estimates[i].getCfirstbillbid());
							UFDouble nTaxRate = new UFDouble(0);
							Integer iDiscountTaxType = new Integer(1);
							if(oTemp[0] != null) nTaxRate = new UFDouble(oTemp[0].toString());
							if(oTemp[1] != null) iDiscountTaxType = (Integer) oTemp[1];
							estimates[i].setNtaxrate(nTaxRate);
							estimates[i].setIdiscounttaxtype(iDiscountTaxType);
							//if(sZG.trim().equals("N")) estimates[i] = calculateTaxPriceForEstimateVO(estimates[i],nTaxRate,iDiscountTaxType,nPriceDecimal,nMoneyDecimal);
						}
					}
				}
			}
		}
		
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return estimates;
}

/**
 * 此处插入方法说明。
 * 功能描述:查询期初暂估入库单表体及结算子子表
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 修改日期：2003/02/20
 */
public ArrayList queryInitialBody(String pkHead, String ts) throws BusinessException {

	try {
		EstimateDMO dmo = new EstimateDMO();

		String temp = " and B.cgeneralhid = '" + pkHead + "' and upper(bzgflag) = 'Y' and B.ts = '" + ts + "'";

		GeneralHItemVO itemVO[] = dmo.queryInitialBody(temp);

		if (itemVO != null && itemVO.length > 0) {
			//自由项
			GeneralHVO VO = new GeneralHVO();
			VO.setChildrenVO(itemVO);
			String vfree[][] = getFreeItem0(new GeneralHVO[] { VO });
			if (vfree != null && vfree.length > 0) {
				for (int j = 0; j < itemVO.length; j++) {
					itemVO[j].setVfree(vfree[0][j]);
				}
			}

			//根据入库单表体,查询结算子子表
			GeneralBb3VO bb3VO[] = dmo.queryStockBb3(itemVO);

			if (bb3VO != null && bb3VO.length > 0) {
				ArrayList list = new ArrayList();
				list.add(itemVO);
				list.add(bb3VO);
				return list;
			} else
				return null;
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

	return null;
}

/**
 * 功能:查询期初暂估入库单表体--临时表方案
 * 输入:String[],入库单表头ID[]；String[],入库单表头TS[]
 * 返回:ArrayList{GeneralHItemVO[],GeneralBb3VO[];...}
 * 异常:SQLException
 * 日期:2003/02/20
 * 修改:晁志平 FOR V30 效率优化，采用临时表方案拼接查询条件
 */
public ArrayList queryInitialBodyBatch(String pkHead[], String ts[]) throws BusinessException {
	if (pkHead == null || pkHead.length == 0){
		SCMEnv.out("传入表头ID参数为空，直接返回NULL");
		return null;
	}
	if (ts == null || ts.length == 0){
		SCMEnv.out("传入表头Ts参数为空，直接返回NULL");
		return null;
	}
	if (ts.length != pkHead.length){
		SCMEnv.out("传入表头ID与表头Ts参数长度不一致，直接返回NULL");
		return null;
	}
	try {
		EstimateDMO dmo = new EstimateDMO();
		/*
		String temp = " and upper(bzgflag) = 'Y' and (";
		for (int i = 0; i < pkHead.length - 1; i++) {
			temp += "(B.cgeneralhid = '" + pkHead[i] + "' and B.ts = '" + ts[i] + "') or ";
		}
		temp += "(B.cgeneralhid = '" + pkHead[pkHead.length - 1] + "' and B.ts = '" + ts[pkHead.length - 1] + "')) ";
		*/
		GeneralHItemVO itemVO[] = dmo.queryInitialBodys(pkHead,ts);

		if (itemVO != null && itemVO.length > 0) {
			//自由项
			GeneralHVO VO = new GeneralHVO();
			VO.setChildrenVO(itemVO);
			String vfree[][] = getFreeItem0(new GeneralHVO[] { VO });
			if (vfree != null && vfree.length > 0) {
				for (int j = 0; j < itemVO.length; j++) {
					itemVO[j].setVfree(vfree[0][j]);
				}
			}

			//根据入库单表体,查询结算子子表
			GeneralBb3VO bb3VO[] = dmo.queryStockBb3(itemVO);

			if (bb3VO != null && bb3VO.length > 0) {
				ArrayList list = new ArrayList();
				for (int i = 0; i < pkHead.length; i++) {
					String s1 = pkHead[i].trim();
					Vector v1 = new Vector();
					Vector v2 = new Vector();
					for (int j = 0; j < itemVO.length; j++) {
						String s2 = itemVO[j].getCgeneralhid().trim();
						if (s1.equals(s2))
							v1.addElement(itemVO[j]);
					}
					for (int j = 0; j < bb3VO.length; j++) {
						String s3 = bb3VO[j].getCgeneralhid().trim();
						if (s1.equals(s3))
							v2.addElement(bb3VO[j]);
					}

					GeneralHItemVO tempBodyVO[] = new GeneralHItemVO[v1.size()];
					v1.copyInto(tempBodyVO);
					GeneralBb3VO tempBb3VO[] = new GeneralBb3VO[v2.size()];
					v2.copyInto(tempBb3VO);

					if (tempBodyVO == null || tempBodyVO.length == 0)
						return null;
					if (tempBb3VO == null || tempBb3VO.length == 0)
						return null;

					ArrayList list0 = new ArrayList();
					list0.add(tempBodyVO);
					list0.add(tempBb3VO);

					list.add(list0);
				}
				return list;

			} else
				return null;
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:
 * @return nc.vo.ps.settle.StockVO[]
 * @param VO nc.vo.ps.settle.StockVO[]
 */
private StockVO[] queryNegStockByStock(StockVO[] VO) throws BusinessException {
	if(VO == null || VO.length == 0) return null;
	
	//来源单据行ID唯一性组合
	Vector vID = new Vector();
	vID.addElement(VO[0].getCfirstbillbid());
	for (int i = 1; i < VO.length; i++) {
		String s = VO[i].getCfirstbillbid();
		if (!vID.contains(s))
			vID.addElement(s);
	}

	//设置查询条件
	String unitCode = VO[0].getPk_corp();
	String sCondition = " and upper(isok) = 'N' and upper(bzgflag) = 'Y' and cfirstbillbid in ";
	/*
	('";
	for (int i = 0; i < vID.size() - 1; i++)
		sCondition += vID.elementAt(i) + "','";
	sCondition += vID.elementAt(vID.size() - 1) + "')";
	*/
	try {
		//临时表
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
		String[] sTemp = new String[vID.size()];
		vID.copyInto(sTemp);
		strSetId =
			dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU56, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strSetId == null || strSetId.trim().equals("()")) {
			strSetId = " ('ErrorPk') ";
		}
		sCondition += strSetId;
		
		nc.bs.ps.settle.SettleDMO dmo = new nc.bs.ps.settle.SettleDMO();
		StockVO stockVOs[] = dmo.queryStock(unitCode, sCondition);
		
		//比较查询出的副入库单是否已存在,若存在,应删除
		if(stockVOs != null && stockVOs.length > 0){
			Vector vTemp = new Vector();
			for(int i = 0; i < VO.length; i++){
				if(!vTemp.contains(VO[i].getCgeneralbid())) vTemp.addElement(VO[i].getCgeneralbid());
			}
			Vector vvTemp = new Vector();
			for(int i = 0; i < stockVOs.length; i++){
				if(!vTemp.contains(stockVOs[i].getCgeneralbid())) vvTemp.addElement(stockVOs[i]);
			}
			stockVOs = new StockVO[vvTemp.size()];
			vvTemp.copyInto(stockVOs);
		}
		//
		
		if (stockVOs != null && stockVOs.length > 0) {
			Vector vTemp = new Vector();
			for (int i = 0; i < stockVOs.length; i++)
				vTemp.addElement(stockVOs[i].getCprovidermangid());
			String sVendorMangID[] = new String[vTemp.size()];
			vTemp.copyInto(sVendorMangID);
			String sVendorBaseID[] = dmo.getVendorBaseKey(sVendorMangID);

			//计算未结算数量，本币未结算金额
			for (int i = 0; i < stockVOs.length; i++) {
				stockVOs[i].setCproviderbaseid(sVendorBaseID[i]);
				UFDouble d1 = stockVOs[i].getNinnum();
				UFDouble d2 = stockVOs[i].getNaccumsettlenum();
				if (d1 == null || d1.toString().trim().length() == 0)
					d1 = new UFDouble(0);
				if (d2 == null || d2.toString().trim().length() == 0)
					d2 = new UFDouble(0);
				double d = d1.doubleValue() - d2.doubleValue();
				stockVOs[i].setNnosettlenum(new UFDouble(d));
				d1 = stockVOs[i].getNmoney();
				d2 = stockVOs[i].getNaccumsettlemny();
				if (d1 == null || d1.toString().trim().length() == 0)
					d1 = new UFDouble(0);
				if (d2 == null || d2.toString().trim().length() == 0)
					d2 = new UFDouble(0);
				d = d1.doubleValue() - d2.doubleValue();
				stockVOs[i].setNnosettlemny(new UFDouble(d));
			}

			//未结算数量相反，暂估金额相反
			Vector v = new Vector();
			for (int i = 0; i < VO.length; i++) {
				boolean bFound = false;
				String s1 = VO[i].getCsourcebillbid();
				if(s1 == null || s1.trim().length() == 0){
					v.addElement(null);
					continue;
				}
				UFDouble nNum1 = VO[i].getNnosettlenum();
				UFDouble nMoney1 = VO[i].getNmoney();
				for (int j = 0; j < stockVOs.length; j++) {
					String s2 = stockVOs[j].getCsourcebillbid();
					if(s2 == null || s2.trim().length() == 0) continue;
					UFDouble nNum2 = stockVOs[j].getNnosettlenum();
					UFDouble nMoney2 = stockVOs[j].getNmoney();
					if (s1.equals(s2)
						&& (nNum1.doubleValue() == -1 * nNum2.doubleValue())
						&& (nMoney1.doubleValue() == -1 * nMoney2.doubleValue())) {
						v.addElement(stockVOs[j]);
						bFound = true;
						break;
					}
				}

				if (!bFound)
					v.addElement(null);
			}
			if (v.size() > 0) {
				StockVO VOs[] = new StockVO[v.size()];
				v.copyInto(VOs);
				return VOs;
			}
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:订单查询(不包括费用属性的存货)
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public OorderVO[] queryOrder(String unitCode, ConditionVO conditionVO[], String biztypeID[], String sEstPriceSource)
	throws BusinessException {

	OorderVO[] orders = null;
	int nPriceDecimal = 2;
	int nMoneyDecimal = 0;

	try {
		EstimateDMO dmo = new EstimateDMO();

		//分解查询条件
		String sCondition = "";
    
    ArrayList listRet = dealCondVosForPowerForOrder(conditionVO);
    conditionVO = (ConditionVO[]) listRet.get(0);
    String strDataPowerSql = (String) listRet.get(1);

		for (int i = 0; i < conditionVO.length; i++) {
			String sName = conditionVO[i].getFieldCode().trim();
			String sOpera = conditionVO[i].getOperaCode().trim();
			String sValue = conditionVO[i].getValue();
			String sSQL = conditionVO[i].getSQLStr();
			String sReplace = null;

			if (sName.equals("dorderdate") && sValue != null && sValue.length() > 0) {
				sReplace = "po_order.dorderdate " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}

			if (sName.equals("vordercode") && sValue != null && sValue.length() > 0) {
				sReplace = "po_order.vordercode " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}

			if (sName.equals("cvendorbaseid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"po_order.cvendorbaseid in (select A.pk_cubasdoc from bd_cubasdoc A,bd_cumandoc B where B.pk_corp = '"
							+ unitCode
							+ "' and A.pk_cubasdoc = B.pk_cubasdoc and custcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "' and (custflag = '1' or custflag = '3'))";
				else
					sReplace =
						"po_order.cvendorbaseid in (select A.pk_cubasdoc from bd_cubasdoc A,bd_cumandoc B where A.pk_cubasdoc = B.pk_cubasdoc and custcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "' and (custflag = '1' or custflag = '3'))";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}

			if (sName.equals("cbaseid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"po_order_b.cbaseid in (select A.pk_invbasdoc from bd_invbasdoc A,bd_invmandoc B where B.pk_corp = '"
							+ unitCode
							+ "' and A.pk_invbasdoc = B.pk_invbasdoc and invcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				else
					sReplace =
						"po_order_b.cbaseid in (select A.pk_invbasdoc from bd_invbasdoc A,bd_invmandoc B where A.pk_invbasdoc = B.pk_invbasdoc and invcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}

			if (sName.equals("cinvclassid") && sValue != null && sValue.length() > 0) {
				try {
					String sClassCode[] = dmo.getSubInvClassCode(sValue);

					if (sClassCode != null && sClassCode.length > 0) {
						sValue = "(";
						for (int j = 0; j < sClassCode.length; j++) {
							if (j < sClassCode.length - 1)
								sValue += "invclasscode " + sOpera + " '" + sClassCode[j] + "' or ";
							else
								sValue += "invclasscode " + sOpera + " '" + sClassCode[j] + "')";
						}
						sReplace =
							"po_order_b.cbaseid in (select A.pk_invbasdoc from bd_invbasdoc A,bd_invmandoc B,bd_invcl C where B.pk_corp = '"
								+ unitCode
								+ "' and A.pk_invbasdoc = B.pk_invbasdoc and A.pk_invcl = C.pk_invcl and "
								+ sValue
								+ ")";
					} else {
						sReplace =
							"po_order_b.cbaseid in (select A.pk_invbasdoc from bd_invbasdoc A,bd_invmandoc B,bd_invcl C where B.pk_corp = '"
								+ unitCode
								+ "' and A.pk_invbasdoc = B.pk_invbasdoc and A.pk_invcl = C.pk_invcl and invclasscode "
								+ sOpera
								+ " '"
								+ sValue
								+ "')";
					}
					String s = getReplacedSQL(sSQL, sName, sReplace);
					sCondition += s;
				} catch (Exception e) {
					/*此异常不必抛出,直接返回NULL*/
					SCMEnv.out(e);
					return null;
				}
			}

			if (sName.equals("cbiztype") && sValue != null && sValue.length() > 0) {
				sReplace = "po_order.cbiztype in (select pk_busitype from bd_busitype where busicode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}
		}

		sCondition = PubDMO.processFirst(sCondition);

		String s = " and po_order.cbiztype in (";
		for (int i = 0; i < biztypeID.length; i++) {
			if (i != biztypeID.length - 1)
				s += "'" + biztypeID[i] + "',";
			else
				s += "'" + biztypeID[i] + "')";
		}
		sCondition += s;

		//订单头查询条件
		sCondition += " and coalesce(po_order.bislatest, 'Y') = 'Y' ";
		//订单体查询条件
		sCondition += " and po_order_b.iisactive <> " + nc.vo.po.OrderItemVO.IISACTIVE_REVISION;
		//支持集中采购
		sCondition += " and po_order_b.pk_invoicecorp = po_order_b.pk_arrvcorp and po_order_b.pk_invoicecorp = '" + unitCode + "' ";

    if(strDataPowerSql != null) sCondition += " and " + strDataPowerSql;

		orders = dmo.queryOrder(unitCode, sCondition);

		//获取单价和金额精度
		ISysInitQry myService = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		nPriceDecimal = myService.getParaInt(unitCode,"BD505");		
		UFDouble dTemp = VMIDMO.getDigitRMB(unitCode);
		while(dTemp.doubleValue() < 1){
			dTemp = dTemp.multiply(10);
			nMoneyDecimal++;
		}

		//计算暂估数量，暂估单价，暂估金额
		if (orders == null || orders.length == 0)
			return orders;
		for (int i = 0; i < orders.length; i++) {
			UFDouble d1 = orders[i].getNordernum();
			UFDouble d2 = orders[i].getNaccumstorenum();
			UFDouble d3 = orders[i].getNmoney();
			if (d2 == null)
				d2 = new UFDouble(0.0);
			if (d1 != null && d2 != null) {
				double d = d1.doubleValue() - d2.doubleValue();
				orders[i].setNgaugenum(new UFDouble(d));
			}
			if (d1 != null && d3 != null && d1.doubleValue() != 0.0) {
				double d = d3.doubleValue() / d1.doubleValue();
				orders[i].setNprice(new UFDouble(PubDMO.getRoundDouble(nPriceDecimal,d)));
			}
			UFDouble d4 = orders[i].getNgaugenum();
			UFDouble d5 = orders[i].getNprice();
			if (d4 != null && d5 != null) {
				double d = d4.doubleValue() * d5.doubleValue();
				orders[i].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMoneyDecimal,d)));
			}
		}

		if (sEstPriceSource != null && sEstPriceSource.trim().length() > 0) {
			orders = dmo.replacePriceForOrder(orders, sEstPriceSource, nPriceDecimal, nMoneyDecimal);
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return orders;
}



/**
 * 此处插入方法说明。
 * 功能描述:来源是订单的入库单的业务类型
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public String[] querySpeBiztypeID(String unitCode)
	throws BusinessException {
	String s[] = null;
	try {
		EstimateDMO dmo = new EstimateDMO();
		s = dmo.querySpeBiztypeID(unitCode);
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

	return s;
}

/**
 * 支持数据权限处理，拆分查询条件是用户录入自定义查询条件，还是UI端系统拼接的数据权限查询条件
 * @param voaCond
 * @return{0、非权限条件VO[]；1、权限条件查询串}
 */
private ArrayList dealCondVosForPowerForInitial(ConditionVO[] voaCond){
  
  //拆分用户录入VO、数据权限VO
  ArrayList listUserInputVos = new ArrayList();
  ArrayList listPowerVos = new ArrayList();
  
  int iLen = voaCond.length;
  
  for(int i=0; i<iLen; i++){
    if(voaCond[i].getOperaCode().trim().equalsIgnoreCase("IS") && voaCond[i].getValue().trim().equalsIgnoreCase("NULL")){
      listPowerVos.add(voaCond[i]);
      i++;
      listPowerVos.add(voaCond[i]);
    }else{
      listUserInputVos.add(voaCond[i]);
    }
  }
  
  //组织返回VO
  ArrayList listRet = new ArrayList();
  
  //用户录入
  ConditionVO[] voaCondUserInput = null;
  if(listUserInputVos.size() > 0){
    voaCondUserInput = new ConditionVO[listUserInputVos.size()];
    listUserInputVos.toArray(voaCondUserInput);
  }
  listRet.add(voaCondUserInput);
  
  //数据权限VO==>查询条件串
  ConditionVO[] voaCondPower = null;
  if(listPowerVos.size() > 0){
    voaCondPower = new ConditionVO[listPowerVos.size()];
    listPowerVos.toArray(voaCondPower);
    String strPowerWherePart = voaCondPower[0].getWhereSQL(voaCondPower);
    //将非标准的字段替换掉
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "custcode", "pk_cumandoc");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "cvendorbaseid", "cproviderid");

    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "invcode", "b.pk_invbasdoc");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "cbaseid", "cinvbasid");
    
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "cinvclassid", "cinvbasid");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "invclasscode", "pk_invbasdoc");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "bd_invcl where 0=0  and pk_invcl", "bd_invcl, bd_invbasdoc where bd_invcl.pk_invcl = bd_invbasdoc.pk_invcl and bd_invcl.pk_invcl");
//   
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "deptcode", "pk_deptdoc");
    strPowerWherePart = nc.vo.jcom.lang.StringUtil.replaceAllString(strPowerWherePart, "cdeptid", "cdptid");      
    //
    listRet.add(strPowerWherePart);
  }else{
    listRet.add(null);
  }
  
  return listRet;    
}

/**
 * 此处插入方法说明。
 * 功能描述:查询期初暂估入库单
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public GeneralHVO[] queryStockForEstimate(String unitCode, ConditionVO conditionVO[]) throws BusinessException {

	GeneralHVO[] generals = null;
	try {
		EstimateDMO dmo = new EstimateDMO();
		//分解查询条件
		String sCondition = "";

    ArrayList listRet = dealCondVosForPowerForInitial(conditionVO);
    conditionVO = (ConditionVO[]) listRet.get(0);
    String strDataPowerSql = (String) listRet.get(1);

		for (int i = 0; i < conditionVO.length; i++) {
			String sName = conditionVO[i].getFieldCode().trim();
			String sOpera = conditionVO[i].getOperaCode().trim();
			String sValue = conditionVO[i].getValue();
			String sSQL = conditionVO[i].getSQLStr();
			String sReplace = null;

			if (sName.equals("dbilldate") && sValue != null && sValue.length() > 0) {
				sReplace = "dbilldate " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}

			if (sName.equals("vordercode") && sValue != null && sValue.length() > 0) {
				sReplace = "vsourcebillcode " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}

			if (sName.equals("vbillcode") && sValue != null && sValue.length() > 0) {
				sReplace = "vbillcode " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}
			
			if (sName.equals("coperatorid") && sValue != null && sValue.length() > 0) {
				sReplace = "coperatorid " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}

			if (sName.equals("cwarehouseid") && sValue != null && sValue.length() > 0) {
				sReplace = "cwarehouseid " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}

			if (sName.equals("cbaseid") && sValue != null && sValue.length() > 0) {
				sReplace =
					"B.cinvbasid in (select pk_invbasdoc from bd_invbasdoc where invcode "
						+ sOpera
						+ " '"
						+ sValue
						+ "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}

			if (sName.equals("cinvclassid") && sValue != null && sValue.length() > 0) {
				try {
					String sClassCode[] = dmo.getSubInvClassCode(sValue);

					if (sClassCode != null && sClassCode.length > 0) {
						sValue = "(";
						for (int j = 0; j < sClassCode.length; j++) {
							if (j < sClassCode.length - 1)
								sValue += "invclasscode " + sOpera + " '" + sClassCode[j] + "' or ";
							else
								sValue += "invclasscode " + sOpera + " '" + sClassCode[j] + "')";
						}
						sReplace =
							"B.cinvbasid in (select pk_invbasdoc from bd_invbasdoc B,bd_invcl C where "
								+ sValue
								+ " and B.pk_invcl = C.pk_invcl)";
					} else {
						sReplace =
							"B.cinvbasid in (select pk_invbasdoc from bd_invbasdoc B,bd_invcl C where "
								+ "invclasscode "
								+ sOpera
								+ " '"
								+ sValue
								+ "' and B.pk_invcl = C.pk_invcl)";
					}
					String s = getReplacedSQL(sSQL, sName, sReplace);
					sCondition += s;
				} catch (Exception e) {
					/*此异常不必抛出,直接返回NULL*/
					SCMEnv.out(e);
					return null;
				}
			}

			if (sName.equals("cvendorbaseid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cproviderid in (select pk_cumandoc from bd_cumandoc A, bd_cubasdoc B where A.pk_corp = '"
							+ unitCode
							+ "' and custcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "' and A.pk_cubasdoc = B.pk_cubasdoc and (custflag = '1' or custflag = '3'))";
				else
					sReplace =
						"cproviderid in (select pk_cumandoc from bd_cumandoc A, bd_cubasdoc B where custcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "'and A.pk_cubasdoc = B.pk_cubasdoc and (custflag = '1' or custflag = '3'))";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}

			//打印次数
			if(sName.equals("iprintcount") && sValue != null && sValue.length() > 0){
				String s = " and (A.iprintcount" + sOpera + sValue + ")";
				sCondition += s;
			}

      if(sName.equals("cgeneralhid") && sValue != null && sValue.length() > 0){
        String s = " and (A.cgeneralhid " + sOpera + "'" + sValue + "')";
        sCondition += s;
      }

		}

		sCondition = PubDMO.processFirst(sCondition);

    if(strDataPowerSql != null) sCondition += " and " + strDataPowerSql;

		GeneralHHeaderVO hVO[] = dmo.queryStockHead(unitCode, sCondition);
		if (hVO == null || hVO.length == 0)
			return null;

		//根据入库单表头，查询入库单表体(入库单未结算)
		Vector v = new Vector();
		String temp = "";
		String key = hVO[0].getCgeneralhid();
		if (key != null && key.trim().length() > 0) {
			temp = " where dr = 0 and cgeneralhid = '" + key + "' and upper(bzgflag) = 'Y'";
		} else {
			temp = " where dr = 0 and upper(bzgflag) = 'Y'";
		}

		GeneralHItemVO itemVO[] = dmo.queryStockBodyForInitial(temp);
		GeneralHVO vo = new GeneralHVO(itemVO.length);
		vo.setParentVO(hVO[0]);
		vo.setChildrenVO(itemVO);

		if (itemVO != null && itemVO.length > 0) {
			//根据入库单表体,查询结算子子表
			GeneralBb3VO bb3VO[] = dmo.queryStockBb3(itemVO);
			vo.setGrandVO(bb3VO);
		}

		v.addElement(vo);

		for (int i = 1; i < hVO.length; i++) {
			GeneralHVO VO = new GeneralHVO(1);
			VO.setParentVO(hVO[i]);

			v.addElement(VO);
		}

		if (v.size() > 0) {
			generals = new GeneralHVO[v.size()];
			v.copyInto(generals);

			//自由项（第一张单据）
			String vfree[][] = getFreeItem0(new GeneralHVO[] { generals[0] });
			if (vfree != null && vfree.length > 0) {
				GeneralHItemVO bodyVO[] = generals[0].getBodyVO();
				if (bodyVO != null && bodyVO.length > 0) {
					for (int j = 0; j < bodyVO.length; j++) {
						bodyVO[j].setVfree(vfree[0][j]);
					}
				}
			}
		}

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return generals;
}

/**
 * 功能描述:查询入库单表体。服务于存货核算。
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 修改：2004-05-31 晁志平 FOR　V30　向存货核算传递换算率
 */
private Vector queryStockBodyForIA(EstimateVO VOs[])
	throws BusinessException {
	Vector v = new Vector();
	try {
		EstimateDMO dmo = new EstimateDMO();
		Vector v1 = new Vector();
		Vector v2 = new Vector();
		Vector v3 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			v1.addElement(VOs[i].getCmangid());
			v2.addElement(VOs[i].getCwarehouseid());
			v3.addElement(VOs[i].getCgeneralbid());
		}
		String cMangID[] = new String[v1.size()];
		v1.copyInto(cMangID);
		String cWarehouseID[] = new String[v2.size()];
		v2.copyInto(cWarehouseID);
		String keys[] = new String[v3.size()];
		v3.copyInto(keys);

		GeneralHItemVO tempVO[] = dmo.queryStockBodyForIA(keys);
		ArrayList list = dmo.queryPriceMethod(cMangID, cWarehouseID);

		for (int i = 0; i < VOs.length; i++) {
			ArrayList list1 = (ArrayList) list.get(i);

			Vector vTemp = new Vector();
			vTemp.addElement(tempVO[i]);
			if(list1 != null && list1.size() > 1){
				vTemp.addElement(list1.get(0));
				vTemp.addElement(list1.get(1));
			}else{
				vTemp.addElement(null);
				vTemp.addElement(null);
			}

			v.addElement(vTemp);
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

	return v;
}

/**
 * 此处插入方法说明。
 * 功能描述:查询期初暂估入库单
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
public GeneralHVO queryStockByHeadKey(String unitCode, String headKey) throws BusinessException {
	if (headKey == null || headKey.trim().length() == 0)
		return null;
	GeneralHVO[] generals = null;

	try {
		EstimateDMO dmo = new EstimateDMO();

		String sCondition = " and A.cgeneralhid = '" + headKey + "'";
		GeneralHHeaderVO hVO[] = dmo.queryStockHead(unitCode, sCondition);
		if (hVO == null || hVO.length == 0)
			return null;

		//根据入库单表头，查询入库单表体(入库单未结算)
		Vector v = new Vector();
		String temp = "";
		String key = hVO[0].getCgeneralhid();
		if (key != null && key.trim().length() > 0) {
			temp = " where dr = 0 and cgeneralhid = '" + key + "' and upper(bzgflag) = 'Y'";
		} else {
			temp = " where dr = 0 and upper(bzgflag) = 'Y'";
		}

		GeneralHItemVO itemVO[] = dmo.queryStockBodyForInitial(temp);
		GeneralHVO vo = new GeneralHVO(itemVO.length);
		vo.setParentVO(hVO[0]);
		vo.setChildrenVO(itemVO);

		if (itemVO != null && itemVO.length > 0) {
			//根据入库单表体,查询结算子子表
			GeneralBb3VO bb3VO[] = dmo.queryStockBb3(itemVO);
			vo.setGrandVO(bb3VO);
		}

		v.addElement(vo);

		for (int i = 1; i < hVO.length; i++) {
			GeneralHVO VO = new GeneralHVO(1);
			VO.setParentVO(hVO[i]);

			v.addElement(VO);
		}

		if (v.size() > 0) {
			generals = new GeneralHVO[v.size()];
			v.copyInto(generals);

			//自由项（第一张单据）
			String vfree[][] = getFreeItem0(new GeneralHVO[] { generals[0] });
			if (vfree != null && vfree.length > 0) {
				GeneralHItemVO bodyVO[] = generals[0].getBodyVO();
				if (bodyVO != null && bodyVO.length > 0) {
					for (int j = 0; j < bodyVO.length; j++) {
						bodyVO[j].setVfree(vfree[0][j]);
					}
				}
			}
		}

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return generals[0];
}

/**
 * 功能描述:查询入库单表头。服务于存货核算。
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
private Vector queryStockHeadForIA(String sGeneralhid[], String sWarehouseid[])
	throws BusinessException {

	Vector v = new Vector();
	try {
		EstimateDMO dmo = new EstimateDMO();
		GeneralHHeaderVO tempVO[] = dmo.queryStockHeadForIA(sGeneralhid);
		String temp[] = dmo.queryStoreOrgID(sWarehouseid);

		for (int i = 0; i < sGeneralhid.length; i++) {
			Vector vTemp = new Vector();
			vTemp.addElement(tempVO[i]);
			vTemp.addElement(temp[i]);

			v.addElement(vTemp);
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

	return v;
}



/**
 * 功能描述:回退入库单号
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2004-06-02
 */

private void returnBillCode(GeneralHHeaderVO head)
	throws BusinessException {
	String vBillcode = null;

	//获取入库单号
	try {
		nc.vo.pub.billcodemanage.BillCodeObjValueVO vo = new nc.vo.pub.billcodemanage.BillCodeObjValueVO();

		String sNames[] = { "仓库", "当前操作员", "收发类别" };
		String sKeys[] = { "cwarehouseid", "coperatorid", "cdispatcherid" };
		for (int i = 0; i < sNames.length; i++) {
			Object o = head.getAttributeValue(sKeys[i]);
			vo.setAttributeValue(sNames[i], o);
		}
		vo.setAttributeValue("库存组织", getStoreOrg(head.getCwarehouseid()));

		vBillcode = head.getVbillcode();
		if (vBillcode == null || vBillcode.length() == 0)
			vBillcode = null;

		IBillcodeRuleService bo = (IBillcodeRuleService) nc.bs.framework.common.NCLocator.getInstance().lookup(IBillcodeRuleService.class.getName());
		bo.returnBillCodeOnDelete(head.getPk_corp(), "45", vBillcode, vo);

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 功能描述:入库单暂估时向存货核算系统传送数据(成批单据传送)
 */
private void saveBillFromOutter(EstimateVO VOs[], String cOperator, UFDate dCurrDate) throws BusinessException {
    IIAToPUBill myService = null;

    nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();

	try {
		myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
		BillVO billVOs[] = transferIAData(VOs, cOperator, dCurrDate);

		//对存货核算单进行处理: 相同表头的单据组合成一张单据
		//(1) 存货核算单据来源单据头ID唯一性组合
		Vector v = new Vector();
		Vector vTemp0 = new Vector();
		vTemp0.addElement(((BillHeaderVO) billVOs[0].getParentVO()).getCbillid().trim());
		v.addElement(billVOs[0]);
		for (int i = 1; i < billVOs.length; i++) {
			String s1 = ((BillHeaderVO) billVOs[i].getParentVO()).getCbillid().trim();
			if (!vTemp0.contains(s1)) {
				vTemp0.addElement(s1);
				v.addElement(billVOs[i]);
			}
		}
		timer.addExecutePhase("(1) 存货核算单据来源单据头ID唯一性组合");

		//(3) 所有存货核算单据体的来源单据头ID相同, 归为同一张存货核算单据
		Vector vv = new Vector();
		for (int i = 0; i < v.size(); i++) {
			BillVO tempVO = (BillVO) v.elementAt(i);
			String s1 = ((BillHeaderVO) tempVO.getParentVO()).getCbillid().trim();
			Vector vTemp = new Vector();
			for (int j = 0; j < billVOs.length; j++) {
				String s2 = ((BillHeaderVO) billVOs[j].getParentVO()).getCbillid().trim();
				if (s1.equals(s2)) {
					BillItemVO tempItemVO[] = (BillItemVO[]) billVOs[j].getChildrenVO();
					for (int k = 0; k < tempItemVO.length; k++)
						vTemp.addElement(tempItemVO[k]);
				}
			}

			BillItemVO tempItemVOs[] = new BillItemVO[vTemp.size()];
			vTemp.copyInto(tempItemVOs);

			//重新设置表体行号
			for (int j = 0; j < tempItemVOs.length; j++)
				tempItemVOs[j].setIrownumber(new Integer(j));

			tempVO.setChildrenVO(tempItemVOs);
			vv.addElement(tempVO);
		}

		//(4) 整理需向存货传送的单据
		billVOs = null;
		billVOs = new BillVO[vv.size()];
		vv.copyInto(billVOs);

		timer.addExecutePhase("(3) 所有存货核算单据体的来源单据头ID相同, 归为同一张存货核算单据 + (4) 整理需向存货传送的单据");

		//传送数据
		if (billVOs == null || billVOs.length == 0)
			return;
		String s1 = ((BillHeaderVO) billVOs[0].getParentVO()).getCsourcemodulename();
		String s2 = ((BillItemVO[]) billVOs[0].getChildrenVO())[0].getCsourcebilltypecode();

		//
		String sTime = (new UFDateTime(new Date())).toString();		
		for(int i = 0; i < billVOs.length; i++){
		    ((BillHeaderVO)billVOs[i].getParentVO()).setVbillcode(null);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setTmaketime(sTime);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setTlastmaketime(sTime);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setClastoperatorid(cOperator);
		    BillItemVO bodyVO[] = (BillItemVO[]) billVOs[i].getChildrenVO();
		    if(bodyVO != null && bodyVO.length > 0){
		        for(int j = 0; j < bodyVO.length; j++) bodyVO[j].setVbillcode(null);
		    }
		}
		//
		myService.saveBillFromOutterArray(billVOs, s1, s2);

		timer.addExecutePhase("传送数据[IA保存方法]");

		timer.showAllExecutePhase("调用接口,向存货核算系统传送数据[总时间]时间分布");

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 功能描述:入库单暂估时向存货核算系统传送数据(成批单据传送)
 */
private void saveBillFromOutter_wwyf(wwEstimateVO VOs[], String cOperator, UFDate dCurrDate) throws BusinessException {
    IIAToPUBill myService = null;

    nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();

	try {
		myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
		BillVO billVOs[] = transferIAData_wwyf(VOs, cOperator, dCurrDate);

		//对存货核算单进行处理: 相同表头的单据组合成一张单据
		//(1) 存货核算单据来源单据头ID唯一性组合
		Vector v = new Vector();
		Vector vTemp0 = new Vector();
		vTemp0.addElement(((BillHeaderVO) billVOs[0].getParentVO()).getCbillid().trim());
		v.addElement(billVOs[0]);
		for (int i = 1; i < billVOs.length; i++) {
			String s1 = ((BillHeaderVO) billVOs[i].getParentVO()).getCbillid().trim();
			if (!vTemp0.contains(s1)) {
				vTemp0.addElement(s1);
				v.addElement(billVOs[i]);
			}
		}
		timer.addExecutePhase("(1) 存货核算单据来源单据头ID唯一性组合");

		//(3) 所有存货核算单据体的来源单据头ID相同, 归为同一张存货核算单据
		Vector vv = new Vector();
		for (int i = 0; i < v.size(); i++) {
			BillVO tempVO = (BillVO) v.elementAt(i);
			String s1 = ((BillHeaderVO) tempVO.getParentVO()).getCbillid().trim();
			Vector vTemp = new Vector();
			for (int j = 0; j < billVOs.length; j++) {
				String s2 = ((BillHeaderVO) billVOs[j].getParentVO()).getCbillid().trim();
				if (s1.equals(s2)) {
					BillItemVO tempItemVO[] = (BillItemVO[]) billVOs[j].getChildrenVO();
					for (int k = 0; k < tempItemVO.length; k++)
						vTemp.addElement(tempItemVO[k]);
				}
			}

			BillItemVO tempItemVOs[] = new BillItemVO[vTemp.size()];
			vTemp.copyInto(tempItemVOs);

			//重新设置表体行号
			for (int j = 0; j < tempItemVOs.length; j++)
				tempItemVOs[j].setIrownumber(new Integer(j));

			tempVO.setChildrenVO(tempItemVOs);
			vv.addElement(tempVO);
		}

		//(4) 整理需向存货传送的单据
		billVOs = null;
		billVOs = new BillVO[vv.size()];
		vv.copyInto(billVOs);

		timer.addExecutePhase("(3) 所有存货核算单据体的来源单据头ID相同, 归为同一张存货核算单据 + (4) 整理需向存货传送的单据");

		//传送数据
		if (billVOs == null || billVOs.length == 0)
			return;
		String s1 = ((BillHeaderVO) billVOs[0].getParentVO()).getCsourcemodulename();
		String s2 = ((BillItemVO[]) billVOs[0].getChildrenVO())[0].getCsourcebilltypecode();

		//
		String sTime = (new UFDateTime(new Date())).toString();		
		for(int i = 0; i < billVOs.length; i++){
		    ((BillHeaderVO)billVOs[i].getParentVO()).setVbillcode(null);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setTmaketime(sTime);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setTlastmaketime(sTime);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setClastoperatorid(cOperator);
		    BillItemVO bodyVO[] = (BillItemVO[]) billVOs[i].getChildrenVO();
		    if(bodyVO != null && bodyVO.length > 0){
		        for(int j = 0; j < bodyVO.length; j++) bodyVO[j].setVbillcode(null);
		    }
		}
		//
		myService.saveBillFromOutterArray(billVOs, s1, s2);

		timer.addExecutePhase("传送数据[IA保存方法]");

		timer.showAllExecutePhase("调用接口,向存货核算系统传送数据[总时间]时间分布");

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}


/**
 * 此处插入方法说明。
 * 功能描述:入库单暂估时向存货核算系统传送数据
 * (成批单据传送)
 * 输入参数:
 * 返回值:
 * 异常处理:
 */
private void saveBillFromOutterForSC(EstimateVO VOs[], String cOperator, UFDate dCurrDate)
	throws BusinessException {
	Vector vTemp = new Vector();
	for (int i = 0; i < VOs.length; i++) {
		StockVO VO = new StockVO();
		VO.setPk_corp(VOs[i].getPk_corp());
		VO.setCgeneralhid(VOs[i].getCgeneralhid());
		VO.setCgeneralbid(VOs[i].getCgeneralbid());
		VO.setCgeneralbb3(VOs[i].getCgeneralbb3());
		VO.setNinnum(VOs[i].getNinnum());
		VO.setNprice(VOs[i].getNprice());
		VO.setNmoney(VOs[i].getNmoney());
		VO.setNnosettlenum(VOs[i].getNinnum());
		VO.setNnosettlemny(VOs[i].getNmoney());
		VO.setNaccumsettlenum(new UFDouble(0));
		VO.setNaccumsettlemny(new UFDouble(0));
		VO.setCmangid(VOs[i].getCmangid());
		VO.setCbaseid(VOs[i].getCbaseid());
		VO.setCprovidermangid(VOs[i].getCprovidermangid());
		VO.setCproviderbaseid(VOs[i].getCproviderbaseid());
		vTemp.addElement(VO);
	}
	StockVO stockVOs[] = new StockVO[vTemp.size()];
	vTemp.copyInto(stockVOs);

	//生成结算单体
	SettlebillItemVO settlebillItemVOs[] = generateSettlebillItemForSC(stockVOs);
	if (settlebillItemVOs == null || settlebillItemVOs.length == 0)
		return;

	//修改参与结算的入库单的累计结算数量/累计结算金额
	Vector v = doModificationForSC(stockVOs, settlebillItemVOs, cOperator, dCurrDate);

	SettlebillVO settlebillVO = (SettlebillVO) v.elementAt(0);
	stockVOs = (StockVO[]) v.elementAt(1);

	IIAToPUBill myService = null;
	try {
		myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
		BillVO billVOs[] = transferIADataForSC(VOs, cOperator, dCurrDate, settlebillVO);

		//对存货核算单进行处理: 相同表头的单据组合成一张单据
		//(1) 存货核算单据来源单据头ID唯一性组合
		v = new Vector();
		Vector vTemp0 = new Vector();
		vTemp0.addElement(((BillHeaderVO) billVOs[0].getParentVO()).getCbillid().trim());
		v.addElement(billVOs[0]);
		for (int i = 1; i < billVOs.length; i++) {
			String s1 = ((BillHeaderVO) billVOs[i].getParentVO()).getCbillid().trim();
			if (!vTemp0.contains(s1)) {
				vTemp0.addElement(s1);
				v.addElement(billVOs[i]);
			}
		}

		//(3) 所有存货核算单据体的来源单据头ID相同, 归为同一张存货核算单据
		Vector vv = new Vector();
		for (int i = 0; i < v.size(); i++) {
			BillVO tempVO = (BillVO) v.elementAt(i);
			String s1 = ((BillHeaderVO) tempVO.getParentVO()).getCbillid().trim();
			vTemp = new Vector();
			for (int j = 0; j < billVOs.length; j++) {
				String s2 = ((BillHeaderVO) billVOs[j].getParentVO()).getCbillid().trim();
				if (s1.equals(s2)) {
					BillItemVO tempItemVO[] = (BillItemVO[]) billVOs[j].getChildrenVO();
					for (int k = 0; k < tempItemVO.length; k++)
						vTemp.addElement(tempItemVO[k]);
				}
			}

			BillItemVO tempItemVOs[] = new BillItemVO[vTemp.size()];
			vTemp.copyInto(tempItemVOs);

			//重新设置表体行号
			for (int j = 0; j < tempItemVOs.length; j++)
				tempItemVOs[j].setIrownumber(new Integer(j));

			tempVO.setChildrenVO(tempItemVOs);
			vv.addElement(tempVO);
		}

		//(4) 整理需向存货传送的单据
		billVOs = null;
		billVOs = new BillVO[vv.size()];
		vv.copyInto(billVOs);

		//传送数据
		if (billVOs == null || billVOs.length == 0)
			return;

		String s1 = ((BillHeaderVO) billVOs[0].getParentVO()).getCsourcemodulename();
		String s2 = ((BillItemVO[]) billVOs[0].getChildrenVO())[0].getCsourcebilltypecode();
		//
		String sTime = (new UFDateTime(new Date())).toString();
		for(int i = 0; i < billVOs.length; i++){
		    ((BillHeaderVO)billVOs[i].getParentVO()).setVbillcode(null);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setTlastmaketime(sTime);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setTmaketime(sTime);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setClastoperatorid(cOperator);
		    BillItemVO bodyVO[] = (BillItemVO[]) billVOs[i].getChildrenVO();
		    if(bodyVO != null && bodyVO.length > 0){
		        for(int j = 0; j < bodyVO.length; j++) bodyVO[j].setVbillcode(null);
		    }
		}
		//

		myService.saveBillFromOutterArray(billVOs, s1, s2);

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 功能描述:暂估中，已暂估正负入库单可自动结算
 *
 * 日期:2003/05/29
 *
 * 作者：熊海情
 *
 * 修改：晁志平 For V30 增加返回值{调用者解锁用主键}
 */
private String[] settleForEstimate(
	EstimateVO VOs[],
	String cOperator,
	UFDate dCurrDate,
	String sEstMode,
	String sDifferMode)
	throws BusinessException {
	//暂估入库单VO转换为结算入库单VO
	StockVO stockVOs[] = switchStockVO(VOs);
	//查询已暂估的负入库单VO
	StockVO negStockVOs[] = queryNegStockByStock(stockVOs);
	//生成结算单体
	SettlebillItemVO settlebillItemVOs[] = generateSettlebillItem(stockVOs, negStockVOs);
	if (settlebillItemVOs == null || settlebillItemVOs.length == 0)
		return null;
	//修改参与结算的入库单的累计结算数量/累计结算金额
	Vector v = doModification(stockVOs, negStockVOs, settlebillItemVOs, cOperator, dCurrDate);
	SettlebillVO settlebillVO = (SettlebillVO) v.elementAt(0);
	stockVOs = (StockVO[]) v.elementAt(1);
	negStockVOs = (StockVO[]) v.elementAt(2);

	//对参与结算的已暂估的负入库单做加锁，在调用者解锁
	String[] saIdForLock = getStockLockKeys(negStockVOs);

	//向存货核算传送数据
	nc.bs.ps.settle.SettleImpl myService0 = null;
	try {
		boolean bLock = LockTool.setLockForPks(saIdForLock, cOperator);
		if (!bLock) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000017")/*@res "暂估自动结算用到的已结入库单正在被使用，请稍后再试!"*/);
		}
		myService0 = new nc.bs.ps.settle.SettleImpl();
		ArrayList listPara = new ArrayList();
		listPara.add(sEstMode);
		listPara.add(sDifferMode);
		listPara.add(settlebillVO);
		listPara.add(cOperator);
		listPara.add(dCurrDate);
		listPara.add(null);
		listPara.add(null);
		myService0.saveBillFromOutter1(listPara);
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return saIdForLock;
}

/**
 * 功能描述:暂估中，已暂估正负入库单可自动结算
 *
 * 日期:2003/05/29
 *
 * 作者：熊海情
 *
 * 修改：晁志平 For V30 增加返回值{调用者解锁用主键}
 */
private String[] settleForEstimate_wwyf(
	wwEstimateVO VOs[],
	String cOperator,
	UFDate dCurrDate,
	String sEstMode,
	String sDifferMode)
	throws BusinessException {
	//暂估入库单VO转换为结算入库单VO
	StockVO stockVOs[] = switchStockVO_wwyf(VOs);
	//查询已暂估的负入库单VO
	StockVO negStockVOs[] = queryNegStockByStock(stockVOs);
	//生成结算单体
	SettlebillItemVO settlebillItemVOs[] = generateSettlebillItem(stockVOs, negStockVOs);
	if (settlebillItemVOs == null || settlebillItemVOs.length == 0)
		return null;
	//修改参与结算的入库单的累计结算数量/累计结算金额
	Vector v = doModification(stockVOs, negStockVOs, settlebillItemVOs, cOperator, dCurrDate);
	SettlebillVO settlebillVO = (SettlebillVO) v.elementAt(0);
	stockVOs = (StockVO[]) v.elementAt(1);
	negStockVOs = (StockVO[]) v.elementAt(2);

	//对参与结算的已暂估的负入库单做加锁，在调用者解锁
	String[] saIdForLock = getStockLockKeys(negStockVOs);

	//向存货核算传送数据
	nc.bs.ps.settle.SettleImpl myService0 = null;
	try {
		boolean bLock = LockTool.setLockForPks(saIdForLock, cOperator);
		if (!bLock) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000017")/*@res "暂估自动结算用到的已结入库单正在被使用，请稍后再试!"*/);
		}
		myService0 = new nc.bs.ps.settle.SettleImpl();
		ArrayList listPara = new ArrayList();
		listPara.add(sEstMode);
		listPara.add(sDifferMode);
		listPara.add(settlebillVO);
		listPara.add(cOperator);
		listPara.add(dCurrDate);
		listPara.add(null);
		listPara.add(null);
		myService0.saveBillFromOutter1(listPara);
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return saIdForLock;
}


/**
 * 此处插入方法说明。
 * 功能描述:暂估入库单VO转换为结算入库单VO
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2003/05/29
 * @return nc.vo.ps.settle.StockVO[]
 * @param VO nc.vo.ps.estimate.EstimateVO[]
 */
private StockVO[] switchStockVO(EstimateVO[] VO) {
	Vector v = new Vector();

	for(int i = 0; i < VO.length; i++){
		StockVO vo = new StockVO();
		vo.setCdeptid(null);
		vo.setCoperatorid(null);
		vo.setCprovidermangid(VO[i].getCprovidermangid());
		vo.setCproviderbaseid(VO[i].getCproviderbaseid());
		vo.setPk_corp(VO[i].getPk_corp());
		vo.setVbillcode(VO[i].getVbillcode());
		vo.setCgeneralhid(VO[i].getCgeneralhid());
		vo.setCgeneralbid(VO[i].getCgeneralbid());
		vo.setCgeneralbb3(VO[i].getCgeneralbb3());
		vo.setCmangid(VO[i].getCmangid());
		vo.setCbaseid(VO[i].getCbaseid());

		//数量：入库数量
		vo.setNinnum(VO[i].getNinnum());
		//单价：暂估单价
		vo.setNprice(VO[i].getNprice());
		//金额：暂估金额
		vo.setNmoney(VO[i].getNmoney());
		//累计结算数量
		vo.setNaccumsettlenum(VO[i].getNsettlenum());
		//累计结算金额
		vo.setNaccumsettlemny(VO[i].getNsettlemny());

		//未结算数量
		UFDouble d1 = vo.getNinnum();
		UFDouble d2 = vo.getNaccumsettlenum();
		if(d1 == null) d1 = new UFDouble(0);
		if(d2 == null) d2 = new UFDouble(0);
		double d = d1.doubleValue() - d2.doubleValue();
		vo.setNnosettlenum(new UFDouble(d));
		//未结算金额
		d1 = vo.getNmoney();
		d2 = vo.getNaccumsettlemny();
		if(d1 == null) d1 = new UFDouble(0);
		if(d2 == null) d2 = new UFDouble(0);
		d = d1.doubleValue() - d2.doubleValue();
		vo.setNnosettlemny(new UFDouble(d));

		//来源信息
		vo.setCsourcebillhid(VO[i].getCsourcebillhid());
		vo.setCsourcebillbid(VO[i].getCsourcebillbid());
		vo.setVsourcebillcode(null);
		//源头信息
		vo.setCfirstbillhid(VO[i].getCfirstbillhid());
		vo.setCfirstbillbid(VO[i].getCfirstbillbid());
		
		vo.setVuserdefh1(VO[i].getVuserdefh1());
		vo.setVuserdefh2(VO[i].getVuserdefh2());
		vo.setVuserdefh3(VO[i].getVuserdefh3());
		vo.setVuserdefh4(VO[i].getVuserdefh4());
		vo.setVuserdefh5(VO[i].getVuserdefh5());
		vo.setVuserdefh6(VO[i].getVuserdefh6());
		vo.setVuserdefh7(VO[i].getVuserdefh7());
		vo.setVuserdefh8(VO[i].getVuserdefh8());
		vo.setVuserdefh9(VO[i].getVuserdefh9());
		vo.setVuserdefh10(VO[i].getVuserdefh10());

		vo.setVuserdefh11(VO[i].getVuserdefh11());
		vo.setVuserdefh12(VO[i].getVuserdefh12());
		vo.setVuserdefh13(VO[i].getVuserdefh13());
		vo.setVuserdefh14(VO[i].getVuserdefh14());
		vo.setVuserdefh15(VO[i].getVuserdefh15());
		vo.setVuserdefh16(VO[i].getVuserdefh16());
		vo.setVuserdefh17(VO[i].getVuserdefh17());
		vo.setVuserdefh18(VO[i].getVuserdefh18());
		vo.setVuserdefh19(VO[i].getVuserdefh19());
		vo.setVuserdefh20(VO[i].getVuserdefh20());
		
		vo.setPk_defdoch1(VO[i].getPk_defdoch1());
		vo.setPk_defdoch2(VO[i].getPk_defdoch2());
		vo.setPk_defdoch3(VO[i].getPk_defdoch3());
		vo.setPk_defdoch4(VO[i].getPk_defdoch4());
		vo.setPk_defdoch5(VO[i].getPk_defdoch5());
		vo.setPk_defdoch6(VO[i].getPk_defdoch6());
		vo.setPk_defdoch7(VO[i].getPk_defdoch7());
		vo.setPk_defdoch8(VO[i].getPk_defdoch8());
		vo.setPk_defdoch9(VO[i].getPk_defdoch9());
		vo.setPk_defdoch10(VO[i].getPk_defdoch10());

		vo.setPk_defdoch11(VO[i].getPk_defdoch11());
		vo.setPk_defdoch12(VO[i].getPk_defdoch12());
		vo.setPk_defdoch13(VO[i].getPk_defdoch13());
		vo.setPk_defdoch14(VO[i].getPk_defdoch14());
		vo.setPk_defdoch15(VO[i].getPk_defdoch15());
		vo.setPk_defdoch16(VO[i].getPk_defdoch16());
		vo.setPk_defdoch17(VO[i].getPk_defdoch17());
		vo.setPk_defdoch18(VO[i].getPk_defdoch18());
		vo.setPk_defdoch19(VO[i].getPk_defdoch19());
		vo.setPk_defdoch20(VO[i].getPk_defdoch20());

		vo.setVuserdefb1(VO[i].getVuserdef1());
		vo.setVuserdefb2(VO[i].getVuserdef2());
		vo.setVuserdefb3(VO[i].getVuserdef3());
		vo.setVuserdefb4(VO[i].getVuserdef4());
		vo.setVuserdefb5(VO[i].getVuserdef5());
		vo.setVuserdefb6(VO[i].getVuserdef6());
		vo.setVuserdefb7(VO[i].getVuserdef7());
		vo.setVuserdefb8(VO[i].getVuserdef8());
		vo.setVuserdefb9(VO[i].getVuserdef9());
		vo.setVuserdefb10(VO[i].getVuserdef10());

		vo.setVuserdefb11(VO[i].getVuserdef11());
		vo.setVuserdefb12(VO[i].getVuserdef12());
		vo.setVuserdefb13(VO[i].getVuserdef13());
		vo.setVuserdefb14(VO[i].getVuserdef14());
		vo.setVuserdefb15(VO[i].getVuserdef15());
		vo.setVuserdefb16(VO[i].getVuserdef16());
		vo.setVuserdefb17(VO[i].getVuserdef17());
		vo.setVuserdefb18(VO[i].getVuserdef18());
		vo.setVuserdefb19(VO[i].getVuserdef19());
		vo.setVuserdefb20(VO[i].getVuserdef20());

		vo.setPk_defdocb1(VO[i].getPk_defdocb1());
		vo.setPk_defdocb2(VO[i].getPk_defdocb2());
		vo.setPk_defdocb3(VO[i].getPk_defdocb3());
		vo.setPk_defdocb4(VO[i].getPk_defdocb4());
		vo.setPk_defdocb5(VO[i].getPk_defdocb5());
		vo.setPk_defdocb6(VO[i].getPk_defdocb6());
		vo.setPk_defdocb7(VO[i].getPk_defdocb7());
		vo.setPk_defdocb8(VO[i].getPk_defdocb8());
		vo.setPk_defdocb9(VO[i].getPk_defdocb9());
		vo.setPk_defdocb10(VO[i].getPk_defdocb10());

		vo.setPk_defdocb11(VO[i].getPk_defdocb11());
		vo.setPk_defdocb12(VO[i].getPk_defdocb12());
		vo.setPk_defdocb13(VO[i].getPk_defdocb13());
		vo.setPk_defdocb14(VO[i].getPk_defdocb14());
		vo.setPk_defdocb15(VO[i].getPk_defdocb15());
		vo.setPk_defdocb16(VO[i].getPk_defdocb16());
		vo.setPk_defdocb17(VO[i].getPk_defdocb17());
		vo.setPk_defdocb18(VO[i].getPk_defdocb18());
		vo.setPk_defdocb19(VO[i].getPk_defdocb19());
		vo.setPk_defdocb20(VO[i].getPk_defdocb20());
		
		if(vo.getCsourcebillhid() != null && vo.getCsourcebillhid().trim().length() > 0
				&& (VO[i].getBzgyf() == null || !VO[i].getBzgyf().booleanValue())) v.addElement(vo);
	}

	if(v.size() > 0){
		StockVO VOs[] = new StockVO[v.size()];
		v.copyInto(VOs);
		return VOs;
	}

	return null;
}

/**
 * 此处插入方法说明。
 * 功能描述:暂估入库单VO转换为结算入库单VO
 * 输入参数:
 * 返回值:
 * 异常处理:
 * 日期:2003/05/29
 * @return nc.vo.ps.settle.StockVO[]
 * @param VO nc.vo.ps.estimate.EstimateVO[]
 */
private StockVO[] switchStockVO_wwyf(wwEstimateVO[] VO) {
	Vector v = new Vector();

	for(int i = 0; i < VO.length; i++){
		StockVO vo = new StockVO();
		vo.setCdeptid(null);
		vo.setCoperatorid(null);
		vo.setCprovidermangid(VO[i].getCprovidermangid());
		vo.setCproviderbaseid(VO[i].getCproviderbaseid());
		vo.setPk_corp(VO[i].getPk_corp());
		vo.setVbillcode(VO[i].getVbillcode());
		vo.setCgeneralhid(VO[i].getCgeneralhid());
		vo.setCgeneralbid(VO[i].getCgeneralbid());
		vo.setCgeneralbb3(VO[i].getCgeneralbb3());
		vo.setCmangid(VO[i].getCmangid());
		vo.setCbaseid(VO[i].getCbaseid());

		//数量：入库数量
		vo.setNinnum(VO[i].getNinnum());
		//单价：暂估单价
		vo.setNprice(VO[i].getNprice());
		//金额：暂估金额
		vo.setNmoney(VO[i].getNmoney());
		//累计结算数量
		vo.setNaccumsettlenum(VO[i].getNsettlenum());
		//累计结算金额
		vo.setNaccumsettlemny(VO[i].getNsettlemny());

		//未结算数量
		UFDouble d1 = vo.getNinnum();
		UFDouble d2 = vo.getNaccumsettlenum();
		if(d1 == null) d1 = new UFDouble(0);
		if(d2 == null) d2 = new UFDouble(0);
		double d = d1.doubleValue() - d2.doubleValue();
		vo.setNnosettlenum(new UFDouble(d));
		//未结算金额
		d1 = vo.getNmoney();
		d2 = vo.getNaccumsettlemny();
		if(d1 == null) d1 = new UFDouble(0);
		if(d2 == null) d2 = new UFDouble(0);
		d = d1.doubleValue() - d2.doubleValue();
		vo.setNnosettlemny(new UFDouble(d));

		//来源信息
		vo.setCsourcebillhid(VO[i].getCsourcebillhid());
		vo.setCsourcebillbid(VO[i].getCsourcebillbid());
		vo.setVsourcebillcode(null);
		//源头信息
		vo.setCfirstbillhid(VO[i].getCfirstbillhid());
		vo.setCfirstbillbid(VO[i].getCfirstbillbid());
		
		vo.setVuserdefh1(VO[i].getVuserdefh1());
		vo.setVuserdefh2(VO[i].getVuserdefh2());
		vo.setVuserdefh3(VO[i].getVuserdefh3());
		vo.setVuserdefh4(VO[i].getVuserdefh4());
		vo.setVuserdefh5(VO[i].getVuserdefh5());
		vo.setVuserdefh6(VO[i].getVuserdefh6());
		vo.setVuserdefh7(VO[i].getVuserdefh7());
		vo.setVuserdefh8(VO[i].getVuserdefh8());
		vo.setVuserdefh9(VO[i].getVuserdefh9());
		vo.setVuserdefh10(VO[i].getVuserdefh10());

		vo.setVuserdefh11(VO[i].getVuserdefh11());
		vo.setVuserdefh12(VO[i].getVuserdefh12());
		vo.setVuserdefh13(VO[i].getVuserdefh13());
		vo.setVuserdefh14(VO[i].getVuserdefh14());
		vo.setVuserdefh15(VO[i].getVuserdefh15());
		vo.setVuserdefh16(VO[i].getVuserdefh16());
		vo.setVuserdefh17(VO[i].getVuserdefh17());
		vo.setVuserdefh18(VO[i].getVuserdefh18());
		vo.setVuserdefh19(VO[i].getVuserdefh19());
		vo.setVuserdefh20(VO[i].getVuserdefh20());
		
		vo.setPk_defdoch1(VO[i].getPk_defdoch1());
		vo.setPk_defdoch2(VO[i].getPk_defdoch2());
		vo.setPk_defdoch3(VO[i].getPk_defdoch3());
		vo.setPk_defdoch4(VO[i].getPk_defdoch4());
		vo.setPk_defdoch5(VO[i].getPk_defdoch5());
		vo.setPk_defdoch6(VO[i].getPk_defdoch6());
		vo.setPk_defdoch7(VO[i].getPk_defdoch7());
		vo.setPk_defdoch8(VO[i].getPk_defdoch8());
		vo.setPk_defdoch9(VO[i].getPk_defdoch9());
		vo.setPk_defdoch10(VO[i].getPk_defdoch10());

		vo.setPk_defdoch11(VO[i].getPk_defdoch11());
		vo.setPk_defdoch12(VO[i].getPk_defdoch12());
		vo.setPk_defdoch13(VO[i].getPk_defdoch13());
		vo.setPk_defdoch14(VO[i].getPk_defdoch14());
		vo.setPk_defdoch15(VO[i].getPk_defdoch15());
		vo.setPk_defdoch16(VO[i].getPk_defdoch16());
		vo.setPk_defdoch17(VO[i].getPk_defdoch17());
		vo.setPk_defdoch18(VO[i].getPk_defdoch18());
		vo.setPk_defdoch19(VO[i].getPk_defdoch19());
		vo.setPk_defdoch20(VO[i].getPk_defdoch20());

		vo.setVuserdefb1(VO[i].getVuserdef1());
		vo.setVuserdefb2(VO[i].getVuserdef2());
		vo.setVuserdefb3(VO[i].getVuserdef3());
		vo.setVuserdefb4(VO[i].getVuserdef4());
		vo.setVuserdefb5(VO[i].getVuserdef5());
		vo.setVuserdefb6(VO[i].getVuserdef6());
		vo.setVuserdefb7(VO[i].getVuserdef7());
		vo.setVuserdefb8(VO[i].getVuserdef8());
		vo.setVuserdefb9(VO[i].getVuserdef9());
		vo.setVuserdefb10(VO[i].getVuserdef10());

		vo.setVuserdefb11(VO[i].getVuserdef11());
		vo.setVuserdefb12(VO[i].getVuserdef12());
		vo.setVuserdefb13(VO[i].getVuserdef13());
		vo.setVuserdefb14(VO[i].getVuserdef14());
		vo.setVuserdefb15(VO[i].getVuserdef15());
		vo.setVuserdefb16(VO[i].getVuserdef16());
		vo.setVuserdefb17(VO[i].getVuserdef17());
		vo.setVuserdefb18(VO[i].getVuserdef18());
		vo.setVuserdefb19(VO[i].getVuserdef19());
		vo.setVuserdefb20(VO[i].getVuserdef20());

		vo.setPk_defdocb1(VO[i].getPk_defdocb1());
		vo.setPk_defdocb2(VO[i].getPk_defdocb2());
		vo.setPk_defdocb3(VO[i].getPk_defdocb3());
		vo.setPk_defdocb4(VO[i].getPk_defdocb4());
		vo.setPk_defdocb5(VO[i].getPk_defdocb5());
		vo.setPk_defdocb6(VO[i].getPk_defdocb6());
		vo.setPk_defdocb7(VO[i].getPk_defdocb7());
		vo.setPk_defdocb8(VO[i].getPk_defdocb8());
		vo.setPk_defdocb9(VO[i].getPk_defdocb9());
		vo.setPk_defdocb10(VO[i].getPk_defdocb10());

		vo.setPk_defdocb11(VO[i].getPk_defdocb11());
		vo.setPk_defdocb12(VO[i].getPk_defdocb12());
		vo.setPk_defdocb13(VO[i].getPk_defdocb13());
		vo.setPk_defdocb14(VO[i].getPk_defdocb14());
		vo.setPk_defdocb15(VO[i].getPk_defdocb15());
		vo.setPk_defdocb16(VO[i].getPk_defdocb16());
		vo.setPk_defdocb17(VO[i].getPk_defdocb17());
		vo.setPk_defdocb18(VO[i].getPk_defdocb18());
		vo.setPk_defdocb19(VO[i].getPk_defdocb19());
		vo.setPk_defdocb20(VO[i].getPk_defdocb20());
		
		if(vo.getCsourcebillhid() != null && vo.getCsourcebillhid().trim().length() > 0
				&& (VO[i].getBzgyf() == null || !VO[i].getBzgyf().booleanValue())) v.addElement(vo);
	}

	if(v.size() > 0){
		StockVO VOs[] = new StockVO[v.size()];
		v.copyInto(VOs);
		return VOs;
	}

	return null;
}


/*
 * 暂估VO转换为库存入库单VO,服务于暂估VO对照
 * 2007-03-19 xhq
 */
private GeneralBillVO switchVOFromEstimate2IC(EstimateVO estVO){
  GeneralBillItemVO bodyVO = new GeneralBillItemVO();
  
  bodyVO.setCgeneralbid(estVO.getCgeneralbid());
  bodyVO.setCgeneralhid(estVO.getCgeneralhid());

  bodyVO.setCinventoryid(estVO.getCmangid());
  bodyVO.setVbatchcode(estVO.getVbatchcode());
  bodyVO.setNinnum(estVO.getNinnum());  
  bodyVO.setNmny(estVO.getNmoney());
  bodyVO.setNprice(estVO.getNprice());

  bodyVO.setCaccountunitid(estVO.getCastunitid());
  bodyVO.setHsl(estVO.getHsl());
  bodyVO.setNinassistnum(estVO.getNinassistnum());
  
  bodyVO.setCfirstbillhid(estVO.getCfirstbillhid());
  bodyVO.setCfirstbillbid(estVO.getCfirstbillbid());
  bodyVO.setCfirsttype(estVO.getCfirsttype());

  bodyVO.setVfree1(estVO.getVfree1());
  bodyVO.setVfree2(estVO.getVfree2());
  bodyVO.setVfree3(estVO.getVfree3());
  bodyVO.setVfree4(estVO.getVfree4());
  bodyVO.setVfree5(estVO.getVfree5());

  bodyVO.setCprojectid(estVO.getCprojectid());
  bodyVO.setCprojectphaseid(estVO.getCprojectphaseid());

  bodyVO.setVuserdef1(estVO.getVuserdef1());
  bodyVO.setVuserdef2(estVO.getVuserdef2());
  bodyVO.setVuserdef3(estVO.getVuserdef3());
  bodyVO.setVuserdef4(estVO.getVuserdef4());
  bodyVO.setVuserdef5(estVO.getVuserdef5());
  bodyVO.setVuserdef6(estVO.getVuserdef6());
  bodyVO.setVuserdef7(estVO.getVuserdef7());
  bodyVO.setVuserdef8(estVO.getVuserdef8());
  bodyVO.setVuserdef9(estVO.getVuserdef9());
  bodyVO.setVuserdef10(estVO.getVuserdef10());
    
  bodyVO.setAttributeValue("vuserdef11", estVO.getVuserdef11());
  bodyVO.setAttributeValue("vuserdef12", estVO.getVuserdef12());
  bodyVO.setAttributeValue("vuserdef13", estVO.getVuserdef13());
  bodyVO.setAttributeValue("vuserdef14", estVO.getVuserdef14());
  bodyVO.setAttributeValue("vuserdef15", estVO.getVuserdef15());
  bodyVO.setAttributeValue("vuserdef16", estVO.getVuserdef16());
  bodyVO.setAttributeValue("vuserdef17", estVO.getVuserdef17());
  bodyVO.setAttributeValue("vuserdef18", estVO.getVuserdef18());
  bodyVO.setAttributeValue("vuserdef19", estVO.getVuserdef19());
  bodyVO.setAttributeValue("vuserdef20", estVO.getVuserdef20());
    
  bodyVO.setAttributeValue("pk_defdoc1", estVO.getPk_defdocb1());
  bodyVO.setAttributeValue("pk_defdoc2", estVO.getPk_defdocb2());
  bodyVO.setAttributeValue("pk_defdoc3", estVO.getPk_defdocb3());
  bodyVO.setAttributeValue("pk_defdoc4", estVO.getPk_defdocb4());
  bodyVO.setAttributeValue("pk_defdoc5", estVO.getPk_defdocb5());
  bodyVO.setAttributeValue("pk_defdoc6", estVO.getPk_defdocb6());
  bodyVO.setAttributeValue("pk_defdoc7", estVO.getPk_defdocb7());
  bodyVO.setAttributeValue("pk_defdoc8", estVO.getPk_defdocb8());
  bodyVO.setAttributeValue("pk_defdoc9", estVO.getPk_defdocb9());
  bodyVO.setAttributeValue("pk_defdoc10", estVO.getPk_defdocb10());

  bodyVO.setAttributeValue("pk_defdoc11", estVO.getPk_defdocb11());
  bodyVO.setAttributeValue("pk_defdoc12", estVO.getPk_defdocb12());
  bodyVO.setAttributeValue("pk_defdoc13", estVO.getPk_defdocb13());
  bodyVO.setAttributeValue("pk_defdoc14", estVO.getPk_defdocb14());
  bodyVO.setAttributeValue("pk_defdoc15", estVO.getPk_defdocb15());
  bodyVO.setAttributeValue("pk_defdoc16", estVO.getPk_defdocb16());
  bodyVO.setAttributeValue("pk_defdoc17", estVO.getPk_defdocb17());
  bodyVO.setAttributeValue("pk_defdoc18", estVO.getPk_defdocb18());
  bodyVO.setAttributeValue("pk_defdoc19", estVO.getPk_defdocb19());
  bodyVO.setAttributeValue("pk_defdoc20", estVO.getPk_defdocb20());
    
  bodyVO.setDbizdate(estVO.getDbizdate());
  bodyVO.setCvendorid(estVO.getCvendorid());

  GeneralBillHeaderVO headVO = new GeneralBillHeaderVO();
  headVO.setPk_corp(estVO.getPk_corp());
  headVO.setCbilltypecode(estVO.getCbilltypecode());
  headVO.setCgeneralhid(estVO.getCgeneralhid());

  headVO.setCdispatcherid(estVO.getCdispatcherid());

  headVO.setCbiztypeid(estVO.getCbiztype());
  headVO.setPk_calbody(estVO.getCcalbodyid());
  headVO.setCwarehouseid(estVO.getCwarehouseid());

  headVO.setCdptid(estVO.getCdptid());
  headVO.setCproviderid(estVO.getCprovidermangid());

  headVO.setVnote(estVO.getVnote());
  headVO.setCwhsmanagerid(estVO.getCwhsmanagerid());
  headVO.setCbizid(estVO.getCoperatorid());

  headVO.setVbillcode(estVO.getVbillcode());
  headVO.setIscalculatedinvcost(estVO.getBcalculatecost());

  headVO.setVuserdef1(estVO.getVuserdefh1());
  headVO.setVuserdef2(estVO.getVuserdefh2());
  headVO.setVuserdef3(estVO.getVuserdefh3());
  headVO.setVuserdef4(estVO.getVuserdefh4());
  headVO.setVuserdef5(estVO.getVuserdefh5());
  headVO.setVuserdef6(estVO.getVuserdefh6());
  headVO.setVuserdef7(estVO.getVuserdefh7());
  headVO.setVuserdef8(estVO.getVuserdefh8());
  headVO.setVuserdef9(estVO.getVuserdefh9());
  headVO.setVuserdef10(estVO.getVuserdefh10());
    
  headVO.setAttributeValue("vuserdef11", estVO.getVuserdefh11());
  headVO.setAttributeValue("vuserdef12", estVO.getVuserdefh12());
  headVO.setAttributeValue("vuserdef13", estVO.getVuserdefh13());
  headVO.setAttributeValue("vuserdef14", estVO.getVuserdefh14());
  headVO.setAttributeValue("vuserdef15", estVO.getVuserdefh15());
  headVO.setAttributeValue("vuserdef16", estVO.getVuserdefh16());
  headVO.setAttributeValue("vuserdef17", estVO.getVuserdefh17());
  headVO.setAttributeValue("vuserdef18", estVO.getVuserdefh18());
  headVO.setAttributeValue("vuserdef19", estVO.getVuserdefh19());
  headVO.setAttributeValue("vuserdef20", estVO.getVuserdefh20());
    
  headVO.setAttributeValue("pk_defdoc1", estVO.getPk_defdoch1());
  headVO.setAttributeValue("pk_defdoc2", estVO.getPk_defdoch2());
  headVO.setAttributeValue("pk_defdoc3", estVO.getPk_defdoch3());
  headVO.setAttributeValue("pk_defdoc4", estVO.getPk_defdoch4());
  headVO.setAttributeValue("pk_defdoc5", estVO.getPk_defdoch5());
  headVO.setAttributeValue("pk_defdoc6", estVO.getPk_defdoch6());
  headVO.setAttributeValue("pk_defdoc7", estVO.getPk_defdoch7());
  headVO.setAttributeValue("pk_defdoc8", estVO.getPk_defdoch8());
  headVO.setAttributeValue("pk_defdoc9", estVO.getPk_defdoch9());
  headVO.setAttributeValue("pk_defdoc10", estVO.getPk_defdoch10());

  headVO.setAttributeValue("pk_defdoc11", estVO.getPk_defdoch11());
  headVO.setAttributeValue("pk_defdoc12", estVO.getPk_defdoch12());
  headVO.setAttributeValue("pk_defdoc13", estVO.getPk_defdoch13());
  headVO.setAttributeValue("pk_defdoc14", estVO.getPk_defdoch14());
  headVO.setAttributeValue("pk_defdoc15", estVO.getPk_defdoch15());
  headVO.setAttributeValue("pk_defdoc16", estVO.getPk_defdoch16());
  headVO.setAttributeValue("pk_defdoc17", estVO.getPk_defdoch17());
  headVO.setAttributeValue("pk_defdoc18", estVO.getPk_defdoch18());
  headVO.setAttributeValue("pk_defdoc19", estVO.getPk_defdoch19());
  headVO.setAttributeValue("pk_defdoc20", estVO.getPk_defdoch20());

  GeneralBillVO VO = new GeneralBillVO(1);
  VO.setParentVO(headVO);
  VO.setChildrenVO(new GeneralBillItemVO[]{bodyVO});
  return VO;  
}


/*
 * 暂估VO转换为库存入库单VO,服务于暂估VO对照
 * 2007-03-19 xhq
 */
private GeneralBillVO switchVOFromEstimate2IC_wwyf(wwEstimateVO estVO){
	
  GeneralBillItemVO bodyVO = new GeneralBillItemVO();
  bodyVO.setCgeneralbid(estVO.getCgeneralbid());
  bodyVO.setCgeneralhid(estVO.getCgeneralhid());

  bodyVO.setCinventoryid(estVO.getCmangid());
  bodyVO.setVbatchcode(estVO.getVbatchcode());
  bodyVO.setNinnum(estVO.getNinnum());  
  bodyVO.setNmny(estVO.getNmoney());
  bodyVO.setNprice(estVO.getNprice());

  bodyVO.setCaccountunitid(estVO.getCastunitid());
  bodyVO.setHsl(estVO.getHsl());
  bodyVO.setNinassistnum(estVO.getNinassistnum());
  
  bodyVO.setCfirstbillhid(estVO.getCfirstbillhid());
  bodyVO.setCfirstbillbid(estVO.getCfirstbillbid());
  bodyVO.setCfirsttype(estVO.getCfirsttype());

  bodyVO.setVfree1(estVO.getVfree1());
  bodyVO.setVfree2(estVO.getVfree2());
  bodyVO.setVfree3(estVO.getVfree3());
  bodyVO.setVfree4(estVO.getVfree4());
  bodyVO.setVfree5(estVO.getVfree5());

  bodyVO.setCprojectid(estVO.getCprojectid());
  bodyVO.setCprojectphaseid(estVO.getCprojectphaseid());

  bodyVO.setVuserdef1(estVO.getVuserdef1());
  bodyVO.setVuserdef2(estVO.getVuserdef2());
  bodyVO.setVuserdef3(estVO.getVuserdef3());
  bodyVO.setVuserdef4(estVO.getVuserdef4());
  bodyVO.setVuserdef5(estVO.getVuserdef5());
  bodyVO.setVuserdef6(estVO.getVuserdef6());
  bodyVO.setVuserdef7(estVO.getVuserdef7());
  bodyVO.setVuserdef8(estVO.getVuserdef8());
  bodyVO.setVuserdef9(estVO.getVuserdef9());
  bodyVO.setVuserdef10(estVO.getVuserdef10());
    
  bodyVO.setAttributeValue("vuserdef11", estVO.getVuserdef11());
  bodyVO.setAttributeValue("vuserdef12", estVO.getVuserdef12());
  bodyVO.setAttributeValue("vuserdef13", estVO.getVuserdef13());
  bodyVO.setAttributeValue("vuserdef14", estVO.getVuserdef14());
  bodyVO.setAttributeValue("vuserdef15", estVO.getVuserdef15());
  bodyVO.setAttributeValue("vuserdef16", estVO.getVuserdef16());
  bodyVO.setAttributeValue("vuserdef17", estVO.getVuserdef17());
  bodyVO.setAttributeValue("vuserdef18", estVO.getVuserdef18());
  bodyVO.setAttributeValue("vuserdef19", estVO.getVuserdef19());
  bodyVO.setAttributeValue("vuserdef20", estVO.getVuserdef20());
    
  bodyVO.setAttributeValue("pk_defdoc1", estVO.getPk_defdocb1());
  bodyVO.setAttributeValue("pk_defdoc2", estVO.getPk_defdocb2());
  bodyVO.setAttributeValue("pk_defdoc3", estVO.getPk_defdocb3());
  bodyVO.setAttributeValue("pk_defdoc4", estVO.getPk_defdocb4());
  bodyVO.setAttributeValue("pk_defdoc5", estVO.getPk_defdocb5());
  bodyVO.setAttributeValue("pk_defdoc6", estVO.getPk_defdocb6());
  bodyVO.setAttributeValue("pk_defdoc7", estVO.getPk_defdocb7());
  bodyVO.setAttributeValue("pk_defdoc8", estVO.getPk_defdocb8());
  bodyVO.setAttributeValue("pk_defdoc9", estVO.getPk_defdocb9());
  bodyVO.setAttributeValue("pk_defdoc10", estVO.getPk_defdocb10());

  bodyVO.setAttributeValue("pk_defdoc11", estVO.getPk_defdocb11());
  bodyVO.setAttributeValue("pk_defdoc12", estVO.getPk_defdocb12());
  bodyVO.setAttributeValue("pk_defdoc13", estVO.getPk_defdocb13());
  bodyVO.setAttributeValue("pk_defdoc14", estVO.getPk_defdocb14());
  bodyVO.setAttributeValue("pk_defdoc15", estVO.getPk_defdocb15());
  bodyVO.setAttributeValue("pk_defdoc16", estVO.getPk_defdocb16());
  bodyVO.setAttributeValue("pk_defdoc17", estVO.getPk_defdocb17());
  bodyVO.setAttributeValue("pk_defdoc18", estVO.getPk_defdocb18());
  bodyVO.setAttributeValue("pk_defdoc19", estVO.getPk_defdocb19());
  bodyVO.setAttributeValue("pk_defdoc20", estVO.getPk_defdocb20());
    
  bodyVO.setDbizdate(estVO.getDbizdate());
  bodyVO.setCvendorid(estVO.getCvendorid());

  GeneralBillHeaderVO headVO = new GeneralBillHeaderVO();
  headVO.setPk_corp(estVO.getPk_corp());
  headVO.setCbilltypecode(estVO.getCbilltypecode());
  headVO.setCgeneralhid(estVO.getCgeneralhid());

  headVO.setCdispatcherid(estVO.getCdispatcherid());
  headVO.setCbiztypeid(estVO.getCbiztype());
  headVO.setPk_calbody(estVO.getCcalbodyid());
  headVO.setCwarehouseid(estVO.getCwarehouseid());

  headVO.setCdptid(estVO.getCdptid());
  headVO.setCproviderid(estVO.getCprovidermangid());

  headVO.setVnote(estVO.getVnote());
  headVO.setCwhsmanagerid(estVO.getCwhsmanagerid());
  headVO.setCbizid(estVO.getCoperatorid());

  headVO.setVbillcode(estVO.getVbillcode());
  headVO.setIscalculatedinvcost(estVO.getBcalculatecost());

  headVO.setVuserdef1(estVO.getVuserdefh1());
  headVO.setVuserdef2(estVO.getVuserdefh2());
  headVO.setVuserdef3(estVO.getVuserdefh3());
  headVO.setVuserdef4(estVO.getVuserdefh4());
  headVO.setVuserdef5(estVO.getVuserdefh5());
  headVO.setVuserdef6(estVO.getVuserdefh6());
  headVO.setVuserdef7(estVO.getVuserdefh7());
  headVO.setVuserdef8(estVO.getVuserdefh8());
  headVO.setVuserdef9(estVO.getVuserdefh9());
  headVO.setVuserdef10(estVO.getVuserdefh10());
    
  headVO.setAttributeValue("vuserdef11", estVO.getVuserdefh11());
  headVO.setAttributeValue("vuserdef12", estVO.getVuserdefh12());
  headVO.setAttributeValue("vuserdef13", estVO.getVuserdefh13());
  headVO.setAttributeValue("vuserdef14", estVO.getVuserdefh14());
  headVO.setAttributeValue("vuserdef15", estVO.getVuserdefh15());
  headVO.setAttributeValue("vuserdef16", estVO.getVuserdefh16());
  headVO.setAttributeValue("vuserdef17", estVO.getVuserdefh17());
  headVO.setAttributeValue("vuserdef18", estVO.getVuserdefh18());
  headVO.setAttributeValue("vuserdef19", estVO.getVuserdefh19());
  headVO.setAttributeValue("vuserdef20", estVO.getVuserdefh20());
    
  headVO.setAttributeValue("pk_defdoc1", estVO.getPk_defdoch1());
  headVO.setAttributeValue("pk_defdoc2", estVO.getPk_defdoch2());
  headVO.setAttributeValue("pk_defdoc3", estVO.getPk_defdoch3());
  headVO.setAttributeValue("pk_defdoc4", estVO.getPk_defdoch4());
  headVO.setAttributeValue("pk_defdoc5", estVO.getPk_defdoch5());
  headVO.setAttributeValue("pk_defdoc6", estVO.getPk_defdoch6());
  headVO.setAttributeValue("pk_defdoc7", estVO.getPk_defdoch7());
  headVO.setAttributeValue("pk_defdoc8", estVO.getPk_defdoch8());
  headVO.setAttributeValue("pk_defdoc9", estVO.getPk_defdoch9());
  headVO.setAttributeValue("pk_defdoc10", estVO.getPk_defdoch10());

  headVO.setAttributeValue("pk_defdoc11", estVO.getPk_defdoch11());
  headVO.setAttributeValue("pk_defdoc12", estVO.getPk_defdoch12());
  headVO.setAttributeValue("pk_defdoc13", estVO.getPk_defdoch13());
  headVO.setAttributeValue("pk_defdoc14", estVO.getPk_defdoch14());
  headVO.setAttributeValue("pk_defdoc15", estVO.getPk_defdoch15());
  headVO.setAttributeValue("pk_defdoc16", estVO.getPk_defdoch16());
  headVO.setAttributeValue("pk_defdoc17", estVO.getPk_defdoch17());
  headVO.setAttributeValue("pk_defdoc18", estVO.getPk_defdoch18());
  headVO.setAttributeValue("pk_defdoc19", estVO.getPk_defdoch19());
  headVO.setAttributeValue("pk_defdoc20", estVO.getPk_defdoch20());

  GeneralBillVO VO = new GeneralBillVO(1);
  VO.setParentVO(headVO);
  VO.setChildrenVO(new GeneralBillItemVO[]{bodyVO});
  return VO;  
}
/**
 * 功能:依据暂估方式不同,向存货核算系统传递数据;单到回冲,传送暂估入库单;单到补差,传送采购入库单(成批单据传送)
 * 输入:暂估VO[],当前操作员,当前日期
 * 返回:BillVO[]
 * 异常:javax.naming.NamingException, java.rmi.RemoteException, java.sql.SQLException
 * 作者:熊海情
 * 修改:晁志平 FOR V30 删除查询入库单表头表体操作，表头表体对照信息由调用者参数传入
 */
private BillVO[] transferIAData(EstimateVO[] VOs, String cOperator, UFDate dCurrDate)
	throws BusinessException {
	nc.bs.pu.pub.PubImpl myPubService = null;
	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("传入参数为空，直接返回NULL；调用堆栈如下：");
		SCMEnv.out(new Exception());
		return null;
	}
	BillVO billVO[] = null;
	try {
		//获取本位币精度
		myPubService = new nc.bs.pu.pub.PubImpl();
		int nMnyDecimal[] = myPubService.getDigitBatch(VOs[0].getPk_corp(), new String[] { "BD301" });
		if (nMnyDecimal == null || nMnyDecimal.length == 0) {
			nMnyDecimal = new int[1];
			nMnyDecimal[0] = 2;
		}

    //VO转换
    GeneralBillVO icVOs[] = new GeneralBillVO[VOs.length];
    for(int i = 0; i < VOs.length; i++) icVOs[i] = switchVOFromEstimate2IC(VOs[i]);
    if(VOs[0].getCbilltypecode().equals("45")){
      billVO = (BillVO[]) PfUtilTools.runChangeDataAry("45", "I2", icVOs);
    }else if(VOs[0].getCbilltypecode().equals("47")){
      billVO = (BillVO[]) PfUtilTools.runChangeDataAry("47", "ID", icVOs);
    }
    if(billVO == null || billVO.length == 0) return null;

		//后续处理:表体
    Vector vTemp = new Vector();
		for (int i = 0; i < billVO.length; i++) {
			BillItemVO bodyVO[] = (BillItemVO[])billVO[i].getChildrenVO();

			bodyVO[0].setPk_corp(VOs[i].getPk_corp());
      if(VOs[0].getCbilltypecode().equals("45")) bodyVO[0].setCbilltypecode("I2");
      else bodyVO[0].setCbilltypecode("ID");
			bodyVO[0].setCbill_bid(VOs[i].getCgeneralbid());
			bodyVO[0].setCbillid(VOs[i].getCgeneralhid());

			bodyVO[0].setCsourcebillid(VOs[i].getCgeneralhid());
			bodyVO[0].setCsourcebillitemid(VOs[i].getCgeneralbid());
      bodyVO[0].setCsourcebilltypecode(VOs[0].getCbilltypecode());

			UFDouble d1 = VOs[i].getNmoney();
			UFDouble d2 = VOs[i].getNmaterialmoney();
			if (d1 == null)
				d1 = new UFDouble(0.0);
			if (d2 == null)
				d2 = new UFDouble(0.0);
			double d = d1.doubleValue() + d2.doubleValue();
			bodyVO[0].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMnyDecimal[0], d)));
			bodyVO[0].setNdrawsummny(d2);

			d1 = bodyVO[0].getNmoney();
			d2 = bodyVO[0].getNnumber();
			if (d2 != null && d2.doubleValue() != 0.0) {
				d = d1.doubleValue() / d2.doubleValue();
				bodyVO[0].setNprice(new UFDouble(d));
			}

			bodyVO[0].setCfirstbillid(VOs[i].getCfirstbillhid());
			bodyVO[0].setCfirstbillitemid(VOs[i].getCfirstbillbid());
			bodyVO[0].setCfirstbilltypecode(VOs[i].getCfirsttype());
			bodyVO[0].setIrownumber(new Integer(i));
			bodyVO[0].setVbillcode(VOs[i].getVbillcode());
			
			bodyVO[0].setDbizdate(VOs[i].getDbizdate());
			bodyVO[0].setCvendorid(VOs[i].getCvendorid());
      bodyVO[0].setDr(new Integer(0));
			
			//V5新增:库存入库单相关信息
			bodyVO[0].setCicbilltype(VOs[i].getCbilltypecode());
			bodyVO[0].setCicbillcode(VOs[i].getVbillcode());
			bodyVO[0].setCicbillid(VOs[i].getCgeneralhid());
			bodyVO[0].setCicitemid(VOs[i].getCgeneralbid());
      
      vTemp.addElement(bodyVO[0]);
		}
    BillItemVO bodyVO[] = new BillItemVO[vTemp.size()];
    vTemp.copyInto(bodyVO);

		//后续处理:表头
    Vector v = new Vector();
    vTemp = new Vector();
		for (int i = 0; i < billVO.length; i++) {
			BillHeaderVO headVO = (BillHeaderVO)billVO[i].getParentVO();
			if (VOs[i].getCbilltypecode().trim().equals("47")) {
				headVO.setCbilltypecode("ID");
			} else {
				headVO.setCbilltypecode("I2");
			}
			headVO.setCbillid(VOs[i].getCgeneralhid());

			headVO.setDbilldate(dCurrDate);
			headVO.setCsourcemodulename("PO");
			headVO.setFdispatchflag(new Integer(0));

      headVO.setCoperatorid(cOperator);

			headVO.setBestimateflag(new UFBoolean(true));
			headVO.setCwarehousemanagerid(VOs[i].getCwhsmanagerid());
			headVO.setCemployeeid(VOs[i].getCoperatorid());//estiVo.getCoperatorid() 即为入库单表头的业务员(cbizid) Czp 2004-07-21

			headVO.setVbillcode(VOs[i].getVbillcode());
			headVO.setBwithdrawalflag(new UFBoolean(false));
			headVO.setBdisableflag(new UFBoolean(false));
			headVO.setBauditedflag(new UFBoolean(false));
      headVO.setDr(new Integer(0));
      
      if(!v.contains(headVO.getCbillid())){
        v.addElement(headVO.getCbillid());
        vTemp.addElement(headVO);
      }
		}
    BillHeaderVO headVO[] = new BillHeaderVO[vTemp.size()];
    vTemp.copyInto(headVO);

		//组合存货的表头和表体VO
		billVO = new BillVO[headVO.length];
		for (int i = 0; i < billVO.length; i++) {
			billVO[i] = new BillVO();
			billVO[i].setParentVO(headVO[i]);

			vTemp = new Vector();
			String s1 = headVO[i].getCbillid().trim();
			for (int j = 0; j < bodyVO.length; j++) {
				String s2 = bodyVO[j].getCbillid().trim();
				if (s1.equals(s2)) {
					bodyVO[j].setCbilltypecode(headVO[i].getCbilltypecode());
					if (headVO[i].getCbilltypecode().equals("ID")) {
						bodyVO[j].setCsourcebilltypecode("47");
					}
					vTemp.addElement(bodyVO[j]);
				}
			}
			BillItemVO tempBodyVO[] = new BillItemVO[vTemp.size()];
			vTemp.copyInto(tempBodyVO);

			billVO[i].setChildrenVO(tempBodyVO);
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	//返回存货核算所需要的VO
	return billVO;
}
/**
 * 功能:依据暂估方式不同,向存货核算系统传递数据;单到回冲,传送暂估入库单;单到补差,传送采购入库单(成批单据传送)
 * 输入:暂估VO[],当前操作员,当前日期
 * 返回:BillVO[]
 * 异常:javax.naming.NamingException, java.rmi.RemoteException, java.sql.SQLException
 * 作者:熊海情
 * 修改:晁志平 FOR V30 删除查询入库单表头表体操作，表头表体对照信息由调用者参数传入
 */
private BillVO[] transferIAData_wwyf(wwEstimateVO[] VOs, String cOperator, UFDate dCurrDate)
	throws BusinessException {
	nc.bs.pu.pub.PubImpl myPubService = null;
	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("传入参数为空，直接返回NULL；调用堆栈如下：");
		SCMEnv.out(new Exception());
		return null;
	}
	BillVO billVO[] = null;
	try {
		//获取本位币精度
		myPubService = new nc.bs.pu.pub.PubImpl();
		int nMnyDecimal[] = myPubService.getDigitBatch(VOs[0].getPk_corp(), new String[] { "BD301" });
		if (nMnyDecimal == null || nMnyDecimal.length == 0) {
			nMnyDecimal = new int[1];
			nMnyDecimal[0] = 2;
		}

    //VO转换
    GeneralBillVO icVOs[] = new GeneralBillVO[VOs.length];
    for(int i = 0; i < VOs.length; i++) icVOs[i] = switchVOFromEstimate2IC_wwyf(VOs[i]);
    if(VOs[0].getCbilltypecode().equals("45")){
      billVO = (BillVO[]) PfUtilTools.runChangeDataAry("45", "I2", icVOs);
    }else if(VOs[0].getCbilltypecode().equals("47")){
      billVO = (BillVO[]) PfUtilTools.runChangeDataAry("47", "ID", icVOs);
    }
    if(billVO == null || billVO.length == 0) return null;

		//后续处理:表体
    Vector vTemp = new Vector();
		for (int i = 0; i < billVO.length; i++) {
			BillItemVO bodyVO[] = (BillItemVO[])billVO[i].getChildrenVO();

			bodyVO[0].setPk_corp(VOs[i].getPk_corp());
      if(VOs[0].getCbilltypecode().equals("45")) bodyVO[0].setCbilltypecode("I2");
      else bodyVO[0].setCbilltypecode("ID");
			bodyVO[0].setCbill_bid(VOs[i].getCgeneralbid());
			bodyVO[0].setCbillid(VOs[i].getCgeneralhid());

			bodyVO[0].setCsourcebillid(VOs[i].getCgeneralhid());
			bodyVO[0].setCsourcebillitemid(VOs[i].getCgeneralbid());
      bodyVO[0].setCsourcebilltypecode(VOs[0].getCbilltypecode());

			UFDouble d1 = VOs[i].getNmoney();
			UFDouble d2 = VOs[i].getNmaterialmoney();
			if (d1 == null)
				d1 = new UFDouble(0.0);
			if (d2 == null)
				d2 = new UFDouble(0.0);
			double d = d1.doubleValue() + d2.doubleValue();
			bodyVO[0].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMnyDecimal[0], d)));
			bodyVO[0].setNdrawsummny(d2);

			d1 = bodyVO[0].getNmoney();
			d2 = bodyVO[0].getNnumber();
			if (d2 != null && d2.doubleValue() != 0.0) {
				d = d1.doubleValue() / d2.doubleValue();
				bodyVO[0].setNprice(new UFDouble(d));
			}

			bodyVO[0].setCfirstbillid(VOs[i].getCfirstbillhid());
			bodyVO[0].setCfirstbillitemid(VOs[i].getCfirstbillbid());
			bodyVO[0].setCfirstbilltypecode(VOs[i].getCfirsttype());
			bodyVO[0].setIrownumber(new Integer(i));
			bodyVO[0].setVbillcode(VOs[i].getVbillcode());
			
			bodyVO[0].setDbizdate(VOs[i].getDbizdate());
			bodyVO[0].setCvendorid(VOs[i].getCvendorid());
      bodyVO[0].setDr(new Integer(0));
			
			//V5新增:库存入库单相关信息
			bodyVO[0].setCicbilltype(VOs[i].getCbilltypecode());
			bodyVO[0].setCicbillcode(VOs[i].getVbillcode());
			bodyVO[0].setCicbillid(VOs[i].getCgeneralhid());
			bodyVO[0].setCicitemid(VOs[i].getCgeneralbid());
      
      vTemp.addElement(bodyVO[0]);
		}
    BillItemVO bodyVO[] = new BillItemVO[vTemp.size()];
    vTemp.copyInto(bodyVO);

		//后续处理:表头
    Vector v = new Vector();
    vTemp = new Vector();
		for (int i = 0; i < billVO.length; i++) {
			BillHeaderVO headVO = (BillHeaderVO)billVO[i].getParentVO();
			if (VOs[i].getCbilltypecode().trim().equals("47")) {
				headVO.setCbilltypecode("ID");
			} else {
				headVO.setCbilltypecode("I2");
			}
			headVO.setCbillid(VOs[i].getCgeneralhid());

			headVO.setDbilldate(dCurrDate);
			headVO.setCsourcemodulename("PO");
			headVO.setFdispatchflag(new Integer(0));

      headVO.setCoperatorid(cOperator);

			headVO.setBestimateflag(new UFBoolean(true));
			headVO.setCwarehousemanagerid(VOs[i].getCwhsmanagerid());
			headVO.setCemployeeid(VOs[i].getCoperatorid());//estiVo.getCoperatorid() 即为入库单表头的业务员(cbizid) Czp 2004-07-21

			headVO.setVbillcode(VOs[i].getVbillcode());
			headVO.setBwithdrawalflag(new UFBoolean(false));
			headVO.setBdisableflag(new UFBoolean(false));
			headVO.setBauditedflag(new UFBoolean(false));
      headVO.setDr(new Integer(0));
      
      if(!v.contains(headVO.getCbillid())){
        v.addElement(headVO.getCbillid());
        vTemp.addElement(headVO);
      }
		}
    BillHeaderVO headVO[] = new BillHeaderVO[vTemp.size()];
    vTemp.copyInto(headVO);

		//组合存货的表头和表体VO
		billVO = new BillVO[headVO.length];
		for (int i = 0; i < billVO.length; i++) {
			billVO[i] = new BillVO();
			billVO[i].setParentVO(headVO[i]);

			vTemp = new Vector();
			String s1 = headVO[i].getCbillid().trim();
			for (int j = 0; j < bodyVO.length; j++) {
				String s2 = bodyVO[j].getCbillid().trim();
				if (s1.equals(s2)) {
					bodyVO[j].setCbilltypecode(headVO[i].getCbilltypecode());
					if (headVO[i].getCbilltypecode().equals("ID")) {
						bodyVO[j].setCsourcebilltypecode("47");
					}
					vTemp.addElement(bodyVO[j]);
				}
			}
			BillItemVO tempBodyVO[] = new BillItemVO[vTemp.size()];
			vTemp.copyInto(tempBodyVO);

			billVO[i].setChildrenVO(tempBodyVO);
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	//返回存货核算所需要的VO
	return billVO;
}


/**
 * 此处插入方法说明。
 * 功能描述:依据暂估方式不同,向存货核算系统传递数据
 *			单到回冲,传送暂估入库单;单到补差,传送采购入库单
 *			(成批单据传送)
 * 输入参数:暂估VO,当前操作员,当前日期
 * 返回值:
 * 异常处理:
 * 日期：2002/05/30(批次暂估，库存调用)
 */
private BillVO[] transferIADataBatch(IGeneralBillVO[] VOs) throws BusinessException {
	nc.bs.pu.pub.PubImpl myPubService = null;
	BillVO[] voRslts = null;
	try {
		//获取本位币精度
		myPubService = new nc.bs.pu.pub.PubImpl();
		int nMnyDecimal[] = myPubService.getDigitBatch(VOs[0].getPk_corp(), new String[] { "BD301" });
		if (nMnyDecimal == null || nMnyDecimal.length == 0) {
			nMnyDecimal = new int[1];
			nMnyDecimal[0] = 2;
		}

    //VO转换
    voRslts = (BillVO[]) PfUtilTools.runChangeDataAry("45", "I2", VOs);
    if(voRslts == null || voRslts.length == 0) return null;

		//VO转换后续处理
		for (int i = 0; i < VOs.length; i++) {
			GeneralBillHeaderVO headVO = (GeneralBillHeaderVO) VOs[i].getParentVO();
			IGeneralBillItemVO bodyVO[] = (IGeneralBillItemVO[]) VOs[i].getChildrenVO();

      BillItemVO abodyVO[] = (BillItemVO[])voRslts[i].getChildrenVO();
			for (int j = 0; j < bodyVO.length; j++) {
				//VO转换后续处理:存货核算体				
				abodyVO[j].setPk_corp(headVO.getPk_corp());
				abodyVO[j].setCbilltypecode("I2");
				abodyVO[j].setCbill_bid(bodyVO[j].getCgeneralbid());
				abodyVO[j].setCbillid(bodyVO[j].getCgeneralhid());

				abodyVO[j].setCsourcebillid(bodyVO[j].getCgeneralhid());
				abodyVO[j].setCsourcebillitemid(bodyVO[j].getCgeneralbid());
				abodyVO[j].setCsourcebilltypecode("45");

				//V5新增:库存入库单相关信息
				abodyVO[j].setCicbilltype("45");
				abodyVO[j].setCicbillcode(headVO.getVbillcode());
				abodyVO[j].setCicbillid(bodyVO[j].getCgeneralhid());
				abodyVO[j].setCicitemid(bodyVO[j].getCgeneralbid());

				UFDouble d1 = bodyVO[j].getNmny();
				UFDouble d2 = null;
				if (d1 == null)
					d1 = new UFDouble(0.0);
				if (d2 == null)
					d2 = new UFDouble(0.0);
				double d = d1.doubleValue() + d2.doubleValue();
				abodyVO[j].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMnyDecimal[0], d)));

				d1 = bodyVO[j].getNmny();
				d2 = bodyVO[j].getNinnum();
				if (d1 != null && d2 != null && d2.doubleValue() != 0.0) {
					d = d1.doubleValue() / d2.doubleValue();
					abodyVO[j].setNprice(new UFDouble(d));
				}

				abodyVO[j].setCfirstbillid(bodyVO[j].getCfirstbillhid());
				abodyVO[j].setCfirstbillitemid(bodyVO[j].getCfirstbillbid());
				abodyVO[j].setCfirstbilltypecode(bodyVO[j].getCfirsttype());
				abodyVO[j].setIrownumber(new Integer(j));
				abodyVO[j].setVbillcode(headVO.getVbillcode());

				abodyVO[j].setDbizdate(bodyVO[i].getDbizdate());	
				abodyVO[j].setCvendorid(bodyVO[i].getCvendorid());
			}

			//VO转换后续处理:生成存货核算头
			BillHeaderVO aheadVO = (BillHeaderVO)voRslts[i].getParentVO();
			aheadVO.setPk_corp(headVO.getPk_corp());
			if (headVO.getCbilltypecode().trim().equals("47"))
				aheadVO.setCbilltypecode("ID");
			else
				aheadVO.setCbilltypecode("I2");
			aheadVO.setCbillid(headVO.getCgeneralhid());

			aheadVO.setDbilldate(headVO.getDaccountdate());
			aheadVO.setCsourcemodulename("PO");
			aheadVO.setFdispatchflag(new Integer(0));
			aheadVO.setCoperatorid(headVO.getCregister());

			aheadVO.setBestimateflag(new UFBoolean(true));
			aheadVO.setCwarehousemanagerid(headVO.getCwhsmanagerid());
			aheadVO.setCemployeeid(headVO.getCbizid());

			aheadVO.setVbillcode(headVO.getVbillcode());
			aheadVO.setBwithdrawalflag(new UFBoolean(false));
			aheadVO.setBdisableflag(new UFBoolean(false));
			aheadVO.setBauditedflag(new UFBoolean(false));
		}

		//返回
		for (int i = 0; i < voRslts.length; i++) {
			BillHeaderVO headVO = (BillHeaderVO) voRslts[i].getParentVO();
			BillItemVO bodyVO[] = (BillItemVO[]) voRslts[i].getChildrenVO();
			if (bodyVO == null || bodyVO.length == 0)
				continue;
			String s1 = ((BillHeaderVO) voRslts[i].getParentVO()).getCbillid();
			for (int j = 0; j < bodyVO.length; j++) {
				String s2 = bodyVO[j].getCbillid();
				if (s1.equals(s2)) {
					bodyVO[j].setCbilltypecode(headVO.getCbilltypecode());
					if (headVO.getCbilltypecode().equals("ID"))
						bodyVO[j].setCsourcebilltypecode("47");
				}
			}
		}

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return voRslts;
}

/**
 * 功能描述:依据暂估方式不同,向存货核算系统传递数据
 *			单到回冲,传送暂估入库单;单到补差,传送采购入库单
 *			(成批单据传送)
 * 输入参数:暂估VO,当前操作员,当前日期
 * 返回值:
 * 异常处理:
 * @param VOs nc.vo.ps.estimate.EstimateVO[]
 */
private BillVO[] transferIADataForSC(EstimateVO[] VOs, String cOperator, UFDate dCurrDate, SettlebillVO VO)
	throws BusinessException {
	nc.bs.pu.pub.PubImpl myPubService = null;
	BillVO[] vosRstl = null;
	try {
		//获取本位币精度
		myPubService = new nc.bs.pu.pub.PubImpl();
		int nMnyDecimal[] = myPubService.getDigitBatch(VOs[0].getPk_corp(), new String[] { "BD301" });
		if (nMnyDecimal == null || nMnyDecimal.length == 0) {
			nMnyDecimal = new int[1];
			nMnyDecimal[0] = 2;
		}

		//查询存货表体VO所需的数据
		Vector v = queryStockBodyForIA(VOs);
		if (v == null || v.size() == 0) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000018")/*@res "查询存货表体VO所需的数据,没有符合条件的数据！"*/);
		}

    //VO转换
    GeneralBillVO icVOs[] = new GeneralBillVO[VOs.length];
    for(int i = 0; i < VOs.length; i++) icVOs[i] = switchVOFromEstimate2IC(VOs[i]);
    vosRstl = (BillVO[]) PfUtilTools.runChangeDataAry("47", "ID", icVOs);
    if(vosRstl == null || vosRstl.length == 0) return null;

		//VO转换后续处理:存货表体
		SettlebillItemVO billItemVO[] = VO.getBodyVO();
    Vector v0 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			BillItemVO bodyVO[] = (BillItemVO[])vosRstl[i].getChildrenVO();
			Vector vTemp = (Vector) v.elementAt(i);
			GeneralHItemVO itemVO = (GeneralHItemVO) vTemp.elementAt(0);

			bodyVO[0].setPk_corp(VOs[i].getPk_corp());
			bodyVO[0].setCbilltypecode("ID");
			bodyVO[0].setCbill_bid(VOs[i].getCgeneralbid());
			bodyVO[0].setCbillid(VOs[i].getCgeneralhid());

			bodyVO[0].setCsourcebillid(billItemVO[i].getCsettlebillid());
			bodyVO[0].setCsourcebillitemid(billItemVO[i].getCsettlebill_bid());
			bodyVO[0].setCsourcebilltypecode(ScmConst.PO_SettleBill);
			
			//V5新增:库存入库单相关信息
			bodyVO[0].setCicbilltype(VOs[i].getCbilltypecode());
			bodyVO[0].setCicbillcode(VOs[i].getVbillcode());
			bodyVO[0].setCicbillid(VOs[i].getCgeneralhid());
			bodyVO[0].setCicitemid(VOs[i].getCgeneralbid());

			UFDouble d1 = VOs[i].getNmoney();
			UFDouble d2 = VOs[i].getNmaterialmoney();
			if (d1 == null)
				d1 = new UFDouble(0.0);
			if (d2 == null)
				d2 = new UFDouble(0.0);
			double d = d1.doubleValue() + d2.doubleValue();
			bodyVO[0].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMnyDecimal[0], d)));
			bodyVO[0].setNdrawsummny(d2);

			d1 = bodyVO[0].getNmoney();
			d2 = bodyVO[0].getNnumber();
			if (d2 != null && d2.doubleValue() != 0.0) {
				d = d1.doubleValue() / d2.doubleValue();
				bodyVO[0].setNprice(new UFDouble(d));
			}

			bodyVO[0].setCfirstbillid(itemVO.getCfirstbillhid());
			bodyVO[0].setCfirstbillitemid(itemVO.getCfirstbillbid());
			bodyVO[0].setCfirstbilltypecode(itemVO.getCfirsttype());
			bodyVO[0].setIrownumber(new Integer(i));
			bodyVO[0].setVbillcode(VOs[i].getVbillcode());
			bodyVO[0].setVsourcebillcode(VOs[i].getVbillcode());

			bodyVO[0].setDbizdate(itemVO.getDbizdate());
			bodyVO[0].setCvendorid(itemVO.getCvendorid());
      
      v0.addElement(bodyVO[0]);
		}
    BillItemVO bodyVO[] = new BillItemVO[v0.size()];
    v0.copyInto(bodyVO);

    //入库单主表ID和仓库ID唯一性组合
    v0 = new Vector();
    Vector vGeneralHID = new Vector();
    Vector vWarehouseID = new Vector();
    vGeneralHID.addElement(VOs[0].getCgeneralhid().trim());
    vWarehouseID.addElement(VOs[0].getCwarehouseid());
    for (int i = 1; i < VOs.length; i++) {
      String s1 = VOs[i].getCgeneralhid().trim();
      if (!vGeneralHID.contains(s1)) {
        vGeneralHID.addElement(s1);
        vWarehouseID.addElement(VOs[i].getCwarehouseid());
        v0.addElement(vosRstl[i].getParentVO());
      }
    }

		//查询存货表头VO所需的数据
		String sGeneralhid[] = new String[vGeneralHID.size()];
		String sWarehouseid[] = new String[vWarehouseID.size()];
		vGeneralHID.copyInto(sGeneralhid);
		vWarehouseID.copyInto(sWarehouseid);

		Vector vv = queryStockHeadForIA(sGeneralhid, sWarehouseid);
		if (vv == null || vv.size() == 0) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000019")/*@res "查询存货表头VO所需的数据,没有符合条件的数据！"*/);
		}

		//VO转换后续处理:存货表头
		BillHeaderVO headVO[] = new BillHeaderVO[sGeneralhid.length];
    v0.copyInto(headVO);
		for (int i = 0; i < headVO.length; i++) {
			headVO[i] = new BillHeaderVO();
			Vector vTemp = (Vector) vv.elementAt(i);
			GeneralHHeaderVO hVO = (GeneralHHeaderVO) vTemp.elementAt(0);
			Object o = vTemp.elementAt(1);
			String sStoreOrgID = null;
			if (o != null)
				sStoreOrgID = (String) o;

			if (hVO.getCbilltypecode().trim().equals("47"))
				headVO[i].setCbilltypecode("ID");
			else
				headVO[i].setCbilltypecode("I2");
			headVO[i].setCbillid(hVO.getCgeneralhid());

			headVO[i].setDbilldate(dCurrDate);
			headVO[i].setCsourcemodulename("PO");
			headVO[i].setFdispatchflag(new Integer(0));

			headVO[i].setCoperatorid(cOperator);
			headVO[i].setBestimateflag(new UFBoolean(true));
			headVO[i].setCwarehousemanagerid(hVO.getCwhsmanagerid());
			headVO[i].setCemployeeid(hVO.getCbizid());

			headVO[i].setVbillcode(hVO.getVbillcode());
			headVO[i].setBwithdrawalflag(new UFBoolean(false));
			headVO[i].setBdisableflag(new UFBoolean(false));
			headVO[i].setBauditedflag(new UFBoolean(false));						
		}

		//组合存货的表头和表体VO
		vosRstl = new BillVO[headVO.length];
		for (int i = 0; i < vosRstl.length; i++) {
			vosRstl[i] = new BillVO();
			vosRstl[i].setParentVO(headVO[i]);

			Vector vTemp = new Vector();
			String s1 = headVO[i].getCbillid().trim();
			for (int j = 0; j < bodyVO.length; j++) {
				String s2 = bodyVO[j].getCbillid().trim();
				if (s1.equals(s2)) {
					bodyVO[j].setCbilltypecode(headVO[i].getCbilltypecode());
					if (headVO[i].getCbilltypecode().equals("ID")) {
						//bodyVO[j].setCsourcebilltypecode("47");
					}
					vTemp.addElement(bodyVO[j]);
				}
			}
			BillItemVO tempBodyVO[] = new BillItemVO[vTemp.size()];
			vTemp.copyInto(tempBodyVO);

			vosRstl[i].setChildrenVO(tempBodyVO);
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	//返回存货核算所需要的VO
	return vosRstl;
}

public void beforSaveSysinit(String pk_org,String initcode,String paraValue,String pkValue) throws SQLException {
	// TODO 自动生成方法存根
	//调用应付提供的接口
	try{
		if(paraValue != null && paraValue.equals("N")){
			IArapForGYLPublic iArap = (IArapForGYLPublic) NCLocator.getInstance().lookup(IArapForGYLPublic.class.getName());
			UFBoolean bModify = iArap.canModify(pk_org);
			if(!bModify.booleanValue()){
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000094")/*@res "暂估应付未冲减完毕,不能修改参数!"*/);
			}
		}
	}catch(Exception e){
		SCMEnv.out(e);
		throw new SQLException(e.getMessage());
	}
}

public void afterSaveSysinit(String pk_org,String initcode,String paraValue,String pkValue) throws BusinessException {
	// TODO 自动生成方法存根
	
}






/**
 * 功能描述:运费暂估      zhwj 2012-08-09
 * 输入参数:VO[],当前操作员ID,当前日期
 * 创建：熊海情
 * 修改：晁志平 FOR  V30
 */
public void estimate_yfn(EstimateVO VOs[], ArrayList paraList,ClientLink cl)
	throws BusinessException {
	nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();

	EstimateDMO dmo = null;
	ICreateCorpQueryService myService0 = null;
	ISysInitQry myService1 = null;
	nc.bs.pu.pub.PubImpl myService2 = null;
	boolean bLock = false;

	String cOperator = (String)paraList.get(0);
	UFDate dCurrDate = (UFDate)paraList.get(1);
	String sEstMode = (String)paraList.get(2);
	String sDifferMode = (String)paraList.get(3);
	UFBoolean bZGYF = (UFBoolean)paraList.get(4);
	String sCurrTypeID = (String)paraList.get(5);

	//组合所有需要加锁的主键
	String sKeys[] = getEstimateLockKeys(VOs);

	timer.addExecutePhase("组合所有需要加锁的主键");
	String[] saSubLockedId = null;
	try {
		//对单据加锁
		dmo = new EstimateDMO();
		bLock = LockTool.setLockForPks(sKeys, cOperator);

		timer.addExecutePhase("加锁");

		if (!bLock)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000000")/*@res "正在进行相关操作，请稍后再试！"*/);

		//判断时间戳是否改变
		String sMessage = isTimeStampChanged(VOs);
		if (sMessage != null && sMessage.length() > 0) {
			sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000001")/*@res "请刷新！\n"*/;
			throw new BusinessException(sMessage);
		}
		timer.addExecutePhase("判断时间戳是否改变");

		Vector v1 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			v1.addElement(VOs[i].getCgeneralbid());
		}

		//状态刷新：判断是否存在已经暂估的入库单行(存在抛异常)
		if (v1.size() > 0) {
			dmo.checkExistEsti_yf(v1);
		}
		timer.addExecutePhase("状态刷新：判断是否存在已经暂估的入库单行(存在抛异常)");

		//暂估时单价和金额的精度控制
		myService2 = new nc.bs.pu.pub.PubImpl();
		int digit[] = myService2.getDigitBatch(VOs[0].getPk_corp(), new String[] { "BD301", "BD505" });
		if (digit == null || digit.length == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000008")/*@res "获取本位币精度或单价精度异常!"*/);

		timer.addExecutePhase("暂估时单价和金额的精度控制");

		/*
		//入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费
		Vector vAllBodyVoB = new Vector();
		Vector vAllBodyVoBB3 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			GeneralHItemVO bodyVO = new GeneralHItemVO();
			bodyVO.setCgeneralbid(VOs[i].getCgeneralbid());
			bodyVO.setBzgflag(new UFBoolean(true));
			bodyVO.setDzgdate(dCurrDate);
			bodyVO.setBzgyfflag(bZGYF);
			vAllBodyVoB.addElement(bodyVO);

			GeneralBb3VO bb3VO = new GeneralBb3VO();
			if (VOs[i].getNprice() != null) {
				bb3VO.setCgeneralbid(VOs[i].getCgeneralbid());
				double d = PubDMO.getRoundDouble(digit[1], VOs[i].getNprice().doubleValue());
				bb3VO.setNpprice(new UFDouble(d));
				d = PubDMO.getRoundDouble(digit[1], VOs[i].getNtaxprice().doubleValue());
				bb3VO.setNzygfprice(new UFDouble(d));
			}
			if (VOs[i].getNmoney() != null) {
				double d = PubDMO.getRoundDouble(digit[0], VOs[i].getNmoney().doubleValue());
				bb3VO.setNpmoney(new UFDouble(d));
				d = PubDMO.getRoundDouble(digit[0], VOs[i].getNtotalmoney().doubleValue());
				bb3VO.setNzgyfmoney(new UFDouble(d));
			}
			if (VOs[i].getNmaterialmoney() != null) {
				double d = PubDMO.getRoundDouble(digit[0], VOs[i].getNmaterialmoney().doubleValue());
				bb3VO.setNmaterialmoney(new UFDouble(d));
			}
			vAllBodyVoBB3.addElement(bb3VO);
		}

		timer.addExecutePhase("打标志、计算单价金额材料费--循环赋值");

		if (vAllBodyVoB.size() > 0) {
			GeneralHItemVO[] bodyVOs = new GeneralHItemVO[vAllBodyVoB.size()];
			vAllBodyVoB.copyInto(bodyVOs);
			dmo.updateBillBody(bodyVOs);
		}

		timer.addExecutePhase("打标志、计算单价金额材料费--更新子表");

		if (vAllBodyVoBB3.size() > 0) {
			GeneralBb3VO bb3VOs[] = new GeneralBb3VO[vAllBodyVoBB3.size()];
			vAllBodyVoBB3.copyInto(bb3VOs);
			dmo.updateBillBb3(bb3VOs);
		}

		timer.addExecutePhase("打标志、计算单价金额材料费--更新子表3");
*/
		//判断存货核算是否启用
		if (VOs != null && VOs.length > 0) {
			String unitCode = VOs[0].getPk_corp();
			myService0 = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			boolean bIAStartUp = myService0.isEnabled(unitCode, "IA");

			myService1 = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
			boolean bStockRB = true; //入库单是否红蓝对冲
			nc.vo.pub.para.SysInitVO initVO[] = myService1.querySysInit(unitCode, "PO36");
			if (initVO != null && initVO.length > 0) {
				if (initVO[0].getValue().equals("否"))
					bStockRB = false;
			}
			timer.addExecutePhase("入库单是否红蓝对冲");
			if (bIAStartUp) {
				//调用接口,向存货核算系统传送数据   生成存货核算的 入库调整单
				saveBillFromOutter_yf(VOs, cOperator, dCurrDate,cl);
				timer.addExecutePhase("调用接口,向存货核算系统传送数据[总时间]");
//				//结算
//				if (bStockRB) {
//					saSubLockedId = settleForEstimate(VOs, cOperator, dCurrDate, sEstMode, sDifferMode);
//				}
//				timer.addExecutePhase("结算");
			}
			
			//暂估应付
			if(bZGYF.booleanValue() && myService0.isEnabled(unitCode, "AP")){
				ArrayList list = new ArrayList();
				list.add(sCurrTypeID);
				list.add(cOperator);
				list.add(dCurrDate);
				saveBillForARAP_yf(VOs,list);
			}
			
			//回写
			dmo.backICStatus(VOs, status[1], dCurrDate.toString());
			
		}
		//
		timer.showAllExecutePhase("暂估处理BS时间分布：");

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	} finally {
		try {
//			if (myService != null) {
				//对单据解锁
				if (bLock) {
					String[] saAllKey = sKeys;
					if (saSubLockedId != null && saSubLockedId.length > 0) {
						ArrayList listAll = new ArrayList();
						int iLen = saAllKey.length;
						for (int i = 0; i < iLen; i++) {
							listAll.add(saAllKey[i]);
						}
						iLen = saSubLockedId.length;
						for (int i = 0; i < iLen; i++) {
							listAll.add(saSubLockedId[i]);
						}
						saAllKey = (String[]) listAll.toArray(saAllKey);
					}
					LockTool.releaseLockForPks(sKeys, cOperator);
//				}
			}
		} catch (Exception e) {
			/*调用采购公用方法按规范抛出异常*/
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
	}
}


/**
 * 功能描述:入库单暂估时向存货核算系统传送数据(成批单据传送)
 */
private void saveBillFromOutter_yf(EstimateVO VOs[], String cOperator, UFDate dCurrDate,ClientLink cl) throws BusinessException {
    IIAToPUBill myService = null;
	IBill bo = null;
	
    nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();

	try {
		myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
		 bo = (IBill) NCLocator.getInstance().lookup(IBill.class.getName());
		 
		BillVO billVOs[] = transferIAData_yf(VOs, cOperator, dCurrDate);

		//对存货核算单进行处理: 相同表头的单据组合成一张单据
		//(1) 存货核算单据来源单据头ID唯一性组合
		Vector v = new Vector();
		Vector vTemp0 = new Vector();
		vTemp0.addElement(((BillHeaderVO) billVOs[0].getParentVO()).getCbillid().trim());
		v.addElement(billVOs[0]);
		for (int i = 1; i < billVOs.length; i++) {
			String s1 = ((BillHeaderVO) billVOs[i].getParentVO()).getCbillid().trim();
			if (!vTemp0.contains(s1)) {
				vTemp0.addElement(s1);
				v.addElement(billVOs[i]);
			}
		}
		timer.addExecutePhase("(1) 存货核算单据来源单据头ID唯一性组合");

		//(3) 所有存货核算单据体的来源单据头ID相同, 归为同一张存货核算单据
		Vector vv = new Vector();
		for (int i = 0; i < v.size(); i++) {
			BillVO tempVO = (BillVO) v.elementAt(i);
			String s1 = ((BillHeaderVO) tempVO.getParentVO()).getCbillid().trim();
			Vector vTemp = new Vector();
			for (int j = 0; j < billVOs.length; j++) {
				String s2 = ((BillHeaderVO) billVOs[j].getParentVO()).getCbillid().trim();
				if (s1.equals(s2)) {
					BillItemVO tempItemVO[] = (BillItemVO[]) billVOs[j].getChildrenVO();
					for (int k = 0; k < tempItemVO.length; k++)
						vTemp.addElement(tempItemVO[k]);
				}
			}

			BillItemVO tempItemVOs[] = new BillItemVO[vTemp.size()];
			vTemp.copyInto(tempItemVOs);

			//重新设置表体行号
			for (int j = 0; j < tempItemVOs.length; j++)
				tempItemVOs[j].setIrownumber(new Integer(j));

			tempVO.setChildrenVO(tempItemVOs);
			vv.addElement(tempVO);
		}

		//(4) 整理需向存货传送的单据
		billVOs = null;
		billVOs = new BillVO[vv.size()];
		vv.copyInto(billVOs);

		timer.addExecutePhase("(3) 所有存货核算单据体的来源单据头ID相同, 归为同一张存货核算单据 + (4) 整理需向存货传送的单据");

		//传送数据
		if (billVOs == null || billVOs.length == 0)
			return;
		String s1 = ((BillHeaderVO) billVOs[0].getParentVO()).getCsourcemodulename();
		String s2 = ((BillItemVO[]) billVOs[0].getChildrenVO())[0].getCsourcebilltypecode();

		//
		String sTime = (new UFDateTime(new Date())).toString();		
		for(int i = 0; i < billVOs.length; i++){
		    ((BillHeaderVO)billVOs[i].getParentVO()).setVbillcode(null);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setTmaketime(sTime);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setTlastmaketime(sTime);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setClastoperatorid(cOperator);
		    BillItemVO bodyVO[] = (BillItemVO[]) billVOs[i].getChildrenVO();
		    if(bodyVO != null && bodyVO.length > 0){
		        for(int j = 0; j < bodyVO.length; j++) bodyVO[j].setVbillcode(null);
		    }
		}
		//
//		myService.saveBillFromOutterArray(billVOs, s1, s2);
		for(int i=0;i<billVOs.length;i++){
			BillVO vo = bo.insert(cl,billVOs[i]);
		}

		timer.addExecutePhase("传送数据[IA保存方法]");

		timer.showAllExecutePhase("调用接口,向存货核算系统传送数据[总时间]时间分布");

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}
/**
 * 功能描述:入库单暂估时向存货核算系统传送数据(成批单据传送)
 */
private void saveBillFromOutter_wwyf(wwEstimateVO VOs[], String cOperator, UFDate dCurrDate,ClientLink cl) throws BusinessException {
    IIAToPUBill myService = null;
	IBill bo = null;
	
    nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();

	try {
		myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
		 bo = (IBill) NCLocator.getInstance().lookup(IBill.class.getName());
		 
		BillVO billVOs[] = transferIAData_wwyf(VOs, cOperator, dCurrDate);

		//对存货核算单进行处理: 相同表头的单据组合成一张单据
		//(1) 存货核算单据来源单据头ID唯一性组合
		Vector v = new Vector();
		Vector vTemp0 = new Vector();
		vTemp0.addElement(((BillHeaderVO) billVOs[0].getParentVO()).getCbillid().trim());
		v.addElement(billVOs[0]);
		for (int i = 1; i < billVOs.length; i++) {
			String s1 = ((BillHeaderVO) billVOs[i].getParentVO()).getCbillid().trim();
			if (!vTemp0.contains(s1)) {
				vTemp0.addElement(s1);
				v.addElement(billVOs[i]);
			}
		}
		timer.addExecutePhase("(1) 存货核算单据来源单据头ID唯一性组合");

		//(3) 所有存货核算单据体的来源单据头ID相同, 归为同一张存货核算单据
		Vector vv = new Vector();
		for (int i = 0; i < v.size(); i++) {
			BillVO tempVO = (BillVO) v.elementAt(i);
			String s1 = ((BillHeaderVO) tempVO.getParentVO()).getCbillid().trim();
			Vector vTemp = new Vector();
			for (int j = 0; j < billVOs.length; j++) {
				String s2 = ((BillHeaderVO) billVOs[j].getParentVO()).getCbillid().trim();
				if (s1.equals(s2)) {
					BillItemVO tempItemVO[] = (BillItemVO[]) billVOs[j].getChildrenVO();
					for (int k = 0; k < tempItemVO.length; k++)
						vTemp.addElement(tempItemVO[k]);
				}
			}

			BillItemVO tempItemVOs[] = new BillItemVO[vTemp.size()];
			vTemp.copyInto(tempItemVOs);

			//重新设置表体行号
			for (int j = 0; j < tempItemVOs.length; j++)
				tempItemVOs[j].setIrownumber(new Integer(j));

			tempVO.setChildrenVO(tempItemVOs);
			vv.addElement(tempVO);
		}

		//(4) 整理需向存货传送的单据
		billVOs = null;
		billVOs = new BillVO[vv.size()];
		vv.copyInto(billVOs);

		timer.addExecutePhase("(3) 所有存货核算单据体的来源单据头ID相同, 归为同一张存货核算单据 + (4) 整理需向存货传送的单据");

		//传送数据
		if (billVOs == null || billVOs.length == 0)
			return;
		String s1 = ((BillHeaderVO) billVOs[0].getParentVO()).getCsourcemodulename();
		String s2 = ((BillItemVO[]) billVOs[0].getChildrenVO())[0].getCsourcebilltypecode();

		//
		String sTime = (new UFDateTime(new Date())).toString();		
		for(int i = 0; i < billVOs.length; i++){
		    ((BillHeaderVO)billVOs[i].getParentVO()).setVbillcode(null);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setTmaketime(sTime);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setTlastmaketime(sTime);
		    ((BillHeaderVO)billVOs[i].getParentVO()).setClastoperatorid(cOperator);
		    BillItemVO bodyVO[] = (BillItemVO[]) billVOs[i].getChildrenVO();
		    if(bodyVO != null && bodyVO.length > 0){
		        for(int j = 0; j < bodyVO.length; j++) bodyVO[j].setVbillcode(null);
		    }
		}
		//
//		myService.saveBillFromOutterArray(billVOs, s1, s2);
		for(int i=0;i<billVOs.length;i++){
			BillVO vo = bo.insert(cl,billVOs[i]);
		}

		timer.addExecutePhase("传送数据[IA保存方法]");

		timer.showAllExecutePhase("调用接口,向存货核算系统传送数据[总时间]时间分布");

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}



/**
 * 功能:依据暂估方式不同,向存货核算系统传递数据;单到回冲,传送暂估入库单;单到补差,传送采购入库单(成批单据传送)
 * 输入:暂估VO[],当前操作员,当前日期
 * 返回:BillVO[]
 * 异常:javax.naming.NamingException, java.rmi.RemoteException, java.sql.SQLException
 * 作者:熊海情
 * 修改:晁志平 FOR V30 删除查询入库单表头表体操作，表头表体对照信息由调用者参数传入
 */
private BillVO[] transferIAData_yf(EstimateVO[] VOs, String cOperator, UFDate dCurrDate)
	throws BusinessException {
	nc.bs.pu.pub.PubImpl myPubService = null;
	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("传入参数为空，直接返回NULL；调用堆栈如下：");
		SCMEnv.out(new Exception());
		return null;
	}
	BillVO billVO[] = null;
	try {
		//获取本位币精度
		myPubService = new nc.bs.pu.pub.PubImpl();
		int nMnyDecimal[] = myPubService.getDigitBatch(VOs[0].getPk_corp(), new String[] { "BD301" });
		if (nMnyDecimal == null || nMnyDecimal.length == 0) {
			nMnyDecimal = new int[1];
			nMnyDecimal[0] = 2;
		}

    //VO转换
    GeneralBillVO icVOs[] = new GeneralBillVO[VOs.length];
    billVO = new BillVO[VOs.length];
    for(int i = 0; i < VOs.length; i++){
    	icVOs[i] = switchVOFromEstimate2IC_yf(VOs[i]);
    	
    	billVO[i] = change45ToI9(icVOs[i]);
    }
    
    
    
    
    
    if(billVO == null || billVO.length == 0) return null;

		//后续处理:表体
    Vector vTemp = new Vector();
		for (int i = 0; i < billVO.length; i++) {
			BillItemVO bodyVO[] = (BillItemVO[])billVO[i].getChildrenVO();

			bodyVO[0].setPk_corp(VOs[i].getPk_corp());
            bodyVO[0].setCbilltypecode("I9");
     
      
			bodyVO[0].setCbill_bid(VOs[i].getCgeneralbid());
			bodyVO[0].setCbillid(VOs[i].getCgeneralhid());

			bodyVO[0].setCsourcebillid(VOs[i].getCgeneralhid());
			bodyVO[0].setCsourcebillitemid(VOs[i].getCgeneralbid());
      bodyVO[0].setCsourcebilltypecode(VOs[0].getCbilltypecode());
      bodyVO[0].setVsourcebillcode(VOs[i].getVbillcode());
      
      
			UFDouble d1 = VOs[i].getNmoney();
			UFDouble d2 = VOs[i].getNmaterialmoney();
			if (d1 == null)
				d1 = new UFDouble(0.0);
			if (d2 == null)
				d2 = new UFDouble(0.0);
			double d = d1.doubleValue() + d2.doubleValue();
			bodyVO[0].setNmoney(new UFDouble(PubDMO.getRoundDouble(nMnyDecimal[0], d)));
			bodyVO[0].setNdrawsummny(d2);

			
			  //zhwj 暂估单价
			  UFDouble zgprice = getZGPrice(VOs[i].getCmangid());
			 UFDouble nnumber = VOs[i].getNinnum()==null?new UFDouble(0):VOs[i].getNinnum();
			  bodyVO[0].setNmoney( new UFDouble(PubDMO.getRoundDouble(nMnyDecimal[0], nnumber.multiply(zgprice).doubleValue())));
			  
			
			d1 = bodyVO[0].getNmoney();
			d2 = bodyVO[0].getNnumber();
			if (d2 != null && d2.doubleValue() != 0.0) {
				d = d1.doubleValue() / d2.doubleValue();
				bodyVO[0].setNprice(new UFDouble(d));
			}

			bodyVO[0].setCfirstbillid(VOs[i].getCfirstbillhid());
			bodyVO[0].setCfirstbillitemid(VOs[i].getCfirstbillbid());
			bodyVO[0].setCfirstbilltypecode(VOs[i].getCfirsttype());
			bodyVO[0].setIrownumber(new Integer(i));
			bodyVO[0].setVbillcode(VOs[i].getVbillcode());
			
			bodyVO[0].setDbizdate(VOs[i].getDbizdate());
			bodyVO[0].setCvendorid(VOs[i].getCvendorid());
      bodyVO[0].setDr(new Integer(0));
			
			//V5新增:库存入库单相关信息
			bodyVO[0].setCicbilltype(VOs[i].getCbilltypecode());
			bodyVO[0].setCicbillcode(VOs[i].getVbillcode());
			bodyVO[0].setCicbillid(VOs[i].getCgeneralhid());
			bodyVO[0].setCicitemid(VOs[i].getCgeneralbid());
      
      vTemp.addElement(bodyVO[0]);
		}
    BillItemVO bodyVO[] = new BillItemVO[vTemp.size()];
    vTemp.copyInto(bodyVO);

		//后续处理:表头
    Vector v = new Vector();
    vTemp = new Vector();
		for (int i = 0; i < billVO.length; i++) {
			BillHeaderVO headVO = (BillHeaderVO)billVO[i].getParentVO();
			
				headVO.setCbilltypecode("I9");
			
			headVO.setCbillid(VOs[i].getCgeneralhid());

			headVO.setDbilldate(dCurrDate);
			headVO.setCsourcemodulename("PO");
			headVO.setFdispatchflag(new Integer(0));

      headVO.setCoperatorid(cOperator);

			headVO.setBestimateflag(new UFBoolean(false));//-----
			headVO.setCwarehousemanagerid(VOs[i].getCwhsmanagerid());
			headVO.setCemployeeid(VOs[i].getCoperatorid());//estiVo.getCoperatorid() 即为入库单表头的业务员(cbizid) Czp 2004-07-21

			headVO.setVbillcode(VOs[i].getVbillcode());
			headVO.setBwithdrawalflag(new UFBoolean(false));
			headVO.setBdisableflag(new UFBoolean(false));
			headVO.setBauditedflag(new UFBoolean(false));
      headVO.setDr(new Integer(0));
      
      if(!v.contains(headVO.getCbillid())){
        v.addElement(headVO.getCbillid());
        vTemp.addElement(headVO);
      }
		}
    BillHeaderVO headVO[] = new BillHeaderVO[vTemp.size()];
    vTemp.copyInto(headVO);

		//组合存货的表头和表体VO
		billVO = new BillVO[headVO.length];
		for (int i = 0; i < billVO.length; i++) {
			billVO[i] = new BillVO();
			billVO[i].setParentVO(headVO[i]);

			vTemp = new Vector();
			String s1 = headVO[i].getCbillid().trim();
			for (int j = 0; j < bodyVO.length; j++) {
				String s2 = bodyVO[j].getCbillid().trim();
				if (s1.equals(s2)) {
					bodyVO[j].setCbilltypecode(headVO[i].getCbilltypecode());
					
					vTemp.addElement(bodyVO[j]);
				}
			}
			BillItemVO tempBodyVO[] = new BillItemVO[vTemp.size()];
			vTemp.copyInto(tempBodyVO);

			billVO[i].setChildrenVO(tempBodyVO);
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	//返回存货核算所需要的VO
	return billVO;
}


   public BillVO change45ToI9(GeneralBillVO genbillvo){
	   if(genbillvo!=null&&genbillvo.getParentVO()!=null&&genbillvo.getChildrenVO()!=null&&genbillvo.getChildrenVO().length>0){
		   GeneralBillHeaderVO hvo = (GeneralBillHeaderVO)genbillvo.getParentVO();
		   GeneralBillItemVO[] bvos = (GeneralBillItemVO[])genbillvo.getChildrenVO();
		   
		   
			 //构建主表
			 		BillHeaderVO headvo=new BillHeaderVO();
			 		headvo.setBauditedflag(UFBoolean.FALSE);
			 		headvo.setBdisableflag(UFBoolean.FALSE);
			 		headvo.setBestimateflag(UFBoolean.FALSE);
			 		headvo.setBwithdrawalflag(UFBoolean.FALSE);
			 		headvo.setCbilltypecode("I9");
			 		headvo.setCcustomvendorid(hvo.getCcustomerid());
//			 		headvo.setClastoperatorid(cl.getUser());
//			 		headvo.setCoperatorid(cl.getUser());
			 		headvo.setCrdcenterid(hvo.getPk_calbody());
//			 		headvo.setDbilldate(cl.getLogonDate());
//			 		headvo.setCdispatchid(pk_rdcl);
			 		headvo.setDr(0);
			 		headvo.setFdispatchflag(0);
//			 		headvo.setIdebtflag(0);
			 		headvo.setPk_corp(hvo.getPk_corp());
			 		//构建子表
			 		BillItemVO[] bodyvos=new BillItemVO[bvos.length];
			 		BillItemVO itemvo=null;
			 		for (int i=0;i<bvos.length;i++){
			 			itemvo=new BillItemVO();
			 			itemvo.setBadjustedItemflag(UFBoolean.FALSE);
			 			itemvo.setBauditbatchflag(UFBoolean.FALSE);
			 			itemvo.setBlargessflag(UFBoolean.FALSE);
			 			itemvo.setBretractflag(UFBoolean.FALSE);
			 			itemvo.setBrtvouchflag(UFBoolean.FALSE);
			 			itemvo.setBtransferincometax(UFBoolean.FALSE);
			 			itemvo.setCbilltypecode("IA");
//			 			itemvo.setCinvbasid(bvos[i].getCinvbasid());
			 			itemvo.setCinventoryid(bvos[i].getCinventoryid());
//			 			itemvo.setCrdcenterid(jfheadvo.getPk_calbody());
//			 			itemvo.setDbizdate(cl.getLogonDate());
			 			itemvo.setDr(0);
//			 			itemvo.setFcalcbizflag(0);
			 			itemvo.setFdatagetmodelflag(1);
			 			itemvo.setFolddatagetmodelflag(1);
			 			itemvo.setFoutadjustableflag(UFBoolean.FALSE);
			 			itemvo.setFpricemodeflag(4);
			 			itemvo.setIauditsequence(-1);
			 			itemvo.setIrownumber(1);
			 			itemvo.setNmoney(bvos[i].getNtaxmny());
			 			itemvo.setNsimulatemny(bvos[i].getNtaxmny());
			 			itemvo.setPk_corp(hvo.getPk_corp());
			 			bodyvos[i]=itemvo;
			 		}
			 		BillVO billvo=new BillVO();
			 		billvo.setParentVO(headvo);
			 		billvo.setChildrenVO(bodyvos);
			 		billvo.setStatus(VOStatus.NEW);
			 		
		 return   billvo;
	   }
	   
	   return null;
   }

   

/**zhwj
 * 功能描述:取消暂估
 * 输入参数:wwEstimateVO[],当前操作员ID
 * 作者：王凯飞
 */
public void antiEstimate_ww(wwEstimateVO VOs[], String cOperator)
	throws BusinessException {
	wwEstimateDMO dmo = null;
	ICreateCorpQueryService myService0 = null;
	boolean bLock = false;

	nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
	timerDebug.start();
	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("传递参数为空，直接返回");
		return;
	}
	//组合所有需要加锁的主键
	String sKeys[] = getEstimateLockKeys_ww(VOs);

	try {
		dmo = new wwEstimateDMO();
		//对单据加锁
		bLock = LockTool.setLockForPks(sKeys, cOperator);
		if (!bLock) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000000")/*@res "正在进行相关操作，请稍后再试！"*/);
		}

		timerDebug.addExecutePhase("组合所有需要加锁的主键及对单据加锁");

		//判断时间戳是否改变
		String sMessage = isTimeStampChanged_wwyf(VOs);
		if (sMessage != null && sMessage.length() > 0) {
			sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000001")/*@res "请刷新！\n"*/;
			throw new BusinessException(sMessage);
		}

		timerDebug.addExecutePhase("判断时间戳是否改变");

		Vector vGeneralHID = new Vector();
		Vector vGeneralBID = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			vGeneralHID.addElement(VOs[i].getCgeneralhid());
			vGeneralBID.addElement(VOs[i].getCgeneralbid());
		}
		//刷新状态：是否已经反暂过(存在则抛异常)
		if (vGeneralBID.size() > 0) {
			dmo.checkExistAntiEsti_yf(vGeneralBID);
		}

		timerDebug.addExecutePhase("刷新状态：是否已经反暂过(存在则抛异常)");
		
//		//判断是否全部反暂
//		if (vGeneralHID.size() > 0) {
//			String sGeneralhid[] = new String[vGeneralHID.size()];
//			vGeneralHID.copyInto(sGeneralhid);
//			String sGeneralbid[] = new String[vGeneralBID.size()];
//			vGeneralBID.copyInto(sGeneralbid);
//
//			//判断是否全部反暂
//			UFBoolean bAll[] = dmo.isAntiEstimateAll(sGeneralhid, sGeneralbid);
//			vGeneralHID = new Vector(); //全部反暂
//			vGeneralBID = new Vector(); //部分反暂
//			for (int i = 0; i < bAll.length; i++) {
//				if (bAll[i].booleanValue())
//					vGeneralHID.addElement(sGeneralhid[i]);
//				else
//					vGeneralBID.addElement(sGeneralbid[i]);
//			}
//		} else {
//			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000002")/*@res "入库单不存在!"*/);
//		}

		timerDebug.addExecutePhase("判断是否全部反暂");

		//zhwj 不用回写标准暂估的信息
//		Vector vAllBodyVoB = new Vector();
//		Vector vAllBodyVoBB3 = new Vector();
//		for (int i = 0; i < VOs.length; i++) {
//			GeneralHItemVO bodyVO = new GeneralHItemVO();
//			bodyVO.setBzgflag(new UFBoolean(false));
//			bodyVO.setBzgyfflag(new UFBoolean(false));
//			bodyVO.setDzgdate(null);
//			bodyVO.setCgeneralbid(VOs[i].getCgeneralbid());
//			vAllBodyVoB.addElement(bodyVO);
//			
//			GeneralBb3VO bb3VO = new GeneralBb3VO();			
//			bb3VO.setNpprice(null);
//			bb3VO.setNpmoney(null);
//			bb3VO.setNzygfprice(null);
//			bb3VO.setNzgyfmoney(null);
//			bb3VO.setNmaterialmoney(null);
//			bb3VO.setCgeneralbid(VOs[i].getCgeneralbid());
//			vAllBodyVoBB3.addElement(bb3VO);
//		}
//		if (vAllBodyVoB.size() > 0) {
//			GeneralHItemVO[] bodyVOs = new GeneralHItemVO[vAllBodyVoB.size()];
//			vAllBodyVoB.copyInto(bodyVOs);
//			dmo.updateBillBody(bodyVOs);
//		}
//		if (vAllBodyVoBB3.size() > 0) {
//			GeneralBb3VO bb3VOs[] = new GeneralBb3VO[vAllBodyVoBB3.size()];
//			vAllBodyVoBB3.copyInto(bb3VOs);
//			dmo.updateBillBb3(bb3VOs);
//		}
		//
		timerDebug.addExecutePhase("入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费");

		if (VOs != null && VOs.length > 0) {
			String unitCode = VOs[0].getPk_corp();
			//判断存货核算是否启用
			/*
			myService0 = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			boolean bIAStartUp = myService0.isEnabled(unitCode, "IA");
			if (bIAStartUp) {
				//入库单反暂时,删除存货核算的相应单据
				if (vGeneralHID.size() > 0) {
					//入库单头ID唯一性组合
					Vector vTemp = new Vector();
					vTemp.addElement(((String) vGeneralHID.elementAt(0)).trim());
					for (int i = 1; i < vGeneralHID.size(); i++) {
						String s1 = ((String) vGeneralHID.elementAt(i)).trim();
						if (!vTemp.contains(s1))
							vTemp.addElement(s1);
					}
					String sGeneralhid[] = new String[vTemp.size()];
					vTemp.copyInto(sGeneralhid);
					deleteBillFromOutter_yf(sGeneralhid, unitCode, cOperator);//--------------------------------
				}
				timerDebug.addExecutePhase("按入库单“表头ID[]”删除存货核算单据");

				if (vGeneralBID.size() > 0) {
					String sGeneralbid[] = new String[vGeneralBID.size()];
					vGeneralBID.copyInto(sGeneralbid);
					deleteBillFromOutterPart_yf(sGeneralbid, cOperator);//------------------------------------
				}
				timerDebug.addExecutePhase("按入库单“表体ID[]”删除存货核算单据");
			}
			*/
			//zhwj 不需判断 直接删除应付单
			deleteBillForZGAP_ww(VOs);
			//删除委外加工收货单
//			deleteBillFromOutterID(VOs,cOperator);//2015-04-24委外加工费反暂，没有生成存货核算采购入库，故删除此方法--wkf--
			
			//zhwj 回写
			dmo.backICStatus_ww(VOs, status[0], "");
			
			
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		PubDMO.throwBusinessException(e);
	} finally {
		try {
//			if (myService != null) {
				//对单据解锁
				if (bLock)
					LockTool.releaseLockForPks(sKeys, cOperator);
//			}
		} catch (Exception e) {
			/*调用采购公用方法按规范抛出异常*/
			PubDMO.throwBusinessException(e);
		}
	}
	timerDebug.showAllExecutePhase("取消暂估BS时间分布：");
}
	//删除委外工加收货单方法
	private void deleteBillFromOutterID(wwEstimateVO[] vos, String userid) {
		
		ArrayList<String> hids = new ArrayList();
		for(int i=0;i<vos.length;i++){
			String headid = vos[i].getCgeneralhid();
			if(!hids.contains(headid)){
				hids.add(headid);
			}
		}
		String[] hidss = new String[hids.size()];
		if(hids.size()>1){
			for (int i = 0; i < hids.size(); i++) {
				hidss[i] = hids.get(i);
			}
			
		}else{
			hidss[0] = hids.get(0);
		}
		String pk_corp = vos[0].getPk_corp();
		
		try {
			deleteBillFromOutter_ww(hidss,pk_corp,userid);
		} catch (BusinessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
/**zhwj
 * 功能描述:取消暂估
 * 输入参数:EstimateVO[],当前操作员ID
 * 作者：熊海情
 * 创建：2001-5-24 14:41:50
 * 修改：晁志平　FOR　V30
 */
public void antiEstimate_yfn(EstimateVO VOs[], String cOperator)
	throws BusinessException {
	EstimateDMO dmo = null;
	ICreateCorpQueryService myService0 = null;
	boolean bLock = false;

	nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
	timerDebug.start();
	if (VOs == null || VOs.length == 0) {
		SCMEnv.out("传递参数为空，直接返回");
		return;
	}
	//组合所有需要加锁的主键
	String sKeys[] = getEstimateLockKeys(VOs);

	try {
		dmo = new EstimateDMO();
		//对单据加锁
		bLock = LockTool.setLockForPks(sKeys, cOperator);
		if (!bLock) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000000")/*@res "正在进行相关操作，请稍后再试！"*/);
		}

		timerDebug.addExecutePhase("组合所有需要加锁的主键及对单据加锁");

		//判断时间戳是否改变
		String sMessage = isTimeStampChanged(VOs);
		if (sMessage != null && sMessage.length() > 0) {
			sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000001")/*@res "请刷新！\n"*/;
			throw new BusinessException(sMessage);
		}

		timerDebug.addExecutePhase("判断时间戳是否改变");

		Vector vGeneralHID = new Vector();
		Vector vGeneralBID = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			vGeneralHID.addElement(VOs[i].getCgeneralhid());
			vGeneralBID.addElement(VOs[i].getCgeneralbid());
		}
		//刷新状态：是否已经反暂过(存在则抛异常)
		if (vGeneralBID.size() > 0) {
			dmo.checkExistAntiEsti_yf(vGeneralBID);
		}

		timerDebug.addExecutePhase("刷新状态：是否已经反暂过(存在则抛异常)");

		//判断是否全部反暂
		if (vGeneralHID.size() > 0) {
			String sGeneralhid[] = new String[vGeneralHID.size()];
			vGeneralHID.copyInto(sGeneralhid);
			String sGeneralbid[] = new String[vGeneralBID.size()];
			vGeneralBID.copyInto(sGeneralbid);

			//判断是否全部反暂
			UFBoolean bAll[] = dmo.isAntiEstimateAll(sGeneralhid, sGeneralbid);
			vGeneralHID = new Vector(); //全部反暂
			vGeneralBID = new Vector(); //部分反暂
			for (int i = 0; i < bAll.length; i++) {
				if (bAll[i].booleanValue())
					vGeneralHID.addElement(sGeneralhid[i]);
				else
					vGeneralBID.addElement(sGeneralbid[i]);
			}
		} else {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000002")/*@res "入库单不存在!"*/);
		}

		timerDebug.addExecutePhase("判断是否全部反暂");

		//zhwj 不用回写标准暂估的信息
//		Vector vAllBodyVoB = new Vector();
//		Vector vAllBodyVoBB3 = new Vector();
//		for (int i = 0; i < VOs.length; i++) {
//			GeneralHItemVO bodyVO = new GeneralHItemVO();
//			bodyVO.setBzgflag(new UFBoolean(false));
//			bodyVO.setBzgyfflag(new UFBoolean(false));
//			bodyVO.setDzgdate(null);
//			bodyVO.setCgeneralbid(VOs[i].getCgeneralbid());
//			vAllBodyVoB.addElement(bodyVO);
//			
//			GeneralBb3VO bb3VO = new GeneralBb3VO();			
//			bb3VO.setNpprice(null);
//			bb3VO.setNpmoney(null);
//			bb3VO.setNzygfprice(null);
//			bb3VO.setNzgyfmoney(null);
//			bb3VO.setNmaterialmoney(null);
//			bb3VO.setCgeneralbid(VOs[i].getCgeneralbid());
//			vAllBodyVoBB3.addElement(bb3VO);
//		}
//		if (vAllBodyVoB.size() > 0) {
//			GeneralHItemVO[] bodyVOs = new GeneralHItemVO[vAllBodyVoB.size()];
//			vAllBodyVoB.copyInto(bodyVOs);
//			dmo.updateBillBody(bodyVOs);
//		}
//		if (vAllBodyVoBB3.size() > 0) {
//			GeneralBb3VO bb3VOs[] = new GeneralBb3VO[vAllBodyVoBB3.size()];
//			vAllBodyVoBB3.copyInto(bb3VOs);
//			dmo.updateBillBb3(bb3VOs);
//		}
		//
		timerDebug.addExecutePhase("入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费");

		if (VOs != null && VOs.length > 0) {
			String unitCode = VOs[0].getPk_corp();
			//判断存货核算是否启用
			myService0 = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			boolean bIAStartUp = myService0.isEnabled(unitCode, "IA");
			if (bIAStartUp) {
				//入库单反暂时,删除存货核算的相应单据
				if (vGeneralHID.size() > 0) {
					//入库单头ID唯一性组合
					Vector vTemp = new Vector();
					vTemp.addElement(((String) vGeneralHID.elementAt(0)).trim());
					for (int i = 1; i < vGeneralHID.size(); i++) {
						String s1 = ((String) vGeneralHID.elementAt(i)).trim();
						if (!vTemp.contains(s1))
							vTemp.addElement(s1);
					}
					String sGeneralhid[] = new String[vTemp.size()];
					vTemp.copyInto(sGeneralhid);
					deleteBillFromOutter_yf(sGeneralhid, unitCode, cOperator);//--------------------------------
				}
				timerDebug.addExecutePhase("按入库单“表头ID[]”删除存货核算单据");

				if (vGeneralBID.size() > 0) {
					String sGeneralbid[] = new String[vGeneralBID.size()];
					vGeneralBID.copyInto(sGeneralbid);
					deleteBillFromOutterPart_yf(sGeneralbid, cOperator);//------------------------------------
				}
				timerDebug.addExecutePhase("按入库单“表体ID[]”删除存货核算单据");
			}
			
			//zhwj 不需判断 直接删除应付单
			if(myService0.isEnabled(unitCode, "AP")){
				//应付启用,删除暂估应付
				//******
				deleteBillForZGAP_yf(VOs);
				//******
			}
			
			//zhwj 回写
			dmo.backICStatus(VOs, status[0], null);
			
			
		}
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		PubDMO.throwBusinessException(e);
	} finally {
		try {
//			if (myService != null) {
				//对单据解锁
				if (bLock)
					LockTool.releaseLockForPks(sKeys, cOperator);
//			}
		} catch (Exception e) {
			/*调用采购公用方法按规范抛出异常*/
			PubDMO.throwBusinessException(e);
		}
	}
	timerDebug.showAllExecutePhase("取消暂估BS时间分布：");
}
   

/**zhwj 手工回写入库调整单
 * 功能描述:取消暂估--按入库单表头ID删除存货核算系统数据
 * 输入参数:EstimateVO[],公司主键,当前操作员ID
 * 作者：熊海情
 * 创建：2001-5-24 14:41:50
 * 修改：晁志平　FOR　V30
 */
private void deleteBillFromOutter_yf(String cGeneralhid[], String cPkCorp, String cOperator)
	throws BusinessException {
	try {
		nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
		timerDebug.start();

//		IIAToPUBill myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
//		myService.deleteBillFromOutterArray(cGeneralhid, cPkCorp, cOperator);
		
		HashMap hm_cghid = new HashMap();
		if(cGeneralhid!=null&&cGeneralhid.length>0){
			for(int i=0;i<cGeneralhid.length;i++){
				if(hm_cghid.containsKey(cGeneralhid[i])){
					continue;
				}
				
				deleteBillI9all_yf(cGeneralhid[i]);
				hm_cghid.put(cGeneralhid[i],cGeneralhid[i]);
				
			}
		}
		timerDebug.showExecuteTime("取消暂估-按入库单表体ID删除存货核算系统数据<BillBO.deleteBillFromOutterArray()>时间");
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**zhwj 手工回写委外加工收货单
 * 功能描述:取消暂估--按入库单表头ID删除存货核算系统数据
 * 输入参数:EstimateVO[],公司主键,当前操作员ID
 * 作者：王凯飞
 */
private void deleteBillFromOutter_ww(String cGeneralhid[], String cPkCorp, String cOperator)
	throws BusinessException {
	try {
		nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
		timerDebug.start();

//		IIAToPUBill myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
//		myService.deleteBillFromOutterArray(cGeneralhid, cPkCorp, cOperator);
		
		HashMap hm_cghid = new HashMap();
		if(cGeneralhid!=null&&cGeneralhid.length>0){
			for(int i=0;i<cGeneralhid.length;i++){
				if(hm_cghid.containsKey(cGeneralhid[i])){
					continue;
				}
				deleteBillIDall_ww(cGeneralhid[i],cPkCorp);
				hm_cghid.put(cGeneralhid[i],cGeneralhid[i]);
			}
		}
		timerDebug.showExecuteTime("取消暂估-按入库单表头ID删除存货核算系统数据<BillBO.deleteBillFromOutterArray()>时间");
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

private BaseDAO basedao = new BaseDAO();
public BaseDAO getBaseDAO(){
	if(basedao==null){
		basedao = new BaseDAO();
	}
	return basedao;
}

//zhwj
public void deleteBillI9all_yf(String cGeneralhid) throws BusinessException{
	StringBuffer sql = new StringBuffer();
	
	sql.append(" select distinct ia.cbillid,ia.vbillcode from ia_bill ia ")
	.append(" inner join ia_bill_b iab  ")
	.append(" on ia.cbillid=iab.cbillid ")
	.append(" where iab.csourcebillid='"+cGeneralhid+"'   ")
	.append(" and ia.cbilltypecode='I9' ")
	.append(" and nvl(ia.dr,0)=0 ")
	.append(" and nvl(iab.dr,0)=0 ")
	.append(" and iab.cauditorid is not null ");//已成本计算
ArrayList list = (ArrayList)getBaseDAO().executeQuery(sql.toString(), new MapListProcessor());
if(list!=null&&list.size()>0){
	String err = "";
	for(int i=0;i<list.size();i++){
		HashMap hm =(HashMap)list.get(i);
		String vbillcode = hm==null?"":hm.get("vbillcode")==null?"":hm.get("vbillcode").toString();
		err = err+","+vbillcode;
	}
	
	throw new BusinessException("入库调整单<"+err.substring(1)+">已成本计算，不能反暂估，请先取消成本计算");
}
	
	
	
     sql = new StringBuffer();
	
	 sql.append(" select distinct ia.cbillid from ia_bill ia ")
		.append(" inner join ia_bill_b iab  ")
		.append(" on ia.cbillid=iab.cbillid ")
		.append(" where iab.csourcebillid='"+cGeneralhid+"'   ")
		.append(" and ia.cbilltypecode='I9' ")
		.append(" and nvl(ia.dr,0)=0 ")
		.append(" and nvl(iab.dr,0)=0 ");
	 list = (ArrayList)getBaseDAO().executeQuery(sql.toString(), new MapListProcessor());
	 
	
	
	
	if(list!=null&&list.size()>0){
		for(int i=0;i<list.size();i++){
			HashMap hm =(HashMap)list.get(i);
			String cbillid = hm==null?"":hm.get("cbillid")==null?"":hm.get("cbillid").toString();
			if(cbillid!=null&&!cbillid.equals("")){
				
				String sqlupdate = "update ia_bill set dr=1 where cbillid='"+cbillid+"'";
				getBaseDAO().executeUpdate(sqlupdate);
			    sqlupdate = "update ia_bill_b set dr=1 where cbillid='"+cbillid+"'";
			    getBaseDAO().executeUpdate(sqlupdate);
			}
		}
	}
	
}

//wkf
public void deleteBillIDall_ww(String cGeneralhid,String pk_corp) throws BusinessException{
	StringBuffer sql = new StringBuffer();
	
	sql.append(" select distinct ia.cbillid,ia.vbillcode from ia_bill ia ")
	.append(" inner join ia_bill_b iab  ")
	.append(" on ia.cbillid=iab.cbillid ")
	.append(" where iab.csourcebillid='"+cGeneralhid+"'   ")
	.append(" and ia.cbilltypecode='I2' ")
	.append(" and nvl(ia.dr,0)=0 ")
	.append(" and nvl(iab.dr,0)=0 ")
	.append(" and ia.pk_corp = '"+pk_corp+"' ")
	.append(" and iab.cauditorid is not null ");//已成本计算
ArrayList list = (ArrayList)getBaseDAO().executeQuery(sql.toString(), new MapListProcessor());
if(list!=null&&list.size()>0){
	String err = "";
	for(int i=0;i<list.size();i++){
		HashMap hm =(HashMap)list.get(i);
		String vbillcode = hm==null?"":hm.get("vbillcode")==null?"":hm.get("vbillcode").toString();
		err = err+","+vbillcode;
	}
	
	throw new BusinessException("委外加工收货单<"+err.substring(1)+">已成本计算，不能反暂估，请先取消成本计算");
}
	
	
	
   sql = new StringBuffer();
	
	 sql.append(" select distinct ia.cbillid from ia_bill ia ")
		.append(" inner join ia_bill_b iab  ")
		.append(" on ia.cbillid=iab.cbillid ")
		.append(" where iab.csourcebillid='"+cGeneralhid+"'   ")
		.append(" and ia.cbilltypecode='I2' ")
		.append(" and nvl(ia.dr,0)=0 ")
		.append(" and nvl(iab.dr,0)=0 ")
		.append(" and ia.pk_corp = '"+pk_corp+"' ");
	 list = (ArrayList)getBaseDAO().executeQuery(sql.toString(), new MapListProcessor());
	 
	
	
	
	if(list!=null&&list.size()>0){
		for(int i=0;i<list.size();i++){
			HashMap hm =(HashMap)list.get(i);
			String cbillid = hm==null?"":hm.get("cbillid")==null?"":hm.get("cbillid").toString();
			if(cbillid!=null&&!cbillid.equals("")){
				
				String sqlupdate = "update ia_bill set dr=1 where cbillid='"+cbillid+"'";
				getBaseDAO().executeUpdate(sqlupdate);
			    sqlupdate = "update ia_bill_b set dr=1 where cbillid='"+cbillid+"'";
			    getBaseDAO().executeUpdate(sqlupdate);
			}
		}
	}
	
}


//zhwj
public void deleteBillI9body_yf(String cGeneralbid) throws BusinessException{
	StringBuffer sql = new StringBuffer();
	 sql.append(" select distinct ia.cbillid,iab.cbill_bid from ia_bill ia ")
		.append(" inner join ia_bill_b iab  ")
		.append(" on ia.cbillid=iab.cbillid ")
		.append(" where iab.csourcebillitemid='"+cGeneralbid+"'   ")
		.append(" and ia.cbilltypecode='I9' ")
		.append(" and nvl(ia.dr,0)=0 ")
		.append(" and nvl(iab.dr,0)=0 ");
	ArrayList list = (ArrayList)getBaseDAO().executeQuery(sql.toString(), new MapListProcessor());
	 
	if(list!=null&&list.size()>0){
		for(int i=0;i<list.size();i++){
			HashMap hm =(HashMap)list.get(i);
			String cbillid = hm==null?"":hm.get("cbillid")==null?"":hm.get("cbillid").toString();
			String cbill_bid = hm==null?"":hm.get("cbill_bid")==null?"":hm.get("cbill_bid").toString();
			if(cbillid!=null&&!cbillid.equals("")
			   &&cbill_bid!=null&&!cbill_bid.equals("")){
				
				//删除子表记录
				String sqlupdate = "update ia_bill_b set dr=1 where cbill_bid='"+cbill_bid+"'";
				    getBaseDAO().executeUpdate(sqlupdate);
				
				//该单据子表都被删除则删除表头
				String sqlquery="select * from ia_bill_b  where cbillid='"+cbillid+"' and nvl(dr,0)=0";
				ArrayList list2 = (ArrayList)getBaseDAO().executeQuery(sqlquery, new MapListProcessor());
				if(list2==null||list2.size()==0){
					 sqlupdate = "update ia_bill set dr=1 where cbillid='"+cbillid+"'";
						getBaseDAO().executeUpdate(sqlupdate);
				}
				
			   
			}
		}
	}
	
}



/**zhwj 手工回写入库调整单
 * 功能描述:取消暂估--按入库单表体ID删除存货核算系统数据
 * 输入参数:EstimateVO[],当前操作员ID
 * 作者：熊海情
 * 创建：2001-5-24 14:41:50
 * 修改：晁志平　FOR　V30
 */
private void deleteBillFromOutterPart_yf(String cGeneralbid[], String cOperator) throws BusinessException {
	try {
		nc.vo.scm.pu.Timer timerDebug = new nc.vo.scm.pu.Timer();
		timerDebug.start();
//		IIAToPUBill myService = (IIAToPUBill) NCLocator.getInstance().lookup(IIAToPUBill.class.getName());
//		myService.deleteBillItemForPUs(cGeneralbid, cOperator);
		
		if(cGeneralbid!=null&&cGeneralbid.length>0){
			for(int i=0;i<cGeneralbid.length;i++){
				
				deleteBillI9body_yf(cGeneralbid[i]);
				
			}
		}
		
		
		timerDebug.showExecuteTime("取消暂估-按入库单表体ID删除存货核算系统数据<BillBO.deleteBillItemForPUs()>时间");
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}


//zhwj
private void deleteBillForZGAP_yf(EstimateVO VOs[])
throws BusinessException {
	Vector v1 = new Vector();
	for(int i = 0; i < VOs.length; i++){
//		if(VOs[i].getBzgyf().booleanValue()) //zhwj
			v1.addElement(VOs[i]);
	}
	EstimateVO VO[] = new EstimateVO[v1.size()];
	v1.copyInto(VO);
	
	if(VO != null && VO.length > 0){
		v1 = new Vector();
		for (int i = 0; i < VO.length; i++) {
			// 生成应付单体
			DJZBItemVO bodyVO = new DJZBItemVO();
			bodyVO.setDdlx(VO[i].getCgeneralhid()); // 上层单据ID
			bodyVO.setDdhh(VO[i].getCgeneralbid()); // 上层单据行ID(暂传“上层单据ID”)						
			
			DJZBVO tempVO = new DJZBVO();
			DJZBHeaderVO headvo = new DJZBHeaderVO();//zhwj
			headvo.setZyx29("Y");//zhwj 运费暂估时 zyx29设为Y 删除根据该值判断
			tempVO.setParentVO(headvo);
			tempVO.setChildrenVO(new DJZBItemVO[]{bodyVO});
			 
			v1.addElement(tempVO);
		}

		DJZBVO apVOs[] = new DJZBVO[v1.size()];
		v1.copyInto(apVOs);
	
		IArapForGYLPublic iArap = (IArapForGYLPublic) NCLocator.getInstance().lookup(IArapForGYLPublic.class.getName());
		for(int i = 0; i < apVOs.length; i++){
			iArap.deleteEffForCG(apVOs[i]);
		}
	}
}

//王凯飞
private void deleteBillForZGAP_ww(wwEstimateVO VOs[])
throws BusinessException {
	Vector v1 = new Vector();
	for(int i = 0; i < VOs.length; i++){
//		if(VOs[i].getBzgyf().booleanValue()) //zhwj
			v1.addElement(VOs[i]);
	}
	wwEstimateVO VO[] = new wwEstimateVO[v1.size()];
	v1.copyInto(VO);
	
	if(VO != null && VO.length > 0){
		v1 = new Vector();
		for (int i = 0; i < VO.length; i++) {
			// 生成应付单体
			DJZBItemVO bodyVO = new DJZBItemVO();
			bodyVO.setDdlx(VO[i].getCgeneralhid()); // 上层单据ID
			bodyVO.setDdhh(VO[i].getCgeneralbid()); // 上层单据行ID(暂传“上层单据ID”)						
			
			DJZBVO tempVO = new DJZBVO();
			DJZBHeaderVO headvo = new DJZBHeaderVO();//zhwj
			headvo.setZyx29("Y");//zhwj 应付暂估时 zyx29设为Y 删除根据该值判断
			headvo.setDdlx(VO[i].getCgeneralhid());
			tempVO.setParentVO(headvo);
			tempVO.setChildrenVO(new DJZBItemVO[]{bodyVO});
			
			v1.addElement(tempVO);
		}

		DJZBVO[] apVOss = new DJZBVO[v1.size()];
		v1.copyInto(apVOss);
		DJZBVO[] apVOs = DJZBVOMerge1(apVOss);
		IArapForGYLPublic iArap = (IArapForGYLPublic) NCLocator.getInstance().lookup(IArapForGYLPublic.class.getName());
		for(int i = 0; i < apVOs.length; i++){
			iArap.deleteEffForCG(apVOs[i]);
		}
	}
}


//zhwj 获取存货管理档案上的暂估单价 def20
public UFDouble getZGPrice(String pk_invmandoc) {
	String sql = "select nvl(def20,0) def20 from bd_invmandoc where pk_invmandoc='"+pk_invmandoc+"' and nvl(dr,0)=0 ";
	try {
		Object obj = getBaseDAO().executeQuery(sql, new ColumnProcessor());
		return obj==null?new UFDouble(0):new UFDouble(obj.toString());
	} catch (DAOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
		return new UFDouble(0);
	}
	
	
}



/*zhwj
 * 暂估VO转换为库存入库单VO,服务于暂估VO对照
 * 2007-03-19 xhq
 */
private GeneralBillVO switchVOFromEstimate2IC_yf(EstimateVO estVO){
  GeneralBillItemVO bodyVO = new GeneralBillItemVO();
  
  bodyVO.setCgeneralbid(estVO.getCgeneralbid());
  bodyVO.setCgeneralhid(estVO.getCgeneralhid());

  bodyVO.setCinventoryid(estVO.getCmangid());
  bodyVO.setVbatchcode(estVO.getVbatchcode());
  bodyVO.setNinnum(estVO.getNinnum());  
  
  

	//获取本位币精度
	nc.bs.pu.pub.PubImpl myPubService = new nc.bs.pu.pub.PubImpl();
	int nMnyDecimal[];
	try {
		nMnyDecimal = myPubService.getDigitBatch(estVO.getPk_corp(), new String[] { "BD301" });
	
		if (nMnyDecimal == null || nMnyDecimal.length == 0) {
			nMnyDecimal = new int[1];
			nMnyDecimal[0] = 2;
	
  
		  //zhwj 暂估单价
		  UFDouble zgprice = getZGPrice(estVO.getCmangid());
		  
		 UFDouble nnumber = estVO.getNinnum()==null?new UFDouble(0):estVO.getNinnum();
		 UFDouble ntotalmoney = zgprice.multiply(nnumber);
		 
		 ntotalmoney = new UFDouble(PubDMO.getRoundDouble(nMnyDecimal[0], ntotalmoney.doubleValue()));
		 
		 bodyVO.setNmny(ntotalmoney);
		 bodyVO.setNprice(zgprice);
  
		}
		} catch (BusinessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//  bodyVO.setNmny(estVO.getNmoney());
//  bodyVO.setNprice(estVO.getNprice());

  bodyVO.setCaccountunitid(estVO.getCastunitid());
  bodyVO.setHsl(estVO.getHsl());
  bodyVO.setNinassistnum(estVO.getNinassistnum());
  
  bodyVO.setCfirstbillhid(estVO.getCfirstbillhid());
  bodyVO.setCfirstbillbid(estVO.getCfirstbillbid());
  bodyVO.setCfirsttype(estVO.getCfirsttype());

  bodyVO.setVfree1(estVO.getVfree1());
  bodyVO.setVfree2(estVO.getVfree2());
  bodyVO.setVfree3(estVO.getVfree3());
  bodyVO.setVfree4(estVO.getVfree4());
  bodyVO.setVfree5(estVO.getVfree5());

  bodyVO.setCprojectid(estVO.getCprojectid());
  bodyVO.setCprojectphaseid(estVO.getCprojectphaseid());

  bodyVO.setVuserdef1(estVO.getVuserdef1());
  bodyVO.setVuserdef2(estVO.getVuserdef2());
  bodyVO.setVuserdef3(estVO.getVuserdef3());
  bodyVO.setVuserdef4(estVO.getVuserdef4());
  bodyVO.setVuserdef5(estVO.getVuserdef5());
  bodyVO.setVuserdef6(estVO.getVuserdef6());
  bodyVO.setVuserdef7(estVO.getVuserdef7());
  bodyVO.setVuserdef8(estVO.getVuserdef8());
  bodyVO.setVuserdef9(estVO.getVuserdef9());
  bodyVO.setVuserdef10(estVO.getVuserdef10());
    
  bodyVO.setAttributeValue("vuserdef11", estVO.getVuserdef11());
  bodyVO.setAttributeValue("vuserdef12", estVO.getVuserdef12());
  bodyVO.setAttributeValue("vuserdef13", estVO.getVuserdef13());
  bodyVO.setAttributeValue("vuserdef14", estVO.getVuserdef14());
  bodyVO.setAttributeValue("vuserdef15", estVO.getVuserdef15());
  bodyVO.setAttributeValue("vuserdef16", estVO.getVuserdef16());
  bodyVO.setAttributeValue("vuserdef17", estVO.getVuserdef17());
  bodyVO.setAttributeValue("vuserdef18", estVO.getVuserdef18());
  bodyVO.setAttributeValue("vuserdef19", estVO.getVuserdef19());
  bodyVO.setAttributeValue("vuserdef20", estVO.getVuserdef20());
    
  bodyVO.setAttributeValue("pk_defdoc1", estVO.getPk_defdocb1());
  bodyVO.setAttributeValue("pk_defdoc2", estVO.getPk_defdocb2());
  bodyVO.setAttributeValue("pk_defdoc3", estVO.getPk_defdocb3());
  bodyVO.setAttributeValue("pk_defdoc4", estVO.getPk_defdocb4());
  bodyVO.setAttributeValue("pk_defdoc5", estVO.getPk_defdocb5());
  bodyVO.setAttributeValue("pk_defdoc6", estVO.getPk_defdocb6());
  bodyVO.setAttributeValue("pk_defdoc7", estVO.getPk_defdocb7());
  bodyVO.setAttributeValue("pk_defdoc8", estVO.getPk_defdocb8());
  bodyVO.setAttributeValue("pk_defdoc9", estVO.getPk_defdocb9());
  bodyVO.setAttributeValue("pk_defdoc10", estVO.getPk_defdocb10());

  bodyVO.setAttributeValue("pk_defdoc11", estVO.getPk_defdocb11());
  bodyVO.setAttributeValue("pk_defdoc12", estVO.getPk_defdocb12());
  bodyVO.setAttributeValue("pk_defdoc13", estVO.getPk_defdocb13());
  bodyVO.setAttributeValue("pk_defdoc14", estVO.getPk_defdocb14());
  bodyVO.setAttributeValue("pk_defdoc15", estVO.getPk_defdocb15());
  bodyVO.setAttributeValue("pk_defdoc16", estVO.getPk_defdocb16());
  bodyVO.setAttributeValue("pk_defdoc17", estVO.getPk_defdocb17());
  bodyVO.setAttributeValue("pk_defdoc18", estVO.getPk_defdocb18());
  bodyVO.setAttributeValue("pk_defdoc19", estVO.getPk_defdocb19());
  bodyVO.setAttributeValue("pk_defdoc20", estVO.getPk_defdocb20());
    
  bodyVO.setDbizdate(estVO.getDbizdate());
  bodyVO.setCvendorid(estVO.getCvendorid());

  GeneralBillHeaderVO headVO = new GeneralBillHeaderVO();
  headVO.setPk_corp(estVO.getPk_corp());
  headVO.setCbilltypecode(estVO.getCbilltypecode());
  headVO.setCgeneralhid(estVO.getCgeneralhid());

  headVO.setCdispatcherid(estVO.getCdispatcherid());

  headVO.setCbiztypeid(estVO.getCbiztype());
  headVO.setPk_calbody(estVO.getCcalbodyid());
  headVO.setCwarehouseid(estVO.getCwarehouseid());

  headVO.setCdptid(estVO.getCdptid());
  headVO.setCproviderid(estVO.getCprovidermangid());

  headVO.setVnote(estVO.getVnote());
  headVO.setCwhsmanagerid(estVO.getCwhsmanagerid());
  headVO.setCbizid(estVO.getCoperatorid());

  headVO.setVbillcode(estVO.getVbillcode());
  headVO.setIscalculatedinvcost(estVO.getBcalculatecost());

  headVO.setVuserdef1(estVO.getVuserdefh1());
  headVO.setVuserdef2(estVO.getVuserdefh2());
  headVO.setVuserdef3(estVO.getVuserdefh3());
  headVO.setVuserdef4(estVO.getVuserdefh4());
  headVO.setVuserdef5(estVO.getVuserdefh5());
  headVO.setVuserdef6(estVO.getVuserdefh6());
  headVO.setVuserdef7(estVO.getVuserdefh7());
  headVO.setVuserdef8(estVO.getVuserdefh8());
  headVO.setVuserdef9(estVO.getVuserdefh9());
  headVO.setVuserdef10(estVO.getVuserdefh10());
    
  headVO.setAttributeValue("vuserdef11", estVO.getVuserdefh11());
  headVO.setAttributeValue("vuserdef12", estVO.getVuserdefh12());
  headVO.setAttributeValue("vuserdef13", estVO.getVuserdefh13());
  headVO.setAttributeValue("vuserdef14", estVO.getVuserdefh14());
  headVO.setAttributeValue("vuserdef15", estVO.getVuserdefh15());
  headVO.setAttributeValue("vuserdef16", estVO.getVuserdefh16());
  headVO.setAttributeValue("vuserdef17", estVO.getVuserdefh17());
  headVO.setAttributeValue("vuserdef18", estVO.getVuserdefh18());
  headVO.setAttributeValue("vuserdef19", estVO.getVuserdefh19());
  headVO.setAttributeValue("vuserdef20", estVO.getVuserdefh20());
    
  headVO.setAttributeValue("pk_defdoc1", estVO.getPk_defdoch1());
  headVO.setAttributeValue("pk_defdoc2", estVO.getPk_defdoch2());
  headVO.setAttributeValue("pk_defdoc3", estVO.getPk_defdoch3());
  headVO.setAttributeValue("pk_defdoc4", estVO.getPk_defdoch4());
  headVO.setAttributeValue("pk_defdoc5", estVO.getPk_defdoch5());
  headVO.setAttributeValue("pk_defdoc6", estVO.getPk_defdoch6());
  headVO.setAttributeValue("pk_defdoc7", estVO.getPk_defdoch7());
  headVO.setAttributeValue("pk_defdoc8", estVO.getPk_defdoch8());
  headVO.setAttributeValue("pk_defdoc9", estVO.getPk_defdoch9());
  headVO.setAttributeValue("pk_defdoc10", estVO.getPk_defdoch10());

  headVO.setAttributeValue("pk_defdoc11", estVO.getPk_defdoch11());
  headVO.setAttributeValue("pk_defdoc12", estVO.getPk_defdoch12());
  headVO.setAttributeValue("pk_defdoc13", estVO.getPk_defdoch13());
  headVO.setAttributeValue("pk_defdoc14", estVO.getPk_defdoch14());
  headVO.setAttributeValue("pk_defdoc15", estVO.getPk_defdoch15());
  headVO.setAttributeValue("pk_defdoc16", estVO.getPk_defdoch16());
  headVO.setAttributeValue("pk_defdoc17", estVO.getPk_defdoch17());
  headVO.setAttributeValue("pk_defdoc18", estVO.getPk_defdoch18());
  headVO.setAttributeValue("pk_defdoc19", estVO.getPk_defdoch19());
  headVO.setAttributeValue("pk_defdoc20", estVO.getPk_defdoch20());

  GeneralBillVO VO = new GeneralBillVO(1);
  VO.setParentVO(headVO);
  VO.setChildrenVO(new GeneralBillItemVO[]{bodyVO});
  return VO;  
}



/*
 * 暂估应付保存
 */
public void saveBillForARAP_yf(EstimateVO VOs[], ArrayList paraList) throws BusinessException {
	String sCurrTypeID = (String)paraList.get(0);
	String cOperator = (String)paraList.get(1);
	UFDate dCurrDate = (UFDate)paraList.get(2);
	nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();
	
	try {
		nc.bs.ps.estimate.EstimateDMO dmo = new nc.bs.ps.estimate.EstimateDMO();
		
		//2006-09-12 xhq 支持应付单单据类型配置
		IPFMetaModel myService = (IPFMetaModel) nc.bs.framework.common.NCLocator.getInstance().lookup(IPFMetaModel.class.getName());
		Hashtable tBillType = new Hashtable();//应付单据类型
		for(int i = 0; i < VOs.length; i++){
			String key = "25" + VOs[i].getCbiztype() + "APPROVE";
			if(tBillType.get(key) == null){
				MessagedriveVO driveVO[] = myService.queryAllMsgdrvVOs(null, "25", VOs[i].getCbiztype(), "APPROVE");
				if(driveVO != null && driveVO.length > 0 && driveVO[0].getPk_billtype() != null) tBillType.put(key, driveVO[0].getPk_billtype());
			}
		}
		
		Hashtable tBillTemplet = new Hashtable();//应付单据模板			
		for(int i = 0; i < VOs.length; i++){
			String key = "25" + VOs[i].getCbiztype() + "APPROVE";
			if(tBillType.get(key) == null) tBillType.put(key, "D1");					
			
			String key1 = VOs[i].getPk_corp() + tBillType.get(key);
			if(tBillTemplet.get(key1) == null){
				String ss[] = dmo.getDJDataForARAP(VOs[i].getPk_corp(), tBillType.get(key).toString());
				if(ss != null) tBillTemplet.put(key1, ss);
			}
		}

		//暂估应付时,供应商取订单发票方,发票方不存在,取供应商 2006-08-25
		Vector vTemp = new Vector();
		for(int i = 0; i < VOs.length; i++){
			String s = VOs[i].getCfirstbillhid();
			if(s != null && !vTemp.contains(s)) vTemp.addElement(s);
		}
		Hashtable t = null;
		if(vTemp.size() > 0){
			String corderid[] = new String[vTemp.size()];
			vTemp.copyInto(corderid);
			t = dmo.getOrderInvoiceReceiver(corderid);
			if(t != null && t.size() > 0){
				for(int i = 0; i < VOs.length; i++){
					String s = VOs[i].getCfirstbillhid();
					if(s != null && t.get(s) != null){
						String ss[] = (String[])t.get(s);
						VOs[i].setCprovidermangid(ss[0]);
					}
				}				
			}
		}
		
		//查询供应商基本ID
		String pk_cumandoc[] = new String[VOs.length];
		for(int i = 0; i < VOs.length; i++) pk_cumandoc[i] = VOs[i].getCprovidermangid();
		SettleDMO settleDMO = new SettleDMO();
		String pk_cubasdoc[] = settleDMO.queryVendorBaseIDForARAP(pk_cumandoc);
		if (pk_cubasdoc != null && pk_cubasdoc.length > 0) {
			for (int i = 0; i < VOs.length; i++) {
				VOs[i].setCproviderbaseid(pk_cubasdoc[i]);
			}
		}
		//查询存货基本ID
		Vector v1 = new Vector();
		for(int i = 0; i < VOs.length; i++){
			if(VOs[i].getCbaseid() == null) v1.addElement(VOs[i].getCmangid());
		}
		if(v1.size() > 0){
			pk_cumandoc = new String[v1.size()];
			v1.copyInto(pk_cumandoc);
			pk_cubasdoc = settleDMO.getInvBaseID(pk_cumandoc);
			if (pk_cubasdoc != null && pk_cubasdoc.length > 0) {
				int j = 0;
				for (int i = 0; i < VOs.length; i++) {
					if(VOs[i].getCbaseid() == null){
						VOs[i].setCbaseid(pk_cubasdoc[j]);
						j++;
					}
				}
			}
		}

    //VO转换
    GeneralBillVO icVOs[] = new GeneralBillVO[VOs.length];
    for(int i = 0; i < VOs.length; i++) icVOs[i] = switchVOFromEstimate2IC_yf(VOs[i]);
    DJZBVO arapVO[] = (DJZBVO[]) PfUtilTools.runChangeDataAry("45", "D1", icVOs);
    if(arapVO == null || arapVO.length == 0) return;

		// 根据采购入库单生成应付单
		v1 = new Vector();
		Vector v2 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			//后续处理:应付单头
			DJZBHeaderVO headVO = (DJZBHeaderVO)arapVO[i].getParentVO();
			headVO.setVouchid(VOs[i].getCgeneralhid());

			String key = "25" + VOs[i].getCbiztype() + "APPROVE";
			String cBillType = tBillType.get(key).toString();
			String ss[] = null;
			key = VOs[i].getPk_corp() + tBillType.get(key);
			if(tBillTemplet.get(key) != null) ss = (String[])tBillTemplet.get(key);
			if (ss != null && ss.length > 0) headVO.setYwbm(ss[0]);
			
			headVO.setLrr(cOperator);
			headVO.setDjrq(dCurrDate);
			headVO.setDjkjnd(Integer.toString(VOs[i].getDbilldate()
					.getYear()));
			
			String sTemp = Integer.toString(VOs[i].getDbilldate().getMonth());
			if(sTemp.length() < 2) sTemp = "0" + sTemp;
			headVO.setDjkjqj(sTemp);
			
			headVO.setAttributeValue("zgyf",new Integer(1));//暂估应付
			// 头非空
			headVO.setPrepay(new UFBoolean(false));
			headVO.setDjlxbm(cBillType);
			headVO.setQcbz(new UFBoolean(false));
			headVO.setLybz(new Integer(4));
			headVO.setDjzt(new Integer(1));
			headVO.setDjdl("yf");
			headVO.setPzglh(new Integer(1));
			headVO.setWldx(new Integer(1));
			
			//zhwj 运费暂估 应付单增加标识，反暂时需要处理
			headVO.setZyx29("Y");
			
			headVO.setScomment("价外费暂估自动生成"); 
			//
			v1.addElement(headVO);
			
			//后续处理:应付单体
			DJZBItemVO bodyVO[] = (DJZBItemVO[])arapVO[i].getChildrenVO();
			bodyVO[0].setDwbm(VOs[i].getPk_corp());
			bodyVO[0].setFb_oid(VOs[i].getCgeneralbid());

			bodyVO[0].setHbbm(VOs[i].getCproviderbaseid()); //供应商基本ID
			bodyVO[0].setCinventoryid(VOs[i].getCbaseid()); //存货基本ID

			bodyVO[0].setFbye(new UFDouble(0)); // 辅币余额

			bodyVO[0].setDffbje(new UFDouble(0)); // 贷方辅币余额
			bodyVO[0].setWldx(new Integer(1));
			
			bodyVO[0].setDdhid(VOs[i].getCfirstbillhid());//订单行ID
			bodyVO[0].setDdh(VOs[i].getVfirstbillcode());//订单号
			bodyVO[0].setCkdid(VOs[i].getCgeneralbid());//出入库单行ID
			bodyVO[0].setFphid(null);//发票行ID
			bodyVO[0].setFph(null);//发票号
			bodyVO[0].setAttributeValue("ckdh", VOs[i].getVbillcode());//出库单号
			if(VOs[i].getCfirstbillhid() != null && t != null){
				if(t.get(VOs[i].getCfirstbillhid()) != null){
					ss = (String[])t.get(VOs[i].getCfirstbillhid());
					bodyVO[0].setSfkxyh(ss[1]);//付款协议
				}
			}
			
			// 币种
			bodyVO[0].setBzbm(sCurrTypeID);
			bodyVO[0].setBbhl(new UFDouble(1));
			bodyVO[0].setFbhl(null);
			// 扣税类别
			bodyVO[0].setKslb(VOs[i].getIdiscounttaxtype());
			// 税率  zhwj
			bodyVO[0].setSl(VOs[i].getNtaxrate()==null?new UFDouble(0):VOs[i].getNtaxrate());

			// 体非空项
			bodyVO[0].setOld_sys_flag(new UFBoolean(false));
			bodyVO[0].setFx(new Integer(-1));
			bodyVO[0].setJffbje(new UFDouble(0));
			bodyVO[0].setJfbbje(new UFDouble(0));
			bodyVO[0].setJfybje(new UFDouble(0));
			bodyVO[0].setJfybsj(new UFDouble(0));
			bodyVO[0].setJfybwsje(new UFDouble(0));

			bodyVO[0].setWbfybje(new UFDouble(0));
			bodyVO[0].setWbffbje(new UFDouble(0));
			bodyVO[0].setWbfbbje(new UFDouble(0));
			
			bodyVO[0].setYwybm(VOs[i].getCoperatorid());// 业务员
			
			//获取本位币精度
			nc.bs.pu.pub.PubImpl myPubService = new nc.bs.pu.pub.PubImpl();
			int nMnyDecimal[] = myPubService.getDigitBatch(VOs[0].getPk_corp(), new String[] { "BD301" });
			if (nMnyDecimal == null || nMnyDecimal.length == 0) {
				nMnyDecimal = new int[1];
				nMnyDecimal[0] = 2;
			}

			  //zhwj 暂估单价
			  UFDouble zgprice = getZGPrice(VOs[i].getCmangid());
			 UFDouble nnumber = VOs[i].getNinnum()==null?new UFDouble(0):VOs[i].getNinnum();
			 UFDouble ntotalmoney = zgprice.multiply(nnumber);
			 
			 ntotalmoney = new UFDouble(PubDMO.getRoundDouble(nMnyDecimal[0], ntotalmoney.doubleValue()));
			 

				//价税合计
				bodyVO[0].setDfbbje(ntotalmoney);
				bodyVO[0].setDfybje(ntotalmoney);
				bodyVO[0].setYbye(ntotalmoney);
				bodyVO[0].setBbye(ntotalmoney);
				
				//zhwj 税率
				UFDouble sl = bodyVO[0].getSl()==null?new UFDouble(0):bodyVO[0].getSl();
				
				//无税金额
				UFDouble dfwsje = ntotalmoney.div(new UFDouble(1).add(sl));
				dfwsje = new UFDouble(PubDMO.getRoundDouble(nMnyDecimal[0], dfwsje.doubleValue()));
				
				//税额
				UFDouble se = ntotalmoney.sub(dfwsje);
				
				bodyVO[0].setDfybwsje(dfwsje);
				bodyVO[0].setDfbbwsje(dfwsje);
				
				// 税额
				bodyVO[0].setDfbbsj(se);
				bodyVO[0].setDfybsj(se);
				
				//含税单价
				bodyVO[0].setHsdj(zgprice);
			 
//			
//			//价税合计
//			bodyVO[0].setDfbbje(VOs[i].getNtotalmoney());
//			bodyVO[0].setDfybje(VOs[i].getNtotalmoney());
//			bodyVO[0].setYbye(VOs[i].getNtotalmoney());
//			bodyVO[0].setBbye(VOs[i].getNtotalmoney());
//			
//			// 税额
//			bodyVO[0].setDfbbsj(VOs[i].getNtotalmoney().sub(VOs[i].getNmoney()));
//			bodyVO[0].setDfybsj(VOs[i].getNtotalmoney().sub(VOs[i].getNmoney()));
//			
//			//含税单价
//			bodyVO[0].setHsdj(VOs[i].getNtaxprice());
			//zhwj 挂起标志  设置后系统应付单会挂起，不能弃审？
			bodyVO[0].setPausetransact(new UFBoolean(true));
			bodyVO[0].setOthersysflag("采购暂估");
						
			v2.addElement(bodyVO[0]);
		}

		timer.addExecutePhase("VO 对照");

		// 对应付单进行处理: 相同表头的单据组合成一张单据
		DJZBHeaderVO headVOs[] = new DJZBHeaderVO[v1.size()];
		v1.copyInto(headVOs);
		DJZBItemVO bodyVOs[] = new DJZBItemVO[v2.size()];
		v2.copyInto(bodyVOs);

		// 组合VO[]
		v1 = new Vector();
		for (int i = 0; i < headVOs.length; i++) {
			DJZBVO VO = new DJZBVO();
			VO.setParentVO(headVOs[i]);
			VO.setChildrenVO(new DJZBItemVO[]{bodyVOs[i]});
			v1.addElement(VO);
		}
		DJZBVO apVOs[] = new DJZBVO[v1.size()];
		v1.copyInto(apVOs);
		timer.addExecutePhase("组合VO[]");

		// 调用应付的VO转换工具
		if (apVOs != null && apVOs.length > 0) {
			VoTools tools = new VoTools();
			for (int i = 0; i < apVOs.length; i++) {
				apVOs[i] = (DJZBVO) tools.getSumCG((DJZBVO)apVOs[i]);
			}
		}
		timer.addExecutePhase("调用应付的VO转换工具");

		// 调用应付提供接口传送单据(保存暂估应付单)
		//******
		IArapForGYLPublic iArap = (IArapForGYLPublic) NCLocator.getInstance().lookup(IArapForGYLPublic.class.getName());
		for(int i = 0; i < apVOs.length; i++){
			iArap.saveEffForCG(apVOs[i]);
		}
		//******

		timer.addExecutePhase("调用应付提供接口传送单据");

		timer.showAllExecutePhase("无发票结算向应付传送数据时间分布--明细");

	} catch (Exception e) {
		/* 调用采购公用方法按规范抛出异常 */
		SCMEnv.out(e);
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return;
}

/**王凯飞
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 创建日期：(2014-11-03)
 * @return nc.vo.ps.estimate.EstimateVO[] 查到的VO对象数组
 * @param unitCode int
 * @exception java.rmi.RemoteException 异常说明。
 */
public wwEstimateVO[] queryEstimate_ww(String unitCode, ConditionVO conditionVO[], String sZG, String sEstPriceSource)
	throws BusinessException {

	wwEstimateVO[] estimates = null;
	int nPriceDecimal = 2;
	int nMoneyDecimal = 0;
	
	try {
		//分解查询条件
		String sCondition = "";
    
    ArrayList listRet = dealCondVosForPower(conditionVO);
    conditionVO = (ConditionVO[]) listRet.get(0);
    String strDataPowerSql = (String) listRet.get(1);

		for (int i = 0; i < conditionVO.length; i++) {
			String sName = conditionVO[i].getFieldCode().trim();
			String sOpera = conditionVO[i].getOperaCode().trim();
			String sValue = conditionVO[i].getValue();
			String sSQL = conditionVO[i].getSQLStr();
			String sReplace = null;
			
			if (sName.equals("dbilldate") && sValue != null && sValue.length() > 0) {
				sReplace = "dbilldate " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}else if (sName.equals("dzgdate") && sValue != null && sValue.length() > 0) {
				sReplace = "dzgdate " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}else if (sName.equals("vbillcode") && sValue != null && sValue.length() > 0) {
				sReplace = "vbillcode " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cvendorbaseid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cproviderid in (select pk_cumandoc from bd_cumandoc A, bd_cubasdoc B where A.pk_corp = '"
							+ unitCode
							+ "' and custcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "' and A.pk_cubasdoc = B.pk_cubasdoc and (custflag = '1' or custflag = '3'))";
				else
					sReplace =
						"cproviderid in (select pk_cumandoc from bd_cumandoc A, bd_cubasdoc B where custcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "'and A.pk_cubasdoc = B.pk_cubasdoc and (custflag = '1' or custflag = '3'))";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cdeptid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cdptid in (select pk_deptdoc from bd_deptdoc where pk_corp = '"
							+ unitCode
							+ "' and deptcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				else
					sReplace = "cdptid in (select pk_deptdoc from bd_deptdoc where deptcode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cbiztype") && sValue != null && sValue.length() > 0) {
				sReplace = "cbiztype in (select pk_busitype from bd_busitype where busicode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("coperator") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cbizid in (select pk_psndoc from bd_psndoc where pk_corp = '"
							+ unitCode
							+ "' and psncode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				else
					sReplace = "cbizid in (select pk_psndoc from bd_psndoc where psncode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cbillmaker") && sValue != null && sValue.length() > 0) {
				sReplace = "A.coperatorid in (select cuserid from sm_user where user_code " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("invcode")) {
				if (unitCode != null) {
					sReplace = "B.cinvbasid in (select pk_invbasdoc from bd_invbasdoc ";
					sReplace += "where bd_invbasdoc.invcode ";
					sReplace += sOpera;
					sReplace += "'";
					sReplace += sValue;
					sReplace += "') ";
				} else {
					sReplace = "B.cinvbasid in (select pk_invbasdoc from bd_invbasdoc ";
					sReplace += "where bd_invbasdoc.invcode ";
					sReplace += sOpera;
					sReplace += "'";
					sReplace += sValue;
					sReplace += "') ";
				}
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}
			//入库单头自定义项
			else if (sName.indexOf("vuserdef") >= 0 && sValue != null && sValue.length() > 0) {
				sReplace = "A." + sName + " " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}else if (sName.equals("cinvclassid") && sValue != null && sValue.length() > 0) {
				try {
					nc.bs.ps.estimate.EstimateDMO ddmo = new nc.bs.ps.estimate.EstimateDMO();
					String sClassCode[] = ddmo.getSubInvClassCode(sValue);

					if (sClassCode != null && sClassCode.length > 0) {
						sValue = "(";
						for (int j = 0; j < sClassCode.length; j++) {
							if (j < sClassCode.length - 1)
								sValue += "invclasscode " + sOpera + " '" + sClassCode[j] + "' or ";
							else
								sValue += "invclasscode " + sOpera + " '" + sClassCode[j] + "')";
						}
						sReplace =
							"B.cinvbasid in (select A.pk_invbasdoc from bd_invbasdoc A,bd_invcl C where "
								+ "A.pk_invcl = C.pk_invcl and "
								+ sValue
								+ ")";
					} else {
						sReplace =
							"B.cinvbasid in (select A.pk_invbasdoc from bd_invbasdoc A,bd_invcl C where "
								+ "A.pk_invcl = C.pk_invcl and invclasscode "
								+ sOpera
								+ " '"
								+ sValue
								+ "')";
					}
					String s = getReplacedSQL(sSQL, sName, sReplace);
					sCondition += s;
				} catch (Exception e) {
					/*不影响业务操作，此异常不必抛出*/
					SCMEnv.out(e);
					return null;
				}
			} else if (sName.equals("cwarehouseid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cwarehouseid in (select pk_stordoc from bd_stordoc where pk_corp = '"
							+ unitCode
							+ "' and storcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				else
					sReplace = "cwarehouseid in (select pk_stordoc from bd_stordoc where storcode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
				
			}  else if (sName.equals("cprojectid") && sValue != null && sValue.length() > 0) {
				sReplace = "B.cprojectid in (select B.pk_jobmngfil from bd_jobbasfil A, bd_jobmngfil B where A.jobcode " + sOpera + " '" + sValue + "' and A.pk_jobbasfil = B.pk_jobbasfil)";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} 

		}
		sCondition = PubDMO.processFirst(sCondition);
				
		//过滤赠品行
		sCondition += " and coalesce(B.flargess,'N') = 'N' ";
		//仓库“是否计算存货成本”属性过滤
		sCondition += " and (coalesce(S.iscalculatedinvcost,'N') = 'Y' or A.cwarehouseid is null) ";
		//VMI业务类型入库单不暂估
//		sCondition += " and BT.verifyrule not in ('V','N')  ";
		
		//不支持跨公司暂估
		if (sZG.trim().equals("N")) sCondition += " and A.pk_corp = B.pk_invoicecorp ";
		//

    if(strDataPowerSql != null) sCondition += " and " + strDataPowerSql;
		
		wwzgEstimateDMO dmo = new wwzgEstimateDMO();
		estimates = dmo.queryEstimate_ww(unitCode, sCondition, sZG);
		
		//获取单价和金额精度
		ISysInitQry myService = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		nPriceDecimal = myService.getParaInt(unitCode,"BD505");	
		String sPricePolicy = myService.getParaString(unitCode, "PO28");
		if(sPricePolicy == null) sPricePolicy = "无税价格优先";

		UFDouble d = VMIDMO.getDigitRMB(unitCode);
		while(d.doubleValue() < 1){
			d = d.multiply(10);
			nMoneyDecimal++;
		}

		//
		/*
		if (sZG.trim().equals("N") && sEstPriceSource != null && sEstPriceSource.trim().length() > 0){
			ArrayList paraList = new ArrayList();
			paraList.add(sEstPriceSource);
			paraList.add(new Integer(nPriceDecimal));
			paraList.add(new Integer(nMoneyDecimal));
			paraList.add(sPricePolicy);
			estimates = dmo.replacePriceForEstimate(estimates, paraList);
		}
		*/
		if(estimates != null && estimates.length > 0) {
			
			//设置税率和价税合计, 计算含税单价和价税合计
			//如果入库单来源于订单,则税率和扣税类别取自订单行的税率和扣税类别;否则前台处理:取存货对应的税目税率,扣税类别为应税外加
			Vector vTemp = new Vector();
			for(int i = 0; i < estimates.length; i++){
				if(estimates[i].getCfirsttype() != null && estimates[i].getCfirsttype().equals(ScmConst.SC_Order)){
					if(!vTemp.contains(estimates[i].getCfirstbillbid())) vTemp.addElement(estimates[i].getCfirstbillbid());
				}
			}
			if(vTemp.size() > 0){
				String sID[] = new String[vTemp.size()];
				vTemp.copyInto(sID);
				Hashtable hTemp = dmo.queryOrderTaxRate_wwyf(sID);
				if(hTemp != null && hTemp.size() > 0){
					for(int i = 0; i < estimates.length; i++){
						if(estimates[i].getCfirsttype() != null && estimates[i].getCfirsttype().equals(ScmConst.SC_Order) && hTemp.get(estimates[i].getCfirstbillbid()) != null){
							Object oTemp[] = (Object[])hTemp.get(estimates[i].getCfirstbillbid());
							UFDouble nTaxRate = new UFDouble(0);
							Integer iDiscountTaxType = new Integer(1);
							if(oTemp[0] != null) nTaxRate = new UFDouble(oTemp[0].toString());
							if(oTemp[1] != null) iDiscountTaxType = (Integer) oTemp[1];
							estimates[i].setNtaxrate(nTaxRate);
							estimates[i].setIdiscounttaxtype(iDiscountTaxType);
							//if(sZG.trim().equals("N")) estimates[i] = calculateTaxPriceForEstimateVO(estimates[i],nTaxRate,iDiscountTaxType,nPriceDecimal,nMoneyDecimal);
						}
					}
				}
			}
		}
		
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return estimates;
}

/**王凯飞
 * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
 *
 * 创建日期：(2014-11-03)
 * @return nc.vo.ps.estimate.EstimateVO[] 查到的VO对象数组
 * @param unitCode int
 * @exception java.rmi.RemoteException 异常说明。
 */
public EstimateVO[] queryEstimate_yfn(String unitCode, ConditionVO conditionVO[], String sZG, String sEstPriceSource)
	throws BusinessException {

	EstimateVO[] estimates = null;
	int nPriceDecimal = 2;
	int nMoneyDecimal = 0;
	
	try {
		//分解查询条件
		String sCondition = "";
    
    ArrayList listRet = dealCondVosForPower(conditionVO);
    conditionVO = (ConditionVO[]) listRet.get(0);
    String strDataPowerSql = (String) listRet.get(1);

		for (int i = 0; i < conditionVO.length; i++) {
			String sName = conditionVO[i].getFieldCode().trim();
			String sOpera = conditionVO[i].getOperaCode().trim();
			String sValue = conditionVO[i].getValue();
			String sSQL = conditionVO[i].getSQLStr();
			String sReplace = null;

			if (sName.equals("dbilldate") && sValue != null && sValue.length() > 0) {
				sReplace = "dbilldate " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}else if (sName.equals("dzgdate") && sValue != null && sValue.length() > 0) {
				sReplace = "dzgdate " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}else if (sName.equals("vbillcode") && sValue != null && sValue.length() > 0) {
				sReplace = "vbillcode " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cvendorbaseid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cproviderid in (select pk_cumandoc from bd_cumandoc A, bd_cubasdoc B where A.pk_corp = '"
							+ unitCode
							+ "' and custcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "' and A.pk_cubasdoc = B.pk_cubasdoc and (custflag = '1' or custflag = '3'))";
				else
					sReplace =
						"cproviderid in (select pk_cumandoc from bd_cumandoc A, bd_cubasdoc B where custcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "'and A.pk_cubasdoc = B.pk_cubasdoc and (custflag = '1' or custflag = '3'))";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cdeptid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cdptid in (select pk_deptdoc from bd_deptdoc where pk_corp = '"
							+ unitCode
							+ "' and deptcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				else
					sReplace = "cdptid in (select pk_deptdoc from bd_deptdoc where deptcode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cbiztype") && sValue != null && sValue.length() > 0) {
				sReplace = "cbiztype in (select pk_busitype from bd_busitype where busicode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("coperator") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cbizid in (select pk_psndoc from bd_psndoc where pk_corp = '"
							+ unitCode
							+ "' and psncode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				else
					sReplace = "cbizid in (select pk_psndoc from bd_psndoc where psncode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("cbillmaker") && sValue != null && sValue.length() > 0) {
				sReplace = "A.coperatorid in (select cuserid from sm_user where user_code " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} else if (sName.equals("invcode")) {
				if (unitCode != null) {
					sReplace = "B.cinvbasid in (select pk_invbasdoc from bd_invbasdoc ";
					sReplace += "where bd_invbasdoc.invcode ";
					sReplace += sOpera;
					sReplace += "'";
					sReplace += sValue;
					sReplace += "') ";
				} else {
					sReplace = "B.cinvbasid in (select pk_invbasdoc from bd_invbasdoc ";
					sReplace += "where bd_invbasdoc.invcode ";
					sReplace += sOpera;
					sReplace += "'";
					sReplace += sValue;
					sReplace += "') ";
				}
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}
			//入库单头自定义项
			else if (sName.indexOf("vuserdef") >= 0 && sValue != null && sValue.length() > 0) {
				sReplace = "A." + sName + " " + sOpera + " '" + sValue + "'";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			}else if (sName.equals("cinvclassid") && sValue != null && sValue.length() > 0) {
				try {
					nc.bs.ps.estimate.EstimateDMO ddmo = new nc.bs.ps.estimate.EstimateDMO();
					String sClassCode[] = ddmo.getSubInvClassCode(sValue);

					if (sClassCode != null && sClassCode.length > 0) {
						sValue = "(";
						for (int j = 0; j < sClassCode.length; j++) {
							if (j < sClassCode.length - 1)
								sValue += "invclasscode " + sOpera + " '" + sClassCode[j] + "' or ";
							else
								sValue += "invclasscode " + sOpera + " '" + sClassCode[j] + "')";
						}
						sReplace =
							"B.cinvbasid in (select A.pk_invbasdoc from bd_invbasdoc A,bd_invcl C where "
								+ "A.pk_invcl = C.pk_invcl and "
								+ sValue
								+ ")";
					} else {
						sReplace =
							"B.cinvbasid in (select A.pk_invbasdoc from bd_invbasdoc A,bd_invcl C where "
								+ "A.pk_invcl = C.pk_invcl and invclasscode "
								+ sOpera
								+ " '"
								+ sValue
								+ "')";
					}
					String s = getReplacedSQL(sSQL, sName, sReplace);
					sCondition += s;
				} catch (Exception e) {
					/*不影响业务操作，此异常不必抛出*/
					SCMEnv.out(e);
					return null;
				}
			} else if (sName.equals("cwarehouseid") && sValue != null && sValue.length() > 0) {
				if (unitCode != null)
					sReplace =
						"cwarehouseid in (select pk_stordoc from bd_stordoc where pk_corp = '"
							+ unitCode
							+ "' and storcode "
							+ sOpera
							+ " '"
							+ sValue
							+ "')";
				else
					sReplace = "cwarehouseid in (select pk_stordoc from bd_stordoc where storcode " + sOpera + " '" + sValue + "')";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
				
			}  else if (sName.equals("cprojectid") && sValue != null && sValue.length() > 0) {
				sReplace = "B.cprojectid in (select B.pk_jobmngfil from bd_jobbasfil A, bd_jobmngfil B where A.jobcode " + sOpera + " '" + sValue + "' and A.pk_jobbasfil = B.pk_jobbasfil)";
				String s = getReplacedSQL(sSQL, sName, sReplace);
				sCondition += s;
			} 

		}
		sCondition = PubDMO.processFirst(sCondition);
				
		//过滤赠品行
		sCondition += " and coalesce(B.flargess,'N') = 'N' ";
		//仓库“是否计算存货成本”属性过滤
		sCondition += " and (coalesce(S.iscalculatedinvcost,'N') = 'Y' or A.cwarehouseid is null) ";
		//VMI业务类型入库单不暂估
		sCondition += " and BT.verifyrule not in ('V','N')  ";
		
		//不支持跨公司暂估
		if (sZG.trim().equals("N")) sCondition += " and A.pk_corp = B.pk_invoicecorp ";
		//

    if(strDataPowerSql != null) sCondition += " and " + strDataPowerSql;
		
		EstimateDMO dmo = new EstimateDMO();
		estimates = dmo.queryEstimate_yf(unitCode, sCondition, sZG);
		
		//获取单价和金额精度
		ISysInitQry myService = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
		nPriceDecimal = myService.getParaInt(unitCode,"BD505");	
		String sPricePolicy = myService.getParaString(unitCode, "PO28");
		if(sPricePolicy == null) sPricePolicy = "无税价格优先";

		UFDouble d = VMIDMO.getDigitRMB(unitCode);
		while(d.doubleValue() < 1){
			d = d.multiply(10);
			nMoneyDecimal++;
		}

		//
		if (sZG.trim().equals("N") && sEstPriceSource != null && sEstPriceSource.trim().length() > 0){
			ArrayList paraList = new ArrayList();
			paraList.add(sEstPriceSource);
			paraList.add(new Integer(nPriceDecimal));
			paraList.add(new Integer(nMoneyDecimal));
			paraList.add(sPricePolicy);
			estimates = dmo.replacePriceForEstimate(estimates, paraList);
		}
		
		if(estimates != null && estimates.length > 0) {
			
			//设置税率和价税合计, 计算含税单价和价税合计
			//如果入库单来源于订单,则税率和扣税类别取自订单行的税率和扣税类别;否则前台处理:取存货对应的税目税率,扣税类别为应税外加
			Vector vTemp = new Vector();
			for(int i = 0; i < estimates.length; i++){
				if(estimates[i].getCfirsttype() != null && estimates[i].getCfirsttype().equals(ScmConst.PO_Order)){
					if(!vTemp.contains(estimates[i].getCfirstbillbid())) vTemp.addElement(estimates[i].getCfirstbillbid());
				}
			}
			if(vTemp.size() > 0){
				String sID[] = new String[vTemp.size()];
				vTemp.copyInto(sID);
				Hashtable hTemp = dmo.queryOrderTaxRate(sID);
				if(hTemp != null && hTemp.size() > 0){
					for(int i = 0; i < estimates.length; i++){
						if(estimates[i].getCfirsttype() != null && estimates[i].getCfirsttype().equals(ScmConst.PO_Order) && hTemp.get(estimates[i].getCfirstbillbid()) != null){
							Object oTemp[] = (Object[])hTemp.get(estimates[i].getCfirstbillbid());
							UFDouble nTaxRate = new UFDouble(0);
							Integer iDiscountTaxType = new Integer(1);
							if(oTemp[0] != null) nTaxRate = new UFDouble(oTemp[0].toString());
							if(oTemp[1] != null) iDiscountTaxType = (Integer) oTemp[1];
							estimates[i].setNtaxrate(nTaxRate);
							estimates[i].setIdiscounttaxtype(iDiscountTaxType);
							//if(sZG.trim().equals("N")) estimates[i] = calculateTaxPriceForEstimateVO(estimates[i],nTaxRate,iDiscountTaxType,nPriceDecimal,nMoneyDecimal);
						}
					}
				}
			}
		}
		
	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return estimates;
}

/**
 * 功能描述:加工费暂估      zhwj 2012-08-09
 * 输入参数:VO[],当前操作员ID,当前日期
 * 创建：熊海情
 * 修改：晁志平 FOR  V30
 */
public void estimate_ww(wwEstimateVO VOs[], ArrayList paraList,ClientLink cl)
	throws BusinessException {
	nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start();

	wwEstimateDMO dmo = null;
	ICreateCorpQueryService myService0 = null;
	ISysInitQry myService1 = null;
	nc.bs.pu.pub.PubImpl myService2 = null;
	boolean bLock = false;

	String cOperator = (String)paraList.get(0);
	UFDate dCurrDate = (UFDate)paraList.get(1);
	String sEstMode = (String)paraList.get(2);
	String sDifferMode = (String)paraList.get(3);
	UFBoolean bZGYF = (UFBoolean)paraList.get(4);
	String sCurrTypeID = (String)paraList.get(5);

	//组合所有需要加锁的主键
	String sKeys[] = getEstimateLockKeys_ww(VOs);

	timer.addExecutePhase("组合所有需要加锁的主键");
	String[] saSubLockedId = null;
	try {
		//对单据加锁
		dmo = new wwEstimateDMO();
		bLock = LockTool.setLockForPks(sKeys, cOperator);

		timer.addExecutePhase("加锁");

		if (!bLock)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000000")/*@res "正在进行相关操作，请稍后再试！"*/);

		//判断时间戳是否改变
		String sMessage = isTimeStampChanged_wwyf(VOs);
		if (sMessage != null && sMessage.length() > 0) {
			sMessage += nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000001")/*@res "请刷新！\n"*/;
			throw new BusinessException(sMessage);
		}
		timer.addExecutePhase("判断时间戳是否改变");

		Vector v1 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			v1.addElement(VOs[i].getCgeneralbid());
		}

		//状态刷新：判断是否存在已经暂估的入库单行(存在抛异常)
		if (v1.size() > 0) {
			dmo.checkExistEsti_yf(v1);
		}
		timer.addExecutePhase("状态刷新：判断是否存在已经暂估的入库单行(存在抛异常)");

		//暂估时单价和金额的精度控制
		myService2 = new nc.bs.pu.pub.PubImpl();
		int digit[] = myService2.getDigitBatch(VOs[0].getPk_corp(), new String[] { "BD301", "BD505" });
		if (digit == null || digit.length == 0)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040503","UPP40040503-000008")/*@res "获取本位币精度或单价精度异常!"*/);

		timer.addExecutePhase("暂估时单价和金额的精度控制");

		/*
		//入库单表体打上正常标志，重新计算暂估单价和暂估金额及材料费
		Vector vAllBodyVoB = new Vector();
		Vector vAllBodyVoBB3 = new Vector();
		for (int i = 0; i < VOs.length; i++) {
			GeneralHItemVO bodyVO = new GeneralHItemVO();
			bodyVO.setCgeneralbid(VOs[i].getCgeneralbid());
			bodyVO.setBzgflag(new UFBoolean(true));
			bodyVO.setDzgdate(dCurrDate);
			bodyVO.setBzgyfflag(bZGYF);
			vAllBodyVoB.addElement(bodyVO);

			GeneralBb3VO bb3VO = new GeneralBb3VO();
			if (VOs[i].getNprice() != null) {
				bb3VO.setCgeneralbid(VOs[i].getCgeneralbid());
				double d = PubDMO.getRoundDouble(digit[1], VOs[i].getNprice().doubleValue());
				bb3VO.setNpprice(new UFDouble(d));
				d = PubDMO.getRoundDouble(digit[1], VOs[i].getNtaxprice().doubleValue());
				bb3VO.setNzygfprice(new UFDouble(d));
			}
			if (VOs[i].getNmoney() != null) {
				double d = PubDMO.getRoundDouble(digit[0], VOs[i].getNmoney().doubleValue());
				bb3VO.setNpmoney(new UFDouble(d));
				d = PubDMO.getRoundDouble(digit[0], VOs[i].getNtotalmoney().doubleValue());
				bb3VO.setNzgyfmoney(new UFDouble(d));
			}
			if (VOs[i].getNmaterialmoney() != null) {
				double d = PubDMO.getRoundDouble(digit[0], VOs[i].getNmaterialmoney().doubleValue());
				bb3VO.setNmaterialmoney(new UFDouble(d));
			}
			vAllBodyVoBB3.addElement(bb3VO);
		}

		timer.addExecutePhase("打标志、计算单价金额材料费--循环赋值");

		if (vAllBodyVoB.size() > 0) {
			GeneralHItemVO[] bodyVOs = new GeneralHItemVO[vAllBodyVoB.size()];
			vAllBodyVoB.copyInto(bodyVOs);
			dmo.updateBillBody(bodyVOs);
		}

		timer.addExecutePhase("打标志、计算单价金额材料费--更新子表");

		if (vAllBodyVoBB3.size() > 0) {
			GeneralBb3VO bb3VOs[] = new GeneralBb3VO[vAllBodyVoBB3.size()];
			vAllBodyVoBB3.copyInto(bb3VOs);
			dmo.updateBillBb3(bb3VOs);
		}

		timer.addExecutePhase("打标志、计算单价金额材料费--更新子表3");
*/
		//判断存货核算是否启用
		if (VOs != null && VOs.length > 0) {
			String unitCode = VOs[0].getPk_corp();
			myService0 = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			boolean bIAStartUp = myService0.isEnabled(unitCode, "IA");

			myService1 = (ISysInitQry)nc.bs.framework.common.NCLocator.getInstance().lookup(ISysInitQry.class.getName());
			boolean bStockRB = true; //入库单是否红蓝对冲
			nc.vo.pub.para.SysInitVO initVO[] = myService1.querySysInit(unitCode, "PO36");
			if (initVO != null && initVO.length > 0) {
				if (initVO[0].getValue().equals("否"))
					bStockRB = false;
			}
			timer.addExecutePhase("入库单是否红蓝对冲");
			/*
			//调用接口,向存货核算系统传送数据   生成存货核算的 入库调整单
			if (bIAStartUp) {
				saveBillFromOutter_wwyf(VOs, cOperator, dCurrDate,cl);
				timer.addExecutePhase("调用接口,向存货核算系统传送数据[总时间]");
//				//结算
//				if (bStockRB) {
//					saSubLockedId = settleForEstimate(VOs, cOperator, dCurrDate, sEstMode, sDifferMode);
//				}
//				timer.addExecutePhase("结算");
			}
			*/
			
			//向存货核算系统传送数据   生成存货核算的 委外加工收货单
//			boolean zxjg= saveIBillService(VOs,cl);//2015-04-24制盖业务变更，委外加工费暂估，只生成应付，不生成存货核算的采购入库单--wkf--，
			
//			if(zxjg){
				//暂估应付
				if(bZGYF.booleanValue() && myService0.isEnabled(unitCode, "AP")){
					ArrayList list = new ArrayList();
					list.add(sCurrTypeID);
					list.add(cOperator);
					list.add(dCurrDate);
					saveBillForARAP_ww(VOs,list);
				}
				//回写
				dmo.backICStatus_wwyf(VOs, status[1], dCurrDate.toString());
//			}else{
//				return;
//			}
			
		}
		//
		timer.showAllExecutePhase("暂估处理BS时间分布：");

	} catch (Exception e) {
		/*调用采购公用方法按规范抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	} finally {
		try {
//			if (myService != null) {
				//对单据解锁
				if (bLock) {
					String[] saAllKey = sKeys;
					if (saSubLockedId != null && saSubLockedId.length > 0) {
						ArrayList listAll = new ArrayList();
						int iLen = saAllKey.length;
						for (int i = 0; i < iLen; i++) {
							listAll.add(saAllKey[i]);
						}
						iLen = saSubLockedId.length;
						for (int i = 0; i < iLen; i++) {
							listAll.add(saSubLockedId[i]);
						}
						saAllKey = (String[]) listAll.toArray(saAllKey);
					}
					LockTool.releaseLockForPks(sKeys, cOperator);
//				}
			}
		} catch (Exception e) {
			/*调用采购公用方法按规范抛出异常*/
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
	}
}
	//向存货核算传入数据
	private boolean saveIBillService(wwEstimateVO[] billvos,ClientLink cl) throws BusinessException {
		
		boolean staus = false;
		IBill billim = (IBill) NCLocator.getInstance().lookup(IBill.class.getName());
		//vo转换
		BillVO[] bills = wwVOtoiaVO(billvos,cl);
		if(bills.length>0){
			for (int i = 0; i < bills.length; i++) {
				billim.insert(cl, bills[i]);
			}
			staus = true;
		}else{
			staus = false;
		}
		
		return staus;
	}
	//转换成委外加工收货单VO
	private BillVO[] wwVOtoiaVO(wwEstimateVO[] yvos,ClientLink cl) {
		
		HashMap<String, BillHeaderVO> cgens = new HashMap<String, BillHeaderVO>();
		for (int i = 0; i < yvos.length; i++) {
			String cgenid = yvos[i].getCgeneralhid();
			if(cgens.get(cgenid) == null){
				//成本类库存组织获取
				String ccalbodyid = yvos[i].getCcalbodyid();
				String cwarehousid = yvos[i].getCwarehouseid();
				String pk_costcalbody = getPk_costcalbody(ccalbodyid,cwarehousid,yvos[i].getPk_corp());
				// 表头赋值
				BillHeaderVO htvo = new BillHeaderVO();
				htvo.setCbillid(yvos[i].getCgeneralhid());
				htvo.setVdef1(yvos[i].getVuserdefh1());
				htvo.setVdef2(yvos[i].getVuserdefh2());
				htvo.setVdef3(yvos[i].getVuserdefh3());
				htvo.setVdef4(yvos[i].getVuserdefh4());
				htvo.setVdef5(yvos[i].getVuserdefh5());
				htvo.setVdef6(yvos[i].getVuserdefh6());
				htvo.setVdef7(yvos[i].getVuserdefh7());
				htvo.setVdef8(yvos[i].getVuserdefh8());
				htvo.setVdef9(yvos[i].getVuserdefh9());
				htvo.setVdef10(yvos[i].getVuserdefh10());
				htvo.setVdef11(yvos[i].getVuserdefh11());
				htvo.setVdef12(yvos[i].getVuserdefh12());
				htvo.setVdef13(yvos[i].getVuserdefh13());
				htvo.setVdef14(yvos[i].getVuserdefh14());
				htvo.setVdef15(yvos[i].getVuserdefh15());
				htvo.setVdef16(yvos[i].getVuserdefh16());
				htvo.setVdef17(yvos[i].getVuserdefh17());
				htvo.setVdef18(yvos[i].getVuserdefh18());
				htvo.setVdef19(yvos[i].getVuserdefh19());
				htvo.setVdef20(yvos[i].getVuserdefh20());
				
				htvo.setPk_defdoc1(yvos[i].getPk_defdoch1());
				htvo.setPk_defdoc2(yvos[i].getPk_defdoch2());
				htvo.setPk_defdoc3(yvos[i].getPk_defdoch3());
				htvo.setPk_defdoc4(yvos[i].getPk_defdoch4());
				htvo.setPk_defdoc5(yvos[i].getPk_defdoch5());
				htvo.setPk_defdoc6(yvos[i].getPk_defdoch6());
				htvo.setPk_defdoc7(yvos[i].getPk_defdoch7());
				htvo.setPk_defdoc8(yvos[i].getPk_defdoch8());
				htvo.setPk_defdoc9(yvos[i].getPk_defdoch9());
				htvo.setPk_defdoc10(yvos[i].getPk_defdoch10());
				htvo.setPk_defdoc11(yvos[i].getPk_defdoch11());
				htvo.setPk_defdoc12(yvos[i].getPk_defdoch12());
				htvo.setPk_defdoc13(yvos[i].getPk_defdoch13());
				htvo.setPk_defdoc14(yvos[i].getPk_defdoch14());
				htvo.setPk_defdoc15(yvos[i].getPk_defdoch15());
				htvo.setPk_defdoc16(yvos[i].getPk_defdoch16());
				htvo.setPk_defdoc17(yvos[i].getPk_defdoch17());
				htvo.setPk_defdoc18(yvos[i].getPk_defdoch18());
				htvo.setPk_defdoc19(yvos[i].getPk_defdoch19());
				htvo.setPk_defdoc20(yvos[i].getPk_defdoch20());
				
				htvo.setCbillid(null);//单据标识
				htvo.setBestimateflag(new UFBoolean(true));//是否暂估
				htvo.setBdisableflag(new UFBoolean(false));//是否作废
				htvo.setBwithdrawalflag(new UFBoolean(false));
				htvo.setBauditedflag(new UFBoolean(false));//是否审核
				String month = cl.getAccountMonth();
				String year = cl.getAccountYear();
				UFDate date = cl.getLogonDate();
				
				htvo.setCaccountmonth(month);//会计月份
				htvo.setCaccountyear(year);//会计年度
				htvo.setCagentid(null);//经手人标识
				htvo.setCoperatorid(cl.getUser());//制单人标识
				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
				htvo.setTmaketime(df.format(new Date()));//制单时间为当前系统时间
				htvo.setCbilltypecode("I2");//单据类型
				htvo.setCbiztypeid(yvos[i].getCbiztype());//业务类型标识--1100A31000000000000L
				htvo.setCbusinessbillid(null);//对应业务单据标识
				htvo.setCcustomvendorid(yvos[i].getCprovidermangid());//客商标识--cprovidermangid
				htvo.setCdeptid(yvos[i].getCdptid());//部门标识
				htvo.setCdispatchid(yvos[i].getCdispatcherid());//收发标识
				htvo.setCemployeeid(yvos[i].getCoperatorid());//人员标识
				htvo.setClastoperatorid(yvos[i].getCoperatorid());//最后修改人
				htvo.setCothercorpid(null);//对方公司ID
				htvo.setCoutcalbodyid(null);//调出库存组织ID
				htvo.setCoutcorpid(null);//调出公司ID
				htvo.setCrdcenterid(pk_costcalbody);//库存组织标识--1100A3100000000001JI(制盖物流成本组织)
				htvo.setCsourcemodulename("PO");//来源模块
				htvo.setCstockrdcenterid(yvos[i].getCcalbodyid());//仓储库存组织--ccalbodyid
				htvo.setCwarehouseid(yvos[i].getCwarehouseid());//仓库标识--cwarehouseid
				htvo.setCwarehousemanagerid(null);//库管员标识
				htvo.setDbilldate(date);//单据日期
				htvo.setDcheckdate(null);//检验日期
				htvo.setDr(0);//删除标志
				htvo.setFallocflag(null);//调拨类型 
				htvo.setFdispatchflag(0);//收发标志
				htvo.setIdeptattr(null);//借方贷方标识
				htvo.setIprintcount(null);//打印次数
				htvo.setNcost(null);//组装成本
				htvo.setPk_corp(yvos[i].getPk_corp());//公司主键
				htvo.setVadjpricefilecode(null);//调价文件号
				htvo.setVnote(yvos[i].getVnote());//备注
				htvo.setVcheckbillcode(null);//检验单号
				cgens.put(cgenid, htvo);
			}
		}
		Iterator iter = cgens.entrySet().iterator();
		ArrayList<BillVO> tmplist = new ArrayList<BillVO>();
		int index = 0;
		while (iter.hasNext()) {
			BillVO billvoss = new BillVO();
			Map.Entry entry = (Map.Entry) iter.next();
			String key = (String) entry.getKey();
			BillHeaderVO htvo = (BillHeaderVO) entry.getValue();
			yvos[index].getCgeneralhid();
			ArrayList<BillItemVO> itemv = new ArrayList<BillItemVO>();
			for (int i = 0; i < yvos.length; i++) {
				String cgid = yvos[i].getCgeneralhid();
				if(cgid.equals(key)){
					//表体赋值
					BillItemVO btvo = new BillItemVO();
					
					btvo.setBadjustedItemflag(new UFBoolean(false));//是否调整了分录标志
					btvo.setBauditbatchflag(new UFBoolean(false));//是否批次核算
					btvo.setBlargessflag(new UFBoolean(false));//是否赠品
					btvo.setBretractflag(new UFBoolean(true));//是否采购费用结算
					btvo.setBrtvouchflag(new UFBoolean(false));//是否已生成实时凭证
					btvo.setBtransferincometax(new UFBoolean(false));//是否进项税转出
					btvo.setCadjustbillid(null);//调整单据标识
					btvo.setCadjustbillitemid(null);//调整单据分录标识
					btvo.setCastunitid(null);///辅计量单位
					btvo.setCauditorid(null);//审核人标识
					btvo.setCbill_bid(null);//分录标识
					btvo.setCbillid(null);//单据标识
					btvo.setCbilltypecode("I2");//单据类型ID委外加工收货单、I2采购入库单
					btvo.setCcrspbillitemid(null);//对应业务单据分录标识
					btvo.setCcsaleadviceitemid(null);//销售系统出库单分录标识
					btvo.setCfacardid(null);//固定资产卡片ID
					btvo.setCfadeviceid(null);//固定资产附属设备ID
					btvo.setCfirstbillid(null);//源头单据标识
					btvo.setCfirstbillitemid(null);//源头单据分录标识
					btvo.setCfirstbilltypecode(null);//源头单据类型
					btvo.setCicbillcode(yvos[i].getVbillcode());//IC单据号
					btvo.setCicbillid(yvos[i].getCgeneralhid());//IC主表ID
					btvo.setCicbilltype(yvos[i].getCbilltypecode());//IC单据类型-------
					btvo.setCicitemid(yvos[i].getCgeneralbid());//IC子表ID
					btvo.setCinbillitemid(null);//对应入库单分录标识
					btvo.setCinventoryid(yvos[i].getCmangid());//存货标识
					btvo.setCprojectid(null);//项目标识
					btvo.setCprojectphase(null);//项目标识
					btvo.setCsaleadviceid(null);//销售系统出库单标识
					btvo.setCsaleaudititemid(null);//销售结算明细标识
					btvo.setCsourcebillid(yvos[i].getCgeneralhid());//来源单据标识
					btvo.setCsourcebillitemid(yvos[i].getCgeneralbid());//来源单据分录标识
					btvo.setCsourcebilltypecode(yvos[i].getCbilltypecode());//来源单据类型-----
					btvo.setCsumrtvouchid(null);//汇总凭证ID
					btvo.setCvendorid(yvos[i].getCcustomerid());//供应商
					btvo.setCvoucherid(null);//会计凭证ID
					btvo.setCwp(null);//工序
					btvo.setDauditdate(null);//审核日期
					btvo.setDbizdate(yvos[i].getDbilldate());//业务日期
					btvo.setDdrawrate(null);//提取比例
					btvo.setFdatagetmodelflag(1);//数据获得方式
					btvo.setFolddatagetmodelflag(1);//成本计算前数据获得方式
					btvo.setFoutadjustableflag(new UFBoolean(false));//出库是否可调整标志
					btvo.setFpricemodeflag(4);//计价方式编码
					btvo.setIauditsequence(null);//审核序号
					btvo.setIrownumber(null);//行号
					btvo.setNadjustnum(null);//调整数量
					btvo.setNassistnum(null);//辅计量数量
					btvo.setNchangerate(null);//换算率
					btvo.setNdrawsummny(new UFDouble(0));//累计提取金额
					btvo.setNexpaybacktax(null);//退税率
					btvo.setNincometax(null);//进项税率
					btvo.setNinvarymny(null);//收入差异
					//存货核算中金额为两位小数.此处进行取两位小数--2015-03-31--wkf
					UFDouble nmoney = chengeDouble2(yvos[i].getNmoney());
					//2015-03-31--end
					
					btvo.setNmoney(nmoney);//金额
					btvo.setNnumber(yvos[i].getNinnum());//数量
					btvo.setNoriginalprice(null);//调整前单价
					btvo.setNoutvarymny(null);//发出差异
					btvo.setNplanedmny(null);//计划金额
					btvo.setNplanedprice(null);//计划单价
					btvo.setNprice(yvos[i].getNprice());//单价
					btvo.setNreasonalwastmny(null);//合理损耗金额
					btvo.setNreasonalwastnum(null);//合理损耗数量
					btvo.setNreasonalwastprice(null);//合理损耗单价
					btvo.setNsettledretractnum(null);//累计冲回数量
					btvo.setNsettledsendnum(null);//累计发出数量
					btvo.setNsimulatemny(null);//模拟成本
					btvo.setPk_corp(yvos[i].getPk_corp());//公司主键
					btvo.setVbatch(yvos[i].getVbatchcode());//批次号
					btvo.setVbillcode(yvos[i].getVbillcode());//单据号
					btvo.setVbomcode(null);//成本对象
					btvo.setVfirstbillcode(yvos[i].getVfirstbillcode());//源头单据号
					btvo.setVfirstrowno(null);//源头单据行号
					btvo.setVproducebatch(yvos[i].getVbatchcode());//生产批号
					btvo.setVsourcebillcode(yvos[i].getVbillcode());//来源单据号
					btvo.setVsourcerowno(yvos[i].getCgeneralbid());//来源单据行号
					
					
					btvo.setVdef1(yvos[i].getVuserdef1());
					btvo.setVdef2(yvos[i].getVuserdef2());
					btvo.setVdef3(yvos[i].getVuserdef3());
					btvo.setVdef4(yvos[i].getVuserdef4());
					btvo.setVdef5(yvos[i].getVuserdef5());
					btvo.setVdef6(yvos[i].getVuserdef6());
					btvo.setVdef7(yvos[i].getVuserdef7());
					btvo.setVdef8(yvos[i].getVuserdef8());
					btvo.setVdef9(yvos[i].getVuserdef9());
					btvo.setVdef10(yvos[i].getVuserdef10());
					btvo.setVdef11(yvos[i].getVuserdef11());
					btvo.setVdef12(yvos[i].getVuserdef12());
					btvo.setVdef13(yvos[i].getVuserdef13());
					btvo.setVdef14(yvos[i].getVuserdef14());
					btvo.setVdef15(yvos[i].getVuserdef15());
					btvo.setVdef16(yvos[i].getVuserdef16());
					btvo.setVdef17(yvos[i].getVuserdef17());
					btvo.setVdef18(yvos[i].getVuserdef18());
					btvo.setVdef19(yvos[i].getVuserdef19());
					btvo.setVdef20(yvos[i].getVuserdef20());
					
					btvo.setPk_defdoc1(yvos[i].getPk_defdocb1());
					btvo.setPk_defdoc2(yvos[i].getPk_defdocb2());
					btvo.setPk_defdoc3(yvos[i].getPk_defdocb3());
					btvo.setPk_defdoc4(yvos[i].getPk_defdocb4());
					btvo.setPk_defdoc5(yvos[i].getPk_defdocb5());
					btvo.setPk_defdoc6(yvos[i].getPk_defdocb6());
					btvo.setPk_defdoc7(yvos[i].getPk_defdocb7());
					btvo.setPk_defdoc8(yvos[i].getPk_defdocb8());
					btvo.setPk_defdoc9(yvos[i].getPk_defdocb9());
					btvo.setPk_defdoc10(yvos[i].getPk_defdocb10());
					btvo.setPk_defdoc11(yvos[i].getPk_defdocb11());
					btvo.setPk_defdoc12(yvos[i].getPk_defdocb12());
					btvo.setPk_defdoc13(yvos[i].getPk_defdocb13());
					btvo.setPk_defdoc14(yvos[i].getPk_defdocb14());
					btvo.setPk_defdoc15(yvos[i].getPk_defdocb15());
					btvo.setPk_defdoc16(yvos[i].getPk_defdocb16());
					btvo.setPk_defdoc17(yvos[i].getPk_defdocb17());
					btvo.setPk_defdoc18(yvos[i].getPk_defdocb18());
					btvo.setPk_defdoc19(yvos[i].getPk_defdocb19());
					btvo.setPk_defdoc20(yvos[i].getPk_defdocb20());
					itemv.add(btvo);
				}
			}
			BillItemVO[] itemval = new BillItemVO[itemv.size()];
			for (int i = 0; i < itemv.size(); i++) {
				BillItemVO itemvs = itemv.get(i);
				itemval[i]=itemvs;
			}
			billvoss.setParentVO(htvo);
			billvoss.setChildrenVO(itemval);
			tmplist.add(billvoss);
			index = index + 1;
		}
		BillVO[] aggVOs = new BillVO[tmplist.size()];
		for (int i = 0; i < tmplist.size(); i++) {
			aggVOs[i]= tmplist.get(i);
		}
		return aggVOs;
		
	}
	
	//获取成本类库存组织getPk_costcalbody--wkf-2015-02-05
	private String getPk_costcalbody(String ccalbodyid,String cwarehousid,String pk_corp) {
		String pk_costcalbody = "";
		StringBuffer ssql = new StringBuffer();
		ssql.append(" select pk_costcalbody ") 
		.append("   from bd_storvscost ") 
		.append("  where nvl(dr, 0) = 0 ") 
		.append("    and pk_corp = '"+pk_corp+"' ") 
		.append("    and pk_storcalbody = '"+ccalbodyid+"' ") 
		.append("    and pk_stordoc = '"+cwarehousid+"' ") ;
		
		BaseDAO basd = new BaseDAO();
		MapListProcessor alp = new MapListProcessor();
		ArrayList fyck = null;
		try {
			fyck = (ArrayList) basd.executeQuery(
					ssql.toString(), alp);
		} catch (BusinessException e) {
			e.printStackTrace();
		}
		if (fyck != null && fyck.size() > 0) {
			Map addrMap = (Map) fyck.get(0);
			pk_costcalbody = (String) addrMap.get("pk_costcalbody");
		}
		return pk_costcalbody;

	}
	//取两位小数
	private UFDouble chengeDouble2(UFDouble olddouble) {
		DecimalFormat df = new DecimalFormat("#.00");
		String  newstr= df.format(olddouble.getDouble());
		UFDouble newdouble = new UFDouble(newstr);
		return newdouble;
	}
}