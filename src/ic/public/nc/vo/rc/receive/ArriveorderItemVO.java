/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

package nc.vo.rc.receive;

import nc.vo.pub.*;
import nc.vo.pub.lang.*;
import nc.vo.scm.pub.SCMEnv;
import nc.vo.scm.pub.smart.ObjectUtils;

/**
 * 此处插入类型说明。
 *
 * 创建日期：(2001-6-8)
 *
 * @author：晁志平
 */
public class ArriveorderItemVO extends CircularlyAccessibleValueObject
		implements nc.vo.scm.field.pu.FieldDBValidateInterface {
	//------------------------------
	public String m_carriveorder_bid;
	public String m_carriveorderid;
	public String m_pk_corp;
	public String m_corder_bid;
	public String m_corderid;
	public String m_cassistunit;
	public UFDouble m_narrvnum;
	public UFDouble m_nassistnum;
	public UFDouble m_nwastnum;
	public UFDouble m_nwastassistnum;
	public UFDouble m_npresentnum;
	public UFDouble m_npresentassistnum;
	public String m_vproducenum;
	public String m_ccurrencytypeid;
	public UFDouble m_noriginalcurprice;
	public UFDouble m_noriginalcurmny;
	public UFDouble m_nexchangeotobrate;
	public UFDouble m_nprice;
	public UFDouble m_nmoney;
	public UFDouble m_nexchangeotoarate;
	public UFDouble m_nassistcurprice;
	public UFDouble m_nassistcurmny;
	public UFDate m_dproducedate;
	public Integer m_ivalidday;
	public UFDate m_dvaliddate;
	public UFDouble m_nelignum;
	public UFDouble m_nnotelignum;
	public UFDouble m_naccumchecknum;
	public UFDouble m_naccumwarehousenum;
	public String m_cwarehouseid;
	public String m_cstoreid;
	public String m_cupsourcebilltype;
	public String m_cupsourcebillid;
	public String m_cupsourcebillrowid;
	public String m_csourcebillid;
	public String m_csourcebillrowid;
	public String m_csourcebilltype;
	//退货理由
	private String vbackreasonb = null;
	public String m_vmemo;
	//项目
	private String m_cprojectid = null;
	//项目阶段
	private String m_cprojectphaseid = null;
	//采购订单子子表1主键
	public String m_corder_bb1id;
	//行号
	public String m_crowno = null;

	//自定义项
	public String m_vdef1;
	public String m_vdef2;
	public String m_vdef3;
	public String m_vdef4;
	public String m_vdef5;
	public String m_vdef6;
	public String m_vdef7;
	public String m_vdef8;
	public String m_vdef9;
	public String m_vdef10;
	public String m_vdef11;
	public String m_vdef12;
	public String m_vdef13;
	public String m_vdef14;
	public String m_vdef15;
	public String m_vdef16;
	public String m_vdef17;
	public String m_vdef18;
	public String m_vdef19;
	public String m_vdef20;
	//自定义项主键
	public String m_pk_defdoc1;
	public String m_pk_defdoc2;
	public String m_pk_defdoc3;
	public String m_pk_defdoc4;
	public String m_pk_defdoc5;
	public String m_pk_defdoc6;
	public String m_pk_defdoc7;
	public String m_pk_defdoc8;
	public String m_pk_defdoc9;
	public String m_pk_defdoc10;
	public String m_pk_defdoc11;
	public String m_pk_defdoc12;
	public String m_pk_defdoc13;
	public String m_pk_defdoc14;
	public String m_pk_defdoc15;
	public String m_pk_defdoc16;
	public String m_pk_defdoc17;
	public String m_pk_defdoc18;
	public String m_pk_defdoc19;
	public String m_pk_defdoc20;
	//自由项
	public String m_vfree1;
	public String m_vfree2;
	public String m_vfree3;
	public String m_vfree4;
	public String m_vfree5;
	//自由项0
	public String m_vfree0;
	//是否自由项有值
	public UFBoolean isfree0;
	//是否进行批次号管理
	public UFBoolean iswholemanaflag;
	//是否已经输入批次号
	public UFBoolean ishaveno;

	//到货单号
	public String arrcode;
	//到货日期
	public UFDate arrvdate;
	public UFDouble arrvnum;
	public String assmeasname;
	public UFDouble audittednum;
	//换算率
	public UFDouble convertrate;

	//到货检验
	public String cvendorbaseid;
	//供应商管理档案ID(备用)
	public String cvendormangid;
	public UFDouble elignum;
	public String invcode;

	//到货库位分配相关信息
	//存货名称，编码，规格，型号，主计量，辅计量
	public String invname;
	public String invspec;
	public String invtype;
	//是否辅计量管理
	public UFBoolean isassmana;
	//是否需要质检
	public UFBoolean ischeck;
	//是否固定换算率
	public UFBoolean isfixedrate;
	//是否到货仓库已经输入值
	public UFBoolean ishavestore;
	//是否到货数量为负
	public UFBoolean isnegative;
	//拆行标志，记录是否是被拆分生成的行(到货维护时用，新增时不用)（数据库模板中必须存在）
	public UFBoolean issplit;

	//行号(控制到货小于订单数量逻辑时用于提示)
	public String line;
	//是否可入库
	public UFBoolean m_bcheckin;
	public String m_cbaseid;
	//建议处理意见ID
	private String m_cdeal = null;
	//建议处理意见名称
	private String m_cdealname = null;
	//存货分类
	private String m_cinvsort = null;
	public String m_cmangid;

	//为推式生成入库单分单使用
	//库管员
	private String m_cstoreadmin = null;

	//采购订单子子表1TS
	public String m_cupsourcebb1ts;
	//上层表体TS
	private String m_cupsourcebts = null;
	//上层表头TS
	private String m_cupsourcehts = null;

	//质量检验接口用
	//质量等级ID
	private String m_squalitylevel = null;
	//质量等级名称
	private String m_squalitylevelname = null;
	//本行是否根据质检结果入库
	private UFBoolean m_stockbycheck = null;

	//时间戳
	private String m_ts = null;
	//表头时间戳
	private String m_tsh = null;

	//////////////////////////////////

	//最大到货数量(到货数量输入控制)
	public UFDouble maxarrnum;
	public String measname;
	//累计补货数量
	private UFDouble naccreplenishnum = null;
	public UFDouble notelignum;
	//订单号
	public String ordercode;
	//订货日期
	public UFDate orderdate;
	public String pk_cubasdoc;
	//查询免检属性时可能用到
	public String pk_cumandoc;
	//计划到货日期
	public UFDate plandate;
	//计划提前期
	public Integer planprevdays;
	//实际提前期
	public Integer prevdays;
	//到货明细、到货统计
	//供应商基本档案ID
	public String vendor;
	//应到件数
	public UFDouble willarrvassnum;
	//应到数量
	public UFDouble willarrvnum;
	public UFDouble willauditnum;

	//本行到货是否赠品(v31版本之后弃用)
	private UFBoolean m_iispresent = null;
	//是否赠品
	private UFBoolean m_blargess;
	//来源订单行是否赠品
	private UFBoolean m_blargessuprow;
	//可入库数量
	private UFDouble m_nwillstorenum;
	
	//----V5新增字段：
	
	//需求公司
	public String m_pk_reqcorp;
	//需求库存组织
	public String m_pk_reqstoorg;
	//需求需求仓库
	public String m_pk_creqwareid;
	//收票公司
	public String m_pk_invoicecorp;
//eric 2012-08-28 检验结果，隔离数量
	public String jyjg;
	public String getJyjg() {
		return jyjg;
	}

	public void setJyjg(String jyjg) {
		this.jyjg = jyjg;
	}

	public UFDouble getGlnum() {
		return glnum;
	}

	public void setGlnum(UFDouble glnum) {
		this.glnum = glnum;
	}
	public UFDouble glnum;
	/**
	 * 描述上面属性的FieldObjects。主要用于系统工具中， 业务代码中不会用到下面的FieldObjects。
	 */


	/**
	 * 使用主键字段进行初始化的构造子。
	 *
	 * 创建日期：(2001-6-8)
	 */
	public ArriveorderItemVO() {

	}

	/**
	 * 使用主键进行初始化的构造子。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param ??fieldNameForMethod??
	 *            主键值
	 */
	public ArriveorderItemVO(String newCarriveorder_bid) {

		// 为主键字段赋值:
		m_carriveorder_bid = newCarriveorder_bid;
	}

	/**
	 * 根类Object的方法,克隆这个VO对象。
	 *
	 * 创建日期：(2001-6-8)
	 */
	public Object clone() {

		Object oCloned= null;
		try{
			oCloned= ObjectUtils.serializableClone(this);
		}catch(Exception e){
			 SCMEnv.out(e);
		}
		return oCloned;
	}

	/**
	 * 返回数值对象的显示名称。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return java.lang.String 返回数值对象的显示名称。
	 */
	public String getEntityName() {

		return "ArriveorderB";
	}

	/**
	 * 返回对象标识，用来唯一定位对象。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getPrimaryKey() {

		return m_carriveorder_bid;
	}


	/**
	 * 属性m_vdef11的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef7() {
		return m_vdef7;
	}
	/**
	 * 属性m_vdef11的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef8() {
		return m_vdef8;
	}/**
	 * 属性m_vdef11的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef9() {
		return m_vdef9;
	}/**
	 * 属性m_vdef11的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef10() {
		return m_vdef10;
	}
	/**
	 * 属性m_vdef11的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef11() {
		return m_vdef11;
	}
	/**
	 * 属性m_vdef12的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef12() {
		return m_vdef12;
	}
	/**
	 * 属性m_vdef13的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef13() {
		return m_vdef13;
	}
	/**
	 * 属性m_vdef14的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef14() {
		return m_vdef14;
	}
	/**
	 * 属性m_vdef15的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef15() {
		return m_vdef15;
	}
	/**
	 * 属性m_vdef16的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef16() {
		return m_vdef16;
	}
	/**
	 * 属性m_vdef17的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef17() {
		return m_vdef17;
	}
	/**
	 * 属性m_vdef18的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef18() {
		return m_vdef18;
	}
	/**
	 * 属性m_vdef19的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef19() {
		return m_vdef19;
	}
	/**
	 * 属性m_vdef20的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getVdef20() {
		return m_vdef20;
	}

	/**
	 * 属性m_pk_defdoc1的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc1() {
		return m_pk_defdoc1;
	}
	/**
	 * 属性m_pk_defdoc2的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc2() {
		return m_pk_defdoc2;
	}
	/**
	 * 属性m_pk_defdoc3的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc3() {
		return m_pk_defdoc3;
	}
	/**
	 * 属性m_pk_defdoc4的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc4() {
		return m_pk_defdoc4;
	}
	/**
	 * 属性m_pk_defdoc5的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc5() {
		return m_pk_defdoc5;
	}
	/**
	 * 属性m_pk_defdoc6的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc6() {
		return m_pk_defdoc6;
	}
	/**
	 * 属性m_pk_defdoc7的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc7() {
		return m_pk_defdoc7;
	}
	/**
	 * 属性m_pk_defdoc8的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc8() {
		return m_pk_defdoc8;
	}
	/**
	 * 属性m_pk_defdoc1的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc9() {
		return m_pk_defdoc9;
	}
	/**
	 * 属性m_pk_defdoc10的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc10() {
		return m_pk_defdoc10;
	}
	/**
	 * 属性m_pk_defdoc11的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc11() {
		return m_pk_defdoc11;
	}
	/**
	 * 属性m_pk_defdoc12的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc12() {
		return m_pk_defdoc12;
	}
	/**
	 * 属性m_pk_defdoc13的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc13() {
		return m_pk_defdoc13;
	}
	/**
	 * 属性m_pk_defdoc14的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc14() {
		return m_pk_defdoc14;
	}
	/**
	 * 属性m_pk_defdoc15的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc15() {
		return m_pk_defdoc15;
	}
	/**
	 * 属性m_pk_defdoc16的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc16() {
		return m_pk_defdoc16;
	}
	/**
	 * 属性m_pk_defdoc17的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc17() {
		return m_pk_defdoc17;
	}
	/**
	 * 属性m_pk_defdoc18的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc18() {
		return m_pk_defdoc18;
	}
	/**
	 * 属性m_pk_defdoc19的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc19() {
		return m_pk_defdoc19;
	}
	/**
	 * 属性m_pk_defdoc20的Getter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @return String
	 */
	public String getPKDefDoc20() {
		return m_pk_defdoc20;
	}
	/**
	 * 属性m_vdef11的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef11 String
	 */
	public void setVdef11(String newVdef11) {

		m_vdef11 = newVdef11;
	}
	/**
	 * 属性m_vdef12的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef12 String
	 */
	public void setVdef12(String newVdef12) {

		m_vdef12 = newVdef12;
	}
	/**
	 * 属性m_vdef13的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef13 String
	 */
	public void setVdef13(String newVdef13) {

		m_vdef13 = newVdef13;
	}
	/**
	 * 属性m_vdef14的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef14 String
	 */
	public void setVdef14(String newVdef14) {

		m_vdef14 = newVdef14;
	}
	/**
	 * 属性m_vdef15的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef15 String
	 */
	public void setVdef15(String newVdef15) {

		m_vdef15 = newVdef15;
	}
	/**
	 * 属性m_vdef16的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef16 String
	 */
	public void setVdef16(String newVdef16) {

		m_vdef16 = newVdef16;
	}
	/**
	 * 属性m_vdef17的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef17 String
	 */
	public void setVdef17(String newVdef17) {

		m_vdef17 = newVdef17;
	}
	/**
	 * 属性m_vdef18的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef10 String
	 */
	public void setVdef18(String newVdef18) {

		m_vdef18 = newVdef18;
	}
	/**
	 * 属性m_vdef19的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef19 String
	 */
	public void setVdef19(String newVdef19) {

		m_vdef19 = newVdef19;
	}
	/**
	 * 属性m_vdef20的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef20 String
	 */
	public void setVdef20(String newVdef20) {

		m_vdef20 = newVdef20;
	}

	/**
	 * 属性m_pk_defdoc1的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc1 String
	 */
	public void setPKDefDoc1(String newM_pk_defdoc1) {

		m_pk_defdoc1 = newM_pk_defdoc1;
	}
	/**
	 * 属性m_pk_defdoc2的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc2 String
	 */
	public void setPKDefDoc2(String newM_pk_defdoc2) {

		m_pk_defdoc2 = newM_pk_defdoc2;
	}
	/**
	 * 属性m_pk_defdoc3的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc3 String
	 */
	public void setPKDefDoc3(String newM_pk_defdoc3) {

		m_pk_defdoc3 = newM_pk_defdoc3;
	}
	/**
	 * 属性m_pk_defdoc4的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc4 String
	 */
	public void setPKDefDoc4(String newM_pk_defdoc4) {

		m_pk_defdoc4 = newM_pk_defdoc4;
	}
	/**
	 * 属性m_pk_defdoc5的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc5 String
	 */
	public void setPKDefDoc5(String newM_pk_defdoc5) {

		m_pk_defdoc5 = newM_pk_defdoc5;
	}
	/**
	 * 属性m_pk_defdoc6的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc6 String
	 */
	public void setPKDefDoc6(String newM_pk_defdoc6) {

		m_pk_defdoc6 = newM_pk_defdoc6;
	}
	/**
	 * 属性m_pk_defdoc7的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc7 String
	 */
	public void setPKDefDoc7(String newM_pk_defdoc7) {

		m_pk_defdoc7 = newM_pk_defdoc7;
	}
	/**
	 * 属性m_pk_defdoc8的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc8 String
	 */
	public void setPKDefDoc8(String newM_pk_defdoc8) {

		m_pk_defdoc8 = newM_pk_defdoc8;
	}
	/**
	 * 属性m_pk_defdoc9的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc9 String
	 */
	public void setPKDefDoc9(String newM_pk_defdoc9) {

		m_pk_defdoc9 = newM_pk_defdoc9;
	}
	/**
	 * 属性m_pk_defdoc10的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc10 String
	 */
	public void setPKDefDoc10(String newM_pk_defdoc10) {

		m_pk_defdoc10 = newM_pk_defdoc10;
	}
	/**
	 * 属性m_pk_defdoc11的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc11 String
	 */
	public void setPKDefDoc11(String newM_pk_defdoc11) {

		m_pk_defdoc11 = newM_pk_defdoc11;
	}
	/**
	 * 属性m_pk_defdoc12的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc12 String
	 */
	public void setPKDefDoc12(String newM_pk_defdoc12) {

		m_pk_defdoc12 = newM_pk_defdoc12;
	}
	/**
	 * 属性m_pk_defdoc13的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc13 String
	 */
	public void setPKDefDoc13(String newM_pk_defdoc13) {

		m_pk_defdoc13 = newM_pk_defdoc13;
	}
	/**
	 * 属性m_pk_defdoc14的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc14 String
	 */
	public void setPKDefDoc14(String newM_pk_defdoc14) {

		m_pk_defdoc14 = newM_pk_defdoc14;
	}
	/**
	 * 属性m_pk_defdoc15的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc15 String
	 */
	public void setPKDefDoc15(String newM_pk_defdoc15) {

		m_pk_defdoc15 = newM_pk_defdoc15;
	}
	/**
	 * 属性m_pk_defdoc16的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc16 String
	 */
	public void setPKDefDoc16(String newM_pk_defdoc16) {

		m_pk_defdoc16 = newM_pk_defdoc16;
	}
	/**
	 * 属性m_pk_defdoc17的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc17 String
	 */
	public void setPKDefDoc17(String newM_pk_defdoc17) {

		m_pk_defdoc17 = newM_pk_defdoc17;
	}
	/**
	 * 属性m_pk_defdoc18的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc18 String
	 */
	public void setPKDefDoc18(String newM_pk_defdoc18) {

		m_pk_defdoc18 = newM_pk_defdoc18;
	}
	/**
	 * 属性m_pk_defdoc19的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc19 String
	 */
	public void setPKDefDoc19(String newM_pk_defdoc19) {

		m_pk_defdoc19 = newM_pk_defdoc19;
	}
	/**
	 * 属性m_pk_defdoc20的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_pk_defdoc20 String
	 */
	public void setPKDefDoc20(String newM_pk_defdoc20) {

		m_pk_defdoc20 = newM_pk_defdoc20;
	}
	/**
	 * 设置对象标识，用来唯一定位对象。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param m_carriveorder_bid
	 *            String
	 */
	public void setPrimaryKey(String newCarriveorder_bid) {

		m_carriveorder_bid = newCarriveorder_bid;
	}

	/**
	 * 属性m_carriveorder_bid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCarriveorder_bid() {
		return m_carriveorder_bid;
	}

	/**
	 * 属性m_carriveorderid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCarriveorderid() {
		return m_carriveorderid;
	}

	/**
	 * 属性m_pk_corp的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getPk_corp() {
		return m_pk_corp;
	}

	/**
	 * 属性m_corder_bid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCorder_bid() {
		return m_corder_bid;
	}

	/**
	 * 属性m_corderid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCorderid() {
		return m_corderid;
	}

	/**
	 * 属性m_cassistunit的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCassistunit() {
		return m_cassistunit;
	}

	/**
	 * 属性m_narrvnum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNarrvnum() {
		return m_narrvnum;
	}

	/**
	 * 属性m_nassistnum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNassistnum() {
		return m_nassistnum;
	}

	/**
	 * 属性m_nwastnum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNwastnum() {
		return m_nwastnum;
	}

	/**
	 * 属性m_nwastassistnum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNwastassistnum() {
		return m_nwastassistnum;
	}

	/**
	 * 属性m_npresentnum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNpresentnum() {
		return m_npresentnum;
	}

	/**
	 * 属性m_npresentassistnum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNpresentassistnum() {
		return m_npresentassistnum;
	}

	/**
	 * 属性m_vproducenum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVproducenum() {
		return m_vproducenum;
	}

	/**
	 * 属性m_ccurrencytypeid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCcurrencytypeid() {
		return m_ccurrencytypeid;
	}

	/**
	 * 属性m_noriginalcurprice的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNoriginalcurprice() {
		return m_noriginalcurprice;
	}

	/**
	 * 属性m_noriginalcurmny的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNoriginalcurmny() {
		return m_noriginalcurmny;
	}

	/**
	 * 属性m_nexchangeotobrate的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNexchangeotobrate() {
		return m_nexchangeotobrate;
	}

	/**
	 * 属性m_nprice的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNprice() {
		return m_nprice;
	}

	/**
	 * 属性m_nmoney的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNmoney() {
		return m_nmoney;
	}

	/**
	 * 属性m_nexchangeotoarate的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNexchangeotoarate() {
		return m_nexchangeotoarate;
	}

	/**
	 * 属性m_nassistcurprice的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNassistcurprice() {
		return m_nassistcurprice;
	}

	/**
	 * 属性m_nassistcurmny的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNassistcurmny() {
		return m_nassistcurmny;
	}

	/**
	 * 属性m_dproducedate的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDate
	 */
	public UFDate getDproducedate() {
		return m_dproducedate;
	}

	/**
	 * 属性m_ivalidday的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return Integer
	 */
	public Integer getIvalidday() {
		return m_ivalidday;
	}

	/**
	 * 属性m_dvaliddate的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDate
	 */
	public UFDate getDvaliddate() {
		return m_dvaliddate;
	}

	/**
	 * 属性m_nelignum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNelignum() {
		return m_nelignum;
	}

	/**
	 * 属性m_nnotelignum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNnotelignum() {
		return m_nnotelignum;
	}

	/**
	 * 属性m_naccumchecknum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNaccumchecknum() {
		return m_naccumchecknum;
	}

	/**
	 * 属性m_naccumwarehousenum的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return UFDouble
	 */
	public UFDouble getNaccumwarehousenum() {
		return m_naccumwarehousenum;
	}

	/**
	 * 属性m_cwarehouseid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCwarehouseid() {
		return m_cwarehouseid;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCstoreid() {
		return m_cstoreid;
	}

	/**
	 * 属性m_cupsourcebilltype的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCupsourcebilltype() {
		return m_cupsourcebilltype;
	}

	/**
	 * 属性m_cupsourcebillid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCupsourcebillid() {
		return m_cupsourcebillid;
	}

	/**
	 * 属性m_cupsourcebillrowid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCupsourcebillrowid() {
		return m_cupsourcebillrowid;
	}

	/**
	 * 属性m_vmemo的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVmemo() {
		return m_vmemo;
	}

	/**
	 * 属性m_vdef1的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVdef1() {
		return m_vdef1;
	}

	/**
	 * 属性m_vdef2的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVdef2() {
		return m_vdef2;
	}

	/**
	 * 属性m_vdef3的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVdef3() {
		return m_vdef3;
	}

	/**
	 * 属性m_vdef4的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVdef4() {
		return m_vdef4;
	}

	/**
	 * 属性m_vdef5的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVdef5() {
		return m_vdef5;
	}

	/**
	 * 属性m_vdef6的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVdef6() {
		return m_vdef6;
	}
	/**
	 * 属性m_vdef7的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef7 String
	 */
	public void setVdef7(String newVdef7) {

		m_vdef7 = newVdef7;
	}
	/**
	 * 属性m_vdef8的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef8 String
	 */
	public void setVdef8(String newVdef8) {

		m_vdef8 = newVdef8;
	}
	/**
	 * 属性m_vdef9的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef9 String
	 */
	public void setVdef9(String newVdef9) {

		m_vdef9 = newVdef9;
	}
	/**
	 * 属性m_vdef10的setter方法。
	 *
	 * 创建日期：(2001-6-7)
	 * @param newM_vdef10 String
	 */
	public void setVdef10(String newVdef10) {

		m_vdef10 = newVdef10;
	}

	/**
	 * 属性m_vfree1的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVfree1() {
		return m_vfree1;
	}

	/**
	 * 属性m_vfree2的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVfree2() {
		return m_vfree2;
	}

	/**
	 * 属性m_vfree3的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVfree3() {
		return m_vfree3;
	}

	/**
	 * 属性m_vfree4的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVfree4() {
		return m_vfree4;
	}

	/**
	 * 属性m_vfree5的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVfree5() {
		return m_vfree5;
	}

	/**
	 * 属性m_carriveorder_bid的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_carriveorder_bid
	 *            String
	 */
	public void setCarriveorder_bid(String newCarriveorder_bid) {

		m_carriveorder_bid = newCarriveorder_bid;
	}

	/**
	 * 属性m_carriveorderid的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_carriveorderid
	 *            String
	 */
	public void setCarriveorderid(String newCarriveorderid) {

		m_carriveorderid = newCarriveorderid;
	}

	/**
	 * 属性m_pk_corp的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_pk_corp
	 *            String
	 */
	public void setPk_corp(String newPk_corp) {

		m_pk_corp = newPk_corp;
	}

	/**
	 * 属性m_corder_bid的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_corder_bid
	 *            String
	 */
	public void setCorder_bid(String newCorder_bid) {

		m_corder_bid = newCorder_bid;
	}

	/**
	 * 属性m_corderid的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_corderid
	 *            String
	 */
	public void setCorderid(String newCorderid) {

		m_corderid = newCorderid;
	}

	/**
	 * 属性m_cassistunit的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_cassistunit
	 *            String
	 */
	public void setCassistunit(String newCassistunit) {

		m_cassistunit = newCassistunit;
	}

	/**
	 * 属性m_narrvnum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_narrvnum
	 *            UFDouble
	 */
	public void setNarrvnum(UFDouble newNarrvnum) {

		m_narrvnum = newNarrvnum;
	}

	/**
	 * 属性m_nassistnum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nassistnum
	 *            UFDouble
	 */
	public void setNassistnum(UFDouble newNassistnum) {

		m_nassistnum = newNassistnum;
	}

	/**
	 * 属性m_nwastnum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nwastnum
	 *            UFDouble
	 */
	public void setNwastnum(UFDouble newNwastnum) {

		m_nwastnum = newNwastnum;
	}

	/**
	 * 属性m_nwastassistnum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nwastassistnum
	 *            UFDouble
	 */
	public void setNwastassistnum(UFDouble newNwastassistnum) {

		m_nwastassistnum = newNwastassistnum;
	}

	/**
	 * 属性m_npresentnum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_npresentnum
	 *            UFDouble
	 */
	public void setNpresentnum(UFDouble newNpresentnum) {

		m_npresentnum = newNpresentnum;
	}

	/**
	 * 属性m_npresentassistnum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_npresentassistnum
	 *            UFDouble
	 */
	public void setNpresentassistnum(UFDouble newNpresentassistnum) {

		m_npresentassistnum = newNpresentassistnum;
	}

	/**
	 * 属性m_vproducenum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vproducenum
	 *            String
	 */
	public void setVproducenum(String newVproducenum) {

		m_vproducenum = newVproducenum;
	}

	/**
	 * 属性m_ccurrencytypeid的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_ccurrencytypeid
	 *            String
	 */
	public void setCcurrencytypeid(String newCcurrencytypeid) {

		m_ccurrencytypeid = newCcurrencytypeid;
	}

	/**
	 * 属性m_noriginalcurprice的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_noriginalcurprice
	 *            UFDouble
	 */
	public void setNoriginalcurprice(UFDouble newNoriginalcurprice) {

		m_noriginalcurprice = newNoriginalcurprice;
	}

	/**
	 * 属性m_noriginalcurmny的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_noriginalcurmny
	 *            UFDouble
	 */
	public void setNoriginalcurmny(UFDouble newNoriginalcurmny) {

		m_noriginalcurmny = newNoriginalcurmny;
	}

	/**
	 * 属性m_nexchangeotobrate的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nexchangeotobrate
	 *            UFDouble
	 */
	public void setNexchangeotobrate(UFDouble newNexchangeotobrate) {

		m_nexchangeotobrate = newNexchangeotobrate;
	}

	/**
	 * 属性m_nprice的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nprice
	 *            UFDouble
	 */
	public void setNprice(UFDouble newNprice) {

		m_nprice = newNprice;
	}

	/**
	 * 属性m_nmoney的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nmoney
	 *            UFDouble
	 */
	public void setNmoney(UFDouble newNmoney) {

		m_nmoney = newNmoney;
	}

	/**
	 * 属性m_nexchangeotoarate的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nexchangeotoarate
	 *            UFDouble
	 */
	public void setNexchangeotoarate(UFDouble newNexchangeotoarate) {

		m_nexchangeotoarate = newNexchangeotoarate;
	}

	/**
	 * 属性m_nassistcurprice的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nassistcurprice
	 *            UFDouble
	 */
	public void setNassistcurprice(UFDouble newNassistcurprice) {

		m_nassistcurprice = newNassistcurprice;
	}

	/**
	 * 属性m_nassistcurmny的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nassistcurmny
	 *            UFDouble
	 */
	public void setNassistcurmny(UFDouble newNassistcurmny) {

		m_nassistcurmny = newNassistcurmny;
	}

	/**
	 * 属性m_dproducedate的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_dproducedate
	 *            UFDate
	 */
	public void setDproducedate(UFDate newDproducedate) {

		m_dproducedate = newDproducedate;
	}

	/**
	 * 属性m_ivalidday的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_ivalidday
	 *            Integer
	 */
	public void setIvalidday(Integer newIvalidday) {

		m_ivalidday = newIvalidday;
	}

	/**
	 * 属性m_dvaliddate的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_dvaliddate
	 *            UFDate
	 */
	public void setDvaliddate(UFDate newDvaliddate) {

		m_dvaliddate = newDvaliddate;
	}

	/**
	 * 属性m_nelignum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nelignum
	 *            UFDouble
	 */
	public void setNelignum(UFDouble newNelignum) {

		m_nelignum = newNelignum;
	}

	/**
	 * 属性m_nnotelignum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_nnotelignum
	 *            UFDouble
	 */
	public void setNnotelignum(UFDouble newNnotelignum) {

		m_nnotelignum = newNnotelignum;
	}

	/**
	 * 属性m_naccumchecknum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_naccumchecknum
	 *            UFDouble
	 */
	public void setNaccumchecknum(UFDouble newNaccumchecknum) {

		m_naccumchecknum = newNaccumchecknum;
	}

	/**
	 * 属性m_naccumwarehousenum的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_naccumwarehousenum
	 *            UFDouble
	 */
	public void setNaccumwarehousenum(UFDouble newNaccumwarehousenum) {

		m_naccumwarehousenum = newNaccumwarehousenum;
	}

	/**
	 * 属性m_cwarehouseid的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_cwarehouseid
	 *            String
	 */
	public void setCwarehouseid(String newCwarehouseid) {

		m_cwarehouseid = newCwarehouseid;
	}

	/**
	 * 属性m_cstoreid的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_cstoreid
	 *            String
	 */
	public void setCstoreid(String newCstoreid) {

		m_cstoreid = newCstoreid;
	}

	/**
	 * 属性m_cupsourcebilltype的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_cupsourcebilltype
	 *            String
	 */
	public void setCupsourcebilltype(String newCupsourcebilltype) {

		m_cupsourcebilltype = newCupsourcebilltype;
	}

	/**
	 * 属性m_cupsourcebillid的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_cupsourcebillid
	 *            String
	 */
	public void setCupsourcebillid(String newCupsourcebillid) {

		m_cupsourcebillid = newCupsourcebillid;
	}

	/**
	 * 属性m_cupsourcebillrowid的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_cupsourcebillrowid
	 *            String
	 */
	public void setCupsourcebillrowid(String newCupsourcebillrowid) {

		m_cupsourcebillrowid = newCupsourcebillrowid;
	}

	/**
	 * 属性m_vmemo的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vmemo
	 *            String
	 */
	public void setVmemo(String newVmemo) {

		m_vmemo = newVmemo;
	}

	/**
	 * 属性m_vdef1的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vdef1
	 *            String
	 */
	public void setVdef1(String newVdef1) {

		m_vdef1 = newVdef1;
	}

	/**
	 * 属性m_vdef2的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vdef2
	 *            String
	 */
	public void setVdef2(String newVdef2) {

		m_vdef2 = newVdef2;
	}

	/**
	 * 属性m_vdef3的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vdef3
	 *            String
	 */
	public void setVdef3(String newVdef3) {

		m_vdef3 = newVdef3;
	}

	/**
	 * 属性m_vdef4的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vdef4
	 *            String
	 */
	public void setVdef4(String newVdef4) {

		m_vdef4 = newVdef4;
	}

	/**
	 * 属性m_vdef5的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vdef5
	 *            String
	 */
	public void setVdef5(String newVdef5) {

		m_vdef5 = newVdef5;
	}

	/**
	 * 属性m_vdef6的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vdef6
	 *            String
	 */
	public void setVdef6(String newVdef6) {

		m_vdef6 = newVdef6;
	}

	/**
	 * 属性m_vfree1的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vfree1
	 *            String
	 */
	public void setVfree1(String newVfree1) {

		m_vfree1 = newVfree1;
	}

	/**
	 * 属性m_vfree2的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vfree2
	 *            String
	 */
	public void setVfree2(String newVfree2) {

		m_vfree2 = newVfree2;
	}

	/**
	 * 属性m_vfree3的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vfree3
	 *            String
	 */
	public void setVfree3(String newVfree3) {

		m_vfree3 = newVfree3;
	}

	/**
	 * 属性m_vfree4的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vfree4
	 *            String
	 */
	public void setVfree4(String newVfree4) {

		m_vfree4 = newVfree4;
	}

	/**
	 * 属性m_vfree5的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_vfree5
	 *            String
	 */
	public void setVfree5(String newVfree5) {

		m_vfree5 = newVfree5;
	}

	/**
	 * 验证对象各属性之间的数据逻辑正确性。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @exception nc.vo.pub.ValidationException
	 *                如果验证失败，抛出 ValidationException，对错误进行解释。
	 */
	public void validate() throws ValidationException {
		StringBuffer errInfo = new StringBuffer();
		if (m_narrvnum != null) {
			if (m_narrvnum.doubleValue() < 0) {
				if (m_nassistnum != null && m_nassistnum.doubleValue() > 0) {
					errInfo.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40040301","UPP40040301-000269")/*@res "辅数量、"*/);
				}
				if (m_npresentnum != null && m_npresentnum.doubleValue() > 0) {
					errInfo.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40040301","UPP40040301-000270")/*@res "赠品数量、"*/);
				}
				if (m_nwastnum != null && m_nwastnum.doubleValue() > 0) {
					errInfo.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40040301","UPP40040301-000271")/*@res "途耗数量、"*/);
				}
				if (m_nmoney != null && m_nmoney.doubleValue() > 0) {
					errInfo.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40040301","UPP40040301-000272")/*@res "金额、"*/);
				}
			} else if (m_narrvnum.doubleValue() > 0) {
				if (m_nassistnum != null && m_nassistnum.doubleValue() < 0) {
					errInfo.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40040301","UPP40040301-000269")/*@res "辅数量、"*/);
				}
				if (m_npresentnum != null && m_npresentnum.doubleValue() < 0) {
					errInfo.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40040301","UPP40040301-000270")/*@res "赠品数量、"*/);
				}
				if (m_nwastnum != null && m_nwastnum.doubleValue() < 0) {
					errInfo.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40040301","UPP40040301-000271")/*@res "途耗数量、"*/);
				}
				if (m_nmoney != null && m_nmoney.doubleValue() < 0) {
					errInfo.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40040301","UPP40040301-000272")/*@res "金额、"*/);
				}
			}
		}
		String message = nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40040301","UPP40040301-000273")/*@res "存在数据错误,下列数据正负属性与到货数量不一致:"*/;

		if (errInfo.toString().length() > 0) {
			message += errInfo.toString();
			throw new ValidationException(message);
		} else if (m_narrvnum == null) {
			message += nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40040301","UPP40040301-000274")/*@res "到货数量不可为空！"*/;
			throw new ValidationException(message);
		}
	}

	/**
	 * <p>
	 * 需要在一个循环中访问的属性的名称数组。
	 * <p>
	 * 创建日期：(??Date??)
	 *
	 * @return java.lang.String[]
	 */
	public java.lang.String[] getAttributeNames() {

		return new String[] {
				"carriveorderid",
				"pk_corp",
				"corder_bid",
				"corderid",
				"cmangid",
				"cbaseid",
				"cassistunit",
				"narrvnum",
				"nassistnum",
				"nwastnum",
				"nwastassistnum",
				"npresentnum",
				"npresentassistnum",
				"vproducenum",
				"ccurrencytypeid",
				"noriginalcurprice",
				"noriginalcurmny",
				"nexchangeotobrate",
				"nprice",
				"nmoney",
				"nexchangeotoarate",
				"nassistcurprice",
				"nassistcurmny",
				"dproducedate",
				"ivalidday",
				"dvaliddate",
				"nelignum",
				"nnotelignum",
				"naccumchecknum",
				"naccumwarehousenum",
				"cwarehouseid",
				"cstoreid",
				"cupsourcebilltype",
				"cupsourcebillid",
				"cupsourcebillrowid",
				"vmemo",
				"vdef1", "vdef2", "vdef3", "vdef4", "vdef5", "vdef6","vdef7",
				"vdef8",
				"vdef9",
				"vdef10",
				"vdef11",
				"vdef12",
				"vdef13",
				"vdef14",
				"vdef15",
				"vdef16",
				"vdef17",
				"vdef18",
				"vdef19",
				"vdef20",
				"pk_defdoc1",
				"pk_defdoc2",
				"pk_defdoc3",
				"pk_defdoc4",
				"pk_defdoc5",
				"pk_defdoc6",
				"pk_defdoc7",
				"pk_defdoc8",
				"pk_defdoc9",
				"pk_defdoc10",
				"pk_defdoc11",
				"pk_defdoc12",
				"pk_defdoc13",
				"pk_defdoc14",
				"pk_defdoc15",
				"pk_defdoc16",
				"pk_defdoc17",
				"pk_defdoc18",
				"pk_defdoc19",
				"pk_defdoc20",
				"vfree1", "vfree2", "vfree3", "vfree4", "vfree5",
				"cvendormangid",
				"cvendorbaseid",
				"arrcode",
				"arrvnum",
				"audittednum",
				"willauditnum",
				"elignum",
				"notelignum",
				"willarrvnum",
				"willarrvassnum",
				"plandate",
				"arrvdate",
				"orderdate",
				"planprevdays",
				"prevdays",
				"ordercode",
				"csourcebilltype",
				"csourcebillid",
				"csourcebillrowid",
				"maxarrnum",
				"iswholemanaflag",
				"isfixedrate",
				"convertrate",
				"line",
				"issplit",
				"vfree0",
				"vendor",
				"cinvsort",
				"cstoreadmin",
				"squalitylevel",
				"squalitylevelname",
				"sdeal",
				"sdealname",
				"ts",
				"tsh",
				"cupsourcehts",
				"cupsourcebts",
				"iispresent",
				"cprojectid",
				"cprojectphaseid",
				/* 存量查询调用销售对话框 */
				"cinventoryid",
				"dconsigndate",
				/* 行号 */
				"crowno",
				"vbackreasonb",
				"naccreplenishnum",
				"corder_bb1id",
				"cupsourcebb1ts",
				"bcheckin",
				"blargess",
				"blargessuprow",
				"nwillstorenum",
				"pk_reqcorp",
				"pk_reqstoorg",
				"pk_creqwareid",
				"pk_invoicecorp","jyjg","glnum"
				};
	}

	/**
	 * <p>
	 * 根据一个属性名称字符串该属性的值。
	 * <p>
	 * 创建日期：(2001-6-8)
	 *
	 * @param key
	 *            java.lang.String
	 */
	public Object getAttributeValue(String attributeName) {
		/* 行号 */
		if (attributeName.equals("crowno")) {
			return m_crowno;
		}
		/* 销售可用量查询要求 */
		else if (attributeName.equals("cinventoryid")) {
			return m_cmangid;
		} else if (attributeName.equals("dconsigndate")) {
			return arrvdate;
		} else if (attributeName.equals("cprojectid")) {
			return m_cprojectid;
		} else if (attributeName.equals("cprojectphaseid")) {
			return m_cprojectphaseid;
		} else if (attributeName.equals("carriveorder_bid")) {
			return m_carriveorder_bid;
		} else if (attributeName.equals("carriveorderid")) {
			return m_carriveorderid;
		} else if (attributeName.equals("pk_corp")) {
			return m_pk_corp;
		} else if (attributeName.equals("corder_bid")) {
			return m_corder_bid;
		} else if (attributeName.equals("corderid")) {
			return m_corderid;
		} else if (attributeName.equals("cmangid")) {
			return m_cmangid;
		} else if (attributeName.equals("cbaseid")) {
			return m_cbaseid;
		} else if (attributeName.equals("cassistunit")) {
			return m_cassistunit;
		} else if (attributeName.equals("narrvnum")) {
			return m_narrvnum;
		} else if (attributeName.equals("nassistnum")) {
			return m_nassistnum;
		} else if (attributeName.equals("nwastnum")) {
			return m_nwastnum;
		} else if (attributeName.equals("nwastassistnum")) {
			return m_nwastassistnum;
		} else if (attributeName.equals("npresentnum")) {
			return m_npresentnum;
		} else if (attributeName.equals("npresentassistnum")) {
			return m_npresentassistnum;
		} else if (attributeName.equals("vproducenum")) {
			return m_vproducenum;
		} else if (attributeName.equals("ccurrencytypeid")) {
			return m_ccurrencytypeid;
		} else if (attributeName.equals("noriginalcurprice")) {
			return m_noriginalcurprice;
		} else if (attributeName.equals("noriginalcurmny")) {
			return m_noriginalcurmny;
		} else if (attributeName.equals("nexchangeotobrate")) {
			return m_nexchangeotobrate;
		} else if (attributeName.equals("nprice")) {
			return m_nprice;
		} else if (attributeName.equals("nmoney")) {
			return m_nmoney;
		} else if (attributeName.equals("nexchangeotoarate")) {
			return m_nexchangeotoarate;
		} else if (attributeName.equals("nassistcurprice")) {
			return m_nassistcurprice;
		} else if (attributeName.equals("nassistcurmny")) {
			return m_nassistcurmny;
		} else if (attributeName.equals("dproducedate")) {
			return m_dproducedate;
		} else if (attributeName.equals("ivalidday")) {
			return m_ivalidday;
		} else if (attributeName.equals("dvaliddate")) {
			return m_dvaliddate;
		} else if (attributeName.equals("nelignum")) {
			return m_nelignum;
		} else if (attributeName.equals("nnotelignum")) {
			return m_nnotelignum;
		} else if (attributeName.equals("naccumchecknum")) {
			return m_naccumchecknum;
		} else if (attributeName.equals("naccumwarehousenum")) {
			return m_naccumwarehousenum;
		} else if (attributeName.equals("cwarehouseid")) {
			return m_cwarehouseid;
		} else if (attributeName.equals("cstoreid")) {
			return m_cstoreid;
		} else if (attributeName.equals("cupsourcebilltype")) {
			return m_cupsourcebilltype;
		} else if (attributeName.equals("cupsourcebillid")) {
			return m_cupsourcebillid;
		} else if (attributeName.equals("cupsourcebillrowid")) {
			return m_cupsourcebillrowid;
		} else if (attributeName.equals("vmemo")) {
			return m_vmemo;
		} else if (attributeName.equals("vdef1")) {
			return m_vdef1;
		} else if (attributeName.equals("vdef2")) {
			return m_vdef2;
		} else if (attributeName.equals("vdef3")) {
			return m_vdef3;
		} else if (attributeName.equals("vdef4")) {
			return m_vdef4;
		} else if (attributeName.equals("vdef5")) {
			return m_vdef5;
		} else if (attributeName.equals("vdef6")) {
			return m_vdef6;
		} else if (attributeName.equals("vdef7")) {
			return m_vdef7;
		} else if (attributeName.equals("vdef8")) {
			return m_vdef8;
		} else if (attributeName.equals("vdef9")) {
			return m_vdef9;
		} else if (attributeName.equals("vdef10")) {
			return m_vdef10;
		} else if (attributeName.equals("vdef11")) {
			return m_vdef11;
		} else if (attributeName.equals("vdef12")) {
			return m_vdef12;
		} else if (attributeName.equals("vdef13")) {
			return m_vdef13;
		} else if (attributeName.equals("vdef14")) {
			return m_vdef14;
		} else if (attributeName.equals("vdef15")) {
			return m_vdef15;
		} else if (attributeName.equals("vdef16")) {
			return m_vdef16;
		} else if (attributeName.equals("vdef17")) {
			return m_vdef17;
		} else if (attributeName.equals("vdef18")) {
			return m_vdef18;
		} else if (attributeName.equals("vdef19")) {
			return m_vdef19;
		} else if (attributeName.equals("vdef20")) {
			return m_vdef20;
		} else if (attributeName.equals("pk_defdoc1")) {
			return m_pk_defdoc1;
		} else if (attributeName.equals("pk_defdoc2")) {
			return m_pk_defdoc2;
		} else if (attributeName.equals("pk_defdoc3")) {
			return m_pk_defdoc3;
		} else if (attributeName.equals("pk_defdoc4")) {
			return m_pk_defdoc4;
		} else if (attributeName.equals("pk_defdoc5")) {
			return m_pk_defdoc5;
		} else if (attributeName.equals("pk_defdoc6")) {
			return m_pk_defdoc6;
		} else if (attributeName.equals("pk_defdoc7")) {
			return m_pk_defdoc7;
		} else if (attributeName.equals("pk_defdoc8")) {
			return m_pk_defdoc8;
		} else if (attributeName.equals("pk_defdoc9")) {
			return m_pk_defdoc9;
		} else if (attributeName.equals("pk_defdoc10")) {
			return m_pk_defdoc10;
		} else if (attributeName.equals("pk_defdoc11")) {
			return m_pk_defdoc11;
		} else if (attributeName.equals("pk_defdoc12")) {
			return m_pk_defdoc12;
		} else if (attributeName.equals("pk_defdoc13")) {
			return m_pk_defdoc13;
		} else if (attributeName.equals("pk_defdoc14")) {
			return m_pk_defdoc14;
		} else if (attributeName.equals("pk_defdoc15")) {
			return m_pk_defdoc15;
		} else if (attributeName.equals("pk_defdoc16")) {
			return m_pk_defdoc16;
		} else if (attributeName.equals("pk_defdoc17")) {
			return m_pk_defdoc17;
		} else if (attributeName.equals("pk_defdoc18")) {
			return m_pk_defdoc18;
		} else if (attributeName.equals("pk_defdoc19")) {
			return m_pk_defdoc19;
		} else if (attributeName.equals("pk_defdoc20")) {
			return m_pk_defdoc20;
		} else if (attributeName.equals("vfree1")) {
			return m_vfree1;
		} else if (attributeName.equals("vfree2")) {
			return m_vfree2;
		} else if (attributeName.equals("vfree3")) {
			return m_vfree3;
		} else if (attributeName.equals("vfree4")) {
			return m_vfree4;
		} else if (attributeName.equals("vfree5")) {
			return m_vfree5;
		} else if (attributeName.equals("cvendormangid")) {
			return cvendormangid;
		} else if (attributeName.equals("cvendorbaseid")) {
			return cvendorbaseid;
		} else if (attributeName.equals("arrcode")) {
			return arrcode;
		} else if (attributeName.equals("arrvnum")) {
			return arrvnum;
		} else if (attributeName.equals("audittednum")) {
			return audittednum;
		} else if (attributeName.equals("willauditnum")) {
			return willauditnum;
		} else if (attributeName.equals("elignum")) {
			return elignum;
		} else if (attributeName.equals("notelignum")) {
			return notelignum;
		} else if (attributeName.equals("willarrvnum")) {
			return willarrvnum;
		} else if (attributeName.equals("willarrvassnum")) {
			return willarrvassnum;
		} else if (attributeName.equals("plandate")) {
			return plandate;
		} else if (attributeName.equals("orderdate")) {
			return orderdate;
		} else if (attributeName.equals("planprevdays")) {
			return planprevdays;
		} else if (attributeName.equals("prevdays")) {
			return prevdays;
		} else if (attributeName.equals("ordercode")) {
			return ordercode;
		} else if (attributeName.equals("arrvdate")) {
			return arrvdate;
		} else if (attributeName.equals("csourcebilltype")) {
			return m_csourcebilltype;
		} else if (attributeName.equals("csourcebillid")) {
			return m_csourcebillid;
		} else if (attributeName.equals("csourcebillrowid")) {
			return m_csourcebillrowid;
		} else if (attributeName.equals("maxarrnum")) {
			return maxarrnum;
		} else if (attributeName.equals("line")) {
			return line;
		} else if (attributeName.equals("issplit")) {
			return issplit;
		} else if (attributeName.equals("iswholemanaflag")) {
			return iswholemanaflag;
		} else if (attributeName.equals("isfixedrate")) {
			return isfixedrate;
		} else if (attributeName.equals("convertrate")) {
			return convertrate;
		} else if (attributeName.equals("vfree0")) {
			return m_vfree0;
		} else if (attributeName.equals("vendor")) {
			return vendor;
		} else if (attributeName.equals("ts")) {
			return m_ts;
		} else if (attributeName.equals("cinvsort")) {
			return m_cinvsort;
		} else if (attributeName.equals("cstoreadmin")) {
			return m_cstoreadmin;
		} else if (attributeName.equals("squalitylevel")) {
			return m_squalitylevel;
		} else if (attributeName.equals("squalitylevelname")) {
			return m_squalitylevelname;
		} else if (attributeName.equals("cdeal")) {
			return m_cdeal;
		} else if (attributeName.equals("cdealname")) {
			return m_cdealname;
		} else if (attributeName.equals("tsh")) {
			return m_tsh;
		} else if (attributeName.equals("cupsourcehts")) {
			return m_cupsourcehts;
		} else if (attributeName.equals("cupsourcebts")) {
			return m_cupsourcebts;
		} else if (attributeName.equals("iispresent")) {
			return m_iispresent;
		} else if (attributeName.equals("vbackreasonb")) {
			return vbackreasonb;
		} else if (attributeName.equals("naccreplenishnum")) {
			return naccreplenishnum;
		} else if (attributeName.equals("corder_bb1id")) {
			return m_corder_bb1id;
		} else if (attributeName.equals("cupsourcebb1ts")) {
			return m_cupsourcebb1ts;
		} else if (attributeName.equals("bcheckin")) {
			return m_bcheckin;
		} else if (attributeName.equals("blargess")) {
			return m_blargess;
		} else if (attributeName.equals("blargessuprow")) {
			return m_blargessuprow;
		} else if (attributeName.equals("nwillstorenum")) {
			return m_nwillstorenum;
		} else if (attributeName.equals("pk_reqcorp")) {
			return m_pk_reqcorp;
		} else if (attributeName.equals("pk_reqstoorg")) {
			return m_pk_reqstoorg;
		} else if (attributeName.equals("pk_creqwareid")) {
			return m_pk_creqwareid;
		} else if (attributeName.equals("pk_invoicecorp")) {
			return m_pk_invoicecorp;
		} else if (attributeName.equals("jyjg")) {
			return jyjg;
		} else if (attributeName.equals("glnum")) {
			return glnum;
		}		
		return null;
	}

	/**
	 * <p>
	 * 对参数name对型的属性设置值。
	 * <p>
	 * 创建日期：(2001-6-8)
	 *
	 * @param key
	 *            java.lang.String
	 */
	public void setAttributeValue(String name, Object value) {

		try {
			if (name.equals("crowno")) {
				m_crowno = (String) value;
			} else if (name.equals("cprojectid")) {
				m_cprojectid = (String) value;
			} else if (name.equals("cprojectphaseid")) {
				m_cprojectphaseid = (String) value;
			} else if (name.equals("carriveorder_bid")) {
				m_carriveorder_bid = (String) value;
			} else if (name.equals("carriveorderid")) {
				m_carriveorderid = (String) value;
			} else if (name.equals("pk_corp")) {
				m_pk_corp = (String) value;
			} else if (name.equals("corder_bid")) {
				m_corder_bid = (String) value;
			} else if (name.equals("corderid")) {
				m_corderid = (String) value;
			} else if (name.equals("cmangid")) {
				m_cmangid = (String) value;
			} else if (name.equals("cbaseid")) {
				m_cbaseid = (String) value;
			} else if (name.equals("cassistunit")) {
				m_cassistunit = (String) value;
			} else if (name.equals("narrvnum")) {
				m_narrvnum = (UFDouble) value;
			} else if (name.equals("nassistnum")) {
				m_nassistnum = (UFDouble) value;
			} else if (name.equals("nwastnum")) {
				m_nwastnum = (UFDouble) value;
			} else if (name.equals("nwastassistnum")) {
				m_nwastassistnum = (UFDouble) value;
			} else if (name.equals("npresentnum")) {
				m_npresentnum = (UFDouble) value;
			} else if (name.equals("npresentassistnum")) {
				m_npresentassistnum = (UFDouble) value;
			} else if (name.equals("vproducenum")) {
				m_vproducenum = (String) value;
			} else if (name.equals("ccurrencytypeid")) {
				m_ccurrencytypeid = (String) value;
			} else if (name.equals("noriginalcurprice")) {
				m_noriginalcurprice = (UFDouble) value;
			} else if (name.equals("noriginalcurmny")) {
				m_noriginalcurmny = (UFDouble) value;
			} else if (name.equals("nexchangeotobrate")) {
				m_nexchangeotobrate = (UFDouble) value;
			} else if (name.equals("nprice")) {
				m_nprice = (UFDouble) value;
			} else if (name.equals("nmoney")) {
				m_nmoney = (UFDouble) value;
			} else if (name.equals("nexchangeotoarate")) {
				m_nexchangeotoarate = (UFDouble) value;
			} else if (name.equals("nassistcurprice")) {
				m_nassistcurprice = (UFDouble) value;
			} else if (name.equals("nassistcurmny")) {
				m_nassistcurmny = (UFDouble) value;
			} else if (name.equals("dproducedate")) {
				m_dproducedate = (UFDate) value;
			} else if (name.equals("ivalidday")) {
				m_ivalidday = (Integer) value;
			} else if (name.equals("dvaliddate")) {
				m_dvaliddate = (UFDate) value;
			} else if (name.equals("nelignum")) {
				m_nelignum = (UFDouble) value;
			} else if (name.equals("nnotelignum")) {
				m_nnotelignum = (UFDouble) value;
			} else if (name.equals("naccumchecknum")) {
				m_naccumchecknum = (UFDouble) value;
			} else if (name.equals("naccumwarehousenum")) {
				m_naccumwarehousenum = (UFDouble) value;
			} else if (name.equals("cwarehouseid")) {
				m_cwarehouseid = (String) value;
			} else if (name.equals("cstoreid")) {
				m_cstoreid = (String) value;
			} else if (name.equals("cupsourcebilltype")) {
				m_cupsourcebilltype = (String) value;
			} else if (name.equals("cupsourcebillid")) {
				m_cupsourcebillid = (String) value;
			} else if (name.equals("cupsourcebillrowid")) {
				m_cupsourcebillrowid = (String) value;
			} else if (name.equals("vmemo")) {
				m_vmemo = (String) value;
			} else if (name.equals("vdef1")) {
				m_vdef1 =  value == null ? null : value.toString();
			} else if (name.equals("vdef2")) {
				m_vdef2 = value == null ? null : value.toString();
			} else if (name.equals("vdef3")) {
				m_vdef3 = value == null ? null : value.toString();
			} else if (name.equals("vdef4")) {
				m_vdef4 = value == null ? null : value.toString();
			} else if (name.equals("vdef5")) {
				m_vdef5 = value == null ? null : value.toString();
			} else if (name.equals("vdef6")) {
				m_vdef6 = value == null ? null : value.toString();
			}  else if (name.equals("vdef7")) {
				m_vdef7 = value == null ? null : value.toString();
			} else if (name.equals("vdef8")) {
				m_vdef8 = value == null ? null : value.toString();
			} else if (name.equals("vdef9")) {
				m_vdef9 = value == null ? null : value.toString();
			} else if (name.equals("vdef10")) {
				m_vdef10 = value == null ? null : value.toString();
			} else if (name.equals("vdef11")) {
				m_vdef11 = value == null ? null : value.toString();
			} else if (name.equals("vdef12")) {
				m_vdef12 = value == null ? null : value.toString();
			} else if (name.equals("vdef13")) {
				m_vdef13 = value == null ? null : value.toString();
			} else if (name.equals("vdef14")) {
				m_vdef14 = value == null ? null : value.toString();
			} else if (name.equals("vdef15")) {
				m_vdef15 = value == null ? null : value.toString();
			} else if (name.equals("vdef16")) {
				m_vdef16 = value == null ? null : value.toString();
			} else if (name.equals("vdef17")) {
				m_vdef17 = value == null ? null : value.toString();
			} else if (name.equals("vdef18")) {
				m_vdef18 = value == null ? null : value.toString();
			} else if (name.equals("vdef19")) {
				m_vdef19 = value == null ? null : value.toString();
			} else if (name.equals("vdef20")) {
				m_vdef20 = value == null ? null : value.toString();
			} else if (name.equals("pk_defdoc1")) {
				m_pk_defdoc1 = (String) value;
			} else if (name.equals("pk_defdoc2")) {
				m_pk_defdoc2 = (String) value;
			} else if (name.equals("pk_defdoc3")) {
				m_pk_defdoc3 = (String) value;
			} else if (name.equals("pk_defdoc4")) {
				m_pk_defdoc4 = (String) value;
			} else if (name.equals("pk_defdoc5")) {
				m_pk_defdoc5 = (String) value;
			} else if (name.equals("pk_defdoc6")) {
				m_pk_defdoc6 = (String) value;
			} else if (name.equals("pk_defdoc7")) {
				m_pk_defdoc7 = (String) value;
			} else if (name.equals("pk_defdoc8")) {
				m_pk_defdoc8 = (String) value;
			} else if (name.equals("pk_defdoc9")) {
				m_pk_defdoc9 = (String) value;
			} else if (name.equals("pk_defdoc10")) {
				m_pk_defdoc10 = (String) value;
			} else if (name.equals("pk_defdoc11")) {
				m_pk_defdoc11 = (String) value;
			} else if (name.equals("pk_defdoc12")) {
				m_pk_defdoc12 = (String) value;
			} else if (name.equals("pk_defdoc13")) {
				m_pk_defdoc13 = (String) value;
			} else if (name.equals("pk_defdoc14")) {
				m_pk_defdoc14 = (String) value;
			} else if (name.equals("pk_defdoc15")) {
				m_pk_defdoc15 = (String) value;
			} else if (name.equals("pk_defdoc16")) {
				m_pk_defdoc16 = (String) value;
			} else if (name.equals("pk_defdoc17")) {
				m_pk_defdoc17 = (String) value;
			} else if (name.equals("pk_defdoc18")) {
				m_pk_defdoc18 = (String) value;
			} else if (name.equals("pk_defdoc19")) {
				m_pk_defdoc19 = (String) value;
			} else if (name.equals("pk_defdoc20")) {
				m_pk_defdoc20 = (String) value;
			} else if (name.equals("vfree1")) {
				m_vfree1 = (String) value;
			} else if (name.equals("vfree2")) {
				m_vfree2 = (String) value;
			} else if (name.equals("vfree3")) {
				m_vfree3 = (String) value;
			} else if (name.equals("vfree4")) {
				m_vfree4 = (String) value;
			} else if (name.equals("vfree5")) {
				m_vfree5 = (String) value;
			} else if (name.equals("cvendormangid")) {
				cvendormangid = (String) value;
			} else if (name.equals("cvendorbaseid")) {
				cvendorbaseid = (String) value;
			} else if (name.equals("arrcode")) {
				arrcode = (String) value;
			} else if (name.equals("arrvnum")) {
				arrvnum = (UFDouble) value;
			} else if (name.equals("audittednum")) {
				audittednum = (UFDouble) value;
			} else if (name.equals("willauditnum")) {
				willauditnum = (UFDouble) value;
			} else if (name.equals("elignum")) {
				elignum = (UFDouble) value;
			} else if (name.equals("notelignum")) {
				notelignum = (UFDouble) value;
			} else if (name.equals("willarrvnum")) {
				willarrvnum = (UFDouble) value;
			} else if (name.equals("willarrvassnum")) {
				willarrvassnum = (UFDouble) value;
			} else if (name.equals("plandate")) {
				plandate = (UFDate) value;
			} else if (name.equals("arrvdate")) {
				arrvdate = (UFDate) value;
			} else if (name.equals("orderdate")) {
				orderdate = (UFDate) value;
			} else if (name.equals("planprevdays")) {
				planprevdays = (Integer) value;
			} else if (name.equals("prevdays")) {
				prevdays = (Integer) value;
			} else if (name.equals("ordercode")) {
				ordercode = (String) value;
			} else if (name.equals("csourcebilltype")) {
				m_csourcebilltype = (String) value;
			} else if (name.equals("csourcebillid")) {
				m_csourcebillid = (String) value;
			} else if (name.equals("csourcebillrowid")) {
				m_csourcebillrowid = (String) value;
			} else if (name.equals("maxarrnum")) {
				maxarrnum = (UFDouble) value;
			} else if (name.equals("line")) {
				line = (String) value;
			} else if (name.equals("issplit")) {
				issplit = (UFBoolean) value;
			} else if (name.equals("iswholemanaflag")) {
				iswholemanaflag = (UFBoolean) value;
			} else if (name.equals("isfixedrate")) {
				isfixedrate = (UFBoolean) value;
			} else if (name.equals("convertrate")) {
				convertrate = (UFDouble) value;
			} else if (name.equals("vfree0")) {
				m_vfree0 = (String) value;
			} else if (name.equals("vendor")) {
				vendor = (String) value;
			} else if (name.equals("ts")) {
				m_ts = (String) value;
			} else if (name.equals("cinvsort")) {
				m_cinvsort = (String) value;
			} else if (name.equals("cstoreadmin")) {
				m_cstoreadmin = (String) value;
			} else if (name.equals("squalitylevel")) {
				m_squalitylevel = (String) value;
			} else if (name.equals("squalitylevelname")) {
				m_squalitylevelname = (String) value;
			} else if (name.equals("cdeal")) {
				m_cdeal = (String) value;
			} else if (name.equals("cdealname")) {
				m_cdealname = (String) value;
			} else if (name.equals("tsh")) {
				m_tsh = (String) value;
			} else if (name.equals("cupsourcehts")) {
				m_cupsourcehts = (String) value;
			} else if (name.equals("cupsourcebts")) {
				m_cupsourcebts = (String) value;
			} else if (name.equals("iispresent")) {
				m_iispresent = (UFBoolean) value;
			} else if (name.equals("vbackreasonb")) {
				vbackreasonb = (String) value;
			} else if (name.equals("naccreplenishnum")) {
				naccreplenishnum = (UFDouble) value;
			} else if (name.equals("corder_bb1id")) {
				m_corder_bb1id = (String) value;
			} else if (name.equals("cupsourcebb1ts")) {
				m_cupsourcebb1ts = (String) value;
			} else if (name.equals("bcheckin")) {
				m_bcheckin = (UFBoolean) value;
			} else if (name.equals("blargess")) {
				m_blargess = (UFBoolean) value;
			} else if (name.equals("blargessuprow")) {
				m_blargessuprow = (UFBoolean) value;
			} else if (name.equals("nwillstorenum")) {
				m_nwillstorenum = (UFDouble) value;
			} else if (name.equals("pk_reqcorp")) {
				m_pk_reqcorp = (String) value;
			} else if (name.equals("pk_reqstoorg")) {
				m_pk_reqstoorg = (String) value;
			} else if (name.equals("pk_creqwareid")) {
				m_pk_creqwareid = (String) value;
			} else if (name.equals("pk_invoicecorp")) {
				m_pk_invoicecorp = (String) value;
			} else if( name.equals("jyjg")){
				jyjg = (String)jyjg;
			}else if( name.equals("glnum")){
				glnum = (UFDouble)glnum;
			}
		} catch (ClassCastException e) {
			throw new ClassCastException("setAttributeValue方法中为 " + name
					+ " 赋值时类型转换错误！（值：" + value + "）");
		}
	}
	/**
	 *  收票公司Setter()
	 **/
	public void setPk_invoicecorp(String value){
		m_pk_invoicecorp = value;
	}
	/**
	 *  需求需求仓库Setter()
	 **/
	public void setPk_creqwareid(String value){
		m_pk_creqwareid = value;
	}
	/**
	 *  需求库存组织Setter()
	 **/
	public void setPk_reqstoorg(String value){
		m_pk_reqstoorg = value;
	}
	/**
	 *  需求公司Setter()
	 **/
	public void setPk_reqcorp(String value){
		m_pk_reqcorp = value;
	}
	/**
	 *  需求需求仓库Getter()
	 **/
	public String getPk_creqwareid(){
		return m_pk_creqwareid;
	}
	/**
	 *  需求库存组织Getter()
	 **/
	public String getPk_reqstoorg(){
		return m_pk_reqstoorg;
	}
	/**
	 *  需求公司Getter()
	 **/
	public String getPk_reqcorp(){
		return m_pk_reqcorp;
	}
	/**
	 *  收票公司Getter()
	 **/
	public String getPk_invoicecorp(){
		return m_pk_invoicecorp;
	}
	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getArrcode() {
		return arrcode;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDate getArrvdate() {
		return arrvdate;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDouble getArrvnum() {
		return arrvnum;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getAssmeasname() {
		return assmeasname;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDouble getAudittednum() {
		return audittednum;
	}

	/**
	 * 属性m_bcheckin的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFBoolean getBcheckin() {
		return m_bcheckin;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-7-4 16:26:03)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getCbaseid() {
		return m_cbaseid;
	}

	/**
	 * 功能： 参数： 返回： 例外： 日期：(2002-5-13 14:48:04) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getCdeal() {
		return m_cdeal;
	}

	/**
	 * 功能： 参数： 返回： 例外： 日期：(2002-5-13 14:48:04) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getCdealname() {
		return m_cdealname;
	}

	/**
	 * 王印芬 功能： 参数： 返回： 例外： 日期：(2002-4-2 9:40:53) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getcIinvSort() {
		return m_cinvsort;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-7-4 16:26:03)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getCmangid() {
		return m_cmangid;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDouble getConvertrate() {
		return convertrate;
	}

	/**
	 * 属性m_corder_bb1id的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCorder_bb1id() {
		return m_corder_bb1id;
	}

	/**
	 * 属性的Getter及Setter方法
	 */
	public String getCprojectid() {
		return m_cprojectid;
	}

	/**
	 * 属性的Getter及Setter方法
	 */
	public String getCprojectphaseid() {
		return m_cprojectphaseid;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCsourcebillid() {
		return m_csourcebillid;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCsourcebillrowid() {
		return m_csourcebillrowid;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getCsourcebilltype() {
		return m_csourcebilltype;
	}

	/**
	 * 王印芬 功能： 参数： 返回： 例外： 日期：(2002-4-2 9:40:53) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getcStoreAdmin() {
		return m_cstoreadmin;
	}

	/**
	 * 返回对象标识，用来唯一定位对象。
	 *
	 * 创建日期：(2001-5-18)
	 *
	 * @return String
	 */
	public String getCupsourcebb1ts() {

		return m_cupsourcebb1ts;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-6-21 13:47:09)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getCvendorbaseid() {
		return cvendorbaseid;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-2 9:06:07)
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getCvendormangid() {
		return cvendormangid;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDouble getElignum() {
		return elignum;
	}

	/**
	 * 作者：王印芬 功能：检查VO数组 参数：无 返回：FieldDBValidateVO[] 用于检查VO数组 例外：无 日期：(2003-11-10
	 * 11:39:21) 修改日期，修改人，修改原因，注释标志：
	 */
	public nc.vo.scm.field.pu.FieldDBValidateVO[] getFieldDBValidateVOs() {
		return new nc.vo.scm.field.pu.FieldDBValidateVO[] {
				new nc.vo.scm.field.pu.FieldDBValidateVO(
						nc.vo.scm.field.pu.MoneyField.class,
						new String[] { "原币金额" }, new UFDouble[] { m_nmoney }),
				new nc.vo.scm.field.pu.FieldDBValidateVO(
						nc.vo.scm.field.pu.NumField.class, new String[] { "数量",
								"辅数量" }, new UFDouble[] { m_narrvnum,
								m_nassistnum }),
				new nc.vo.scm.field.pu.FieldDBValidateVO(
						nc.vo.scm.field.pu.PriceField.class, new String[] { "单价" },
						new UFDouble[] { m_nprice }) };
	}

	/**
	 * 属性的Getter及Setter方法
	 */
	public UFBoolean getIispresent() {
		return m_iispresent;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getInvcode() {
		return invcode;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getInvname() {
		return invname;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getInvspec() {
		return invspec;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getInvtype() {
		return invtype;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-24 17:46:22)
	 *
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsassmana() {
		return isassmana;
	}

	/**
	 * @功能：是否需要质检
	 * @作者：晁志平 创建日期：(2001-8-28 13:54:47)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIscheck() {
		return ischeck;
	}

	/**
	 * @功能：是否固定换算率
	 * @作者：晁志平 创建日期：(2001-8-28 13:54:47)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsfixedrate() {
		return isfixedrate;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-24 17:13:54)
	 *
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsfree0() {
		return isfree0;
	}

	/**
	 * @功能：是否已经输入批号
	 * @作者：晁志平 创建日期：(2001-8-28 13:54:47)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIshaveno() {
		return ishaveno;
	}

	/**
	 * @功能：是否已经输入仓库
	 * @作者：晁志平 创建日期：(2001-8-28 13:54:47)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIshavestore() {
		return ishavestore;
	}

	/**
	 * @功能：到货数量是否为负
	 * @作者：晁志平 创建日期：(2001-8-28 13:54:47)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsnegative() {
		return isnegative;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFBoolean getIssplit() {
		return issplit;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFBoolean getIswholemanaflag() {
		return iswholemanaflag;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getLine() {
		return line;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDouble getMaxarrnum() {
		return maxarrnum;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getMeasname() {
		return measname;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 *
	 * @return UFDouble
	 */
	public UFDouble getNaccreplenishnum() {
		return naccreplenishnum;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDouble getNotelignum() {
		return notelignum;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getOrdercode() {
		return ordercode;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDate getOrderdate() {
		return orderdate;
	}

	/**
	 * @功能：供应商档案主键
	 * @作者：晁志平 创建日期：(2001-8-29 11:29:14)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getPk_cubasdoc() {
		return pk_cubasdoc;
	}

	/**
	 * @功能：供应商管理档案主键
	 * @作者：晁志平 创建日期：(2001-8-29 11:29:14)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getPk_cumandoc() {
		return pk_cumandoc;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDate getPlandate() {
		return plandate;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public Integer getPlanprevdays() {
		return planprevdays;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public Integer getPrevdays() {
		return prevdays;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getRowno() {
		return m_crowno;
	}

	/**
	 * 作者：晁志平 功能： 参数： 返回： 例外： 创建日期：(2002-4-8 13:59:48) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getsQualityLevel() {
		return m_squalitylevel;
	}

	/**
	 * 作者：晁志平 功能： 参数： 返回： 例外： 创建日期：(2002-4-8 13:59:48) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getsQualitylevelName() {
		return m_squalitylevelname;
	}

	/**
	 * 功能： 例外： 日期：(2002-5-30 15:15:08) 作者：晁志平 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getStockbycheck() {
		return m_stockbycheck;
	}

	/**
	 * 返回对象标识，用来唯一定位对象。
	 *
	 * 创建日期：(2001-5-18)
	 *
	 * @return String
	 */
	public String getTs() {

		return m_ts;
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 创建日期：(2002-4-12 12:47:19) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getTsbup() {
		return m_cupsourcebts;
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 创建日期：(2002-4-12 8:55:45) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getTsh() {
		return m_tsh;
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 创建日期：(2002-4-12 12:47:19) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getTshup() {
		return m_cupsourcehts;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getVbackreasonb() {
		return vbackreasonb;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public String getVendor() {
		return vendor;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-10-20 10:44:07)
	 *
	 * @return java.lang.String
	 */
	public java.lang.String getVfree0() {
		return m_vfree0;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDouble getWillarrvassnum() {
		return willarrvassnum;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDouble getWillarrvnum() {
		return willarrvnum;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public UFDouble getWillauditnum() {
		return willauditnum;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setArrcode(String s) {
		arrcode = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setArrvdate(UFDate s) {
		arrvdate = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setArrvnum(UFDouble s) {
		arrvnum = s;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newAssmeasname
	 *            java.lang.String
	 */
	public void setAssmeasname(java.lang.String newAssmeasname) {
		assmeasname = newAssmeasname;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setAudittednum(UFDouble s) {
		audittednum = s;
	}

	/**
	 * 属性m_bcheckin的set方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setBcheckin(UFBoolean s) {
		m_bcheckin = s;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-7-4 16:26:03)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newM_cbaseid
	 *            java.lang.String
	 */
	public void setCbaseid(java.lang.String newM_cbaseid) {
		m_cbaseid = newM_cbaseid;
	}

	/**
	 * 功能： 参数： 返回： 例外： 日期：(2002-5-13 14:48:04) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @param newM_sdeal
	 *            java.lang.String
	 */
	public void setCdeal(java.lang.String newM_sdeal) {
		m_cdeal = newM_sdeal;
	}

	/**
	 * 功能： 参数： 返回： 例外： 日期：(2002-5-13 14:48:04) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @param newM_sdealname
	 *            java.lang.String
	 */
	public void setCdealname(java.lang.String newM_sdealname) {
		m_cdealname = newM_sdealname;
	}

	/**
	 * 王印芬 功能： 参数： 返回： 例外： 日期：(2002-4-2 9:40:53) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @param newM_cinvSort
	 *            java.lang.String
	 */
	public void setcInvSort(java.lang.String newM_cinvSort) {
		m_cinvsort = newM_cinvSort;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-7-4 16:26:03)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newM_cmangid
	 *            java.lang.String
	 */
	public void setCmangid(java.lang.String newM_cmangid) {
		m_cmangid = newM_cmangid;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setConvertrate(UFDouble s) {
		convertrate = s;
	}

	/**
	 * 属性m_corder_bb1id的setter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @param newM_corder_bid
	 *            String
	 */
	public void setCorder_bb1id(String newCorder_bid) {

		m_corder_bb1id = newCorder_bid;
	}

	/**
	 * 属性的Getter及Setter方法
	 */
	public void setCprojectid(String s) {
		m_cprojectid = s;
	}

	/**
	 * 属性的Getter及Setter方法
	 */
	public void setCprojectphaseid(String s) {
		m_cprojectphaseid = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setCsourcebillid(String s) {
		m_csourcebillid = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setCsourcebillrowid(String s) {
		m_csourcebillrowid = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setCsourcebilltype(String s) {
		m_csourcebilltype = s;
	}

	/**
	 * 王印芬 功能： 参数： 返回： 例外： 日期：(2002-4-2 9:40:53) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @param newM_cstoreAdmin
	 *            java.lang.String
	 */
	public void setcStoreAdmin(java.lang.String newM_cstoreAdmin) {
		m_cstoreadmin = newM_cstoreAdmin;
	}

	/**
	 * 属性m_cupsourcebb1ts的setter方法。
	 *
	 * 创建日期：(2001-5-18)
	 *
	 * @param newM_nsubscripmny
	 *            UFDouble
	 */
	public void setCupsourcebb1ts(String sNewTs) {

		m_cupsourcebb1ts = sNewTs;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-6-21 13:47:09)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newCvendorid
	 *            java.lang.String
	 */
	public void setCvendorbaseid(java.lang.String newCvendorid) {
		cvendorbaseid = newCvendorid;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-2 9:06:07)
	 *
	 * @param newCvendormangid
	 *            java.lang.String
	 */
	public void setCvendormangid(java.lang.String newCvendormangid) {
		cvendormangid = newCvendormangid;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setElignum(UFDouble s) {
		elignum = s;
	}

	/**
	 * 属性的Getter及Setter方法
	 */
	public void setIispresent(UFBoolean s) {
		m_iispresent = s;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newInvcode
	 *            java.lang.String
	 */
	public void setInvcode(java.lang.String newInvcode) {
		invcode = newInvcode;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newInvname
	 *            java.lang.String
	 */
	public void setInvname(java.lang.String newInvname) {
		invname = newInvname;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newInvspec
	 *            java.lang.String
	 */
	public void setInvspec(java.lang.String newInvspec) {
		invspec = newInvspec;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newInvtype
	 *            java.lang.String
	 */
	public void setInvtype(java.lang.String newInvtype) {
		invtype = newInvtype;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-24 17:46:22)
	 *
	 * @param newIsassmana
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsassmana(nc.vo.pub.lang.UFBoolean newIsassmana) {
		isassmana = newIsassmana;
	}

	/**
	 * @功能：是否质检
	 * @作者：晁志平 创建日期：(2001-8-28 13:54:47)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newIscheck
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIscheck(nc.vo.pub.lang.UFBoolean newIscheck) {
		ischeck = newIscheck;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setIsfixedrate(UFBoolean s) {
		isfixedrate = s;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-24 17:13:54)
	 *
	 * @param newIsfree0
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsfree0(nc.vo.pub.lang.UFBoolean newIsfree0) {
		isfree0 = newIsfree0;
	}

	/**
	 * @功能：是否输入了批号
	 * @作者：晁志平 创建日期：(2001-8-28 13:54:47)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newIshaveno
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIshaveno(nc.vo.pub.lang.UFBoolean newIshaveno) {
		ishaveno = newIshaveno;
	}

	/**
	 * @功能：是否已经输入仓库
	 * @作者：晁志平 创建日期：(2001-8-28 13:54:47)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newIshavestore
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIshavestore(nc.vo.pub.lang.UFBoolean newIshavestore) {
		ishavestore = newIshavestore;
	}

	/**
	 * @功能：到货数量是否为负
	 * @作者：晁志平 创建日期：(2001-8-28 13:54:47)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newIsnegative
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsnegative(nc.vo.pub.lang.UFBoolean newIsnegative) {
		isnegative = newIsnegative;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setIssplit(UFBoolean s) {
		issplit = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setIswholemanaflag(UFBoolean s) {
		iswholemanaflag = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setLine(String s) {
		line = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setMaxarrnum(UFDouble s) {
		maxarrnum = s;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-8-29 14:00:10)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newMeasname
	 *            java.lang.String
	 */
	public void setMeasname(java.lang.String newMeasname) {
		measname = newMeasname;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 *
	 * @param newVbackreasonb
	 *            java.lang.String
	 */
	public void setNaccreplenishnum(UFDouble newNaccreplenishnum) {
		naccreplenishnum = newNaccreplenishnum;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setNotelignum(UFDouble s) {
		notelignum = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setOrdercode(String s) {
		ordercode = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setOrderdate(UFDate s) {
		orderdate = s;
	}

	/**
	 * @功能：供应商档案主键
	 * @作者：晁志平 创建日期：(2001-8-29 11:29:14)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newPk_cubasdoc
	 *            java.lang.String
	 */
	public void setPk_cubasdoc(java.lang.String newPk_cubasdoc) {
		pk_cubasdoc = newPk_cubasdoc;
	}

	/**
	 * @功能：供应商管理档案主键
	 * @作者：晁志平 创建日期：(2001-8-29 11:29:14)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newPk_cumandoc
	 *            java.lang.String
	 */
	public void setPk_cumandoc(java.lang.String newPk_cumandoc) {
		pk_cumandoc = newPk_cumandoc;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setPlandate(UFDate s) {
		plandate = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setPlanprevdays(Integer s) {
		planprevdays = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setPrevdays(Integer s) {
		prevdays = s;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 *
	 * @param newM_crowno
	 *            java.lang.String
	 */
	public void setRowno(java.lang.String newM_crowno) {
		m_crowno = newM_crowno;
	}

	/**
	 * 作者：晁志平 功能： 参数： 返回： 例外： 创建日期：(2002-4-8 13:59:48) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @param newM_sQualityLevel
	 *            java.lang.String
	 */
	public void setsQualityLevel(java.lang.String newM_sQualityLevel) {
		m_squalitylevel = newM_sQualityLevel;
	}

	/**
	 * 作者：晁志平 功能： 参数： 返回： 例外： 创建日期：(2002-4-8 13:59:48) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @param newM_sQualitylevelName
	 *            java.lang.String
	 */
	public void setsQualitylevelName(java.lang.String newM_sQualitylevelName) {
		m_squalitylevelname = newM_sQualitylevelName;
	}

	/**
	 * 功能： 例外： 日期：(2002-5-30 15:15:08) 作者：晁志平 修改日期，修改人，修改原因，注释标志：
	 *
	 * @param newM_stockbycheck
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setStockbycheck(nc.vo.pub.lang.UFBoolean newM_stockbycheck) {
		m_stockbycheck = newM_stockbycheck;
	}

	/**
	 * 属性m_nsubscripmny的setter方法。
	 *
	 * 创建日期：(2001-5-18)
	 *
	 * @param newM_nsubscripmny
	 *            UFDouble
	 */
	public void setTs(String sNewTs) {

		m_ts = sNewTs;
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 创建日期：(2002-4-12 12:47:19) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @param newM_tsbup
	 *            java.lang.String
	 */
	public void setTsbup(java.lang.String newM_tsbup) {
		m_cupsourcebts = newM_tsbup;
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 创建日期：(2002-4-12 8:55:45) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @param newM_tsh
	 *            java.lang.String
	 */
	public void setTsh(java.lang.String newM_tsh) {
		m_tsh = newM_tsh;
	}

	/**
	 * ?user> 功能： 参数： 返回： 例外： 创建日期：(2002-4-12 12:47:19) 修改日期，修改人，修改原因，注释标志：
	 *
	 * @param newM_tshup
	 *            java.lang.String
	 */
	public void setTshup(java.lang.String newM_tshup) {
		m_cupsourcehts = newM_tshup;
	}

	/**
	 * 此处插入方法说明。 功能描述: 输入参数: 返回值: 异常处理: 日期:
	 *
	 * @param newVbackreasonb
	 *            java.lang.String
	 */
	public void setVbackreasonb(java.lang.String newVbackreasonb) {
		vbackreasonb = newVbackreasonb;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setVendor(String s) {
		vendor = s;
	}

	/**
	 * @功能：
	 * @作者：晁志平 创建日期：(2001-6-20 20:54:06)
	 * @param: <|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @param newVendor
	 *            java.lang.String
	 */
	public void setVendorbaseid(java.lang.String newVendorid) {
		cvendorbaseid = newVendorid;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-10-20 10:44:07)
	 *
	 * @param newM_vfree0
	 *            java.lang.String
	 */
	public void setVfree0(java.lang.String newM_vfree0) {
		m_vfree0 = newM_vfree0;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setWillarrvassnum(UFDouble s) {
		willarrvassnum = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setWillarrvnum(UFDouble s) {
		willarrvnum = s;
	}

	/**
	 * 属性m_cstoreid的Getter方法。
	 *
	 * 创建日期：(2001-6-8)
	 *
	 * @return String
	 */
	public void setWillauditnum(UFDouble s) {
		willauditnum = s;
	}

	/**
	 * @return Returns the m_blargess.
	 */
	public UFBoolean getBlargess() {
		return m_blargess;
	}

	/**
	 * @param m_blargess
	 *            The m_blargess to set.
	 */
	public void setBlargess(UFBoolean m_blargess) {
		this.m_blargess = m_blargess;
	}

	/**
	 * @return Returns the m_blargessupsourceline.
	 */
	public UFBoolean getBlargessuprow() {
		return m_blargessuprow;
	}

	/**
	 * @param m_blargessupsourceline
	 *            The m_blargessupsourceline to set.
	 */
	public void setBlargessuprow(UFBoolean m_blargessuprow) {
		this.m_blargessuprow = m_blargessuprow;
	}
	/**
	 * @return Returns the m_nwillstorenum.
	 */
	public UFDouble getNwillstorenum() {
		return m_nwillstorenum;
	}
	/**
	 * @param m_nwillstorenum The m_nwillstorenum to set.
	 */
	public void setNwillstorenum(UFDouble m_nwillstorenum) {
		this.m_nwillstorenum = m_nwillstorenum;
	}
}