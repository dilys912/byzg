/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

package nc.bs.ic.pub.vmi;

import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

import nc.bs.framework.common.NCLocator;
import nc.bs.ic.pub.ModuleEnable;
import nc.bs.ic.pub.bill.GeneralSqlString;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.bs.scm.ic.freeitem.DefdefDMO;
import nc.bs.scm.pub.smart.SmartDMO;
import nc.itf.ic.service.IICToPU_VmiSumDMO;
import nc.itf.pu.inter.IPuToIc_Order;
import nc.ui.ic.pub.bill.uicontext.ICBusiCtlTools;
import nc.vo.ic.pub.BillTypeConst;
import nc.vo.scm.ic.bill.FreeVO;
import nc.vo.ic.pub.bill.QryConditionVO;
import nc.vo.ic.pub.vmi.VmiQSumItemVO;
import nc.vo.ic.pub.vmi.VmiSumHeaderVO;
import nc.vo.ic.pub.vmi.VmiSumItemVO;
import nc.vo.ic.pub.vmi.VmiSumVO;
import nc.vo.ic.pub.vmi.VmiSumpolicyVO;
import nc.vo.ic.service.ParaVOEstiToVMI;
import nc.vo.ic.service.ParaVOSettleToVMI;
import nc.vo.pu.inter.ParaPoToIcVMIVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.ProductCode;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.pub.smart.SmartFieldMeta;

/**
 * VmiSum的DMO类。
 *
 * 创建日期：(2002-5-17)
 * @author：
 */
public class VmiSumDMO extends DataManageObject implements IICToPU_VmiSumDMO {
  /**
   * VmiSumDMO 构造子注解。
   *
   * @exception javax.naming.NamingException 父类构造子抛出的异常。
   * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
   */
  public VmiSumDMO()
      throws javax.naming.NamingException, SystemException {
    super();
  }

  /**
   * VmiSumDMO 构造子注解。
   *
   * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
   * @exception javax.naming.NamingException 父类构造子抛出的异常。
   * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
   */
  public VmiSumDMO(
      String dbName)
      throws javax.naming.NamingException, SystemException {
    super(dbName);
  }

  /**
   * <p>将VO插入母子表。
   * <p>
   * 创建日期：(2002-5-17)
   * @param vo nc.vo.ic.pub.vmi.VmiSumVO
   * @exception java.sql.SQLException 异常说明。
   */
  public String insert(VmiSumVO vo) throws SQLException, SystemException,
      Exception {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "insert", new Object[] {
      vo
    });
    /*************************************************************/
    String key = null;

    //设置单据号:
    setBillCode(vo);

    try {

      // 插入表头：
      key = insertHeader((VmiSumHeaderVO) vo.getParentVO());
      // 插入表体各项：
      VmiSumItemVO[] items = (VmiSumItemVO[]) vo.getChildrenVO();
      if (items != null)
        insertItem(items, key);
    }
    catch (Exception e) {
      //退掉单据号
      returnBillCode(vo);
      throw e;

    }
    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "insert", new Object[] {
      vo
    });
    /*************************************************************/

    return key;
  }

  /**
   * 向数据库插入一个VO对象。
   *
   * 创建日期：(2002-5-17)
   * @param node nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @exception java.sql.SQLException 异常说明。
   */
  protected String insertHeader(VmiSumHeaderVO vmiSumHeader)
      throws java.sql.SQLException, nc.bs.pub.SystemException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "insertHeader",
        new Object[] {
          vmiSumHeader
        });
    /*************************************************************/

    String sql = "insert into ic_vmi_sum(cvmihid, dsumdate, pk_corp, ccalbodyid, cwarehouseid, cvendorid, cinventoryid, castunitid, vlot, vfree1, vfree2, vfree3, vfree4, vfree5, vfree6, vfree7, vfree8, vfree9, vfree10, ninitnum, ninnum, ninoutnum, noutnum, noutinnum, ntransnum, nfinalnum, csumid, crsvid1, crsvid2, nrsvnum1, nrsvnum2,vbillcode) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      key = getOID();
      con = getConnection();
      stmt = con.prepareStatement(sql);
      // set PK fields:
      stmt.setString(1, key);
      // set non PK fields:
      if (vmiSumHeader.getDsumdate() == null) {
        stmt.setNull(2, Types.CHAR);
      }
      else {
        stmt.setString(2, vmiSumHeader.getDsumdate().toString());
      }
      if (vmiSumHeader.getPk_corp() == null) {
        stmt.setNull(3, Types.CHAR);
      }
      else {
        stmt.setString(3, vmiSumHeader.getPk_corp());
      }
      if (vmiSumHeader.getCcalbodyid() == null) {
        stmt.setNull(4, Types.CHAR);
      }
      else {
        stmt.setString(4, vmiSumHeader.getCcalbodyid());
      }
      if (vmiSumHeader.getCwarehouseid() == null) {
        stmt.setNull(5, Types.CHAR);
      }
      else {
        stmt.setString(5, vmiSumHeader.getCwarehouseid());
      }
      if (vmiSumHeader.getCvendorid() == null) {
        stmt.setNull(6, Types.CHAR);
      }
      else {
        stmt.setString(6, vmiSumHeader.getCvendorid());
      }
      if (vmiSumHeader.getCinventoryid() == null) {
        stmt.setNull(7, Types.CHAR);
      }
      else {
        stmt.setString(7, vmiSumHeader.getCinventoryid());
      }
      if (vmiSumHeader.getCastunitid() == null) {
        stmt.setNull(8, Types.CHAR);
      }
      else {
        stmt.setString(8, vmiSumHeader.getCastunitid());
      }
      if (vmiSumHeader.getVlot() == null) {
        stmt.setNull(9, Types.CHAR);
      }
      else {
        stmt.setString(9, vmiSumHeader.getVlot());
      }
      if (vmiSumHeader.getVfree1() == null) {
        stmt.setNull(10, Types.CHAR);
      }
      else {
        stmt.setString(10, vmiSumHeader.getVfree1());
      }
      if (vmiSumHeader.getVfree2() == null) {
        stmt.setNull(11, Types.CHAR);
      }
      else {
        stmt.setString(11, vmiSumHeader.getVfree2());
      }
      if (vmiSumHeader.getVfree3() == null) {
        stmt.setNull(12, Types.CHAR);
      }
      else {
        stmt.setString(12, vmiSumHeader.getVfree3());
      }
      if (vmiSumHeader.getVfree4() == null) {
        stmt.setNull(13, Types.CHAR);
      }
      else {
        stmt.setString(13, vmiSumHeader.getVfree4());
      }
      if (vmiSumHeader.getVfree5() == null) {
        stmt.setNull(14, Types.CHAR);
      }
      else {
        stmt.setString(14, vmiSumHeader.getVfree5());
      }
      if (vmiSumHeader.getVfree6() == null) {
        stmt.setNull(15, Types.CHAR);
      }
      else {
        stmt.setString(15, vmiSumHeader.getVfree6());
      }
      if (vmiSumHeader.getVfree7() == null) {
        stmt.setNull(16, Types.CHAR);
      }
      else {
        stmt.setString(16, vmiSumHeader.getVfree7());
      }
      if (vmiSumHeader.getVfree8() == null) {
        stmt.setNull(17, Types.CHAR);
      }
      else {
        stmt.setString(17, vmiSumHeader.getVfree8());
      }
      if (vmiSumHeader.getVfree9() == null) {
        stmt.setNull(18, Types.CHAR);
      }
      else {
        stmt.setString(18, vmiSumHeader.getVfree9());
      }
      if (vmiSumHeader.getVfree10() == null) {
        stmt.setNull(19, Types.CHAR);
      }
      else {
        stmt.setString(19, vmiSumHeader.getVfree10());
      }
      if (vmiSumHeader.getNinitnum() == null) {
        stmt.setNull(20, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(20, vmiSumHeader.getNinitnum().toBigDecimal());
      }
      if (vmiSumHeader.getNinnum() == null) {
        stmt.setNull(21, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(21, vmiSumHeader.getNinnum().toBigDecimal());
      }
      if (vmiSumHeader.getNinoutnum() == null) {
        stmt.setNull(22, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(22, vmiSumHeader.getNinoutnum().toBigDecimal());
      }
      if (vmiSumHeader.getNoutnum() == null) {
        stmt.setNull(23, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(23, vmiSumHeader.getNoutnum().toBigDecimal());
      }
      if (vmiSumHeader.getNoutinnum() == null) {
        stmt.setNull(24, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(24, vmiSumHeader.getNoutinnum().toBigDecimal());
      }
      if (vmiSumHeader.getNtransnum() == null) {
        stmt.setNull(25, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(25, vmiSumHeader.getNtransnum().toBigDecimal());
      }
      if (vmiSumHeader.getNfinalnum() == null) {
        stmt.setNull(26, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(26, vmiSumHeader.getNfinalnum().toBigDecimal());
      }
      if (vmiSumHeader.getCsumid() == null) {
        stmt.setNull(27, Types.CHAR);
      }
      else {
        stmt.setString(27, vmiSumHeader.getCsumid());
      }
      if (vmiSumHeader.getCrsvid1() == null) {
        stmt.setNull(28, Types.CHAR);
      }
      else {
        stmt.setString(28, vmiSumHeader.getCrsvid1());
      }
      if (vmiSumHeader.getCrsvid2() == null) {
        stmt.setNull(29, Types.CHAR);
      }
      else {
        stmt.setString(29, vmiSumHeader.getCrsvid2());
      }
      if (vmiSumHeader.getNrsvnum1() == null) {
        stmt.setNull(30, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(30, vmiSumHeader.getNrsvnum1().toBigDecimal());
      }
      if (vmiSumHeader.getNrsvnum2() == null) {
        stmt.setNull(31, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(31, vmiSumHeader.getNrsvnum2().toBigDecimal());
      }
      if (vmiSumHeader.getVbillcode() == null) {
        stmt.setNull(32, Types.CHAR);
      }
      else {
        stmt.setString(32, vmiSumHeader.getVbillcode());
      }
      //
      stmt.executeUpdate();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "insertHeader", new Object[] {
      vmiSumHeader
    });
    /*************************************************************/

    return key;
  }

  /**
   * 向数据库插入一个VO对象。
   *
   * 创建日期：(2002-5-17)
   * @param node nc.vo.ic.pub.vmi.VmiSumItemVO
   * @exception java.sql.SQLException 异常说明。
   */
  protected String insertItem(VmiSumItemVO vmiSumItem)
      throws java.sql.SQLException, nc.bs.pub.SystemException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "insertItem", new Object[] {
      vmiSumItem
    });
    /*************************************************************/

    String sql = "insert into ic_vmi_outdetail(cvmibid, cvmihid, cbilltypecode, cdptid, ccostobjectid, cwpid, cprojectid, cprojectphaseid, nnum, csmid, nprice, nmny, crsvid1, crsvid2, crsvid3, nrsvnum1, nrsvnum2) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      key = getOID();
      con = getConnection();
      stmt = con.prepareStatement(sql);
      // set PK fields:
      stmt.setString(1, key);
      // set non PK fields:
      if (vmiSumItem.getCvmihid() == null) {
        stmt.setNull(2, Types.CHAR);
      }
      else {
        stmt.setString(2, vmiSumItem.getCvmihid());
      }
      if (vmiSumItem.getCbilltypecode() == null) {
        stmt.setNull(3, Types.CHAR);
      }
      else {
        stmt.setString(3, vmiSumItem.getCbilltypecode());
      }
      if (vmiSumItem.getCdptid() == null) {
        stmt.setNull(4, Types.CHAR);
      }
      else {
        stmt.setString(4, vmiSumItem.getCdptid());
      }
      if (vmiSumItem.getCcostobjectid() == null) {
        stmt.setNull(5, Types.CHAR);
      }
      else {
        stmt.setString(5, vmiSumItem.getCcostobjectid());
      }
      if (vmiSumItem.getCwpid() == null) {
        stmt.setNull(6, Types.CHAR);
      }
      else {
        stmt.setString(6, vmiSumItem.getCwpid());
      }
      if (vmiSumItem.getCprojectid() == null) {
        stmt.setNull(7, Types.CHAR);
      }
      else {
        stmt.setString(7, vmiSumItem.getCprojectid());
      }
      if (vmiSumItem.getCprojectphaseid() == null) {
        stmt.setNull(8, Types.CHAR);
      }
      else {
        stmt.setString(8, vmiSumItem.getCprojectphaseid());
      }
      if (vmiSumItem.getNnum() == null) {
        stmt.setNull(9, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(9, vmiSumItem.getNnum().toBigDecimal());
      }
      if (vmiSumItem.getCsmid() == null) {
        stmt.setNull(10, Types.CHAR);
      }
      else {
        stmt.setString(10, vmiSumItem.getCsmid());
      }
      if (vmiSumItem.getNprice() == null) {
        stmt.setNull(11, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(11, vmiSumItem.getNprice().toBigDecimal());
      }
      if (vmiSumItem.getNmny() == null) {
        stmt.setNull(12, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(12, vmiSumItem.getNmny().toBigDecimal());
      }
      if (vmiSumItem.getCrsvid1() == null) {
        stmt.setNull(13, Types.CHAR);
      }
      else {
        stmt.setString(13, vmiSumItem.getCrsvid1());
      }
      if (vmiSumItem.getCrsvid2() == null) {
        stmt.setNull(14, Types.CHAR);
      }
      else {
        stmt.setString(14, vmiSumItem.getCrsvid2());
      }
      if (vmiSumItem.getCrsvid3() == null) {
        stmt.setNull(15, Types.CHAR);
      }
      else {
        stmt.setString(15, vmiSumItem.getCrsvid3());
      }
      if (vmiSumItem.getNrsvnum1() == null) {
        stmt.setNull(16, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(16, vmiSumItem.getNrsvnum1().toBigDecimal());
      }
      if (vmiSumItem.getNrsvnum2() == null) {
        stmt.setNull(17, Types.INTEGER);
      }
      else {
        stmt.setBigDecimal(17, vmiSumItem.getNrsvnum2().toBigDecimal());
      }
      //
      stmt.executeUpdate();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "insertItem", new Object[] {
      vmiSumItem
    });
    /*************************************************************/

    return key;
  }

  /**
   * 根据主键在数据库中删除一个VO对象。
   *
   * 创建日期：(2002-5-17)
   * @param key nc.vo.pub.oid.OID
   * @exception java.sql.SQLException 异常说明。
   */
  public void deleteItem(VmiSumItemVO vo) throws java.sql.SQLException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "deleteItem", new Object[] {
      vo
    });
    /*************************************************************/

    String sql = "delete from ic_vmi_outdetail where cvmibid = ?";

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, vo.getPrimaryKey());
      stmt.executeUpdate();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "deleteItem", new Object[] {
      vo
    });
    /*************************************************************/
  }

  /**
   * 构造查找汇总的表体id 的sql
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   */
  protected String getSumBillBodyIDSql2ForCancel(QryConditionVO voCond,
      ArrayList csumids) throws SQLException {

    if (voCond == null || voCond.getParam(VmiSumVO.OPI_END_DATE) == null //截止日期必须
        || voCond.getStrParam(VmiSumVO.SPI_CORP) == null) { //公司必须
      System.out.println("sum:param null");
      return null;
    }
    String sPk_corp = voCond.getStrParam(VmiSumVO.SPI_CORP); //corp id
    String sCalbodyid = voCond.getStrParam(VmiSumVO.SPI_CALBODY);
    String sWarehouseid = voCond.getStrParam(VmiSumVO.SPI_WH);
    String sVendorid = voCond.getStrParam(VmiSumVO.SPI_VENDORID);
    String sInvid = voCond.getStrParam(VmiSumVO.SPI_INVID);
    UFDate dStartDate = (UFDate) voCond.getParam(VmiSumVO.OPI_START_DATE);
    UFDate dEndDate = (UFDate) voCond.getParam(VmiSumVO.OPI_END_DATE);

    VmiSumpolicyVO voPolicy = (VmiSumpolicyVO) voCond
        .getParam(VmiSumVO.OPI_POLICY);
    //汇总条件
    boolean bLot = false, bAstuom = false, bFreeitem = false, bVmiinv = false;
    //if (voPolicy.getVmi_only() != null) //from 2.30 removed
    //bVmiinv = voPolicy.getVmi_only().booleanValue();

    StringBuffer sbConstCond = new StringBuffer(); //固定的条件

    //if (sPk_corp != null) {
    sbConstCond.append(" AND h.pk_corp='");
    sbConstCond.append(sPk_corp);
    sbConstCond.append("'");
    //}
    if (sCalbodyid != null) {
      sbConstCond.append(" AND h.pk_calbody='");
      sbConstCond.append(sCalbodyid);
      sbConstCond.append("'");
    }
    if (sWarehouseid != null) {
      sbConstCond.append(" AND h.cwarehouseid='");
      sbConstCond.append(sWarehouseid);
      sbConstCond.append("'");
    }
    if (sVendorid != null) {
      sbConstCond.append(" AND (b.cvendorid='");
      sbConstCond.append(sVendorid);
      sbConstCond.append("')");
    }
    if (sInvid != null) {
      sbConstCond.append(" AND b.cinventoryid='");
      sbConstCond.append(sInvid);
      sbConstCond.append("'");
    }
    //if (dStartDate != null) {        DO NOT USE IT.
    //sbConstCond.append(" AND b.dbizdate>='");
    //sbConstCond.append(dStartDate.toString());
    //sbConstCond.append("'");
    //}
    if (dEndDate != null) {
      sbConstCond.append(" AND b.dbizdate<='");
      sbConstCond.append(dEndDate.toString());
      sbConstCond.append("'");
    }

    //if (bVmiinv) {//from 2.30 removed
    //sbConstCond.append( " And h.cwarehouseid in(Select pk_stordoc from bd_stordoc where isforeignstor='Y' AND isgathersettle='Y' and iscalculatedinvcost='Y') " );
    //sbConstCond.append( " And (h.cotherwhid is null or h.cotherwhid not in(Select pk_stordoc from bd_stordoc where isforeignstor='Y' AND isgathersettle='Y' and iscalculatedinvcost='Y')) " );
    //非折扣、非劳务属性的存货
    //sbConstCond.append(" AND ");
    //sbConstCond.append(SE.SQL_INV_CONSTRAINT);
    //}

    StringBuffer sbBase = new StringBuffer(); //基本的SQL
    sbBase.append("SELECT b.cgeneralbid ");
    //-- from
    sbBase.append(SE.sFromBase);
    //需要关联存货管理档案
    //sbBase.append(SE.sJoinInv);
    //where
    sbBase.append(SE.sWhereBase);
    sbBase.append(sbConstCond);

    StringBuffer sbSql = new StringBuffer("SELECT cgeneralbid ");
    sbSql.append(" FROM ( ");
    //入库的数量
    sbSql.append(sbBase.toString());

    sbSql.append(" "
        + nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("b.csumid", csumids)
        + " ) AS vmisum "); //未参加过汇总的 单据
    //sbSql.append(" AND b.csumid IS NULL AND ("); //未参加过汇总的 单据
    //sbSql.append(SE.sInBillCode); //入库单
    //sbSql.append(" AND ninnum IS NOT NULL ");
    //sbSql.append(" OR ");
    //sbSql.append(SE.sOutBillCode); //出库单
    //sbSql.append(" AND noutnum IS NOT NULL ");
    //sbSql.append(" OR ");
    //sbSql.append(SE.sTransBillCode); //转出单
    //sbSql.append(" AND COALESCE(noutnum,0.0)>0.0 ");
    //sbSql.append(" ) ) ");
    //sbSql.append(")) AS vmisum");
    //sbSql.append(") AS vmisum ");

    //group by
    System.out.println("VMI getSumDetailSql:" + sbSql.toString());
    return sbSql.toString();
  }

  /**
   * 清除多个单据汇总标记
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumItemVO
   * @param csumid String
   * @exception java.sql.SQLException 异常说明。
   */
  public void clearBillItemCsumid(nc.vo.ic.pub.bill.QryConditionVO voCond,
      Vector vSumID) throws SQLException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "deleteSumRecord",
        new Object[] {
          vSumID
        });
    /*************************************************************/
    //bill flag
    String sqlBillItem = "UPDATE ic_general_b SET csumid=NULL WHERE cgeneralbid in ( ";
    //(csumid IN (";

    StringBuffer sbWhere = new StringBuffer();
    ArrayList alSql = new ArrayList();
    //循环写入条件
    int size = vSumID.size();
    for (int i = 0; i < size; i++) {
      if (vSumID.elementAt(i) != null) {
        alSql.add(vSumID.elementAt(i));
        //sbWhere.append("'");
        //sbWhere.append(vSumID.elementAt(i));
        //sbWhere.append("',");
      }
      //兼容 oracle 的 IN 254 限制。每 200 个 数据 or 一次。
      //if (i > 0 && i % nc.bs.ic.pub.bill.GeneralSqlString.SQL_IN_LIST_LIMIT == 0) {
      //sbWhere.append(" '' ) OR csumid IN ( ");
      //}
    }

    sbWhere.append(getSumBillBodyIDSql2ForCancel(voCond, alSql) + " ) ");

    //使用临时表
    //sbWhere.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("csumid", alSql));
    //加''是为了上面循环结果中最后的","
    //因为ID不可能为'',所以可行。
    //sbWhere.append(" '' ) )");
    //----------------------

    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      //修改单据行汇总标记
      stmt = con.prepareStatement(sqlBillItem + sbWhere.toString());
      stmt.executeUpdate();
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "deleteSumRecord",
        new Object[] {
          vSumID
        });
    /*************************************************************/
  }

  /**
   * 清除多个单据汇总标记
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumItemVO
   * @param csumid String
   * @exception java.sql.SQLException 异常说明。
   */
  //public void clearBillItemCsumid(Vector vSumID) throws SQLException {
  //
  //	/*************************************************************/
  //	// 保留的系统管理接口：
  //	beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "deleteSumRecord", new Object[] { vSumID });
  //	/*************************************************************/
  //	//bill flag
  //	String sqlBillItem = "UPDATE ic_general_b SET csumid=NULL WHERE 1=1 ";
  //	//(csumid IN (";
  //
  //	StringBuffer sbWhere = new StringBuffer();
  //	ArrayList alSql = new ArrayList();
  //	//循环写入条件
  //	int size = vSumID.size();
  //	for (int i = 0; i < size; i++) {
  //		if (vSumID.elementAt(i) != null) {
  //			alSql.add(vSumID.elementAt(i));
  //			//sbWhere.append("'");
  //			//sbWhere.append(vSumID.elementAt(i));
  //			//sbWhere.append("',");
  //		}
  //		//兼容 oracle 的 IN 254 限制。每 200 个 数据 or 一次。
  //		//if (i > 0 && i % nc.bs.ic.pub.bill.GeneralSqlString.SQL_IN_LIST_LIMIT == 0) {
  //		//sbWhere.append(" '' ) OR csumid IN ( ");
  //		//}
  //	}
  //	//使用临时表
  //	sbWhere.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("csumid", alSql));
  //	//加''是为了上面循环结果中最后的","
  //	//因为ID不可能为'',所以可行。
  //	//sbWhere.append(" '' ) )");
  //	//----------------------
  //
  //	Connection con = null;
  //	PreparedStatement stmt = null;
  //	try {
  //		con = getConnection();
  //		//修改单据行汇总标记
  //		stmt = con.prepareStatement(sqlBillItem + sbWhere.toString());
  //		stmt.executeUpdate();
  //	} finally {
  //		try {
  //			if (stmt != null) {
  //				stmt.close();
  //			}
  //		} catch (Exception e) {
  //		}
  //		try {
  //			if (con != null) {
  //				con.close();
  //			}
  //		} catch (Exception e) {
  //		}
  //	}
  //	/*************************************************************/
  //	// 保留的系统管理接口：
  //	afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "deleteSumRecord", new Object[] { vSumID });
  //	/*************************************************************/ }
  /**
   * 功能：将参数中指定的字段合并到源vo数组中
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-13 12:01:59)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param vosSouce nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param vosTarget nc.vo.ic.pub.vmi.VmiQSumItemVO
   * @param sField java.lang.String
   */
  public VmiQSumItemVO[] combinVmiQSumItemVO(VmiQSumItemVO[] vosSouce,
      VmiQSumItemVO[] vosTarget, String sField) {

    if ((vosTarget == null || vosTarget.length <= 0) && vosSouce != null
        && vosSouce.length > 0) {
      //如果目的数组为空且源数组不为空直接返回源数组
      return vosSouce;
    }
    else if ((vosSouce == null || vosSouce.length <= 0) && vosTarget != null
        && vosTarget.length > 0) {
      //如果目的数组不为空且源数组为空直接返回目的组
      return vosTarget;
    }
    else if ((vosTarget == null || vosTarget.length <= 0)
        && (vosSouce == null || vosSouce.length <= 0)) {
      //如果都为空返回null
      return null;
    }

    //定义变量
    HashSearch htTemp = new HashSearch();
    String sTemp = "";
    Object objTemp = null;
    ArrayList alTemp = new ArrayList();
    ArrayList alReuslt = new ArrayList();
    VmiQSumItemVO[] vosResult = null; //结果vo数组

    //将	源数组按存货id+仓库id+供应商id为键值放入HashSearch
    for (int i = 0; i < vosTarget.length; i++) {
      htTemp.setValue(vosTarget[i].getInvMid().trim()
          + vosTarget[i].getWarehouseid().trim()
          + vosTarget[i].getCusMid().trim(), vosTarget[i]);

    }
    //将相同条件的vo中指定的字段写入目的vo
    //条件不相同的保存到ArrayList中
    for (int i = 0; i < vosSouce.length; i++) {
      sTemp = vosSouce[i].getInvMid().trim()
          + vosSouce[i].getWarehouseid().trim()
          + vosSouce[i].getCusMid().trim();
      objTemp = htTemp.getValue(sTemp);
      if (objTemp != null) {
        ((VmiQSumItemVO) objTemp).setAttributeValue(sField, vosSouce[i]
            .getAttributeValue(sField));
        htTemp.updateValue(sTemp, objTemp);
      }
      else {
        alTemp.add(vosSouce[i]);
      }
    }
    //取得所有目的vo
    alReuslt = htTemp.getAllValue();
    //将所有有效vo合并
    if (alTemp != null && alTemp.size() > 0) {
      for (int i = 0; i < alTemp.size(); i++) {
        alReuslt.add(alTemp.get(i));
      }
    }
    //将ArrayList中的vo变为vo数组
    vosResult = new VmiQSumItemVO[alReuslt.size()];
    for (int i = 0; i < alReuslt.size(); i++) {
      vosResult[i] = (VmiQSumItemVO) alReuslt.get(i);
    }
    //如果结果不为空返回结果
    if (vosResult != null && vosResult.length > 0) {
      return vosResult;
    }
    else {
      return null;
    }
  }

  /**
   * 功能：计算截止到当前日期的结余
   所有出库减入库加上结算
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-13 15:36:12)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param vos nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   */
  public VmiQSumItemVO[] computeVmiSumNum(VmiQSumItemVO[] vos) {
    UFDouble ufdZero = new UFDouble(0);
    UFDouble ufdTemp = null;
    if (vos != null && vos.length > 0) {
      int size = vos.length;
      for (int i = 0; i < size; i++) {
        ufdTemp = ufdZero;
        if (vos[i].getnininum() != null) {
          ufdTemp = ufdTemp.add(vos[i].getnininum());
        }
        if (vos[i].getninnum() != null) {
          ufdTemp = ufdTemp.add(vos[i].getninnum());
        }
        if (vos[i].getninoutnum() != null) {
          ufdTemp = ufdTemp.sub(vos[i].getninoutnum());
        }
        if (vos[i].getnoutnum() != null) {
          ufdTemp = ufdTemp.sub(vos[i].getnoutnum());
        }
        if (vos[i].getnoutinnum() != null) {
          ufdTemp = ufdTemp.add(vos[i].getnoutinnum());
        }
        vos[i].setnnum(ufdTemp);
      }
      return vos;
    }
    return null;
  }

  /**
   * 通过汇总主键删除主表汇总信息，
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumItemVO
   * @param vSumHeadPk String
   * @exception java.sql.SQLException 异常说明。
   */
  public void deleteSum(Vector vSumHeadPk) throws SQLException, Exception {
    if (vSumHeadPk == null || vSumHeadPk.size() == 0) {
      nc.vo.scm.pub.SCMEnv.out("head pk nvl");
      return;
    }

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "deleteSumRecord",
        new Object[] {
          vSumHeadPk
        });
    /*************************************************************/
    //detail
    String sqlDetailSum = "DELETE FROM ic_vmi_outdetail WHERE 1=1 ";
    String sqlSum = "DELETE FROM ic_vmi_sum WHERE 1=1 ";
    int iHidsize = vSumHeadPk.size();
    //(cvmihid IN ( ";
    StringBuffer sbWhere = new StringBuffer();
    ArrayList alSql = new ArrayList();
    //循环写入条件
    for (int i = 0; i < vSumHeadPk.size(); i++) {
      if (vSumHeadPk.elementAt(i) != null) {
        alSql.add(vSumHeadPk.elementAt(i));
        //sbWhere.append("'");
        //sbWhere.append(vSumHeadPk.elementAt(i));
        //sbWhere.append("',");
      }
      //兼容 oracle 的 IN 254 限制。每 200 个 数据 or 一次。
      //if (i > 0 && i % nc.bs.ic.pub.bill.GeneralSqlString.SQL_IN_LIST_LIMIT == 0) {
      //sbWhere.append(" '' ) OR cvmihid IN ( ");
      //}
    }
    //加''是为了上面循环结果中最后的","
    //因为ID不可能为'',所以可行。
    //sbWhere.append(" '' ) )");
    //----------------------
    //使用临时表
    sbWhere.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("cvmihid",
        alSql));
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      //删辅表
      stmt = con.prepareStatement(sqlDetailSum + sbWhere.toString());
      stmt.executeUpdate();
      stmt.close();
      stmt = con.prepareStatement(sqlSum + sbWhere.toString());
      int ideletesize = stmt.executeUpdate();
      if (ideletesize != iHidsize) {
        throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
            .getStrByID("4008other", "UPP4008other-000102")/*@res "并发,取消汇总失败!"*/);
      }

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "deleteSumRecord",
        new Object[] {
          vSumHeadPk
        });
    /*************************************************************/
  }

  /**
   * 查找未结算的汇总id
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumItemVO
   * @param voCond String
   * @exception java.sql.SQLException 异常说明。
   */
  public Vector qryNotSettledSumID(QryConditionVO voCond) throws SQLException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "deleteSumRecord",
        new Object[] {
          voCond
        });
    /*************************************************************/
    //detail
    String sqlDetailSum = getCancelSumSql(voCond);

    Connection con = null;
    PreparedStatement stmt = null;
    Vector vSumHeadPk = new Vector();
    Vector vSumID = new Vector();
    Vector vBillcode = new Vector();
    String scode = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      //删辅表
      stmt = con.prepareStatement(sqlDetailSum);
      rs = stmt.executeQuery();
      String sPk = null;
      while (rs.next()) {
        sPk = rs.getString(1);
        vSumHeadPk.addElement(sPk);
        sPk = rs.getString(2);
        if (sPk != null && !vSumID.contains(sPk))
          vSumID.addElement(sPk);
        scode = rs.getString(3);
        if (scode != null && !vBillcode.contains(scode))
          vBillcode.addElement(scode);
      }

    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "deleteSumRecord",
        new Object[] {
          voCond
        });
    /*************************************************************/
    Vector vRet = new Vector();
    vRet.addElement(vSumHeadPk);
    vRet.addElement(vSumID);
    vRet.addElement(vBillcode);
    return vRet;
  }

  /**
   * 查找参与汇总的单据表体id
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param voCond String
   * @exception java.sql.SQLException 异常说明。
   */
  public ArrayList findSumBillInfo2(QryConditionVO voCond) throws SQLException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "querySumBillInfo",
        new Object[] {
          voCond
        });
    /*************************************************************/

    String sql = getSumBillBodyIDSql2(voCond);

    Connection con = null;
    PreparedStatement stmt = null;
    Vector vDetailID = new Vector(), vHeadID = new Vector();
    Hashtable htHead = new Hashtable();

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      //
      while (rs.next()) {
        // bid :
        String hid = rs.getString(1);
        //head maybe repeatly.
        if (!htHead.containsKey(hid)) {
          //put into hash
          htHead.put(hid, "");
          vHeadID.addElement(hid);
        }
        String bid = rs.getString(2);
        vDetailID.addElement(bid);
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "querySumBillInfo",
        new Object[] {
          voCond
        });
    /*************************************************************/
    String[] saHeadId = null;//head result
    if (vHeadID.size() > 0) {
      saHeadId = new String[vHeadID.size()];
      vHeadID.copyInto(saHeadId);
    }
    String[] saDetailId = null;
    if (vDetailID.size() > 0) {
      saDetailId = new String[vDetailID.size()];
      vDetailID.copyInto(saDetailId);
    }
    ArrayList alRet = new ArrayList();
    alRet.add(saHeadId);
    alRet.add(saDetailId);
    return alRet;
  }

  /**
   * 构造查找未结算的汇总id  sql
   * 增加未开票的条件，因vmi汇总可形成采购开票
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumItemVO
   * @param sCorpID String
   * @exception java.sql.SQLException 异常说明。
   */
  protected String getCancelSumSql(QryConditionVO voCond) throws SQLException {
    if (voCond == null || voCond.getStrParam(VmiSumVO.SPI_CORP) == null) {
      nc.vo.scm.pub.SCMEnv.out("param nvl");
      return "";
    }
    //detail
    String sCorpID = voCond.getStrParam(VmiSumVO.SPI_CORP);
    UFDate dSumDate = (UFDate) voCond.getParam(VmiSumVO.OPI_END_DATE);
    String sCalbodyid = voCond.getStrParam(VmiSumVO.SPI_CALBODY);
    String sWh = voCond.getStrParam(VmiSumVO.SPI_WH);
    String sVendorid = voCond.getStrParam(VmiSumVO.SPI_VENDORID);
    String sInvid = voCond.getStrParam(VmiSumVO.SPI_INVID);

    String sSumid = voCond.getStrParam(VmiSumVO.SPI_SUMID);
    //from 2.30
    String[] saInvClass = (String[]) voCond
        .getParam(VmiSumVO.OPI_INV_CLASS_CODES);

    StringBuffer sbSql = new StringBuffer(
        "SELECT DISTINCT head.cvmihid,head.csumid,head.vbillcode ");
    sbSql.append(SE.SQL_FROM_FULL_VMI);
    //from 2.30 add inv class condition
    if (saInvClass != null && saInvClass.length > 0) {
      sbSql.append(SE.SQL_JOIN_INV_EX);
      sbSql.append(SE.SQL_JOIN_INVCL);
    }

    sbSql
        .append(" WHERE head.pk_corp='"
            + sCorpID
            + "' AND (coalesce(head.naccountmny,0) =0 or coalesce(head.naccountnum,0)=0) ");
    //增加未开票的条件，因vmi汇总可形成采购开票
    sbSql
        .append(" AND coalesce(head.ntotalinvoicenum,0)=0 AND coalesce(head.binvoiceendflag,'N')='N' ");
    if (dSumDate != null) {
      sbSql.append(" AND dsumdate<='");
      sbSql.append(dSumDate.toString());
      sbSql.append("'");
    }
    if (sCalbodyid != null) {
      sbSql.append(" AND ccalbodyid='");
      sbSql.append(sCalbodyid);
      sbSql.append("'");
    }
    if (sWh != null) {
      sbSql.append(" AND cwarehouseid='");
      sbSql.append(sWh);
      sbSql.append("'");
    }
    if (sVendorid != null) {
      sbSql.append(" AND cvendorid='");
      sbSql.append(sVendorid);
      sbSql.append("'");
    }
    if (sInvid != null) {
      sbSql.append(" AND cinventoryid='");
      sbSql.append(sInvid);
      sbSql.append("'");
    }
    if (sSumid != null) {
      sbSql.append(" AND csumid='");
      sbSql.append(sSumid);
      sbSql.append("'");
    }
    //from 2.30  add inv class condition
    if (saInvClass != null && saInvClass.length > 0) {
      sbSql.append(" AND ( ");
      for (int i = 0; i < saInvClass.length; i++)
        if (saInvClass[i] != null) {
          sbSql.append(" invcl.invclasscode LIKE '");
          sbSql.append(saInvClass[i]);
          sbSql.append("%' ");
          sbSql.append(" OR  ");
        }
      sbSql.append(" 1=0 ) ");

    }

    return sbSql.toString();
  }

  /**
   * 功能：按vo数组中的存货id客商id仓库id
   取得对应编码名称
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-13 9:48:46)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param vos nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   */
  public VmiQSumItemVO[] getCodeAndName(VmiQSumItemVO[] vos)
      throws SQLException {
    //如果参数数组为空则返回空
    if (vos == null || vos.length <= 0) {
      return null;
    }
    StringBuffer sbfInv = new StringBuffer();//存货Where子句
    StringBuffer sbfWarehouse = new StringBuffer();//仓库
    StringBuffer sbfCus = new StringBuffer();//客商
    //拼Where子句
    for (int i = 0; i < vos.length; i++) {
      //存货
      sbfInv.append(" or bd_invmandoc.pk_invmandoc='");
      sbfInv.append(vos[i].getInvMid());
      sbfInv.append("' ");
      //仓库
      sbfWarehouse.append(" or bd_stordoc.pk_stordoc='");
      sbfWarehouse.append(vos[i].getWarehouseid());
      sbfWarehouse.append("' ");
      //客商
      sbfCus.append(" or bd_cumandoc.pk_cumandoc='");
      sbfCus.append(vos[i].getCusMid());
      sbfCus.append("' ");
    }
    //查询存货编码名称
    Hashtable htInvInfo = getInvInfo(sbfInv.toString());
    //合并存货编码名称
    Object objTemp = null;
    if (htInvInfo != null && htInvInfo.size() > 0) {
      VmiQSumItemVO voTemp = null;
      for (int i = 0; i < vos.length; i++) {
        objTemp = htInvInfo.get(vos[i].getInvMid());
        if (objTemp != null) {
          voTemp = (VmiQSumItemVO) objTemp;
          vos[i].setInvCode(voTemp.getInvCode());
          vos[i].setInvName(voTemp.getInvName());
          vos[i].setMeasureName(voTemp.getMeasureName());
        }
      }
    }

    //查询仓库名称
    Hashtable htWarehouse = getWarehouseName(sbfWarehouse.toString());
    //合并仓库名称
    if (htWarehouse != null && htWarehouse.size() > 0) {
      for (int i = 0; i < vos.length; i++) {
        objTemp = htWarehouse.get(vos[i].getWarehouseid());
        if (objTemp != null) {
          vos[i].setWarehouseName(objTemp.toString());
        }
      }
    }
    //查询客商名称
    Hashtable htCus = getCusName(sbfCus.toString());
    //合并客商名称
    if (htCus != null && htCus.size() > 0) {
      for (int i = 0; i < vos.length; i++) {
        objTemp = htCus.get(vos[i].getCusMid());
        if (objTemp != null) {
          vos[i].setCusName(objTemp.toString());
        }
      }
    }

    return vos;
  }

  /**
   * 功能：按参数指定客商id取得客商名称
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-13 20:34:51)
   * 修改日期，修改人，修改原因，注释标志：
   * @return java.util.Hashtable
   * @param sWhereStr java.lang.String
   */
  public Hashtable getCusName(String sWhereStr) throws SQLException {

    //拼sql
    StringBuffer sql = new StringBuffer();
    sql.append("SELECT bd_cumandoc.pk_cumandoc, bd_cubasdoc.custname ");
    sql.append("FROM bd_cumandoc LEFT OUTER JOIN bd_cubasdoc  ");
    sql
        .append("ON bd_cumandoc.pk_cubasdoc = bd_cubasdoc.pk_cubasdoc where 1<0 ");
    if (sWhereStr != null && sWhereStr.trim().length() > 0) {
      sql.append(sWhereStr);
    }
    else {
      return null;
    }
    //
    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      ResultSet rs = stmt.executeQuery();
      //
      Hashtable htTemp = new Hashtable();
      while (rs.next()) {
        //bd_cumandoc.pk_cumandoc
        String cusid = rs.getString(1);
        //bd_cubasdoc.custname
        String cusname = rs.getString(2);

        //
        if (cusid != null && cusname != null) {
          htTemp.put(cusid, cusname);
        }
      }
      if (htTemp.size() > 0) {
        return htTemp;
      }

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    return null;
  }

  /**
   * 创建者：王乃军
   * 功能：得到自由项数据
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2001-10-18 11:46:08)
   *  修改日期，修改人，修改原因，注释标志：
   */
  protected VmiSumVO[] getFreeItemData(VmiSumVO[] voaSum) throws Exception {
    //查自由项
    if (voaSum == null || voaSum.length == 0)
      return null;

    //读存货id
    ArrayList alBodyPK = new ArrayList();
    ArrayList alTemp = null;
    ArrayList alFree = null;
    for (int bill = 0; bill < voaSum.length; bill++) {
      alTemp = new ArrayList();
      alTemp.add(voaSum[bill].getHeaderVO().getCinventoryid());
      alBodyPK.add(alTemp);
    }

    //读自由项
    DefdefDMO defdmo = new DefdefDMO();
    alFree = defdmo.queryFreeVOByInvIDsGroupByBills(alBodyPK);
    ArrayList alFree2 = null;
    //写自由项
    if (alFree != null && alFree.size() > 0) { //&& alResultData.size()==alFree.size()) {
      //nc.vo.scm.pub.SCMEnv.out("free size"+alFree.size());
      FreeVO voBodyFree = null; //单据读出的free值
      FreeVO voBasFree = null; //基础数据读出的free设置
      for (int bill = 0; bill < voaSum.length; bill++) {
        alFree2 = (ArrayList) alFree.get(bill);
        if (alFree2 != null && alFree2.size() > 0) {
          voBodyFree = voaSum[bill].getHeaderVO().getFreeItemVO();
          voBasFree = (FreeVO) alFree2.get(0);
          //置入def读出的free
          if (voBodyFree != null && voBasFree != null)
            for (int f = 1; f <= FreeVO.FREE_ITEM_NUM; f++) {
              voBasFree.setAttributeValue("vfree" + f, voBodyFree
                  .getAttributeValue("vfree" + f));
            }
          //完整的free
          voaSum[bill].getHeaderVO().setFreeItemVO(voBasFree);
        }
      }
    }

    return voaSum;
  }

  /**
   * 功能：取得参数中指定的存货的编码名称
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-13 20:32:45)
   * 修改日期，修改人，修改原因，注释标志：
   * @return java.util.Hashtable
   * @param sWherestr java.lang.String
   */
  public Hashtable getInvInfo(String sWhereStr) throws SQLException {

    //拼sql
    StringBuffer sql = new StringBuffer();
    sql.append("SELECT bd_invmandoc.pk_invmandoc, bd_invbasdoc.invcode, ");
    sql.append("bd_invbasdoc.invname ,bd_measdoc.measname FROM bd_invmandoc ");
    sql.append("LEFT OUTER JOIN bd_invbasdoc ");
    sql.append("ON bd_invmandoc.pk_invbasdoc = bd_invbasdoc.pk_invbasdoc ");
    sql.append("left outer join bd_measdoc ");
    sql.append("on bd_invbasdoc.pk_measdoc=bd_measdoc.pk_measdoc where 1<0 ");
    if (sWhereStr != null && sWhereStr.trim().length() > 0) {
      sql.append(sWhereStr);
    }
    else {
      return null;
    }
    //
    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      ResultSet rs = stmt.executeQuery();
      //
      VmiQSumItemVO vo = null;
      VmiQSumItemVO[] vos = null;
      Hashtable htTemp = new Hashtable();
      while (rs.next()) {
        vo = new VmiQSumItemVO();
        //bd_invmandoc.pk_invmandoc
        String invid = rs.getString(1);
        vo.setInvMid(invid == null ? null : invid.trim());
        //bd_invbasdoc.invcode
        String invcode = rs.getString(2);
        vo.setInvCode(invcode == null ? null : invcode.trim());
        //bd_invbasdoc.invname
        String invname = rs.getString(3);
        vo.setInvName(invname == null ? null : invname.trim());
        //bd_measdoc.measname
        String measname = rs.getString(4);
        vo.setMeasureName(measname == null ? null : measname.trim());
        //
        htTemp.put(vo.getInvMid(), vo);
      }
      if (htTemp.size() > 0) {
        return htTemp;
      }

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    return null;
  }

  /**
   * 功能：查询汇总表中csumid为参数中传入的id
   且csmid为null即未结算的数量
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-9 15:46:48)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param hvo nc.vo.ic.pub.vmi.VmiSumHeaderVO
   */
  public VmiQSumItemVO[] getLastSum(nc.vo.pub.query.ConditionVO[] cvo,
      VmiSumHeaderVO hvo) throws SQLException {
    if (hvo == null || hvo.getCsumid() == null || hvo.getDsumdate() == null)
      return null;
    StringBuffer sbfSql = new StringBuffer();
    if (cvo != null && cvo.length > 0) {
      for (int i = 0; i < cvo.length; i++) {
        if (cvo[i].getFieldCode().equals("cproviderid")) {
          sbfSql.append(" and ic_vmi_sum.cvendorid='");
          sbfSql.append(cvo[i].getValue());
          sbfSql.append("' ");
        }
        else if (cvo[i].getFieldCode().equals("cwarehouseid")) {
          sbfSql.append(" and ic_vmi_sum.cwarehouseid='");
          sbfSql.append(cvo[i].getValue());
          sbfSql.append("' ");
        }
        else if (cvo[i].getFieldCode().equals("cinventoryid")) {
          sbfSql.append(" and ic_vmi_sum.cinventoryid='");
          sbfSql.append(cvo[i].getValue());
          sbfSql.append("' ");
        }
      }

    }
    StringBuffer sql = new StringBuffer(); //nnum---->NFINALNUM 由未结算数量改为结余数量。
    sql.append("select ic_vmi_sum.cinventoryid,ic_vmi_sum.cvendorid,");
    sql.append("ic_vmi_sum.cwarehouseid,ic_vmi_sum.nfinalnum as num ");
    sql.append("from ic_vmi_sum ");
    sql.append("where ic_vmi_sum.dr=0 AND ic_vmi_sum.cvendorid is not null");
    // and ic_vmi_sum.csumid=? ");因不再使用汇总标志标示汇总所以去掉此条件
    if (sbfSql != null && sbfSql.length() > 0) {
      sql.append(sbfSql.toString());
    }
    sql
        .append(" and ic_vmi_sum.dsumdate=(select MAX(dsumdate) from ic_vmi_sum where ic_vmi_sum.dr=0  ");
    if (sbfSql != null && sbfSql.length() > 0) {
      sql.append(sbfSql.toString());
    }
    sql.append(" and nfinalnum<>0 )");
    //sql.append(" group by ic_vmi_sum.cinventoryid,ic_vmi_sum.cvendorid,");
    //sql.append("ic_vmi_sum.cwarehouseid ");

    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      //stmt.setString(1,hvo.getCsumid());因不再使用汇总标志标示汇总所以去掉此条件
      ResultSet rs = stmt.executeQuery();
      //
      VmiQSumItemVO vo = null;
      VmiQSumItemVO[] vos = null;
      ArrayList alResult = new ArrayList();
      while (rs.next()) {
        vo = new VmiQSumItemVO();
        // ic_vmi_sum.cinventoryid
        String invid = rs.getString(1);
        vo.setInvMid(invid == null ? null : invid.trim());
        //ic_vmi_sum.cvendorid
        String venderid = rs.getString(2);
        vo.setCusMid(venderid == null ? null : venderid.trim());
        //ic_vmi_sum.cwarehouseid
        String warehouseid = rs.getString(3);
        vo.setWarehouseid(warehouseid == null ? null : warehouseid.trim());
        //sum(ic_vmi_outdetail.nnum) as num
        Object num = rs.getObject(4);
        vo.setnininum(num == null ? null : new UFDouble(num.toString()));
        //
        alResult.add(vo);
      }
      if (alResult != null && alResult.size() > 0) {
        vos = new VmiQSumItemVO[alResult.size()];
        for (int i = 0; i < alResult.size(); i++) {
          vos[i] = (VmiQSumItemVO) alResult.get(i);
        }
        return vos;
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    return null;
  }

  /**
   * 功能：查询指定存货的最后一条汇总记录的sql

   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-9 15:46:48)
   * 修改日期，修改人，修改原因，注释标志：
   * @return String
   * @param

   */
  public String getLastSumRecordSql(VmiSumHeaderVO voHeader) {
    if (voHeader == null)
      return null;
    StringBuffer sbSqlCond = new StringBuffer(); //查询条件sql

    sbSqlCond.append(" AND dr=0 AND ");
    if (voHeader.getPk_corp() != null) {
      sbSqlCond.append("pk_corp='");
      sbSqlCond.append(voHeader.getPk_corp().trim());
      sbSqlCond.append("'");
    }
    else
      sbSqlCond.append(" pk_corp IS NULL ");
    //----------------------------------
    sbSqlCond.append(" AND ");
    if (voHeader.getCcalbodyid() != null) {
      sbSqlCond.append("ccalbodyid='");
      sbSqlCond.append(voHeader.getCcalbodyid().trim());
      sbSqlCond.append("'");
    }
    else
      sbSqlCond.append(" ccalbodyid IS NULL ");
    //----------------------------------
    sbSqlCond.append(" AND ");
    if (voHeader.getCwarehouseid() != null) {
      sbSqlCond.append("cwarehouseid='");
      sbSqlCond.append(voHeader.getCwarehouseid().trim());
      sbSqlCond.append("'");
    }
    else
      sbSqlCond.append(" cwarehouseid IS NULL ");
    //----------------------------------
    sbSqlCond.append(" AND ");
    if (voHeader.getCvendorid() != null) {
      sbSqlCond.append("cvendorid='");
      sbSqlCond.append(voHeader.getCvendorid().trim());
      sbSqlCond.append("'");
    }
    else
      sbSqlCond.append(" cvendorid IS NULL ");
    //----------------------------------
    sbSqlCond.append(" AND ");
    if (voHeader.getCinventoryid() != null) {
      sbSqlCond.append("cinventoryid='");
      sbSqlCond.append(voHeader.getCinventoryid().trim());
      sbSqlCond.append("'");
    }
    else
      sbSqlCond.append(" cinventoryid IS NULL ");
    //----------------------------------
    sbSqlCond.append(" AND ");
    if (voHeader.getCastunitid() != null) {
      sbSqlCond.append("castunitid='");
      sbSqlCond.append(voHeader.getCastunitid().trim());
      sbSqlCond.append("'");
    }
    else
      sbSqlCond.append(" castunitid IS NULL ");
    //----------------------------------
    sbSqlCond.append(" AND ");
    if (voHeader.getVlot() != null) {
      sbSqlCond.append("vlot='");
      sbSqlCond.append(voHeader.getVlot().trim());
      sbSqlCond.append("'");
    }
    else
      sbSqlCond.append(" vlot IS NULL ");
    //----------------------------------
    String sFree = null;
    for (int i = 1; i <= FreeVO.FREE_ITEM_NUM; i++) {
      sFree = "vfree" + i;
      sbSqlCond.append(" AND ");
      if (voHeader.getAttributeValue(sFree) != null) {
        sbSqlCond.append(sFree + "='");
        sbSqlCond.append(voHeader.getAttributeValue(sFree).toString().trim());
        sbSqlCond.append("'");
      }
      else
        sbSqlCond.append(sFree + " IS NULL ");
    }
    //----------------------------------
    sbSqlCond.append(" AND ");
    if (voHeader.getCrsvid1() != null) {
      sbSqlCond.append("crsvid1='");
      sbSqlCond.append(voHeader.getCrsvid1().trim());
      sbSqlCond.append("'");
    }
    else
      sbSqlCond.append(" crsvid1 IS NULL ");
    //----------------------------------
    sbSqlCond.append(" AND ");
    if (voHeader.getCrsvid2() != null) {
      sbSqlCond.append("crsvid2='");
      sbSqlCond.append(voHeader.getCrsvid2().trim());
      sbSqlCond.append("'");
    }
    else
      sbSqlCond.append(" crsvid2 IS NULL ");

    StringBuffer sbSql = new StringBuffer(
        " SELECT dsumdate, pk_corp, ccalbodyid, cwarehouseid, cvendorid, cinventoryid, castunitid, vlot, vfree1, vfree2, vfree3, vfree4, vfree5, vfree6, vfree7, vfree8, vfree9, vfree10, ninitnum, ninnum, ninoutnum, noutnum, noutinnum, ntransnum, nfinalnum, csumid, crsvid1, crsvid2, nrsvnum1, nrsvnum2 ,cvmihid FROM ic_vmi_sum WHERE dr=0 ");
    //查询sql
    sbSql.append(sbSqlCond.toString());
    sbSql.append(" AND ts=(SELECT MAX(ts) FROM ic_vmi_sum WHERE dr=0 ");
    sbSql.append(sbSqlCond.toString());
    sbSql.append(")");

    return sbSql.toString();
  }

  /**
   * 此处插入方法说明。
   * 功能：查询待结算的数据
   * 参数：
   [0]String pk_corp, 公司,NOT NULL

   * 返回：
   * 例外：
   * 日期：(2002-5-21 19:39:25)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiSumVO[]
   * @param alCond java.util.ArrayList
   * @exception nc.vo.pub.BusinessException 异常说明。
   */
  public AggregatedValueObject[] getOutDetail(String sPk_corp, String sCondition)
      throws nc.vo.pub.BusinessException {
    try {
      QryConditionVO voCond = new QryConditionVO();
      //corporation
      voCond.setStrParam(VmiSumVO.SPI_CORP, sPk_corp);
      voCond.setIntParam(VmiSumVO.IPI_JOIN_TYPE, VmiSumVO.IPVALUE_INNER_JOIN); //只查有表体的
      //other condition
      StringBuffer sbWhere = new StringBuffer(" 1=1 "); //未结算的
      if (sCondition != null && sCondition.trim().length() > 0)
        sbWhere.append(sCondition);
      voCond.setQryCond(sbWhere.toString());
      //汇总条件
      VmiSumpolicyDMO dmoPolicy = new VmiSumpolicyDMO();
      VmiSumpolicyVO voPolicy = dmoPolicy.findByCorpID(sPk_corp);
      if (voPolicy == null)
        throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008other", "UPP4008other-000103")/*@res "本公司还未设置汇总条件。"*/);

      voPolicy.setVmi_only(new UFBoolean(true));//只查vmi属性的存货

      voCond.setParam(VmiSumVO.OPI_POLICY, voPolicy);
      //需要查所有的未结算的记录，不能只查最后一条汇总记录
      voCond.setIntParam(VmiSumVO.IPI_LAST_RECORD,
          VmiSumVO.IPVALUE_LAST_RECORD_NO);

      return query(voCond);
    }
    catch (Exception e) {
      throw new BusinessException(e.getMessage());
    }
  }

  /**
   * 功能：按查询条件价格类型查询价格并计算金额
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-19 15:04:53)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param cvo nc.vo.pub.query.ConditionVO[]
   * @param vos nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   */
  public VmiQSumItemVO[] getPrice(nc.vo.pub.query.ConditionVO[] cvo,
      VmiQSumItemVO[] vos, String sPkCorp) throws Exception {
    //如果表体数据为空则返回空值
    if (vos == null || vos.length <= 0 || cvo == null && cvo.length == 0) {
      return null;
    }
    //定义价格变量
    UFDouble ufdPrice = null;
    //按查询条件取得价格并计算金额

    ParaPoToIcVMIVO[] paravos = null;

    //nc.bs.po.OrderDMO odmo = new nc.bs.po.OrderDMO();

    nc.bs.ic.pub.PriceDMO pdmo = new nc.bs.ic.pub.PriceDMO();
    Hashtable htPrice = new Hashtable();

    //get price
    for (int i = 0; i < cvo.length; i++) {
      if (cvo[i].getFieldCode().equals("npricetype")) {
        if (cvo[i].getValue().toString().equals("planprice")) {
          ArrayList alInvID = new ArrayList(vos.length);
          for (int j = 0; j < vos.length; j++)
            alInvID.add(vos[j].getInvMid());
          htPrice = pdmo.getPlanPriceByStep(sPkCorp, null, vos[0]
              .getWarehouseid(), alInvID);
        }
        if (cvo[i].getValue().toString().equals("newprice")) {

          ModuleEnable md = new ModuleEnable();

          //					采购产品是否启用
          if (md.isModuleEnble(sPkCorp, ProductCode.PROD_PO)) {

            //准备参数 从采购批量获取单价
            paravos = new ParaPoToIcVMIVO[vos.length];
            HashMap hswareidtocalid = null;
            String[] values = new String[vos.length];
            for (int j = 0; j < vos.length; j++) {
              paravos[j] = new ParaPoToIcVMIVO();
              paravos[j].setPk_corp(sPkCorp);
              paravos[j].setCinventoryid(vos[j].getInvMid());
              values[j] = vos[j].getWarehouseid();
            }
            ICSmartToolsDmo sdmo = new ICSmartToolsDmo();
            hswareidtocalid = sdmo.getValue("bd_stordoc", "pk_calbody",
                SmartFieldMeta.JAVATYPE_STRING, "pk_stordoc", values, null);
            if (hswareidtocalid != null && hswareidtocalid.size() > 0) {
              for (int j = 0; j < vos.length; j++) {
                if (vos[j].getWarehouseid() != null)
                  paravos[j].setCcalbodyid((String) hswareidtocalid.get(vos[j]
                      .getWarehouseid()));
              }
            }

            //						IPuToIc_OrderDMO odmo=(IPuToIc_OrderDMO)new InterServBO().getInterInstance(ProductCode.PROD_PO,InterRegister.PU0023);
            IPuToIc_Order odmo = (IPuToIc_Order) NCLocator.getInstance()
                .lookup(IPuToIc_Order.class.getName());

            if (odmo != null)
              paravos = odmo.getNewPrice(paravos);

          }

          //从采购批量获取单价

          //					for (int j = 0; j < vos.length; j++) {
          //						ufdPrice = odmo.getNewPriceForIA(sPkCorp, vos[j].getInvMid());
          //						htPrice = new Hashtable();
          //						if (ufdPrice != null){
          //							htPrice.put(vos[j].getInvMid(), ufdPrice);
          //						}
          //							
          //					}
        }
        break;
      }
    }
    //cal money by price
    UFDouble d0 = new UFDouble(0);
    for (int j = 0; j < vos.length; j++) {
      ufdPrice = (UFDouble) htPrice.get(vos[j].getInvMid());
      //使用采购获取的单价
      if (paravos != null && paravos[j] != null
          && paravos[j].getNprice() != null
          && paravos[j].getNprice().compareTo(d0) != 0)
        ufdPrice = paravos[j].getNprice();
      if (ufdPrice != null) {
        vos[j].setnprice(ufdPrice);
        if (vos[j].getnininum() != null) {
          vos[j].setninimny(ufdPrice.multiply(vos[j].getnininum()));
        }
        if (vos[j].getninnum() != null) {
          vos[j].setninmny(ufdPrice.multiply(vos[j].getninnum()));
        }
        if (vos[j].getninoutnum() != null) {
          vos[j].setninoutmny(ufdPrice.multiply(vos[j].getninoutnum()));
        }
        if (vos[j].getnoutinnum() != null) {
          vos[j].setnoutinmny(ufdPrice.multiply(vos[j].getnoutinnum()));
        }
        if (vos[j].getnoutnum() != null) {
          vos[j].setnoutmny(ufdPrice.multiply(vos[j].getnoutnum()));
        }
        if (vos[j].getnnum() != null) {
          vos[j].setnmny(ufdPrice.multiply(vos[j].getnnum()));
        }
      }
    }

    return vos;
  }

  /**
   * 构造查询sql
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   */
  protected String getQuerySql(QryConditionVO voCond) throws SQLException {

    if (voCond == null || voCond.getParam(VmiSumVO.OPI_POLICY) == null) {
      nc.vo.scm.pub.SCMEnv.out("sum:param null");
      return null;
    }
    String sPk_corp = voCond.getStrParam(VmiSumVO.SPI_CORP); //corp id
    String sCalbodyid = voCond.getStrParam(VmiSumVO.SPI_CALBODY);
    String sWarehouseid = voCond.getStrParam(VmiSumVO.SPI_WH);
    String sVendorid = voCond.getStrParam(VmiSumVO.SPI_VENDORID);
    String sInvid = voCond.getStrParam(VmiSumVO.SPI_INVID);
    String sSumid = voCond.getStrParam(VmiSumVO.SPI_SUMID); //汇总的ID，在表体行
    //from 2.30
    String[] saInvClass = (String[]) voCond
        .getParam(VmiSumVO.OPI_INV_CLASS_CODES);

    int iFull = voCond.getIntParam(VmiSumVO.IPI_JOIN_TYPE);
    //查询所有数据还是只查有表体(出库)的数据。
    //查询指定条件的最后一条记录
    int iLastRecord = voCond.getIntParam(VmiSumVO.IPI_LAST_RECORD);

    VmiSumpolicyVO voPolicy = (VmiSumpolicyVO) voCond
        .getParam(VmiSumVO.OPI_POLICY);
    //汇总条件

    boolean bLot = false, bAstuom = false, bFreeitem = false, bVmiinv = false;
    if (voPolicy.getLot() != null)
      bLot = voPolicy.getLot().booleanValue();
    if (voPolicy.getAstuom() != null)
      bAstuom = voPolicy.getAstuom().booleanValue();
    if (voPolicy.getFreeitem() != null)
      bFreeitem = voPolicy.getFreeitem().booleanValue();
    //if (voPolicy.getVmi_only() != null)//2.30
    //bVmiinv = voPolicy.getVmi_only().booleanValue();

    //出库明细汇总条件：	//用料部门	//成本对象	//工序	//生产定单	//项目	//项目阶段
    boolean bDept = false, bCostObject = false, bWorkproc = false, bPrdorder = false, bPrj = false, bPrjphase = false;
    if (voPolicy.getDept() != null)
      bDept = voPolicy.getDept().booleanValue();

    if (voPolicy.getCostobject() != null)
      bCostObject = voPolicy.getCostobject().booleanValue();

    if (voPolicy.getWorkproc() != null)
      bWorkproc = voPolicy.getWorkproc().booleanValue();

    if (voPolicy.getPrdorder() != null) //需要特殊处理
      bPrdorder = voPolicy.getPrdorder().booleanValue();

    if (voPolicy.getPrj() != null)
      bPrj = voPolicy.getPrj().booleanValue();

    if (voPolicy.getPrjphase() != null)
      bPrjphase = voPolicy.getPrjphase().booleanValue();

    int iHeaderFieldNum = 21; //,iBodyFieldNum=0;//字段数量

    StringBuffer sbSql = new StringBuffer(
        "SELECT head.cvmihid,csumid,dsumdate,cvendorid ,prov.custname AS vvendorname,ccalbodyid,cal.bodyname AS vcalbodyname,cwarehouseid,wh1.storname AS vstorname,cinventoryid,inv.invcode AS vinventorycode,inv.invname AS vinvname,inv.invspec AS vinvspec,  \n    inv.invtype AS vinvtype, meas1.measname AS vmeasdocname,bgaugeflag,dgaugedate,head.nprice as ngaugeprice,head.nmoney as ngaugemoney,bsettleendflag,naccountnum,naccountmny,head.ts as hts,head.vbillcode");

    StringBuffer sbAppHeadFields = new StringBuffer();
    StringBuffer sbAppBodyFields = new StringBuffer(
        ",cvmibid,csmid,nnum,cbilltypecode,bt.billtypename vbilltypename,body.ts as bts");
    StringBuffer sbJoinHeader = new StringBuffer();
    StringBuffer sbJoinBody = new StringBuffer();
    //-- from --
    sbJoinHeader.append(SE.SQL_JOIN_WH1);
    sbJoinHeader.append(SE.SQL_JOIN_CALBODY_EX);
    sbJoinHeader.append(SE.SQL_JOIN_VENDOR_EX);
    sbJoinHeader.append(SE.SQL_JOIN_INV_EX);
    sbJoinHeader.append(SE.SQL_JOIN_INVCL);
    sbJoinHeader.append(SE.SQL_JOIN_UOM);
    //head
    if (bAstuom) {
      sbJoinHeader.append(SE.SQL_JOIN_ASTUOM_EX);
      sbAppHeadFields.append(",castunitid");
      sbAppHeadFields.append(",meas2.measname vastunitname");
      iHeaderFieldNum += 2;
    }
    if (bLot) {
      sbAppHeadFields.append(",vlot");
      iHeaderFieldNum++;
    }
    if (bFreeitem) {
      sbAppHeadFields.append("," + SE.sAllFreeItem);
      iHeaderFieldNum += nc.vo.scm.ic.bill.FreeVO.FREE_ITEM_NUM;
    }
    //body
    if (bDept) {
      sbJoinBody.append(SE.SQL_JOIN_DEPT);
      sbAppBodyFields.append(",cdptid");
      sbAppBodyFields.append(",dept.deptname AS vdptname");
      //iBodyFieldNum+=2;
    }
    if (bPrj) {
      sbJoinBody.append(SE.SQL_JOIN_JOB);
      sbAppBodyFields.append(",cprojectid");
      sbAppBodyFields.append(",job.jobname AS vprojectname");
      //iBodyFieldNum+=2;
    }
    if (bPrjphase) {
      sbJoinBody.append(SE.SQL_JOIN_JOBPHASE);
      sbAppBodyFields.append(",cprojectphaseid");
      sbAppBodyFields.append(",jobph.jobphasename AS vprojectphasename");
      //iBodyFieldNum+=2;
    }
    if (bCostObject) {
      sbJoinBody.append(SE.SQL_JOIN_COSTOBJECT);
      sbAppBodyFields.append(",ccostobjectid");
      sbAppBodyFields.append(",invbasz.invname AS vcostobjectname");
      //iBodyFieldNum+=2;
    }
    sbJoinBody.append(SE.SQL_JOIN_BILLTYPE);

    //head
    sbSql.append(sbAppHeadFields);
    sbSql.append(",ninitnum");
    sbSql.append(",ninnum");
    sbSql.append(",ninoutnum");
    sbSql.append(",noutnum");
    sbSql.append(",noutinnum");
    sbSql.append(",ntransnum");
    sbSql.append(",nfinalnum");
    //
    sbSql.append(",ntotalinvoicenum ");
    sbSql.append(",binvoiceendflag ");
    //body
    sbSql.append(sbAppBodyFields);

    if (iFull == VmiSumVO.IPVALUE_INNER_JOIN)
      sbSql.append(SE.SQL_FROM_VMI);
    else
      sbSql.append(SE.SQL_FROM_FULL_VMI);
    sbSql.append(sbJoinHeader);
    sbSql.append(sbJoinBody);
    StringBuffer sbWhere = new StringBuffer(" (1=1) ");
    //---have built in join -------AND head.dr=0 AND body.dr=0 ");
    if (voCond.getQryCond() != null) {
      sbWhere.append(" AND ");
      sbWhere.append(voCond.getQryCond());
    }
    //非折扣、非劳务属性的存货
    sbWhere.append(" AND ");
    sbWhere.append(SE.SQL_INV_CONSTRAINT);
    //if (bVmiinv) {//from 2.30 removed
    sbWhere.append(SE.sVmiInvCond);
    //}

    if (sPk_corp != null) {
      sbWhere.append(" AND head.pk_corp='");
      sbWhere.append(sPk_corp);
      sbWhere.append("'");
    }
    if (sCalbodyid != null) {
      sbWhere.append(" AND head.ccalbodyid='");
      sbWhere.append(sCalbodyid);
      sbWhere.append("'");
    }
    if (sWarehouseid != null) {
      sbWhere.append(" AND head.cwarehouseid='");
      sbWhere.append(sWarehouseid);
      sbWhere.append("'");
    }
    if (sVendorid != null) {
      sbWhere.append(" AND head.cvendorid='");
      sbWhere.append(sVendorid);
      sbWhere.append("'");
    }
    if (sInvid != null) {
      sbWhere.append(" AND head.cinventoryid='");
      sbWhere.append(sInvid);
      sbWhere.append("'");
    }
    if (sSumid != null) {
      sbWhere.append(" AND head.csumid='");
      sbWhere.append(sSumid);
      sbWhere.append("'");
    }
    //from 2.30  add inv class condition
    if (saInvClass != null && saInvClass.length > 0) {
      sbWhere.append(" AND ( ");
      for (int i = 0; i < saInvClass.length; i++)
        if (saInvClass[i] != null) {
          sbWhere.append(" invcl.invclasscode LIKE '");
          sbWhere.append(saInvClass[i]);
          sbWhere.append("%' ");
          sbWhere.append(" OR  ");
        }
      sbWhere.append(" 1=0 ) ");

    }
    if (sbWhere.toString().length() > 0) {
      sbSql.append(" WHERE ");
      sbSql.append(sbWhere);
    }
    //最后一次汇总记录
    if (iLastRecord == VmiSumVO.IPVALUE_LAST_RECORD_YES) {
      sbSql.append(" AND head.ts=(SELECT MAX(head.ts) ");
      if (iFull == VmiSumVO.IPVALUE_INNER_JOIN)
        sbSql.append(SE.SQL_FROM_VMI);
      else
        sbSql.append(SE.SQL_FROM_FULL_VMI);
      sbSql.append(" WHERE ");
      sbSql.append(sbWhere);
      sbSql.append(")");
    }
    sbSql
        .append(" 	ORDER BY head.cvmihid,prov.custcode,cal.bodycode,inv.invcode,dsumdate,head.ts " + sbAppHeadFields.toString());

    return sbSql.toString();
  }

  /**
   * 转化为数组，并读自由项数据。
   *
   * 创建日期：(2002-5-16)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param cpolicyid String
   * @exception java.sql.SQLException 异常说明。
   */
  public VmiSumVO[] getResult(Vector vResult, boolean bFreeItemRead)
      throws Exception {
    VmiSumVO voaResult[] = null;
    if (vResult.size() > 0) {
      voaResult = new VmiSumVO[vResult.size()];
      vResult.copyInto(voaResult);
    }
    if (bFreeItemRead) {

      voaResult = getFreeItemData(voaResult);

    }
    return voaResult;
  }

  /**
   * 构造查找汇总的表体id 的sql
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   */
  protected String getSumBillBodyIDSql2(QryConditionVO voCond)
      throws SQLException {

    if (voCond == null || voCond.getParam(VmiSumVO.OPI_END_DATE) == null //截止日期必须
        || voCond.getStrParam(VmiSumVO.SPI_CORP) == null) { //公司必须
      nc.vo.scm.pub.SCMEnv.out("sum:param null");
      return null;
    }
    String sPk_corp = voCond.getStrParam(VmiSumVO.SPI_CORP); //corp id
    String sCalbodyid = voCond.getStrParam(VmiSumVO.SPI_CALBODY);
    String sWarehouseid = voCond.getStrParam(VmiSumVO.SPI_WH);
    String sVendorid = voCond.getStrParam(VmiSumVO.SPI_VENDORID);
    String sInvid = voCond.getStrParam(VmiSumVO.SPI_INVID);
    UFDate dStartDate = (UFDate) voCond.getParam(VmiSumVO.OPI_START_DATE);
    UFDate dEndDate = (UFDate) voCond.getParam(VmiSumVO.OPI_END_DATE);

    VmiSumpolicyVO voPolicy = (VmiSumpolicyVO) voCond
        .getParam(VmiSumVO.OPI_POLICY);
    //汇总条件
    boolean bLot = false, bAstuom = false, bFreeitem = false, bVmiinv = false;
    //if (voPolicy.getVmi_only() != null) //from 2.30 removed
    //bVmiinv = voPolicy.getVmi_only().booleanValue();

    StringBuffer sbConstCond = new StringBuffer(); //固定的条件

    //if (sPk_corp != null) {
    sbConstCond.append(" AND h.pk_corp='");
    sbConstCond.append(sPk_corp);
    sbConstCond.append("'");
    //}
    if (sCalbodyid != null) {
      sbConstCond.append(" AND h.pk_calbody='");
      sbConstCond.append(sCalbodyid);
      sbConstCond.append("'");
    }
    if (sWarehouseid != null) {
      sbConstCond.append(" AND h.cwarehouseid='");
      sbConstCond.append(sWarehouseid);
      sbConstCond.append("'");
    }
    if (sVendorid != null) {
      sbConstCond.append(" AND (b.cvendorid='");
      sbConstCond.append(sVendorid);
      sbConstCond.append("')");
    }
    if (sInvid != null) {
      sbConstCond.append(" AND b.cinventoryid='");
      sbConstCond.append(sInvid);
      sbConstCond.append("'");
    }
    //if (dStartDate != null) {        DO NOT USE IT.
    //sbConstCond.append(" AND b.dbizdate>='");
    //sbConstCond.append(dStartDate.toString());
    //sbConstCond.append("'");
    //}
    if (dEndDate != null) {
      sbConstCond.append(" AND b.dbizdate<='");
      sbConstCond.append(dEndDate.toString());
      sbConstCond.append("'");
    }

    //if (bVmiinv) {//from 2.30 removed
    sbConstCond
        .append(" And h.cwarehouseid in(Select pk_stordoc from bd_stordoc where  isgathersettle='Y' and iscalculatedinvcost='Y') ");//isforeignstor='Y' AND
    sbConstCond
        .append(" And (h.cotherwhid is null or h.cotherwhid not in(Select pk_stordoc from bd_stordoc where  isgathersettle='Y' and iscalculatedinvcost='Y')) ");//isforeignstor='Y' AND
    //非折扣、非劳务属性的存货
    sbConstCond.append(" AND ");
    sbConstCond.append(SE.SQL_INV_CONSTRAINT);
    //}

    StringBuffer sbBase = new StringBuffer(); //基本的SQL
    sbBase.append("SELECT h.cgeneralhid,b.cgeneralbid ");
    //-- from
    sbBase.append(SE.sFromBase);
    //需要关联存货管理档案
    sbBase.append(SE.sJoinInv);
    //where
    sbBase.append(SE.sWhereBase);
    sbBase.append(sbConstCond);

    StringBuffer sbSql = new StringBuffer("SELECT cgeneralhid,cgeneralbid ");
    sbSql.append(" FROM ( ");
    //入库的数量
    sbSql.append(sbBase.toString());
    sbSql.append(" AND b.csumid IS NULL AND ("); //未参加过汇总的 单据
    sbSql.append(SE.sInBillCode); //入库单
    sbSql.append(" AND ninnum IS NOT NULL ");
    sbSql.append(" OR ");
    sbSql.append(SE.sOutBillCode); //出库单
    sbSql.append(" AND noutnum IS NOT NULL ");
    //sbSql.append(" OR ");
    //sbSql.append(SE.sTransBillCode); //转出单
    //sbSql.append(" AND COALESCE(noutnum,0.0)>0.0 ");
    sbSql.append(" ) ");
    //sbSql.append(")) AS vmisum");
    sbSql.append(") AS vmisum");

    //group by
    nc.vo.scm.pub.SCMEnv.out("VMI getSumDetailSql:" + sbSql.toString());
    return sbSql.toString();
  }

  /**
   * 构造查询出库明细sql
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   */
  protected String getSumDetailSql(QryConditionVO voCond) throws SQLException {

    if (voCond == null || voCond.getParam(VmiSumVO.OPI_POLICY) == null
        || voCond.getStrParam(VmiSumVO.SPI_SUMID) == null) {
      nc.vo.scm.pub.SCMEnv.out("sum:param null");
      return null;
    }
    String sPk_corp = voCond.getStrParam(VmiSumVO.SPI_CORP); //corp id
    String sCalbodyid = voCond.getStrParam(VmiSumVO.SPI_CALBODY);
    String sWarehouseid = voCond.getStrParam(VmiSumVO.SPI_WH);
    String sVendorid = voCond.getStrParam(VmiSumVO.SPI_VENDORID);
    String sInvid = voCond.getStrParam(VmiSumVO.SPI_INVID);
    String sSumid = voCond.getStrParam(VmiSumVO.SPI_SUMID); //汇总的ID，在表体行
    ////2003-02-11
    //String sTransIsConsume= voCond.getStrParam(VmiSumVO.SPI_TRANSISCONSUN);

    VmiSumpolicyVO voPolicy = (VmiSumpolicyVO) voCond
        .getParam(VmiSumVO.OPI_POLICY);
    //汇总条件
    boolean bLot = false, bAstuom = false, bFreeitem = false; //, bVmiinv = false;

    if (voPolicy.getLot() != null)
      bLot = voPolicy.getLot().booleanValue();
    if (voPolicy.getAstuom() != null)
      bAstuom = voPolicy.getAstuom().booleanValue();
    if (voPolicy.getFreeitem() != null)
      bFreeitem = voPolicy.getFreeitem().booleanValue();
    //if (voPolicy.getVmi_only() != null)
    //bVmiinv = voPolicy.getVmi_only().booleanValue();
    //出库明细汇总条件：	//用料部门	//成本对象	//工序	//生产定单	//项目	//项目阶段
    boolean bDept = false, bCostObject = false, bWorkproc = false, bPrdorder = false, bPrj = false, bPrjphase = false;
    if (voPolicy.getDept() != null)
      bDept = voPolicy.getDept().booleanValue();

    if (voPolicy.getCostobject() != null)
      bCostObject = voPolicy.getCostobject().booleanValue();

    if (voPolicy.getWorkproc() != null)
      bWorkproc = voPolicy.getWorkproc().booleanValue();

    if (voPolicy.getPrdorder() != null) //需要特殊处理
      bPrdorder = voPolicy.getPrdorder().booleanValue();

    if (voPolicy.getPrj() != null)
      bPrj = voPolicy.getPrj().booleanValue();

    if (voPolicy.getPrjphase() != null)
      bPrjphase = voPolicy.getPrjphase().booleanValue();

    StringBuffer sbBaseFromWhere = new StringBuffer();
    //-- from
    sbBaseFromWhere.append(SE.sFromBase);
    ////只汇总vmi存货，需要关联存货管理档案
    //if (bVmiinv)
    //sbBaseFromWhere.append(SE.sJoinInvMan);
    //where
    sbBaseFromWhere.append(SE.sWhereBase);
    sbBaseFromWhere.append(" AND b.csumid='");
    sbBaseFromWhere.append(sSumid);
    sbBaseFromWhere
        .append("'  And h.cwarehouseid in(Select pk_stordoc from bd_stordoc where isgathersettle='Y' and iscalculatedinvcost='Y') ");//isforeignstor='Y' AND

    //根据汇总条件加入的项
    StringBuffer sbCondFields = new StringBuffer();
    //if (bLot)
    //sbCondFields.append(",vbatchcode");//not contains vbatchcode:------>vlot
    if (bAstuom)
      sbCondFields.append(",castunitid");
    if (bFreeitem)
      sbCondFields.append("," + SE.sAllFreeItem);
    //boolean bDept=false,bCostObject=false,bWorkproc=false,bPrdorder=false,bPrj=false,bPrjphase=false;
    if (bDept)
      sbCondFields.append(",cdptid");
    if (bCostObject)
      sbCondFields.append(",ccostobject");
    if (bWorkproc)
      sbCondFields.append(",cwp");
    if (bPrj)
      sbCondFields.append(",cprojectid");
    if (bPrjphase)
      sbCondFields.append(",cprojectphaseid");

    //group by constant sql
    StringBuffer sbConstGroupby = new StringBuffer(
        ",pk_calbody,cwarehouseid,b.cinventoryid");
    if (bLot)
      sbConstGroupby.append(",vbatchcode");
    sbConstGroupby.append(sbCondFields.toString());

    StringBuffer sbSql = new StringBuffer(
        "SELECT pk_corp,cvendorid,ccalbodyid,cwarehouseid,cinventoryid");
    //根据汇总条件加入的项
    if (bLot)
      sbSql.append(",vbatchcode AS vlot");
    sbSql.append(sbCondFields);
    if (bPrdorder)
      sbSql.append(",cprdorderid");
    //sbSql.append(",SUM(ninnum) AS ninnum");
    //sbSql.append(",SUM(ninoutnum) AS ninoutnum");
    sbSql.append(",cbilltypecode");
    sbSql.append(",SUM(noutnum) AS nnum");
    //sbSql.append(",SUM(noutinnum) AS noutinnum");
    //sbSql.append(",SUM(ntransnum) AS ntransnum");
    sbSql.append(" FROM ( ");
    //不带生产订单的出库数量-----------------------------------------
    sbSql
        .append(" SELECT h.pk_corp,h.cbilltypecode,b.cvendorid,pk_calbody AS ccalbodyid,cwarehouseid,b.cinventoryid");
    //根据汇总条件加入的项
    if (bLot)
      sbSql.append(",vbatchcode");
    sbSql.append(sbCondFields);
    if (bPrdorder)
      sbSql.append(",NULL AS cprdorderid");

    //sbSql.append(",NULL AS ninitnum");
    //sbSql.append(",0.0 AS ninnum");
    //sbSql.append(",0.0 AS ninoutnum");
    //sbSql.append(",0.0 AS noutnum");
    sbSql.append(",noutnum");
    //sbSql.append(",0.0 AS ntransnum");
    //sbSql.append(",NULL AS nfinalnum");
    //-- from -where
    sbSql.append(sbBaseFromWhere);

    sbSql.append(" AND (");
    sbSql.append(SE.sOutBillCode); //出库单

    //---出库明细不包括转库
    //sbSql.append(" OR ");
    //sbSql.append(SE.sTransBillCode); //转出单

    sbSql.append(") ");// AND noutnum>0.0"); //nOUTnum is not null刨除退库的数量，所以应包含负数
    sbSql.append(" AND COALESCE(b.csourcetype,'#$')<>'A2' ");
    ////group by
    //sbSql.append(" GROUP BY pk_corp,b.cvendorid");
    //sbSql.append(sbConstGroupby);
    //if(bPrdorder)
    //sbSql.append(",csourcebillhid");

    //生产订单的出库数量-----------------------------------------
    sbSql
        .append(" UNION ALL SELECT h.pk_corp,h.cbilltypecode,b.cvendorid,pk_calbody AS ccalbodyid,cwarehouseid,b.cinventoryid");
    //根据汇总条件加入的项
    if (bLot)
      sbSql.append(",vbatchcode");
    sbSql.append(sbCondFields);
    if (bPrdorder)
      sbSql.append(",csourcebillhid AS cprdorderid");

    //sbSql.append(",NULL AS ninitnum");
    //sbSql.append(",NULL AS ninnum");
    //sbSql.append(",NULL AS ninoutnum");
    //sbSql.append(",NULL AS noutnum");
    sbSql.append(",noutnum");
    //sbSql.append(",NULL AS ntransnum");
    //sbSql.append(",NULL AS nfinalnum");
    //-- from -where
    sbSql.append(sbBaseFromWhere);

    sbSql.append(" AND (");
    sbSql.append(SE.sOutBillCode); //出库单

    //---出库明细不包括转库
    //sbSql.append(" OR ");
    //sbSql.append(SE.sTransBillCode); //转出单

    sbSql.append(") ");//AND noutnum>0.0"); //nOUTnum is not null刨除退库的数量，所以应包含负数
    sbSql.append(" AND COALESCE(b.csourcetype,'#$')='A2'");
    //group by
    //sbSql.append(" GROUP BY pk_corp,b.cvendorid");
    //sbSql.append(sbConstGroupby);
    //if(bPrdorder)
    //sbSql.append(",csourcebillhid");

    sbSql
        .append(" ) AS VMISUM GROUP BY pk_corp,cbilltypecode,cvendorid,ccalbodyid,cwarehouseid,cinventoryid");

    if (bLot)
      sbSql.append(",vbatchcode");
    sbSql.append(sbCondFields);
    if (bPrdorder)
      sbSql.append(",cprdorderid");

    nc.vo.scm.pub.SCMEnv.out("VMI getSumDetailSql:" + sbSql.toString());
    return sbSql.toString();
  }

  /**
   * 构造汇总sql
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   * 修改日期：2003-02-11
   * 修改人：赵宇煌
   * 修改原因：增加对转库是否属于消耗的处理
   */
  protected String getSumSql(QryConditionVO voCond) throws SQLException {

    if (voCond == null || voCond.getParam(VmiSumVO.OPI_POLICY) == null
        || voCond.getStrParam(VmiSumVO.SPI_SUMID) == null) {
      nc.vo.scm.pub.SCMEnv.out("sum:param null");
      return null;
    }
    String sPk_corp = voCond.getStrParam(VmiSumVO.SPI_CORP); //corp id
    String sCalbodyid = voCond.getStrParam(VmiSumVO.SPI_CALBODY);
    String sWarehouseid = voCond.getStrParam(VmiSumVO.SPI_WH);
    String sSumid = voCond.getStrParam(VmiSumVO.SPI_SUMID); //汇总的ID，在表体行

    VmiSumpolicyVO voPolicy = (VmiSumpolicyVO) voCond
        .getParam(VmiSumVO.OPI_POLICY); //汇总条件

    boolean bLot = false, bAstuom = false, bFreeitem = false; //, bVmiinv = false;
    if (voPolicy.getLot() != null)
      bLot = voPolicy.getLot().booleanValue();
    if (voPolicy.getAstuom() != null)
      bAstuom = voPolicy.getAstuom().booleanValue();
    if (voPolicy.getFreeitem() != null)
      bFreeitem = voPolicy.getFreeitem().booleanValue();
    //if (voPolicy.getVmi_only() != null)
    //bVmiinv = voPolicy.getVmi_only().booleanValue();

    StringBuffer sbBaseFromWhere = new StringBuffer();
    //-- from
    sbBaseFromWhere.append(SE.sFromBase);
    ////只汇总vmi存货，需要关联存货管理档案
    //if (bVmiinv)
    //sbBaseFromWhere.append(SE.sJoinInvMan);
    //where
    sbBaseFromWhere.append(SE.sWhereBase);
    sbBaseFromWhere.append(" AND b.csumid='");
    sbBaseFromWhere.append(sSumid);
    sbBaseFromWhere
        .append("' And h.cwarehouseid in(Select pk_stordoc from bd_stordoc where isgathersettle='Y' and iscalculatedinvcost='Y') ");//isforeignstor='Y' AND

    //根据汇总条件加入的项
    StringBuffer sbCondFields = new StringBuffer();
    if (bLot)
      sbCondFields.append(",vbatchcode");
    if (bAstuom)
      sbCondFields.append(",castunitid");
    if (bFreeitem)
      sbCondFields.append("," + SE.sAllFreeItem);

    //group by constant sql
    StringBuffer sbConstGroupby = new StringBuffer(
        ",pk_calbody,cwarehouseid,b.cinventoryid");
    sbConstGroupby.append(sbCondFields.toString());

    StringBuffer sbSql = new StringBuffer(
        "SELECT pk_corp,cvendorid,ccalbodyid,cwarehouseid,cinventoryid");
    //根据汇总条件加入的项
    if (bLot)
      sbSql.append(",vbatchcode AS vlot");
    if (bAstuom)
      sbSql.append(",castunitid");
    if (bFreeitem)
      sbSql.append("," + SE.sAllFreeItem);

    sbSql.append(",SUM(ninnum) AS ninnum");
    sbSql.append(",SUM(ninoutnum) AS ninoutnum");
    sbSql.append(",SUM(noutnum) AS noutnum");
    sbSql.append(",SUM(noutinnum) AS noutinnum");
    sbSql.append(",SUM(ntransnum) AS ntransnum");
    sbSql.append(" FROM ( ");
    //入库的数量-----------------------------------------
    sbSql
        .append("SELECT h.pk_corp,b.cvendorid AS cvendorid,pk_calbody AS ccalbodyid,cwarehouseid,b.cinventoryid");
    //根据汇总条件加入的项
    sbSql.append(sbCondFields);

    //sbSql.append(",0.0 AS ninitnum");
    sbSql.append(",ninnum AS ninnum");
    sbSql.append(",0.0 AS ninoutnum");
    sbSql.append(",0.0 AS noutnum");
    sbSql.append(",0.0 AS noutinnum");
    sbSql.append(",0.0 AS ntransnum");
    //sbSql.append(",0.0 AS nfinalnum");
    //-- from -where
    sbSql.append(sbBaseFromWhere);
    sbSql.append(" AND ");
    sbSql.append(SE.sInBillCode); //入库单
    sbSql.append(" AND ninnum>0.0"); //ninnum is not null
    ////group by
    //sbSql.append(" GROUP BY pk_corp,h.cproviderid");
    //sbSql.append(sbConstGroupby);

    //入库退货的数量----------------------------------------------
    sbSql
        .append(" UNION ALL SELECT h.pk_corp,b.cvendorid AS cvendorid,pk_calbody AS ccalbodyid,cwarehouseid,b.cinventoryid");
    //根据汇总条件加入的项
    sbSql.append(sbCondFields);

    //sbSql.append(",0.0 AS ninitnum");
    sbSql.append(",0.0 AS ninnum");
    sbSql.append(",-(ninnum) AS ninoutnum");
    sbSql.append(",0.0 AS noutnum");
    sbSql.append(",0.0 AS noutinnum");
    sbSql.append(",0.0 AS ntransnum");
    //sbSql.append(",0.0 AS nfinalnum");
    //-- from -where
    sbSql.append(sbBaseFromWhere);
    sbSql.append(" AND ");
    sbSql.append(SE.sInBillCode); //入库单
    sbSql.append(" AND ninnum<0.0"); //ninnum is not null
    ////group by
    //sbSql.append(" GROUP BY pk_corp,h.cproviderid");
    //sbSql.append(sbConstGroupby);
    //出库的数量-----------------------------------------
    sbSql
        .append(" UNION ALL SELECT h.pk_corp,b.cvendorid,pk_calbody AS ccalbodyid,cwarehouseid,b.cinventoryid");
    //根据汇总条件加入的项
    sbSql.append(sbCondFields);

    //sbSql.append(",0.0 AS ninitnum");
    sbSql.append(",0.0 AS ninnum");
    sbSql.append(",0.0 AS ninoutnum");
    sbSql.append(",noutnum AS noutnum");
    sbSql.append(",0.0 AS noutinnum");
    sbSql.append(",0.0 AS ntransnum");
    //sbSql.append(",0.0 AS nfinalnum");
    //-- from -where
    sbSql.append(sbBaseFromWhere);
    sbSql.append(" AND ");
    sbSql.append(SE.sOutBillCode); //出库单

    sbSql.append(" AND noutnum>0.0"); //nOUTnum is not null
    ////group by
    //sbSql.append(" GROUP BY pk_corp,b.cvendorid");
    //sbSql.append(sbConstGroupby);

    //出库退库的数量--------------------------
    sbSql
        .append(" UNION ALL SELECT h.pk_corp,b.cvendorid,pk_calbody AS ccalbodyid,cwarehouseid,b.cinventoryid");
    //根据汇总条件加入的项
    sbSql.append(sbCondFields);

    //sbSql.append(",0.0 AS ninitnum");
    sbSql.append(",0.0 AS ninnum");
    sbSql.append(",0.0 AS ninoutnum");
    sbSql.append(",0.0 AS noutnum");
    sbSql.append(",-(noutnum) AS noutinnum");
    sbSql.append(",0.0 AS ntransnum");
    //sbSql.append(",0.0 AS nfinalnum");
    //-- from -where
    sbSql.append(sbBaseFromWhere);
    sbSql.append(" AND ");
    sbSql.append(SE.sOutBillCode); //出库单
    sbSql.append(" AND noutnum<0.0"); //nOUTnum is not null
    ////group by
    //sbSql.append(" GROUP BY pk_corp,b.cvendorid");
    //sbSql.append(sbConstGroupby);

    sbSql
        .append(" ) AS vmisum GROUP BY pk_corp,cvendorid,ccalbodyid,cwarehouseid,cinventoryid");
    sbSql.append(sbCondFields);

    return sbSql.toString();
  }

  /**
   * 功能：查询截止到当前日期的退货数量
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-9 15:46:48)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param hvo nc.vo.ic.pub.vmi.VmiSumHeaderVO
   */
  public VmiQSumItemVO[] getVmiInOutSum(String sWhereStr) throws SQLException {
    //拼sql
    StringBuffer sql = new StringBuffer();
    sql.append("select b.cinventoryid,h.cwarehouseid,");
    sql.append("b.cvendorid AS cproviderid, sum(b.ninnum) as sumin ");
    sql.append("from ic_general_h h ");
    sql.append("INNER JOIN ic_general_b b ");
    sql.append("on h.cgeneralhid=b.cgeneralhid ");
    sql.append("inner join bd_stordoc ");
    sql.append("on h.cwarehouseid=bd_stordoc.pk_stordoc ");
    sql
        .append("where bd_stordoc.isgathersettle='Y' and bd_stordoc.iscalculatedinvcost='Y' and b.ninnum<0 ");//bd_stordoc.isforeignstor='Y' and
    sql.append("and b.cvendorid is not null and b.csumid is null ");
    sql.append("and b.dr=0 and h.dr=0 and ( ");
    sql.append(SE.sInBillCode);
    sql.append(") ");
    if (sWhereStr != null && sWhereStr.trim().length() > 0) {
      sql.append(sWhereStr);
    }
    sql.append(" group by b.cinventoryid,h.cwarehouseid,");
    sql.append("b.cvendorid ");
    //
    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      ResultSet rs = stmt.executeQuery();
      //
      VmiQSumItemVO vo = null;
      VmiQSumItemVO[] vos = null;
      ArrayList alResult = new ArrayList();
      while (rs.next()) {
        vo = new VmiQSumItemVO();
        // ic_vmi_sum.cinventoryid
        String invid = rs.getString(1);
        vo.setInvMid(invid == null ? null : invid.trim());
        //ic_vmi_sum.cwarehouseid
        String warehouseid = rs.getString(2);
        vo.setWarehouseid(warehouseid == null ? null : warehouseid.trim());
        //ic_vmi_sum.cvendorid
        String venderid = rs.getString(3);
        vo.setCusMid(venderid == null ? null : venderid.trim());

        //sum(ic_vmi_outdetail.nnum) as num
        Object num = rs.getObject(4);
        vo.setninoutnum(num == null ? null : (new UFDouble(num.toString()))
            .multiply(-1));
        //
        alResult.add(vo);
      }
      if (alResult != null && alResult.size() > 0) {
        vos = new VmiQSumItemVO[alResult.size()];
        for (int i = 0; i < alResult.size(); i++) {
          vos[i] = (VmiQSumItemVO) alResult.get(i);
        }
        return vos;
      }

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    return null;
  }

  /**
   * 功能：查询截止到当前日期的入库数量
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-9 15:46:48)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param hvo nc.vo.ic.pub.vmi.VmiSumHeaderVO
   */
  public VmiQSumItemVO[] getVmiInSum(String sWhereStr) throws SQLException {
    //拼sql
    StringBuffer sql = new StringBuffer();
    sql.append("select b.cinventoryid,h.cwarehouseid,");
    sql.append("b.cvendorid AS cproviderid, sum(b.ninnum) as sumin ");
    sql.append("from ic_general_h h ");
    sql.append("INNER JOIN ic_general_b b ");
    sql.append("on h.cgeneralhid=b.cgeneralhid ");
    sql.append("inner join bd_stordoc ");
    sql.append("on h.cwarehouseid=bd_stordoc.pk_stordoc ");
    sql
        .append("where bd_stordoc.isgathersettle='Y' and bd_stordoc.iscalculatedinvcost='Y' and b.ninnum>0 ");//bd_stordoc.isforeignstor='Y' and
    sql.append("and b.cvendorid is not null  and b.csumid is null  ");
    sql.append(" and b.dr=0 and h.dr=0  and (");
    sql.append(SE.sInBillCode);
    sql.append(")");

    if (sWhereStr != null && sWhereStr.trim().length() > 0) {
      sql.append(sWhereStr.trim());
    }
    sql.append(" group by b.cinventoryid,h.cwarehouseid,");
    sql.append("b.cvendorid ");

    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      ResultSet rs = stmt.executeQuery();
      //
      VmiQSumItemVO vo = null;
      VmiQSumItemVO[] vos = null;
      ArrayList alResult = new ArrayList();
      while (rs.next()) {
        vo = new VmiQSumItemVO();
        // ic_vmi_sum.cinventoryid
        String invid = rs.getString(1);
        vo.setInvMid(invid == null ? null : invid.trim());
        //ic_vmi_sum.cwarehouseid
        String warehouseid = rs.getString(2);
        vo.setWarehouseid(warehouseid == null ? null : warehouseid.trim());
        //ic_vmi_sum.cvendorid
        String venderid = rs.getString(3);
        vo.setCusMid(venderid == null ? null : venderid.trim());

        //sum(ic_vmi_outdetail.nnum) as num
        Object num = rs.getObject(4);
        vo.setninnum(num == null ? null : new UFDouble(num.toString()));
        //
        alResult.add(vo);
      }
      if (alResult != null && alResult.size() > 0) {
        vos = new VmiQSumItemVO[alResult.size()];
        for (int i = 0; i < alResult.size(); i++) {
          vos[i] = (VmiQSumItemVO) alResult.get(i);
        }
        return vos;
      }

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    return null;
  }

  /**
   * 功能：查询截止到当前日期的退库数量
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-9 15:46:48)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param hvo nc.vo.ic.pub.vmi.VmiSumHeaderVO
   */
  public VmiQSumItemVO[] getVmiOutInSum(String sWhereStr) throws SQLException {

    StringBuffer sql = new StringBuffer();
    sql.append("select  b.cinventoryid,h.cwarehouseid,");
    sql.append("b.cvendorid,sum(b.noutnum) as sumout ");
    sql.append("from ic_general_h h ");
    sql.append("INNER JOIN ic_general_b b ");
    sql.append("on h.cgeneralhid=b.cgeneralhid ");
    sql.append("inner join bd_stordoc ");
    sql.append("on h.cwarehouseid=bd_stordoc.pk_stordoc ");
    sql
        .append("where bd_stordoc.isgathersettle='Y' and bd_stordoc.iscalculatedinvcost='Y' and b.noutnum<0 ");//bd_stordoc.isforeignstor='Y' and
    sql.append("and b.cvendorid is not null  and b.csumid is null ");
    sql.append(" and b.dr=0 and h.dr=0 ");

    sql.append(" and (");
    sql.append(SE.sOutBillCode);
    sql.append(" ) ");

    if (sWhereStr != null && sWhereStr.trim().length() > 0) {
      sql.append(sWhereStr);
    }
    sql.append(" group by b.cinventoryid,h.cwarehouseid,");
    sql.append("b.cvendorid ");
    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      ResultSet rs = stmt.executeQuery();
      //
      VmiQSumItemVO vo = null;
      VmiQSumItemVO[] vos = null;
      ArrayList alResult = new ArrayList();
      while (rs.next()) {
        vo = new VmiQSumItemVO();
        // ic_vmi_sum.cinventoryid
        String invid = rs.getString(1);
        vo.setInvMid(invid == null ? null : invid.trim());
        //ic_vmi_sum.cwarehouseid
        String warehouseid = rs.getString(2);
        vo.setWarehouseid(warehouseid == null ? null : warehouseid.trim());
        //ic_vmi_sum.cvendorid
        String venderid = rs.getString(3);
        vo.setCusMid(venderid == null ? null : venderid.trim());

        //sum(ic_vmi_outdetail.nnum) as num
        Object num = rs.getObject(4);
        vo.setnoutinnum(num == null ? null : (new UFDouble(num.toString()))
            .multiply(-1));
        //
        alResult.add(vo);
      }
      if (alResult != null && alResult.size() > 0) {
        vos = new VmiQSumItemVO[alResult.size()];
        for (int i = 0; i < alResult.size(); i++) {
          vos[i] = (VmiQSumItemVO) alResult.get(i);
        }
        return vos;
      }

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    return null;
  }

  /**
   * 功能：查询截止到当前日期的出库数量
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-9 15:46:48)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param hvo nc.vo.ic.pub.vmi.VmiSumHeaderVO
   */
  public VmiQSumItemVO[] getVmiOutSum(String sWhereStr) throws SQLException {

    StringBuffer sql = new StringBuffer();
    sql.append("select  b.cinventoryid,h.cwarehouseid,");
    sql.append("b.cvendorid,sum(b.noutnum) as sumout ");
    sql.append("from ic_general_h h ");
    sql.append("INNER JOIN ic_general_b b ");
    sql.append("on h.cgeneralhid=b.cgeneralhid ");
    sql.append("inner join bd_stordoc ");
    sql.append("on h.cwarehouseid=bd_stordoc.pk_stordoc ");
    sql
        .append("where bd_stordoc.isgathersettle='Y' and bd_stordoc.iscalculatedinvcost='Y' and b.noutnum>0 ");//bd_stordoc.isforeignstor='Y' and
    sql.append("and b.cvendorid is not null  and b.csumid is null  ");
    sql.append(" and b.dr=0 and h.dr=0 ");
    sql.append(" and (");
    sql.append(SE.sOutBillCode);
    sql.append(") ");
    if (sWhereStr != null && sWhereStr.trim().length() > 0) {
      sql.append(sWhereStr);
    }
    sql.append(" group by b.cinventoryid,h.cwarehouseid,");
    sql.append("b.cvendorid ");
    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      ResultSet rs = stmt.executeQuery();
      //
      VmiQSumItemVO vo = null;
      VmiQSumItemVO[] vos = null;
      ArrayList alResult = new ArrayList();
      while (rs.next()) {
        vo = new VmiQSumItemVO();
        // ic_vmi_sum.cinventoryid
        String invid = rs.getString(1);
        vo.setInvMid(invid == null ? null : invid.trim());
        //ic_vmi_sum.cwarehouseid
        String warehouseid = rs.getString(2);
        vo.setWarehouseid(warehouseid == null ? null : warehouseid.trim());
        //ic_vmi_sum.cvendorid
        String venderid = rs.getString(3);
        vo.setCusMid(venderid == null ? null : venderid.trim());
        //sum(ic_vmi_outdetail.nnum) as num
        Object num = rs.getObject(4);
        vo.setnoutnum(num == null ? null : new UFDouble(num.toString()));
        //
        alResult.add(vo);
      }
      if (alResult != null && alResult.size() > 0) {
        vos = new VmiQSumItemVO[alResult.size()];
        for (int i = 0; i < alResult.size(); i++) {
          vos[i] = (VmiQSumItemVO) alResult.get(i);
        }
        return vos;
      }

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    return null;
  }

  /**
   * 功能：按参数指定的仓库id取得仓库名称
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-13 20:33:51)
   * 修改日期，修改人，修改原因，注释标志：
   * @return java.util.Hashtable
   * @param sWhereStr java.lang.String
   */
  public Hashtable getWarehouseName(String sWhereStr) throws SQLException {
    //拼sql
    StringBuffer sql = new StringBuffer();
    sql.append("SELECT pk_stordoc, storname FROM bd_stordoc where 1<0 ");
    if (sWhereStr != null && sWhereStr.trim().length() > 0) {
      sql.append(sWhereStr);
    }
    else {
      return null;
    }
    //
    Connection con = null;
    PreparedStatement stmt = null;

    try {
      con = getConnection();
      stmt = con.prepareStatement(sql.toString());
      ResultSet rs = stmt.executeQuery();
      //
      Hashtable htTemp = new Hashtable();
      while (rs.next()) {
        //pk_stordoc
        String pkstordoc = rs.getString(1);
        //storname
        String storname = rs.getString(2);

        //
        if (pkstordoc != null && storname != null) {
          htTemp.put(pkstordoc, storname);
        }
      }
      if (htTemp.size() > 0) {
        return htTemp;
      }

    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    return null;
  }

  /**
   * 向数据库插入一个VO对象。
   *
   * 创建日期：(2002-5-17)
   * @param node nc.vo.ic.pub.vmi.VmiSumItemVO
   * @exception java.sql.SQLException 异常说明。
   */
  protected String insertItem(VmiSumItemVO vmiSumItem[], String sHeaderKey)
      throws java.sql.SQLException, nc.bs.pub.SystemException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "insertItem", new Object[] {
      vmiSumItem
    });
    /*************************************************************/

    String sql = "insert into ic_vmi_outdetail(cvmibid, cvmihid, cbilltypecode, cdptid, ccostobjectid, cwpid, cprojectid, cprojectphaseid, nnum, csmid, nprice, nmny, crsvid1, crsvid2, crsvid3, nrsvnum1, nrsvnum2) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

    String key = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      for (int i = 0; i < vmiSumItem.length; i++) {
        key = getOID();
        // set PK fields:
        stmt.setString(1, key);
        // set non PK fields:
        if (sHeaderKey == null) {
          stmt.setNull(2, Types.CHAR);
        }
        else {
          stmt.setString(2, sHeaderKey);
        }
        if (vmiSumItem[i].getCbilltypecode() == null) {
          stmt.setNull(3, Types.CHAR);
        }
        else {
          stmt.setString(3, vmiSumItem[i].getCbilltypecode());
        }
        if (vmiSumItem[i].getCdptid() == null) {
          stmt.setNull(4, Types.CHAR);
        }
        else {
          stmt.setString(4, vmiSumItem[i].getCdptid());
        }
        if (vmiSumItem[i].getCcostobjectid() == null) {
          stmt.setNull(5, Types.CHAR);
        }
        else {
          stmt.setString(5, vmiSumItem[i].getCcostobjectid());
        }
        if (vmiSumItem[i].getCwpid() == null) {
          stmt.setNull(6, Types.CHAR);
        }
        else {
          stmt.setString(6, vmiSumItem[i].getCwpid());
        }
        if (vmiSumItem[i].getCprojectid() == null) {
          stmt.setNull(7, Types.CHAR);
        }
        else {
          stmt.setString(7, vmiSumItem[i].getCprojectid());
        }
        if (vmiSumItem[i].getCprojectphaseid() == null) {
          stmt.setNull(8, Types.CHAR);
        }
        else {
          stmt.setString(8, vmiSumItem[i].getCprojectphaseid());
        }
        if (vmiSumItem[i].getNnum() == null) {
          stmt.setNull(9, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(9, vmiSumItem[i].getNnum().toBigDecimal());
        }
        if (vmiSumItem[i].getCsmid() == null) {
          stmt.setNull(10, Types.CHAR);
        }
        else {
          stmt.setString(10, vmiSumItem[i].getCsmid());
        }
        if (vmiSumItem[i].getNprice() == null) {
          stmt.setNull(11, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(11, vmiSumItem[i].getNprice().toBigDecimal());
        }
        if (vmiSumItem[i].getNmny() == null) {
          stmt.setNull(12, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(12, vmiSumItem[i].getNmny().toBigDecimal());
        }
        if (vmiSumItem[i].getCrsvid1() == null) {
          stmt.setNull(13, Types.CHAR);
        }
        else {
          stmt.setString(13, vmiSumItem[i].getCrsvid1());
        }
        if (vmiSumItem[i].getCrsvid2() == null) {
          stmt.setNull(14, Types.CHAR);
        }
        else {
          stmt.setString(14, vmiSumItem[i].getCrsvid2());
        }
        if (vmiSumItem[i].getCrsvid3() == null) {
          stmt.setNull(15, Types.CHAR);
        }
        else {
          stmt.setString(15, vmiSumItem[i].getCrsvid3());
        }
        if (vmiSumItem[i].getNrsvnum1() == null) {
          stmt.setNull(16, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(16, vmiSumItem[i].getNrsvnum1().toBigDecimal());
        }
        if (vmiSumItem[i].getNrsvnum2() == null) {
          stmt.setNull(17, Types.INTEGER);
        }
        else {
          stmt.setBigDecimal(17, vmiSumItem[i].getNrsvnum2().toBigDecimal());
        }
        //
        stmt.executeUpdate();
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "insertItem", new Object[] {
      vmiSumItem
    });
    /*************************************************************/

    return key;
  }

  /**
   * 查看指定的汇总id的出库明细纪录中是否有已结算或开票的纪录。
   * 增加未开票的条件，因vmi汇总可形成采购开票
   or coalesce(ntotalinvoicenum,0)<>0 
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumItemVO
   * @param csumid String
   * @exception java.sql.SQLException 异常说明。

   * updated by cqw after v3.0
   根据暂估回写的naccountnum或者naccountmny是否大于零来判断.
   */
  public boolean isSomeItemsSettled(String csumid) throws SQLException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "isAllItemsSettled",
        new Object[] {
          csumid
        });
    /*************************************************************/

    //String sql = "SELECT cvmibid FROM ic_vmi_sum s,ic_vmi_outdetail o WHERE s.cvmihid=o.cvmihid AND csumid = ? AND csmid IS NOT NULL  AND LEN(COALESCE(csmid,''))>0";
    String sql = " select csumid from ic_vmi_sum where csumid=? and (coalesce(naccountmny,0) <>0 or coalesce(naccountnum,0)<>0 or bgaugeflag = 'Y' or coalesce(ntotalinvoicenum,0)<>0 ) and dr=0 ";
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    boolean bIsHave = false;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      stmt.setString(1, csumid);
      rs = stmt.executeQuery();
      //
      if (rs.next()) {
        bIsHave = true;
      }
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "isAllItemsSettled",
        new Object[] {
          csumid
        });
    /*************************************************************/

    return bIsHave;
  }

  /**
   * 功能：查询截止到当前日期的入库数量
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-9 15:46:48)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.pub.vmi.VmiQSumItemVO[]
   * @param hvo nc.vo.ic.pub.vmi.VmiSumHeaderVO
   */
  public String makeVmiSumSql(String sFlag, nc.vo.pub.query.ConditionVO[] cvo,
      VmiSumHeaderVO hvo) throws BusinessException {
    StringBuffer sbfSql = new StringBuffer();
    if (cvo != null && cvo.length > 0) {
      for (int i = 0; i < cvo.length; i++) {
        if (cvo[i].getFieldCode().equals("cproviderid")) {
          if (sFlag.equals("in")) {
            sbfSql.append(" and b.cvendorid='");
          }
          else {
            sbfSql.append(" and b.cvendorid='");
          }
          sbfSql.append(cvo[i].getValue());
          sbfSql.append("' ");
        }
        else if (cvo[i].getFieldCode().equals("cwarehouseid")) {
          sbfSql.append(" and h.cwarehouseid='");
          sbfSql.append(cvo[i].getValue());
          sbfSql.append("' ");
        }
        else if (cvo[i].getFieldCode().equals("cinventoryid")) {
          sbfSql.append(" and b.cinventoryid='");
          sbfSql.append(cvo[i].getValue());
          sbfSql.append("' ");
        }
      }
      if (sbfSql.toString().trim().length() > 0) {
        //if (hvo != null && hvo.getDsumdate() != null) {
        //sbfSql.append(" and h.dbilldate>='");
        //sbfSql.append(hvo.getDsumdate());
        //sbfSql.append("' ");
        //}
        return sbfSql.toString();
      }
      else {
        throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
            .getStrByID("4008other", "UPP4008other-000105")/*@res "查询条件错误！"*/);
      }

    }
    else {
      throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("4008other", "UPP4008other-000106")/*@res "查询条件不能为空！"*/);
    }
  }

  /**
   * 功能：查询指定存货的最后一条汇总记录

   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-6-9 15:46:48)
   * 修改日期，修改人，修改原因，注释标志：
   * @return String
   * @param

   */
  public VmiSumVO[] qryLastSumRecord(VmiSumVO[] voaVmiSum) throws SQLException {
    if (voaVmiSum == null || voaVmiSum.length == 0)
      return null;
    //query
    Vector vResult = new Vector();
    String sSql = null;
    VmiSumHeaderVO voTempHeader = null;
    int size = voaVmiSum.length;
    for (int i = 0; i < size; i++) {
      if (voaVmiSum[i] != null) {
        sSql = getLastSumRecordSql(voaVmiSum[i].getHeaderVO());
        if (sSql != null) {
          voTempHeader = queryHeaderBySql(sSql);
          if (voTempHeader != null)
            vResult.addElement(voTempHeader);
        }
      }

    }
    //prepare return value

    VmiSumVO[] voaRet = null;
    if (vResult.size() > 0) {
      int size2 = vResult.size();
      voaRet = new VmiSumVO[size2];
      for (int i = 0; i < size2; i++) {
        voaRet[i] = new VmiSumVO();
        voaRet[i].setParentVO((VmiSumHeaderVO) vResult.elementAt(i));
      }
    }
    return voaRet;
  }

  /**
   * 查询
   *
   * 创建日期：(2002-5-16)
   * @return nc.vo.ic.pub.vmi.VmiSumItemVO
   * @param cpolicyid String
   * @exception java.sql.SQLException 异常说明。
   */
  public VmiSumVO[] query(QryConditionVO voCond) throws Exception {
    String sql = getQuerySql(voCond);
    if (sql == null) {
      nc.vo.scm.pub.SCMEnv.out("sql null");
      return null;
    }
    //pk_corp,cvendorid,ccalbodyid,cwarehouseid,cinventoryid
    int iHeaderFieldNum = 33;

    VmiSumpolicyVO voPolicy = (VmiSumpolicyVO) voCond
        .getParam(VmiSumVO.OPI_POLICY);
    //汇总条件,用于看表头字段数。
    boolean bLot = false, bAstuom = false, bFreeitem = false; //, bVmiinv = false;
    if (voPolicy.getLot() != null)
      bLot = voPolicy.getLot().booleanValue();
    if (voPolicy.getAstuom() != null)
      bAstuom = voPolicy.getAstuom().booleanValue();
    if (voPolicy.getFreeitem() != null)
      bFreeitem = voPolicy.getFreeitem().booleanValue();
    //调整表头字段数
    if (bLot)
      iHeaderFieldNum++;
    if (bAstuom)
      iHeaderFieldNum += 2;
    if (bFreeitem)
      iHeaderFieldNum += nc.vo.scm.ic.bill.FreeVO.FREE_ITEM_NUM;

    Vector vAllResultData = queryWholeData(sql, iHeaderFieldNum);

    return getResult(vAllResultData, bFreeitem);
  }

  /**
   * 执行指定的sql查找主表
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   */
  protected VmiSumHeaderVO queryHeaderBySql(String sql) throws SQLException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "findHeaderByPrimaryKey",
        new Object[] {
          sql
        });
    /*************************************************************/

    VmiSumHeaderVO vmiSumHeader = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      //
      nc.bs.ic.pub.GenMethod dm = new nc.bs.ic.pub.GenMethod();
      ResultSetMetaData meta = rs.getMetaData();
      if (rs.next()) {
        vmiSumHeader = new VmiSumHeaderVO();
        dm.setData(rs, vmiSumHeader, meta);
      }
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "findHeaderByPrimaryKey",
        new Object[] {
          sql
        });
    /*************************************************************/

    return vmiSumHeader;
  }

  /**
   * 查找完整的主子表信息。
   *
   * 创建日期：(2002-5-16)
   * @return nc.vo.ic.pub.vmi.VmiSumItemVO
   * @param cpolicyid String
   * @exception java.sql.SQLException 异常说明。
   */
  protected Vector queryWholeData(String sql, int iHeaderFieldNum)
      throws SQLException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "sumOutDetails",
        new Object[] {
          sql
        });
    /*************************************************************/

    Connection con = null;
    PreparedStatement stmt = null;
    Vector vResultItemData = new Vector(), vAllResultData = new Vector();
    //出库明细暂存，整个“汇总”暂存.
    VmiSumVO voVmiSum = null;
    VmiSumHeaderVO voVmiSumHead = null, voTempHead = null;
    VmiSumItemVO voVmiSumItem = null;
    VmiSumItemVO[] voaTempVmiSumItem = null;
    Object oTemp = null;
    ResultSet rs = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      ResultSetMetaData meta = rs.getMetaData();
      String sHeadPK = null, sCurHeadPK = null; //拆单用的表头PK
      nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
      while (rs.next()) {
        //表头字段处理
        voVmiSumHead = voTempHead; //save last header. iHeaderFieldNum
        voTempHead = new VmiSumHeaderVO();
        //表头字段数==iHeaderFieldNum
        for (int iHeadField = 1; iHeadField <= iHeaderFieldNum; iHeadField++) {
          oTemp = rs.getObject(iHeadField);
          voTempHead.setAttributeValue(meta.getColumnName(iHeadField)
              .toLowerCase(), oTemp);
        }
        sCurHeadPK = voTempHead.getUniqueKeyHaveSumid();
        //又一张新单据
        if (sCurHeadPK != null && !sCurHeadPK.equals(sHeadPK)) {
          //不是空，则写入。
          if (voVmiSum != null) {
            voVmiSum.setParentVO(voVmiSumHead);
            if (vResultItemData.size() < 1) {
              nc.vo.scm.pub.SCMEnv.out(sCurHeadPK + "bill has no item ERROR!");
              //return null;
            }
            else {
              voaTempVmiSumItem = new VmiSumItemVO[vResultItemData.size()];
              vResultItemData.copyInto(voaTempVmiSumItem);
              voVmiSum.setChildrenVO(voaTempVmiSumItem);
            }
            vAllResultData.add(voVmiSum);

          }
          voVmiSum = new VmiSumVO();
          vResultItemData = new Vector();
          //表头数据，每个单据只读一次。
          sHeadPK = sCurHeadPK;
        }
        //
        //表体数据
        //nc.vo.scm.pub.SCMEnv.out("line "+ooo);
        voVmiSumItem = new VmiSumItemVO();
        gm.setData(rs, voVmiSumItem, meta, iHeaderFieldNum + 1, meta
            .getColumnCount());
        vResultItemData.addElement(voVmiSumItem);
      }
      //最后一张
      if (voVmiSum != null) {
        voVmiSum.setParentVO(voTempHead); //different from other.USE TEMP HEADER
        if (vResultItemData.size() < 1) {
          nc.vo.scm.pub.SCMEnv.out(sCurHeadPK + "bill has no item ERROR!");
          //return null;
        }
        else {
          voaTempVmiSumItem = new VmiSumItemVO[vResultItemData.size()];
          vResultItemData.copyInto(voaTempVmiSumItem);
          voVmiSum.setChildrenVO(voaTempVmiSumItem);
        }
        vAllResultData.add(voVmiSum);
      }

    }
    finally {
      try {
        if (stmt != null) {
          rs.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "sumOutDetails",
        new Object[] {
          sql
        });
    /*************************************************************/
    return vAllResultData;
  }

  /**
   * 汇总主表
   *
   * 创建日期：(2002-5-16)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param cpolicyid String
   * @exception java.sql.SQLException 异常说明。
   */
  public VmiSumVO[] sumHeaders(QryConditionVO voCond) throws Exception {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "sumHeaders", new Object[] {
      voCond
    });
    /*************************************************************/
    VmiSumpolicyVO voPolicy = (VmiSumpolicyVO) voCond
        .getParam(VmiSumVO.OPI_POLICY);
    //汇总条件,用于看表头字段数。
    boolean bLot = false, bAstuom = false, bFreeitem = false; //, bVmiinv = false;
    //if (voPolicy.getLot() != null)
    //bLot = voPolicy.getLot().booleanValue();
    //if (voPolicy.getAstuom() != null)
    //bAstuom = voPolicy.getAstuom().booleanValue();
    if (voPolicy.getFreeitem() != null)
      bFreeitem = voPolicy.getFreeitem().booleanValue();

    String sql = getSumSql(voCond);

    VmiSumHeaderVO voVmiSumHeader = null;
    VmiSumVO voVmiSum = null;
    Connection con = null;
    PreparedStatement stmt = null;
    Vector vResult = new Vector();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      ResultSet rs = stmt.executeQuery();
      ResultSetMetaData meta = rs.getMetaData();
      nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
      //
      while (rs.next()) {
        voVmiSumHeader = new VmiSumHeaderVO();
        gm.setData(rs, voVmiSumHeader, meta);
        voVmiSum = new VmiSumVO();
        voVmiSum.setParentVO(voVmiSumHeader);
        vResult.add(voVmiSum);
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "sumHeaders", new Object[] {
      voCond
    });
    /*************************************************************/
    return getResult(vResult, bFreeitem);
  }

  /**
   * 汇总辅表（出库明细）
   *
   * 创建日期：(2002-5-16)
   * @return nc.vo.ic.pub.vmi.VmiSumItemVO
   * @param cpolicyid String
   * @exception java.sql.SQLException 异常说明。
   */
  public VmiSumVO[] sumOutDetails(QryConditionVO voCond) throws Exception {

    String sql = getSumDetailSql(voCond);
    if (sql == null) {
      nc.vo.scm.pub.SCMEnv.out("sql null");
      return null;
    }

    //pk_corp,cvendorid,ccalbodyid,cwarehouseid,cinventoryid
    int iHeaderFieldNum = 5;

    VmiSumpolicyVO voPolicy = (VmiSumpolicyVO) voCond
        .getParam(VmiSumVO.OPI_POLICY);
    //汇总条件,用于看表头字段数。
    boolean bLot = false, bAstuom = false, bFreeitem = false; //, bVmiinv = false;
    if (voPolicy.getLot() != null)
      bLot = voPolicy.getLot().booleanValue();
    if (voPolicy.getAstuom() != null)
      bAstuom = voPolicy.getAstuom().booleanValue();
    if (voPolicy.getFreeitem() != null)
      bFreeitem = voPolicy.getFreeitem().booleanValue();
    //调整表头字段数
    if (bLot)
      iHeaderFieldNum++;
    if (bAstuom)
      iHeaderFieldNum++;
    if (bFreeitem)
      iHeaderFieldNum += nc.vo.scm.ic.bill.FreeVO.FREE_ITEM_NUM;

    Vector vAllResultData = queryWholeData(sql, iHeaderFieldNum);

    return getResult(vAllResultData, bFreeitem);
  }

  /**
   * 用一个VO对象的属性更新数据库中的值。
   *
   * 创建日期：(2002-5-17)
   * @param vmiSumItem nc.vo.ic.pub.vmi.VmiSumItemVO
   * @exception java.sql.SQLException 异常说明。
   */
  protected void updateBillItemCsumid(String[] saItemId, String sSumid)
      throws java.sql.SQLException, Exception {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "updateBillItemCsumid",
        new Object[] {
            saItemId, sSumid
        });
    /*************************************************************/

    StringBuffer sbSql = new StringBuffer(
        "UPDATE ic_general_b SET csumid=? WHERE 1=1 and csumid is null ");
    //cgeneralbid IN ( ");
    //使用临时表
    sbSql.append(nc.bs.ic.pub.bill.GeneralSqlString.formInSQL("cgeneralbid",
        saItemId));
    //循环写入条件
    //for (int i = 0; i < saItemId.length; i++) {
    //if (saItemId[i] != null) {
    //sbSql.append("'");
    //sbSql.append(saItemId[i]);
    //sbSql.append("',");
    //}
    ////兼容 oracle 的 IN 254 限制。每 200 个 数据 or 一次。
    //if (i > 0 && i % nc.bs.ic.pub.bill.GeneralSqlString.SQL_IN_LIST_LIMIT == 0) {
    //sbSql.append(" '' ) OR cgeneralbid IN ( ");
    //}
    //}
    //加''是为了上面循环结果中最后的","
    //因为ID不可能为'',所以可行。
    //sbSql.append(" '' ) ");

    Connection con = null;
    PreparedStatement stmt = null;
    //因为saItemId不可能为空,所以不用判断.
    int iBodyLen = saItemId.length;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sbSql.toString());
      if (sSumid == null)
        stmt.setNull(1, Types.CHAR);
      else
        stmt.setString(1, sSumid);
      int iupdate = stmt.executeUpdate();
      if (iupdate != iBodyLen) {
        throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
            .getStrByID("4008other", "UPP4008other-000107")/*@res "并发.汇总失败!"*/);
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "updateBillItemCsumid",
        new Object[] {
            saItemId, sSumid
        });
    /*************************************************************/
  }

  /**
   * 通过指定公司和是否结算， 查找最后一次汇总id及日期
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param sCorpID String
   * @exception java.sql.SQLException 异常说明。
   */
  public VmiSumHeaderVO findLastRecordInfo(String sCorpID, String sCalbody,
      String sWh, String sVendorid, String sInvid, String[] sInvClassCodes,
      UFBoolean bSettled) throws SQLException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "findHeaderByPrimaryKey",
        new Object[] {
          sCorpID
        });
    /*************************************************************/
    String sSmStr = " (1=1) "; //default is ' '
    if (bSettled != null) {
      if (bSettled.booleanValue())
        sSmStr = " body.csmid IS NOT NULL";
      else
        sSmStr = " body.csmid IS NULL";
    }

    StringBuffer sbSqlWh = new StringBuffer();
    //有库存组织条件
    if (sCalbody != null) {
      sbSqlWh.append(" AND ccalbodyid='");
      sbSqlWh.append(sCalbody);
      sbSqlWh.append("'");
    }
    //有仓库条件
    if (sWh != null) {
      sbSqlWh.append(" AND cwarehouseid='");
      sbSqlWh.append(sWh);
      sbSqlWh.append("'");
    }
    //有供应尚条件
    if (sVendorid != null) {
      sbSqlWh.append(" AND cvendorid='");
      sbSqlWh.append(sVendorid);
      sbSqlWh.append("'");
    }
    //有存货条件
    if (sInvid != null) {
      sbSqlWh.append(" AND cinventoryid='");
      sbSqlWh.append(sInvid);
      sbSqlWh.append("'");
    }
    //from 2.30  add inv class condition
    if (sInvClassCodes != null && sInvClassCodes.length > 0) {
      sbSqlWh.append(" AND ( ");
      for (int i = 0; i < sInvClassCodes.length; i++)
        if (sInvClassCodes[i] != null) {
          sbSqlWh.append(" invcl.invclasscode LIKE '");
          sbSqlWh.append(sInvClassCodes[i]);
          sbSqlWh.append("%' ");
          sbSqlWh.append(" OR  ");
        }
      sbSqlWh.append(" 1=0 ) ");

    }

    StringBuffer sbSql = new StringBuffer("SELECT head.csumid,head.dsumdate ")
        .append(SE.SQL_FROM_FULL_VMI);

    //from 2.30 add inv class condition
    if (sInvClassCodes != null && sInvClassCodes.length > 0) {
      sbSql.append(SE.SQL_JOIN_INV_EX);
      sbSql.append(SE.SQL_JOIN_INVCL);
    }
    sbSql.append(" WHERE head.dr=0 AND head.pk_corp=? AND ").append(sSmStr)
        .append(sbSqlWh.toString()).append(
            " AND head.dsumdate =(SELECT MAX(dsumdate)  ").append(
            SE.SQL_FROM_FULL_VMI).append(
            " WHERE head.dr=0 AND head.pk_corp=?  AND ").append(sSmStr).append(
            sbSqlWh.toString()).append(" )");

    VmiSumHeaderVO vmiSumHeader = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sbSql.toString());
      stmt.setString(1, sCorpID);
      stmt.setString(2, sCorpID);

      ResultSet rs = stmt.executeQuery();
      //
      if (rs.next()) {
        vmiSumHeader = new VmiSumHeaderVO();
        // csumid :
        String csumid = rs.getString(1);
        vmiSumHeader.setCsumid(csumid == null ? null : csumid.trim());
        // dsumdate :
        String dsumdate = rs.getString(2);
        vmiSumHeader.setDsumdate(dsumdate == null ? null : new UFDate(dsumdate
            .trim()));
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "findHeaderByPrimaryKey",
        new Object[] {
          sCorpID
        });
    /*************************************************************/

    return vmiSumHeader;
  }

  /**
   * 通过指定公司和是否结算， 查找最后一次汇总id及日期
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param sCorpID String
   * @exception java.sql.SQLException 异常说明。
   */
  public VmiSumHeaderVO findLastRecordInfo(String sCorpID, String sCalbody,
      String sWh, String sVendorid, String sInvid, UFBoolean bSettled)
      throws SQLException {

    /*************************************************************/
    // 保留的系统管理接口：
    beforeCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "findHeaderByPrimaryKey",
        new Object[] {
          sCorpID
        });
    /*************************************************************/
    String sSmStr = " (1=1) ";//default is ' '
    if (bSettled != null) {
      if (bSettled.booleanValue())
        sSmStr = " body.csmid IS NOT NULL";
      else
        sSmStr = " body.csmid IS NULL";
    }

    StringBuffer sbSqlWh = new StringBuffer();
    //有库存组织条件
    if (sCalbody != null) {
      sbSqlWh.append(" AND ccalbodyid='");
      sbSqlWh.append(sCalbody);
      sbSqlWh.append("'");
    }
    //有仓库条件
    if (sWh != null) {
      sbSqlWh.append(" AND cwarehouseid='");
      sbSqlWh.append(sWh);
      sbSqlWh.append("'");
    }
    //有供应尚条件
    if (sVendorid != null) {
      sbSqlWh.append(" AND cvendorid='");
      sbSqlWh.append(sVendorid);
      sbSqlWh.append("'");
    }
    //有存货条件
    if (sInvid != null) {
      sbSqlWh.append(" AND cinventoryid='");
      sbSqlWh.append(sInvid);
      sbSqlWh.append("'");
    }
    StringBuffer sbSql = new StringBuffer("SELECT head.csumid,head.dsumdate ")
        .append(SE.SQL_FROM_FULL_VMI).append(
            " WHERE head.dr=0 AND head.pk_corp=? AND ").append(sSmStr).append(
            sbSqlWh.toString()).append(
            " AND head.dsumdate =(SELECT MAX(dsumdate)  ").append(
            SE.SQL_FROM_FULL_VMI).append(
            " WHERE head.dr=0 AND head.pk_corp=?  AND ").append(sSmStr).append(
            sbSqlWh.toString()).append(" )");

    VmiSumHeaderVO vmiSumHeader = null;
    Connection con = null;
    PreparedStatement stmt = null;
    try {
      con = getConnection();
      stmt = con.prepareStatement(sbSql.toString());
      stmt.setString(1, sCorpID);
      stmt.setString(2, sCorpID);

      ResultSet rs = stmt.executeQuery();
      //
      if (rs.next()) {
        vmiSumHeader = new VmiSumHeaderVO();
        // csumid :
        String csumid = rs.getString(1);
        vmiSumHeader.setCsumid(csumid == null ? null : csumid.trim());
        // dsumdate :
        String dsumdate = rs.getString(2);
        vmiSumHeader.setDsumdate(dsumdate == null ? null : new UFDate(dsumdate
            .trim()));
      }
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }

    /*************************************************************/
    // 保留的系统管理接口：
    afterCallMethod("nc.bs.ic.pub.vmi.VmiSumDMO", "findHeaderByPrimaryKey",
        new Object[] {
          sCorpID
        });
    /*************************************************************/

    return vmiSumHeader;
  }

  /**
   * 服务器端得到单据号的方法。
   * 功能：
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-05-15 16:08:55)
   * 修改日期，修改人，修改原因，注释标志：
   */
  private String getBillCode(String billtype, String pkcorp,
      String custbillcode, nc.vo.pub.billcodemanage.BillCodeObjValueVO billVO)
      throws nc.vo.pub.BusinessException {
    //nc.bs.pub.billcodemanage.BillcodeRule bcrbo = null;
    nc.bs.pub.billcodemanage.BillcodeGenerater genBillcode = null;
    try {
      //nc.bs.pub.billcodemanage.BillcodeRuleHome home =
      //(nc
      //.bs
      //.pub
      //.billcodemanage
      //.BillcodeRuleHome) getBeanHome(nc
      //.bs
      //.pub
      //.billcodemanage
      //.BillcodeRuleHome
      //.class,
      //"nc.bs.pub.billcodemanage.BillcodeRuleBO");
      //bcrbo = home.create();
      genBillcode = new nc.bs.pub.billcodemanage.BillcodeGenerater();
      String billcode = genBillcode.getBillCode(billtype, pkcorp, custbillcode,
          billVO);
      return billcode;
    }
    catch (Exception e) {
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException("Caused by:", e);
    }

  }

  /**
   * 构造单据号VO
   * 功能：
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2002-05-15 16:12:39)
   * 修改日期，修改人，修改原因，注释标志：
   */
  private nc.vo.pub.billcodemanage.BillCodeObjValueVO getBillCodeObjVO(
      nc.vo.pub.AggregatedValueObject vo) {
    nc.vo.pub.billcodemanage.BillCodeObjValueVO bcovo = new nc.vo.pub.billcodemanage.BillCodeObjValueVO();
    if (vo != null) {
      VmiSumHeaderVO headvo = (VmiSumHeaderVO) vo.getParentVO();
      if (headvo != null) {
        bcovo.setAttributeValue("公司", headvo.getPk_corp() == null ? "" : headvo
            .getPk_corp());
      }
    }
    return bcovo;
  }

  /**
   * 创建者：余大英
   * 功能：退回单据号
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2001-6-14 9:07:50)
   * 修改日期，修改人，修改原因，注释标志：
   */
  public void returnBillCode(String pk_corp, String vbillcode)
      throws BusinessException {
    //参数检查
    if (pk_corp == null || vbillcode == null)
      return;
    //	//nc.bs.pub.billcodemanage.BillcodeRule bcrbo = null;
    //	nc.bs.pub.billcodemanage.BillcodeGenerater bcrbo = null;
    //	try {
    //		//nc.bs.pub.billcodemanage.BillcodeRuleHome home =
    //			//(nc
    //				//.bs
    //				//.pub
    //				//.billcodemanage
    //				//.BillcodeRuleHome) getBeanHome(nc
    //				//.bs
    //				//.pub
    //				//.billcodemanage
    //				//.BillcodeRuleHome
    //				//.class,
    //				//"nc.bs.pub.billcodemanage.BillcodeRuleBO");
    //		//bcrbo = home.create();
    //		bcrbo = new nc.bs.pub.billcodemanage.BillcodeGenerater();
    //		nc.vo.pub.billcodemanage.BillCodeObjValueVO bcovo =
    //			new nc.vo.pub.billcodemanage.BillCodeObjValueVO();
    //
    //		bcovo.setAttributeValue("公司", pk_corp);
    //		bcrbo.returnBillCode(pk_corp, BillTypeConst.IC_VMI, vbillcode, bcovo);
    //		return;
    //
    //	} catch (Exception e) {
    //		nc.vo.scm.pub.SCMEnv.error(e);
    //		throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008other","UPP4008other-000109")/*@res "退回单据号出错！"*/);
    //	}
  }

  /**
   * 创建者：余大英
   * 功能：退回单据号
   * 参数：
   * 返回：
   * 例外：
   * 日期：(2001-6-14 9:07:50)
   * 修改日期，修改人，修改原因，注释标志：
   */
  public void returnBillCode(VmiSumVO voBill) throws BusinessException {
    //参数检查
    if (voBill == null)
      return;
    //	//nc.bs.pub.billcodemanage.BillcodeRule bcrbo = null;
    //	nc.bs.pub.billcodemanage.BillcodeGenerater bcrbo = null;
    //	VmiSumHeaderVO vohead = (VmiSumHeaderVO)voBill.getParentVO();
    //	if (vohead == null)
    //		return;
    //	try {
    //		//nc.bs.pub.billcodemanage.BillcodeRuleHome home =
    //			//(nc
    //				//.bs
    //				//.pub
    //				//.billcodemanage
    //				//.BillcodeRuleHome) getBeanHome(nc
    //				//.bs
    //				//.pub
    //				//.billcodemanage
    //				//.BillcodeRuleHome
    //				//.class,
    //				//"nc.bs.pub.billcodemanage.BillcodeRuleBO");
    //		//bcrbo = home.create();
    //		bcrbo = new nc.bs.pub.billcodemanage.BillcodeGenerater();
    //		bcrbo.returnBillCode(vohead.getPk_corp(),BillTypeConst.IC_VMI, vohead.getVbillcode(),getBillCodeObjVO(voBill));
    //		return ;
    //
    //	} catch (Exception e) {
    //		nc.vo.scm.pub.SCMEnv.error(e);
    //		throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008other","UPP4008other-000109")/*@res "退回单据号出错！"*/);
    //	}
  }

  /**
   * 创建者：余大英
   * 功能：如果新增单据没有单据号，自动获取单据号
   * 参数：
   * 返回：提示信息
   * 例外：
   * 日期：(2001-6-14 9:07:50)
   * 修改日期，修改人，修改原因，注释标志：
   */
  public void setBillCode(VmiSumVO voBill) throws BusinessException {
    //参数检查
    if (voBill == null || !(voBill instanceof VmiSumVO))
      return;
    VmiSumVO vo = (VmiSumVO) voBill;

    if (vo.getHeaderVO() == null)
      return;
    try {

      //区分新增还是修改用单据PK
      VmiSumHeaderVO voHead = vo.getHeaderVO();
      String sBillPK = (String) voHead.getPrimaryKey();
      String sBillCode = voHead.getVbillcode();
      //没有单据PK表明是新增保存.
      if (sBillPK == null) {
        if (sBillCode == null || sBillCode.trim().length() == 0) {
          //如果没有单据号，则利用单据号规则，生成单据号，置入单据VO中。
          sBillCode = getBillCode(BillTypeConst.IC_VMI, voHead.getPk_corp(),
              sBillCode, getBillCodeObjVO(vo));
          voHead.setVbillcode(sBillCode);

        }

      }

    }
    catch (Exception e) {
      //		reportException(e);
      throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
          .getStrByID("4008other", "UPP4008other-000110")/*@res "获取单据号失败！"*/);

    }
    return;
  }

  /**
   * 此处插入方法说明。
   * VMI反暂回写
   * 创建日期：(2004-3-2 11:17:23)
   * @param saVMIHid java.lang.String[]
   * @exception nc.vo.pub.BusinessException 异常说明。
   */
  public void writeBackToVMIAntiEsti(String[] saVMIHid)
      throws BusinessException {
    if (saVMIHid == null || saVMIHid.length <= 0)
      return;
    int iLen = saVMIHid.length;
    Connection con = null;
    PreparedStatement stmt = null;
    String sVmiHid = null;
    String sql = "update ic_vmi_sum set bgaugeflag = 'N',dgaugedate = NULL,nprice = NULL,nmoney = NULL where cvmihid = ?";
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      for (int i = 0; i < iLen; i++) {
        sVmiHid = saVMIHid[i];
        if (sVmiHid == null || sVmiHid.length() == 0)
          continue;
        else
          stmt.setString(1, sVmiHid);
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    catch (Exception e) {
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException("Caused by:", e);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
  }

  /**
   * 此处插入方法说明。
   * VMI反结算(作废结算单)回写
   * 创建日期：(2004-3-2 11:19:17)
   * @param paraVos nc.vo.ic.pub.vmi.ParaVOSettleToVMI[]
   * @exception nc.vo.pub.BusinessException 异常说明。
   */
  public void writeBackToVMIAntiSettle(ParaVOSettleToVMI[] paraVos)
      throws BusinessException {
    if (paraVos == null || paraVos.length <= 0)
      return;
    int iLen = paraVos.length;
    Connection con = null;
    PreparedStatement stmt = null;
    ParaVOSettleToVMI voTemp = null;
    String sql = "update ic_vmi_sum set bsettleendflag = 'N',naccountnum = coalesce(naccountnum,0) + (?),naccountmny = coalesce(naccountmny,0) + (?) where cvmihid = ?";
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);

      BigDecimal zero = new BigDecimal(0);

      for (int i = 0; i < iLen; i++) {
        voTemp = paraVos[i];
        if (voTemp.getNNum() == null) {
          stmt.setBigDecimal(1, zero);
        }
        else {
          stmt.setBigDecimal(1, voTemp.getNNum().toBigDecimal());
        }
        if (voTemp.getNMoney() == null) {
          stmt.setBigDecimal(2, zero);
        }
        else {
          stmt.setBigDecimal(2, voTemp.getNMoney().toBigDecimal());
        }
        if (voTemp.getSVMIHId() == null) {
          stmt.setNull(3, Types.CHAR);
        }
        else {
          stmt.setString(3, voTemp.getSVMIHId());
        }
        executeUpdate(stmt);
      }
      executeBatch(stmt);
    }
    catch (Exception e) {
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException("Caused by:", e);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
  }

  /**
   * 此处插入方法说明。
   * VMI暂估回写
   * 创建日期：(2004-3-2 11:16:15)
   * @param saParaVo nc.vo.ic.pub.vmi.ParaVOEstiToVMI[]
   * @exception nc.vo.pub.BusinessException 异常说明。
   */
  public void writeBackToVMIEsti(ParaVOEstiToVMI[] saParaVo)
      throws BusinessException {
    if (saParaVo == null || saParaVo.length <= 0)
      return;
    int iLen = saParaVo.length;
    Connection con = null;
    PreparedStatement stmt = null;
    ParaVOEstiToVMI voTemp = null;
    String sql = "update ic_vmi_sum set bgaugeflag = 'Y', dgaugedate = ?,nprice = ?,nmoney = ? where cvmihid = ?";
    Hashtable hthid = new Hashtable();
    boolean isBatchExec = false;
    try {
      con = getConnection();
      stmt = prepareStatement(con, sql);
      for (int i = 0; i < iLen; i++) {
        voTemp = saParaVo[i];
        if (voTemp.getDEsti() == null) {
          stmt.setNull(1, Types.DATE);
        }
        else {
          stmt.setString(1, voTemp.getDEsti().toString());
        }
        if (voTemp.getNPrice() == null) {
          stmt.setNull(2, Types.DECIMAL);
        }
        else {
          stmt.setBigDecimal(2, voTemp.getNPrice().toBigDecimal());
        }
        if (voTemp.getNMoney() == null) {
          stmt.setNull(3, Types.DECIMAL);
        }
        else {
          stmt.setBigDecimal(3, voTemp.getNMoney().toBigDecimal());
        }
        if (voTemp.getSVmiHid() == null) {
          stmt.setNull(4, Types.CHAR);
        }
        else {
          stmt.setString(4, voTemp.getSVmiHid());
        }
        int iupdate = executeUpdate(stmt);
        //判断是否是批量执行.
        //iupdate如果返回-1,那肯定是批量执行.如果返回的是0或者1那肯定就不是批量执行.
        if (iupdate == -1)
          isBatchExec = true;
        if (iupdate == 0)
          throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
              .getStrByID("4008other", "UPP4008other-000111")/*@res "数据可能被删除,不能暂估!"*/);

        if (voTemp.getSVmiHid() != null) {
          if (!hthid.containsKey(voTemp.getSVmiHid()))
            hthid.put(voTemp.getSVmiHid(), "");
        }
        else {
          throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
              .getStrByID("4008other", "UPP4008other-000112")/*@res "传入ID为空,不能暂估!"*/);
        }
      }
      int icount[] = executeBatch(stmt);
      if (isBatchExec) {
        int iupdatecount = 0;
        if (icount != null)
          iupdatecount = icount.length;
        int iidsize = hthid.size();
        if (iupdatecount != iidsize) {
          throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
              .getStrByID("4008other", "UPP4008other-000111")/*@res "数据可能被删除,不能暂估!"*/);
        }
      }
    }
    catch (Exception e) {
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException("Caused by:", e);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
  }

  /**
   * 此处插入方法说明。
   * VMI结算回写
   * 创建日期：(2004-3-2 11:18:00)
   * @param paraVos nc.vo.ic.pub.vmi.ParaVOSettleToVMI[]
   * @exception nc.vo.pub.BusinessException 异常说明。
   */
  public void writeBackToVMISettle(ParaVOSettleToVMI[] paraVos)
      throws BusinessException {

	    if (paraVos == null || paraVos.length <= 0)
	      return;
	    int iLen = paraVos.length;
	    Connection con = null;
	    PreparedStatement stmt = null;
	    //PreparedStatement stmt2 = null;
	    ParaVOSettleToVMI voTemp = null;
	    //Hashtable hthid = new Hashtable();
	    String sql = "update ic_vmi_sum set naccountnum = coalesce(naccountnum,0) + (?),naccountmny = coalesce(naccountmny,0) + (?) where cvmihid = ?";
	    //modified by liuzy 2008-01-07 解决消耗汇总结算入库退回和出库退回的结算完成后仍能查出来的问题
//	    String sql2 = "update ic_vmi_sum set bsettleendflag='Y' where cvmihid = ? and (noutnum - naccountnum = 0 or  abs(ninoutnum)-abs(naccountnum)=0 ) ";
	    String sql2 = "update ic_vmi_sum set bsettleendflag='Y' where cvmihid = ? " +
	    "and (noutnum - naccountnum = 0 or " +
	    "abs(ninoutnum)-abs(naccountnum)=0 or " +
	    "abs(noutinnum)-abs(naccountnum)=0 or " +
	    "noutnum - abs(noutinnum) - abs(naccountnum) = 0 ) ";
	    
	    boolean isBatchExec = false;
	    try {
	      con = getConnection();
	      stmt = prepareStatement(con, sql);
	      BigDecimal zero = new BigDecimal(0);

	      for (int i = 0; i < iLen; i++) {
	        voTemp = paraVos[i];
	        if (voTemp.getNNum() == null) {
	          stmt.setBigDecimal(1, zero);
	        }
	        else {
	          stmt.setBigDecimal(1, voTemp.getNNum().toBigDecimal());
	        }
	        if (voTemp.getNMoney() == null) {
	          stmt.setBigDecimal(2, zero);
	        }
	        else {
	          stmt.setBigDecimal(2, voTemp.getNMoney().toBigDecimal());
	        }
	        if (voTemp.getSVMIHId() == null) {
	          stmt.setNull(3, Types.CHAR);
	        }
	        else {
	          stmt.setString(3, voTemp.getSVMIHId());
	        }
	        int iupdate = executeUpdate(stmt);
	        //判断是否是批量执行.
	        //iupdate如果返回-1,那肯定是批量执行.如果返回的是0或者1那肯定就不是批量执行.
	        if (iupdate == -1)
	          isBatchExec = true;
	        if (iupdate == 0)
	          throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
	              .getStrByID("4008other", "UPP4008other-000111")/*@res "数据可能被删除,不能暂估!"*/);

	        //if(voTemp.getSVMIHId() != null){
	        //if(!hthid.containsKey(voTemp.getSVMIHId()))
	        //hthid.put(voTemp.getSVMIHId(),"");
	        //}else{
	        //throw new BusinessException("传入ID为空,不能暂估!");
	        //}
	      }
	      int icount[] = executeBatch(stmt);
	      if (isBatchExec) {
	        int iupdatecount = 0;
	        if (icount != null)
	          iupdatecount = icount.length;
	        if (iupdatecount != iLen) {
	          throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
	              .getStrByID("4008other", "UPP4008other-000111")/*@res "数据可能被删除,不能暂估!"*/);
	        }
	      }
	      stmt = prepareStatement(con, sql2);
	      for (int i = 0; i < iLen; i++) {
	        voTemp = paraVos[i];
	        if (voTemp.getSVMIHId() == null) {
	          stmt.setNull(1, Types.CHAR);
	        }
	        else {
	          stmt.setString(1, voTemp.getSVMIHId());
	        }
	        executeUpdate(stmt);
	      }
	      executeBatch(stmt);
	    }
	    catch (Exception e) {
	      if (e instanceof BusinessException)
	        throw (BusinessException) e;
	      else
	        throw new BusinessException("Caused by:", e);
	    }
	    finally {
	      try {
	        if (stmt != null) {
	          stmt.close();
	        }
	      }
	      catch (Exception e) {
	      }
	      try {
	        if (con != null) {
	          con.close();
	        }
	      }
	      catch (Exception e) {
	      }
	    }
  }

  /**
   * 以存货uk为key,以voaLast数组的索引放到一个hashtable.
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   */
  protected Hashtable getHashByInvUk(VmiSumVO[] voaLast) throws Exception {
    Hashtable htLast = new Hashtable();
    if (voaLast != null && voaLast.length > 0) { //加数等于null，返回被加数。
      //把voLast防到hashtable:key=head unique key,value=index
      VmiSumHeaderVO voHeader = null;
      String sUk = null;
      int size = voaLast.length;
      for (int i = 0; i < size; i++) {
        if (voaLast[i] != null) {
          voHeader = voaLast[i].getHeaderVO();
          if (voHeader != null) {
            sUk = voHeader.getUniqueKey();
            if (sUk != null) {
              if (htLast.containsKey(sUk))
                nc.vo.scm.pub.SCMEnv.out("has" + i + " in "
                    + ((Integer) htLast.get(sUk)));
              else {
                htLast.put(sUk, new Integer(i));
                //nc.vo.scm.pub.SCMEnv.out("put" + i);
              }
            }
            else
              nc.vo.scm.pub.SCMEnv.out("cannot put into hash:" + i);
          }
          else
            nc.vo.scm.pub.SCMEnv.out("cannot put into hash:" + i);
        }
        else
          nc.vo.scm.pub.SCMEnv.out("cannot put into hash:" + i);
      }
      if (voaLast.length != htLast.size()) { //++1
        nc.vo.scm.pub.SCMEnv.out("fatal data err." + voaLast.length + " "
            + htLast.size());
        throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver
            .getInstance().getStrByID("4008other", "UPP4008other-000096")/*@res "合并数据出错。"*/);
      }
    }
    return htLast;
  }

  /**
   * 此处插入方法说明。
   * 功能：取消汇总
   * 参数：条件
   * 返回：取消汇总记录
   * 例外：
   * 日期：(2002-5-15 10:22:52)
   * 修改日期，修改人，修改原因，注释标志：
   * @return nc.vo.ic.vmi.VmiSumVO[]
   * @param voCond nc.vo.ic.pub.bill.QryConditionVO
   */
  public VmiSumVO[] queryVMISum(nc.vo.ic.pub.bill.QryConditionVO voCond)
      throws BusinessException {
    if (voCond == null || voCond.getStrParam(VmiSumVO.SPI_CORP) == null //公司
        || voCond.getParam(VmiSumVO.OPI_END_DATE) == null //截止日期
    ) {
      nc.vo.scm.pub.SCMEnv.out("sum:param null");
      return null;
    }
    VmiSumVO voaFinal[] = null;
    try {
      String sPk_corp = voCond.getStrParam(VmiSumVO.SPI_CORP); //corp id
      UFDate dStartDate = null;
      UFDate dEndDate = (UFDate) voCond.getParam(VmiSumVO.OPI_END_DATE);

      //本公司的汇总条件
      VmiSumpolicyDMO dmoPolicy = new VmiSumpolicyDMO();
      VmiSumpolicyVO voPolicy = dmoPolicy.findByCorpID(sPk_corp);
      if (voPolicy == null) //未定义汇总条件，用缺省的。
        voPolicy = new VmiSumpolicyVO();
      voCond.setParam(VmiSumVO.OPI_POLICY, voPolicy);
      voCond.setIntParam(VmiSumVO.IPI_JOIN_TYPE, VmiSumVO.IPVALUE_LEFT_JOIN);//left outer join
      voCond.setIntParam(VmiSumVO.IPI_LAST_RECORD,
          VmiSumVO.IPVALUE_LAST_RECORD_NO);//不只查最后一条汇总记录
      voaFinal = query(voCond);
      nc.vo.scm.pub.smart.ObjectUtils.objectReference(voaFinal);
      //OK
    }
    catch (Exception e) {
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException("Caused by:", e);
    }
    return voaFinal;
  }

  /**
   * 通过存货唯一键 绑定 出库明细
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   */
  protected VmiSumVO[] setInitFinalData(VmiSumVO[] voaThis, VmiSumVO[] voaLast)
      throws Exception {
    if (voaThis == null || voaThis.length == 0) //被加数等于null，返回加数。
      return voaLast;
    //加数等于null，返回被加数。
    VmiSumHeaderVO voHeader = null;
    String sUk = null;
    //把voLast防到hashtable:key=head unique key,value=index
    Hashtable htLast = new Hashtable();
    if (voaLast != null && voaLast.length > 0)
      htLast = getHashByInvUk(voaLast);
    //以左单为基准,看是否有已统计的记录，
    //有: 期初=last的结存数量，结存=期初+in-out+outin-inout-trans
    //无: 表明从未进行消耗结算，所以期初=0 ,结存=in-out+outin-inout-trans
    //
    int iLastIndex = 0;
    int ioutitemtest = 0;
    UFDouble ufd0 = new UFDouble(0.0);
    UFDouble ufdInitNum = ufd0; //期初
    UFDouble ufdInNum = ufd0; //入
    UFDouble ufdInoutNum = ufd0; //退回
    UFDouble ufdOutNum = ufd0; //出
    UFDouble ufdOutinNum = ufd0; //退入
    UFDouble ufdTransNum = ufd0; //转出
    UFDouble ufdFinalNum = ufd0; //结存
    int size = voaThis.length;
    for (int i = 0; i < size; i++)
      if (voaThis[i] != null) {
        voHeader = voaThis[i].getHeaderVO();
        if (voHeader != null) {
          sUk = voHeader.getUniqueKey();
          ufdInitNum = ufd0; //期初
          ufdInNum = ufd0; //入
          ufdInoutNum = ufd0; //退回
          ufdOutNum = ufd0; //出
          ufdOutinNum = ufd0; //退入
          ufdTransNum = ufd0; //转出
          ufdFinalNum = ufd0; //结存
          if (voHeader.getNinnum() != null)
            ufdInNum = voHeader.getNinnum();
          if (voHeader.getNinoutnum() != null)
            ufdInoutNum = voHeader.getNinoutnum();
          if (voHeader.getNoutnum() != null)
            ufdOutNum = voHeader.getNoutnum();
          if (voHeader.getNoutinnum() != null)
            ufdOutinNum = voHeader.getNoutinnum();
          if (voHeader.getNtransnum() != null)
            ufdTransNum = voHeader.getNtransnum();
          //如果找到的话，把出库明细置到left。
          if (sUk != null && htLast != null && htLast.containsKey(sUk)) {
            iLastIndex = ((Integer) htLast.get(sUk)).intValue();
            //有: 期初=last的结存数量，结存=期初+in-outif
            if (voaLast != null
                && voaLast[iLastIndex].getHeaderVO().getNfinalnum() != null)
              ufdFinalNum = voaLast[iLastIndex].getHeaderVO().getNfinalnum();
          }
          //------------- 0000000000 -----------
          if (ufdFinalNum == null)
            ufdFinalNum = ufd0;
          //set value
          voHeader.setNinitnum(ufdFinalNum);
          //结存=期初+in-out+outin-inout-trans
          voHeader.setNfinalnum(ufdFinalNum.add(ufdInNum).sub(ufdOutNum).add(
              ufdOutinNum).sub(ufdInoutNum).sub(ufdTransNum));
        }
      }

    return voaThis;
  }

  /**
   * 以存货uk为key,以voaLast数组的索引放到一个hashtable.
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。

   2002-12-02  改为存index数组
   */
  protected Hashtable getHashByInvUkWithSumid(VmiSumVO[] voaLast)
      throws Exception {
    Hashtable htLast = new Hashtable();
    Vector vInx = null;
    if (voaLast != null && voaLast.length > 0) { //加数等于null，返回被加数。
      //把voLast防到hashtable:key=head unique key,value=index
      VmiSumHeaderVO voHeader = null;
      String sUk = null;
      int size = voaLast.length;
      for (int i = 0; i < size; i++) {
        if (voaLast[i] != null) {
          voHeader = voaLast[i].getHeaderVO();
          if (voHeader != null) {
            sUk = voHeader.getUniqueKeyHaveSumid();
            if (sUk != null) {
              if (htLast.containsKey(sUk)) {
                vInx = (Vector) htLast.get(sUk);
                //nc.vo.scm.pub.SCMEnv.out("has" + i + " in " + ((Integer) htLast.get(sUk)));
              }
              else {
                //new vInx
                vInx = new Vector();
                //nc.vo.scm.pub.SCMEnv.out("put" + i);
              }
              vInx.addElement(new Integer(i));
              htLast.put(sUk, vInx);
            }
            else
              nc.vo.scm.pub.SCMEnv.out("cannot put into hash:" + i);
          }
          else
            nc.vo.scm.pub.SCMEnv.out("cannot put into hash:" + i);
        }
        else
          nc.vo.scm.pub.SCMEnv.out("cannot put into hash:" + i);
      }
      //if (voaLast.length != htLast.size()) { //++1
      //nc.vo.scm.pub.SCMEnv.out("fatal data err." + voaLast.length + " " + htLast.size());
      //throw new nc.vo.pub.BusinessException("合并数据出错。");
      //}
    }
    return htLast;
  }

  /**
   * 通过存货唯一键 绑定 出库明细
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   */
  protected VmiSumVO[] bindOutDetailVO(VmiSumVO[] voaLeft, VmiSumVO[] voaRight)
      throws Exception {
    if (voaLeft == null || voaLeft.length == 0) //被加数等于null，返回加数。
      return voaRight;
    if (voaRight != null && voaRight.length > 0) { //加数等于null，返回被加数。
      VmiSumHeaderVO voHeader = null;
      String sUk = null;
      //把voRight防到hashtable:key=head unique key,value=index
      Hashtable htRight = getHashByInvUkWithSumid(voaRight);
      //以左单为基准加出库明细，正常的话voaRight（表头）应该是voaLeft（表头）的子集。
      int iRightIndex = 0;
      int ioutitemtest = 0;
      Vector vInx = null; //索引数组，可能重的。
      Vector vChildren = null; //辅表们
      VmiSumItemVO voaItem[] = null;
      int size = voaLeft.length;
      for (int i = 0; i < size; i++)
        if (voaLeft[i] != null) {
          voHeader = voaLeft[i].getHeaderVO();
          if (voHeader != null) {
            sUk = voHeader.getUniqueKeyHaveSumid();
            //如果找到的话，把出库明细置到left。
            if (sUk != null && htRight != null && htRight.containsKey(sUk)) {
              vChildren = new Vector();
              vInx = (Vector) htRight.get(sUk);
              //sum all items
              int vinxsize = vInx.size();
              for (int x = 0; x < vinxsize; x++) {
                iRightIndex = Integer.valueOf(vInx.elementAt(x).toString())
                    .intValue();
                voaItem = voaRight[iRightIndex].getItemVOs();
                //save to vector
                if (voaItem != null) {
                  int itemsize = voaItem.length;
                  for (int item = 0; item < itemsize; item++) {
                    vChildren.add(voaItem[item]);
                    ioutitemtest++;
                  }
                }
              }
              if (vChildren.size() > 0) {
                voaItem = new VmiSumItemVO[vChildren.size()];
                vChildren.copyInto(voaItem);
              }
              voaLeft[i].setChildrenVO(voaItem);
            }
          }
        }
      //if (ioutitemtest != voaRight.length) {
      //nc.vo.scm.pub.SCMEnv.out("fatal data err." + ioutitemtest + " " + voaRight.length);
      //throw new nc.vo.pub.BusinessException("合并数据出错。");
      //}
    }
    return voaLeft;
  }

  /**
   * 回写VMI累计开票数量。采购发票调用回写
   * 参数，按行组织
   * Object[][2] 每行的1为String vmipk,2为UFDouble num （单据新增为单据行数量，修改为修改单据行数量的差值，删除为单据行数量取负） 
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   */
  public void writeBackTotalInvoiceNum(Object[][] rows)
      throws BusinessException {
    try {
      if (rows == null || rows.length <= 0)
        return;
      //	汇总数据
      HashMap hsnums = new HashMap();
      UFDouble ntotalinvoicenum = null;
      UFDouble ntemp = null;
      ;
      UFDouble d0 = new UFDouble(0);
      UFBoolean bfalse = new UFBoolean(false), btrue = new UFBoolean(true);
      for (int i = 0, loop = rows.length; i < loop; i++) {
        if (rows[i][0] == null || rows[i][1] == null)
          continue;
        ntemp = (UFDouble) rows[i][1];
        ntotalinvoicenum = (UFDouble) hsnums.get(rows[i][0]);
        if (ntotalinvoicenum == null) {
          hsnums.put(rows[i][0], ntemp);
          continue;
        }
        ntemp = ntemp.add(ntotalinvoicenum);
        hsnums.put(rows[i][0], ntemp);
      }
      if (hsnums.size() <= 0)
        return;

      String[] ids = (String[]) hsnums.keySet().toArray(
          new String[hsnums.size()]);
      String sql = " select cvmihid,noutnum,noutinnum,ntotalinvoicenum,binvoiceendflag from ic_vmi_sum where dr =0 "
          + GeneralSqlString.formInSQL("cvmihid", ids);

      //查询VMI汇总信息
      SmartDMO sdmo = new SmartDMO();
      Object[] qryResults = sdmo.selectBy2(sql);

      if (qryResults == null || qryResults.length <= 0)
        return;

      ArrayList updaterows = new ArrayList();
      ArrayList updaterow = null;
      Object[] ryResultRow = null;
      UFDouble noutnum = null, noutinnum = null;
      String stemp = null;
      for (int i = 0, loop = qryResults.length; i < loop; i++) {
        ryResultRow = (Object[]) qryResults[i];
        if (ryResultRow[0] == null)
          continue;
        stemp = ryResultRow[0].toString();
        if (stemp.trim().length() <= 0)
          continue;
        ntemp = (UFDouble) hsnums.get(stemp);
        if (ntemp == null)
          continue;
        noutnum = ICBusiCtlTools.toUFDouble(ryResultRow[1]);
        if (noutnum == null)
          noutnum = d0;
        noutinnum = ICBusiCtlTools.toUFDouble(ryResultRow[2]);
        if (noutinnum == null)
          noutinnum = d0;
        ntotalinvoicenum = ICBusiCtlTools.toUFDouble(ryResultRow[3]);
        if (ntotalinvoicenum == null)
          ntotalinvoicenum = d0;
        ntotalinvoicenum = ntotalinvoicenum.add(ntemp);
        updaterow = new ArrayList();
        updaterow.add(ntotalinvoicenum);
        //本期出库-本期出库退回-累计开票数量
//        int itemp = noutnum.abs().compareTo(
//            noutinnum.abs().add(ntotalinvoicenum.abs()));
        int itemp = noutnum.sub(noutinnum).abs().compareTo(
                ntotalinvoicenum.abs());
        if (itemp == 0) {
          updaterow.add(btrue);
        }
        else if (itemp > 0) {
          updaterow.add(bfalse);
        }
        else {
          throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
              .getStrByID("40083802", "UPT40083802-000048")
          /*res @"开票数量超过VMI汇总可开票数量！"*/);
        }
        updaterow.add(stemp);
        updaterows.add(updaterow);
      }

      if (updaterows.size() > 0) {
        ArrayList types = new ArrayList();
        types.add(new Integer(SmartFieldMeta.JAVATYPE_UFDOUBLE));
        types.add(new Integer(SmartFieldMeta.JAVATYPE_UFBOOLEAN));
        types.add(new Integer(SmartFieldMeta.JAVATYPE_STRING));

        sdmo
            .executeUpdateBatch(
                " update ic_vmi_sum set ntotalinvoicenum=?,binvoiceendflag=? where cvmihid = ? ",
                updaterows, types);
      }
    }
    catch (Exception e) {
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException("Caused by:", e);
    }

  }

  /**
   * 此处插入方法说明。
   * 功能：汇总

   正出库分别汇总，不用UNION ALL
   1、根据条件得到汇总POLICY，String VmiSumDlg.getSumPolicy( )。
   2、根据policy查找最后一条汇总记录。voLastSum
   (1) voLastSum=null未读到记录，需要重新汇总当前日期前的所有单据。认为期初为零。
   (2)读到记录voLastSum
   <1>汇总日期大于等于当前登录日期，抛出"已有的汇总日期大于等于汇总截止日期，无需汇总。"返回
   <2>用voLastSum的nfinalnum做 新插入记录的ninitnum
   最近的汇总日期sLastSunDate=汇总日期
   3、sNewSumID=getOID(pk_corp)
   4、置需要汇总单据的汇总ID，
   WHERE条件： 汇总ID IS NULL && 业务日期>=最近的汇总日期。
   5、查入库、出库、转库、出库退库数量，UNION ALL
   6、查带明细的出库
   7、以主表汇总字段（辅计量、批次、自由项可选）为KEY,汇总数量的VO 为value放入hashtable。
   8、子算法：在读出的数据处理时，拆出出库明细vo。
   9、把出库明细对到主表中


   * 参数：条件
   * 返回：汇总结果记录
   * 例外：
   * 日期：(2002-5-15 10:22:52)
   * 注释标志：
   * @return nc.vo.ic.vmi.VmiSumVO[]
   * @param voCond nc.vo.ic.pub.bill.QryConditionVO
   */
  public VmiSumVO[] sumVMI(nc.vo.ic.pub.bill.QryConditionVO voCond)
      throws BusinessException {

    if (voCond == null || voCond.getStrParam(VmiSumVO.SPI_CORP) == null //公司
        || voCond.getParam(VmiSumVO.OPI_END_DATE) == null //截止日期
    ) {
      nc.vo.scm.pub.SCMEnv.out("sum:param null");
      return null;
    }
    VmiSumVO voaFinal[] = null;
    try {

      String sPk_corp = voCond.getStrParam(VmiSumVO.SPI_CORP); //corp id
      String sCalbody = voCond.getStrParam(VmiSumVO.SPI_CALBODY); //calbody id
      String sWh = voCond.getStrParam(VmiSumVO.SPI_WH); //warehouse id
      String sVendorid = voCond.getStrParam(VmiSumVO.SPI_VENDORID);//vendorid
      String sInvid = voCond.getStrParam(VmiSumVO.SPI_INVID);//invid

      UFDate dStartDate = null;
      UFDate dEndDate = (UFDate) voCond.getParam(VmiSumVO.OPI_END_DATE);

      VmiSumVO voaLastSum[] = null; //存货最后一次汇总的记录
      VmiSumHeaderVO voHeader = findLastRecordInfo(sPk_corp, sCalbody, sWh,
          sVendorid, sInvid, null);
      if (voHeader != null) { //有原来的记录，不是第一次汇总
        if (voHeader.getDsumdate() != null) //从次日开始查，sql中都用 >=
          dStartDate = voHeader.getDsumdate().getDateAfter(1);
        if (dStartDate != null && dStartDate.after(dEndDate))
          throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver
              .getInstance().getStrByID("4008other", "UPP4008other-000099")/*@res "已有的汇总日期大于等于汇总截止日期，无需汇总。"*/);
        //voCond.setParam(0, dStartDate);
        //voaLastSum = dmoVmi.findBySumid(voHeader.getCsumid());
        //throw new nc.vo.pub.BusinessException("截止日期的汇总数据还未结算，请先取消汇总，然后重新汇总。");
      }
      else {
      }
      //本公司的汇总条件
      VmiSumpolicyDMO dmoPolicy = new VmiSumpolicyDMO();
      VmiSumpolicyVO voPolicy = dmoPolicy.findByCorpID(sPk_corp);
      if (voPolicy == null) { //未定义汇总条件，用缺省的。
        throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
            .getStrByID("4008other", "UPP4008other-000100")/*@res "请先定义汇总条件。"*/);
        //voPolicy = new VmiSumpolicyVO();
      }
      voCond.setParam(VmiSumVO.OPI_POLICY, voPolicy);
      //本次汇总的oid
      String sNewSumid = getOID(sPk_corp);
      //汇总时需要id
      voCond.setStrParam(VmiSumVO.SPI_SUMID, sNewSumid); //汇总的ID，在表体行
      //查询本次需要的汇总的单据表体id
      ArrayList alBillAllId = findSumBillInfo2(voCond);
      if (alBillAllId != null && alBillAllId.size() >= 2
          && alBillAllId.get(0) != null && alBillAllId.get(1) != null) {
        String saSumBillId[] = (String[]) alBillAllId.get(0); //bill id,use for lock.
        String saSumBillBodyId[] = (String[]) alBillAllId.get(1); //bill item id
        if (saSumBillBodyId != null && saSumBillBodyId.length > 0) { //有需要汇总的单据
          //加锁

          //解锁
          //修改之，置汇总标记
          updateBillItemCsumid(saSumBillBodyId, sNewSumid);
          //汇总主表
          VmiSumVO voaSum[] = sumHeaders(voCond);
          //set csumid for it ----->use for compare pk.
          if (voaSum != null) {
            int size = voaSum.length;
            for (int x = 0; x < size; x++) {
              if (voaSum[x] != null && voaSum[x].getHeaderVO() != null)
                voaSum[x].getHeaderVO().setCsumid(sNewSumid);
            }
          }
          //汇总出库明细
          VmiSumVO voaSumOutDetail[] = sumOutDetails(voCond);
          //set csumid for it ----->use for compare pk.
          if (voaSumOutDetail != null) {
            int size = voaSumOutDetail.length;
            for (int x = 0; x < size; x++) {
              if (voaSumOutDetail[x] != null
                  && voaSumOutDetail[x].getHeaderVO() != null)
                voaSumOutDetail[x].getHeaderVO().setCsumid(sNewSumid);
            }
          }
          //合并
          voaFinal = bindOutDetailVO(voaSum, voaSumOutDetail);
          //set init /final data
          voaLastSum = qryLastSumRecord(voaFinal);
          setInitFinalData(voaFinal, voaLastSum);
          if (voaFinal != null) {
            int size = voaFinal.length;
            for (int i = 0; i < size; i++) {
              //置新的sum id
              voaFinal[i].getHeaderVO().setCsumid(sNewSumid);
              voaFinal[i].getHeaderVO().setDsumdate(dEndDate);
              insert(voaFinal[i]);
            }
          }
          //return whole data
          //clear sumid ,use date to query
          //voCond.setStrParam(VmiSumVO.SPI_SUMID, null);
          voaFinal = queryVMISum(voCond);
        }
      }
      //OK
    }
    catch (Exception e) {
      if (e instanceof BusinessException)
        throw (BusinessException) e;
      else
        throw new BusinessException("Caused by:", e);
    }
    return voaFinal;
  }

  /**
   * 通过主键查找一个VO对象。
   *
   * 创建日期：(2002-5-17)
   * @return nc.vo.ic.pub.vmi.VmiSumHeaderVO
   * @param key String
   * @exception java.sql.SQLException 异常说明。
   */
  public VmiSumHeaderVO[] qryVmiHeaderByWhere(String swhere)
      throws javax.naming.NamingException, SystemException, SQLException,
      RemoteException {

    String[] fields = {
        "cvmihid", "dsumdate", "pk_corp", "ccalbodyid", "cwarehouseid",
        "cvendorid", "cinventoryid", "castunitid", "vlot", "vfree1", "vfree2",
        "vfree3", "vfree4", "vfree5", "vfree6", "vfree7", "vfree8", "vfree9",
        "vfree10", "ninitnum", "ninnum", "ninoutnum", "noutnum", "noutinnum",
        "ntransnum", "nfinalnum", "csumid", "crsvid1", "crsvid2", "nrsvnum1",
        "nrsvnum2", "bgaugeflag", "dgaugedate", "nprice", "nmoney",
        "bsettleendflag", "naccountnum", "naccountmny", "vbillcode",
        "ntotalinvoicenum", "binvoiceendflag", "ts"
    };

    ICSmartToolsDmo dmo = new ICSmartToolsDmo();
    //	if(swhere==null || swhere.trim().length()<=0)
    //		swhere = " dr = 0 and binvoiceendflag = 'N' ";
    //	else
    //		swhere += " and dr = 0 and binvoiceendflag = 'N' and noutnum > 0 and coalesce(noutnum,0)>0 ";
    VmiSumHeaderVO[] vmiSumHeaders = (VmiSumHeaderVO[]) dmo.queryVOs(
        "nc.vo.ic.pub.vmi.VmiSumHeaderVO", fields, "ic_vmi_sum", swhere);

    return vmiSumHeaders;
  }
}