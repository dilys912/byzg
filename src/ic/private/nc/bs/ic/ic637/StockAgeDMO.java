/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.ic.ic637;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.naming.NamingException;

import nc.bs.ic.pub.GenMethod;
import nc.bs.ic.pub.PriceDMO;
import nc.bs.ic.pub.monthsum.MonthQuery;
import nc.bs.ic.pub.monthsum.QryConditionCtrl;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.bs.scm.ic.freeitem.DefdefDMO;
import nc.vo.ic.ic637.StockAgeHeaderVO;
import nc.vo.ic.ic637.StockAgeItemVO;
import nc.vo.ic.ic637.StockAgeVO;
import nc.vo.ic.pub.ICGenVO;
import nc.vo.ic.pub.check.CheckTools;
import nc.vo.ic.pub.monthsum.MonthVO;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.query.ConditionVO;
import nc.vo.scm.ic.bill.FreeVO;
import nc.vo.scm.pub.SCMEnv;

/**
 * KlfxH的DMO类。
 *
 * 创建日期：(2001-8-21)
 * @author：仲瑞庆
 */
public class StockAgeDMO extends DataManageObject {
/**
 * KlfxHDMO 构造子注解。
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public StockAgeDMO() throws javax.naming.NamingException, SystemException {
	super();
}
/**
 * KlfxHDMO 构造子注解。
 *
 * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public StockAgeDMO(String dbName) throws javax.naming.NamingException, SystemException {
	super(dbName);
}


/**
 * 创建者：仲瑞庆
 * 功能：将整理出数据插入结果集
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-23 11:44:47)
 * 修改日期，修改人，修改原因，注释标志：
 * @param alReturnValue java.util.ArrayList
 * @param kivos nc.vo.ic.ic637.StockAgeItemVO[]
 */
protected void fillIntoVO(ArrayList alReturnValue, StockAgeItemVO[] kivos) {

	if(alReturnValue==null || alReturnValue.size()<=0)
		return;
	
	HashMap hsinvnum = new HashMap();
	//pk_corp,cwarehouseid,cinventoryid,
	String key = null;
	UFDouble[] values = null;
	int count = ((ArrayList)alReturnValue.get(0)).size()-3;
	ArrayList alReturnValueRow= null;
	for(int i=0,loop=alReturnValue.size();i<loop;i++){
		alReturnValueRow= ((ArrayList) alReturnValue.get(i));
		key = "";
		key+=alReturnValueRow.get(1);
		key+=alReturnValueRow.get(2);
		values = (UFDouble[])hsinvnum.get(key);
		if(values==null){
			values = new UFDouble[count];
			hsinvnum.put(key,values);
		}
		for(int k=0,loopk=values.length;k<loopk;k++){
			values[k]=ICGenVO.addWhenNullAsZero(values[k],(UFDouble)alReturnValueRow.get(3+k));
		}
		
	}
	for (int i= 0; i < kivos.length; i++) {
		key = "";
		key+=kivos[i].getAttributeValue("cwarehouseid");
		key+=kivos[i].getAttributeValue("cinventoryid");
		values = (UFDouble[])hsinvnum.get(key);
		if(values!=null){
			for(int k=0,loopk=values.length;k<loopk;k++){
				if(values[k]==null || values[k].doubleValue()==0)
					continue;
				kivos[i].setAttributeValue(
						StockAgeItemVO.SPREV_dynamic_num + k,values[k]);
			}
		}
	}
	
//	for (int i= 0; i < kivos.length; i++) {
//		alReturnValueRow= ((ArrayList) alReturnValue.get(i));
//		//for (int k= 0; k < alReturnValue.size(); k++) {
//		//if (((ArrayList)alReturnValue.get(k)).get(0).toString().trim().equals(kivos[i].getCwarehousecode())) {
//		//}
//		//}
//		
//		for (int j= 3; j < alReturnValueRow.size(); j++) {
//			if (alReturnValueRow.get(j) == null
//				|| ((UFDouble) alReturnValueRow.get(j)).doubleValue() == 0) {
//			} else {
//				kivos[i].setAttributeValue(
//					StockAgeItemVO.SPREV_dynamic_num + Integer.toString(j - 3).trim(),
//					alReturnValueRow.get(j));
//			}
//		}
//	}
}

/**
 * 创建者：仲瑞庆
 * 功能：整理附加数据，清出库数量，依业务日期早晚而清入库数量
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-22 14:09:49)
 * 修改日期，修改人，修改原因，注释标志：
 * @param alOtherdate java.util.ArrayList
 */
protected void neatenOtherDate(ArrayList alOtherdate) {
	for (int i= 0; i < alOtherdate.size(); i++) {
		UFDouble ufdOutNumber=
			new UFDouble(((ArrayList) alOtherdate.get(i)).get(6).toString().trim());
		if (ufdOutNumber.doubleValue() > 0) {
			int row= 0;
			while (ufdOutNumber.doubleValue() > 0) {
				boolean bIsSame= true;
				//判断是否同一前提
				for (int j= 0; j < 4; j++) {
					if (!((ArrayList) alOtherdate.get(i))
						.get(j)
						.toString()
						.trim()
						.equals(((ArrayList) alOtherdate.get(row)).get(j).toString().trim())) {
						bIsSame= false;
						break;
					}
				}
				if (bIsSame) {
					//进行减值
					UFDouble ufdInnumber=
						new UFDouble(((ArrayList) alOtherdate.get(row)).get(5).toString().trim());
					if (ufdInnumber.doubleValue() >= ufdOutNumber.doubleValue()) {
						ufdInnumber= ufdInnumber.sub(ufdOutNumber);
						((ArrayList) alOtherdate.get(row)).set(5, ufdInnumber);
						ufdOutNumber= new UFDouble("0");
					} else {
						ufdOutNumber= ufdOutNumber.sub(ufdInnumber);
						((ArrayList) alOtherdate.get(row)).set(5, new UFDouble("0"));
					}
				}
				row++;
				if (row >= alOtherdate.size())
					break;
			}
			((ArrayList) alOtherdate.get(i)).set(6, ufdOutNumber);
		}
	}
}

/**
 * 创建者：仲瑞庆
 * 功能：对预警分析，整理出入库数据，清出库数量，依业务日期早晚而清入库数量
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-22 14:09:49)
 * 修改日期，修改人，修改原因，注释标志：
 * @param alOtherdate java.util.ArrayList
 */
protected void neatenYjfxDate(ArrayList alOtherdate) {
	for (int i= 0; i < alOtherdate.size(); i++) {
		Object obj= ((StockAgeItemVO) alOtherdate.get(i)).getAttributeValue("noutnum");
		UFDouble ufdOutNumber= null;
		if (obj != null) {
			ufdOutNumber= new UFDouble(obj.toString().trim());
		} else {
			ufdOutNumber= new UFDouble(0);
		}
		if (ufdOutNumber.doubleValue() > 0) {
			int row= 0;
			while (ufdOutNumber.doubleValue() > 0) {
				boolean bIsSame= true;
				//判断是否同一前提
				StockAgeItemVO kivoOut= ((StockAgeItemVO) alOtherdate.get(i));
				StockAgeItemVO kivoIn= ((StockAgeItemVO) alOtherdate.get(row));
				for (int j= 0; j < 4; j++) {
					if (!((kivoOut.getCwarehousecode() == null ? "" : kivoOut.getCwarehousecode())
						.equals((kivoIn.getCwarehousecode() == null ? "" : kivoIn.getCwarehousecode()))
						&& (kivoOut.getCinventorycode() == null ? "" : kivoOut.getCinventorycode()).equals(
							(kivoIn.getCinventorycode() == null ? "" : kivoIn.getCinventorycode()))
						&& (kivoOut.getCastunitname() == null ? "" : kivoOut.getCastunitname()).equals(
							(kivoIn.getCastunitname() == null ? "" : kivoIn.getCastunitname()))
						&& (kivoOut.getVbatchcode() == null ? "" : kivoOut.getVbatchcode()).equals(
							(kivoIn.getVbatchcode() == null ? "" : kivoIn.getVbatchcode()))
						&& (
							kivoOut.getAttributeValue("vfree0") == null
								? ""
								: kivoOut.getAttributeValue("vfree0")).equals(
							(kivoIn.getAttributeValue("vfree0") == null
								? ""
								: kivoIn.getAttributeValue("vfree0"))))) {
						bIsSame= false;
						break;
					}
				}
				if (bIsSame) {
					//进行减值
					UFDouble ufdInnumber=
						new UFDouble(
							((StockAgeItemVO) alOtherdate.get(row))
								.getAttributeValue("ninnum")
								.toString()
								.trim());
					if (ufdInnumber.doubleValue() >= ufdOutNumber.doubleValue()) {
						ufdInnumber= ufdInnumber.sub(ufdOutNumber);
						((StockAgeItemVO) alOtherdate.get(row)).setAttributeValue("ninnum", ufdInnumber);
						ufdOutNumber= new UFDouble("0");
					} else {
						ufdOutNumber= ufdOutNumber.sub(ufdInnumber);
						((StockAgeItemVO) alOtherdate.get(row)).setAttributeValue(
							"ninnum",
							new UFDouble("0"));
					}
				}
				row++;
				if (row >= alOtherdate.size())
					break;
			}
			((StockAgeItemVO) alOtherdate.get(i)).setAttributeValue("noutnum", ufdOutNumber);
		}
	}
}

/**
 * 创建者：仲瑞庆
 * 功能：合并行中数据，清掉所有入库为零的数量，依查询日期段而求和
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-23 8:45:33)
 * 修改日期，修改人，修改原因，注释标志：
 * @param sKlsds java.lang.String[]
 * @param alOtherdate java.util.ArrayList
 */
protected ArrayList packOtherDate(String[] sKlsds, ArrayList alOtherdate,String sLogDate) {
	ArrayList alReturn= new ArrayList();
	ArrayList alReturnRow= new ArrayList();
	boolean bNewLine= true;
	for (int i= 0; i < alOtherdate.size(); i++) {
		if (!bNewLine) {
			//判断是否应做新增行
			for (int j= 0; j < 3; j++) {
				if (!alReturnRow
					.get(j)
					.toString()
					.trim()
					.equals(((ArrayList) alOtherdate.get(i)).get(j).toString().trim())) {
					bNewLine= true;
					break;
				}
			}
		}
		if (bNewLine) {
			alReturnRow= new ArrayList();
			for (int j= 0; j < 3; j++) {
				alReturnRow.add(((ArrayList) alOtherdate.get(i)).get(j));
			}
			//放将要算出的数量,对应于每一时段
			for (int j= 0; j <= sKlsds.length; j++) {
				alReturnRow.add(3 + j, new UFDouble("0"));
			}
			alReturn.add(alReturnRow);
			bNewLine= false;
		}
		//计算并汇总
		//String nowDate= new Date(System.currentTimeMillis()).toString();
		String dateToCaculate=
			(((ArrayList) alOtherdate.get(i)).get(4) == null)
				|| (((ArrayList) alOtherdate.get(i)).get(4).toString().trim().length() == 0)
					? sLogDate
					: ((ArrayList) alOtherdate.get(i)).get(4).toString().trim();
		UFDate ufdNowDate= new UFDate(sLogDate);
		UFDate ufdDateToCaculate= new UFDate(dateToCaculate);
		boolean bHaveFilled= false;
		for (int j= sKlsds.length - 1; j >= 0; j--) {
			UFDouble ufdBetweenDays= new UFDouble(sKlsds[j]);
			if (ufdNowDate.getDaysBetween(ufdDateToCaculate, ufdNowDate)
				> ufdBetweenDays.doubleValue()) {
				alReturnRow.set(
					4 + j,
					((UFDouble) alReturnRow.get(4 + j)).add(
						new UFDouble(((ArrayList) alOtherdate.get(i)).get(5).toString().trim())));
				bHaveFilled= true;
				break;
			}
		}
		if (!bHaveFilled) {
			alReturnRow.set(
				3,
				((UFDouble) alReturnRow.get(3)).add(
					new UFDouble(((ArrayList) alOtherdate.get(i)).get(5).toString().trim())));

		}
		alReturn.set(alReturn.size() - 1, alReturnRow);
	}
	return alReturn;
}

/**
 * 创建者：仲瑞庆
 * 功能：对预警分析，滤掉所有入库为零的数量,及超出天数>0的数量
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-23 8:45:33)
 * 修改日期，修改人，修改原因，注释标志：
 * @param sKlsds java.lang.String[]
 * @param alOtherdate java.util.ArrayList
 */
protected ArrayList packYjfxDate(ArrayList alOtherdate) {
	ArrayList alReturn= new ArrayList();
	for (int i= 0; i < alOtherdate.size(); i++) {
		StockAgeItemVO kivo= (StockAgeItemVO) alOtherdate.get(i);
		Object obj= kivo.getAttributeValue("ninnum");
		UFDouble ufdInNum= new UFDouble(0);
		if (obj != null)
			ufdInNum= new UFDouble(obj.toString().trim());
		if ((ufdInNum.doubleValue() != 0) && (kivo.getWarnoutdays().doubleValue() > 0)) {
			kivo.setXcl(ufdInNum);
			alReturn.add(kivo);
		}
	}
	return alReturn;
}


/**
 * 创建者：仲瑞庆
 * 功能：查出行中主要数据
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-22 8:56:10)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.util.ArrayList
 * @param sWhereClause java.lang.String
 * @exception java.sql.SQLException 异常说明。
 * @exception javax.transaction.SystemException 异常说明。
 * @exception nc.ui.bd.datainit.BusinessException 异常说明。
 */
protected ArrayList queryKlfxMaindataInfo_002(String sWhereClause, String sLoginDate,String sinnerWhere) throws Exception {
	/**
	SELECT 
	--//efef.*,
	
	efef.pk_corp,efef.corpname,efef.cwarehouseid,efef.cwarehousecode,efef.cwarehousename,
	efef.ccalbodyid,efef.ccalbodycode,efef.ccalbodyname,
	efef.cinventoryid,efef.cinventorycode,efef.invname, efef.invspec, efef.invtype, 
	efef.measdocname,efef.cwarehouseclassid,efef.xcl,
	efef.vplanpsn,efef.abctype,
	efef.def1,efef.def2,efef.def3,efef.def4,efef.def5,
	efef.def6,efef.def7,efef.def8,efef.def9,efef.def10,
	efef.def11,efef.def12,efef.def13,efef.def14,efef.def15,
	efef.def16,efef.def17,efef.def18,efef.def19,efef.def20,
	abab.averageinnum7days, cdcd.averageinnum30days 
	from (
	select * from (
	select a.pk_corp,b.unitname as corpname,
	whclass.pk_calbody as ccalbodyid,whclass.bodycode as ccalbodycode,whclass.bodyname as ccalbodyname,
	a.cwarehouseid,c.storcode as cwarehousecode,c.storname as cwarehousename,
	a.cinventoryid,
	inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, 
	meas1.measname AS measdocname, 
	c.pk_calbody as cwarehouseclassid,a.xcl,
	invp.pk_psndoc4 as pk_psndoc4 ,psn.psnname as vplanpsn,invman.abctype as abctype,
	inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5,
	inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10,
	inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15,
	inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20
	FROM (
		--//现存量
		select * from (SELECT pk_corp, cwarehouseid, cinventoryid,
			SUM(COALESCE (ninnum,0.0)) - SUM(COALESCE (noutnum, 0.0)) AS xcl
				  	FROM ic_keep_detail4
					GROUP BY pk_corp, cwarehouseid, cinventoryid
		     ) bb
		WHERE xcl > 0
		  ) a 
	LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp 
	LEFT OUTER JOIN bd_stordoc c
	on a.cwarehouseid=c.pk_stordoc 
		INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody 
	
	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc
	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc 
	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc 
	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl
	 INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and c.pk_calbody = invp.pk_calbody 
	 LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc  	 	
	 	  	 
	) aabb 
	--where whereclause
	)efef 
	LEFT OUTER JOIN (
	--//七日均入库量
		  	SELECT pk_corp, cwarehouseid, cinventoryid, 
			SUM(COALESCE (ninnum, 0.0)) / 7 AS averageinnum7days
			FROM ic_keep_detail4
		  	WHERE DATEDIFF(day, CONVERT(datetime, dbizdate),
			GETDATE()) <= 7 AND ninnum > 0
			GROUP BY pk_corp, cwarehouseid, cinventoryid) abab 
	ON efef.pk_corp = abab.pk_corp AND efef.cwarehouseid = abab.cwarehouseid 
		AND efef.cinventoryid = abab.cinventoryid 
	LEFT OUTER JOIN (
	--//三十日均入库量
		  	SELECT pk_corp, cwarehouseid, cinventoryid,
			SUM(COALESCE (ninnum, 0.0)) / 30 AS averageinnum30days
			FROM ic_keep_detail4
		  	WHERE DATEDIFF(day, CONVERT(datetime, dbizdate), GETDATE()) <= 30 
			AND ninnum > 0
			GROUP BY pk_corp, cwarehouseid, cinventoryid) cdcd 
	ON efef.pk_corp = cdcd.pk_corp AND efef.cwarehouseid = cdcd.cwarehouseid 
		AND efef.cinventoryid = cdcd.cinventoryid
	ORDER BY efef.pk_corp,efef.ccalbodyid, efef.cwarehouseid, efef.cinventoryid
	*/
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;

	ArrayList alResultData = new ArrayList(); //结果
	int ooo = 0;
	StringBuffer sbSql = new StringBuffer();
	UFDate loginDate = new UFDate(sLoginDate);
	String sBeginData7 = loginDate.getDateBefore(7).toString();
	String sBeginData30 = loginDate.getDateBefore(30).toString();
	
	
	try
	{
		sbSql
			.append(" SELECT distinct ")
			.append(" efef.pk_corp,efef.corpname,efef.cwarehouseid,efef.cwarehousecode,efef.cwarehousename,")
			//add by yhj 2014-03-20
//			.append(" efef.cscode,")
			//end
			.append(" efef.ccalbodyid,efef.ccalbodycode,efef.ccalbodyname,")
			.append(" efef.cinventoryid,efef.cinventorycode,efef.invname, efef.invspec, efef.invtype, ")
			.append(" efef.measdocname,efef.cwarehouseclassid,efef.xcl,")
			.append(" efef.vplanpsn,efef.abctype,")
			.append(" efef.def1,efef.def2,efef.def3,efef.def4,efef.def5,")
			.append(" efef.def6,efef.def7,efef.def8,efef.def9,efef.def10,")
			.append(" efef.def11,efef.def12,efef.def13,efef.def14,efef.def15,")
			.append(" efef.def16,efef.def17,efef.def18,efef.def19,efef.def20,")
			.append(" abab.averageinnum7days, cdcd.averageinnum30days ")
			.append(" from ( select * from ( select a.pk_corp,b.unitname as corpname,")
			//add by yhj 2014-03-20
			.append(" bdoc.cscode,")
			//end
			.append(" whclass.pk_calbody as ccalbodyid,whclass.bodycode as ccalbodycode,whclass.bodyname as ccalbodyname,")
			.append(" a.cwarehouseid,c.storcode as cwarehousecode,c.storname as cwarehousename,a.cinventoryid,")
			.append(" inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, ")
			.append(" meas1.measname AS measdocname, c.pk_calbody as cwarehouseclassid,a.xcl, ")
			.append(" invp.pk_psndoc4 as pk_psndoc4 ,psn.psnname as vplanpsn ,invman.abctype as abctype, ")
			//add by yhj 2014-03-10 start
			.append(" invcl.invclasscode,")
			//end
			.append(" inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5, ")
			.append(" inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10, ")
			.append(" inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15, ")
			.append(" inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20 ")
			.append(" FROM (select * from (SELECT pk_corp, cwarehouseid, cinventoryid,")
			.append(" SUM(COALESCE (ninnum,0.0)) - SUM(COALESCE (noutnum, 0.0)) AS xcl")
			.append(" FROM v_ic_onhandnum4 "+((sinnerWhere!=null && sinnerWhere.trim().length()>0)?(" where 1=1 "+sinnerWhere):"")+" GROUP BY pk_corp, cwarehouseid, cinventoryid ) bb")
			.append(" WHERE xcl > 0 ) a LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp ")
			.append(" LEFT OUTER JOIN bd_stordoc c on a.cwarehouseid=c.pk_stordoc ")
			.append("	INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody ")
			.append("	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc")
			.append("	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc ")
			.append("	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc ")
			.append("	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl")
            .append("	 INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and whclass.pk_calbody = invp.pk_calbody ")
			.append("	 LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc  ")
			//add by yhj 2014-03-20
			.append("  left join bd_cargdoc bdoc on bdoc.pk_stordoc = c.pk_stordoc ")
			//end
			.append(" ) aabb  where " + sWhereClause)
			.append(" )efef LEFT OUTER JOIN (SELECT pk_corp, cwarehouseid, cinventoryid, ")
			.append(" SUM(COALESCE (ninnum, 0.0)) / 7 AS averageinnum7days FROM ic_keep_detail4")
			.append(" WHERE dbizdate >='"+sBeginData7+"' AND dbizdate<='"+sLoginDate+"' AND ninnum > 0")
			.append(" GROUP BY pk_corp, cwarehouseid, cinventoryid) abab ")
			.append(" ON efef.pk_corp = abab.pk_corp AND efef.cwarehouseid = abab.cwarehouseid ")
			.append(" AND efef.cinventoryid = abab.cinventoryid LEFT OUTER JOIN (")
			.append(" SELECT pk_corp, cwarehouseid, cinventoryid,")
			.append(" SUM(COALESCE (ninnum, 0.0)) / 30 AS averageinnum30days")
			.append(" FROM ic_keep_detail4 WHERE dbizdate >='"+sBeginData30+"' AND dbizdate<='"+sLoginDate+"'  ")
			.append(" AND ninnum > 0 GROUP BY pk_corp, cwarehouseid, cinventoryid) cdcd ")
			.append(" ON efef.pk_corp = cdcd.pk_corp AND efef.cwarehouseid = cdcd.cwarehouseid ")
			.append(" AND efef.cinventoryid = cdcd.cinventoryid ORDER BY efef.pk_corp,efef.ccalbodyid,efef.cwarehouseid, efef.cinventoryid");

		con = getConnection();
		stmt = con.prepareStatement(sbSql.toString());

		rs = stmt.executeQuery();

		StockAgeItemVO pivo = new StockAgeItemVO();
		ResultSetMetaData meta = rs.getMetaData();
		nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
		while (rs.next())
		{
			//nc.vo.scm.pub.SCMEnv.out("第" + ooo + "条记录");
			ooo++;
			pivo = new StockAgeItemVO();
			//setData(rs, pivo);
			gm.setData(rs, pivo, meta);
			if (null == pivo)
			{
				nc.vo.scm.pub.SCMEnv.out("无数据，应检查数据库...");
				return null;
			}
			alResultData.add(pivo);
		}
		return alResultData;

	}
	catch (Exception e)
	{
		nc.vo.scm.pub.SCMEnv.error(e);
		throw e;
	}
	finally
	{
		try
		{
			if (rs != null)
				rs.close();
		}
		catch (Exception e)
		{
		}
		try
		{
			if (stmt != null)
				stmt.close();
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
				con.close();
		}
		catch (Exception e)
		{

		}

	}
}


/**
 * 创建者：仲瑞庆
 * 功能：查出行中附加数据,无本单据及入库单据的HID
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-22 8:56:10)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.util.ArrayList
 * @param sWhereClause java.lang.String
 * @exception java.sql.SQLException 异常说明。
 * @exception javax.transaction.SystemException 异常说明。
 * @exception nc.ui.bd.datainit.BusinessException 异常说明。
 */
protected ArrayList queryKlfxOtherdataInfo_002(String sWhereClause,String sBeginDate,int itype)
	throws
		java.sql.SQLException,
		javax.transaction.SystemException,
		BusinessException {
	/**
	--//进行库龄时段分析用的表
	select  pk_corp,ccalbodyid,cwarehouseid,cinventoryid,other,dbizdate,
	case when (noutnum is null)or(noutnum>=0) then 0 else -noutnum end + 
	case when ninnum>=0 then ninnum else 0 end as ninnum,
	case when noutnum>=0 then noutnum else 0 end + 
	case when (ninnum is null)or(ninnum>=0) then 0 else -ninnum end as noutnum
	from(
	select ads.pk_corp,ads.ccalbodyid,ads.ccalbodyid,ads.cwarehouseid,ads.cinventoryid,
	rtrim(coalesce(ads.castunitid,'_'))||'+'||rtrim(coalesce(ads.vbatchcode,'_'))||'+'||
	rtrim(coalesce(ads.vfree1,'_'))||'+'||rtrim(coalesce(ads.vfree2,'_'))||'+'||
	rtrim(coalesce(ads.vfree3,'_'))||'+'||rtrim(coalesce(ads.vfree4,'_'))||'+'||
	rtrim(coalesce(ads.vfree5,'_'))||'+'||rtrim(coalesce(ads.vfree6,'_'))||'+'||
	rtrim(coalesce(ads.vfree7,'_'))||'+'||rtrim(coalesce(ads.vfree8,'_'))||'+'||
	rtrim(coalesce(ads.vfree9,'_'))||'+'||rtrim(coalesce(ads.vfree10,'_')) as other,
	ads.dbizdate,
	sum(coalesce(ads.ninnum,0.0)) as ninnum,sum(coalesce(ads.noutnum,0.0)) as noutnum
	from ic_keep_detail4 ads
	INNER JOIN (
	select * from (
	select a.pk_corp,b.unitname as corpname,
	a.cwarehouseid,c.storname as cwarehousename,
	a.cinventoryid,
	inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, 
	meas1.measname AS measdocname, 
	c.pk_calbody as cwarehouseclassid,
	invp.pk_psndoc4 as pk_psndoc4 ,psn.psnname as vplanpsn,invman.abctype as abctype,
	inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5,
	inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10,
	inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15,
	inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20
	FROM (
		--//现存量
		select * from (SELECT pk_corp, cwarehouseid, cinventoryid,
			SUM(COALESCE (ninnum,0.0)) - SUM(COALESCE (noutnum, 0.0)) AS xcl
	              	FROM ic_keep_detail4
	                GROUP BY pk_corp, cwarehouseid, cinventoryid
		     ) bb
		WHERE xcl > 0
	      ) a 
	LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp 
	LEFT OUTER JOIN bd_stordoc c
	on a.cwarehouseid=c.pk_stordoc 
		INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody 

	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc
	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc 
	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc 
	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl
	 INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and c.pk_calbody = invp.pk_calbody 
	 LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc  	 
	 
	) aabb 
	--where whereclause
	) fgh 
	ON ads.pk_corp=fgh.pk_corp and ads.cwarehouseid=fgh.cwarehouseid 
	and ads.cinventoryid=fgh.cinventoryid
	-- sOtherWhere
	
	group by ads.pk_corp,ads.ccalbodyid,ads.cwarehouseid,ads.cinventoryid,ads.castunitid,ads.vbatchcode,
	ads.vfree1,ads.vfree2,ads.vfree3,ads.vfree4,ads.vfree5,
	ads.vfree6,ads.vfree7,ads.vfree8,ads.vfree9,ads.vfree10,
	ads.dbizdate
	)bababa
	order by pk_corp,ccalbodyid,cwarehouseid,cinventoryid,other,dbizdate
	--查出的结果置入ArrayList以供分析时段及数量
	*/
	Connection con= null;
	PreparedStatement stmt= null;
	ResultSet rs= null;

	ArrayList alResultData= new ArrayList(); //结果
	int ooo= 0;
	StringBuffer sbSql= new StringBuffer();

	try {
		
		String sOtherWhere = "";
//		if(itype==2){
//			
//		}else if(itype==1){
//			//排除转库单,组织内调拨订单,
//			sOtherWhere=" and ( coalesce(ads.cbilltypecode,' ') <> '4K' and  " +
//					" coalesce(ads.csourcetype,' ') <> '4K' and " +
//					" coalesce(ads.csourcetype,' ') <> '5I' and " +
//					" coalesce(ads.cfirsttype,' ') <> '5I' ) ";
//		}else{
//			//排除转库单,组织内调拨订单,组织间调拨订单
//			sOtherWhere =" and ( coalesce(ads.cbilltypecode,' ') <> '4K' and " +
//					"  coalesce(ads.csourcetype,' ') <> '4K' and " +
//					"  coalesce(ads.csourcetype,' ') <> '5I' and " +
//					"  coalesce(ads.cfirsttype,' ') <> '5I'  and " +
//				    "  coalesce(ads.csourcetype,' ') <> '5E' and " +
//				    "  coalesce(ads.cfirsttype,' ') <> '5E'  ) ";
//		}
		
		
		//add by yhj 2014-03-20
		StringBuilder headstr = new StringBuilder();
		StringBuilder endstr = new StringBuilder();
		String endWhere = null;
		if(sWhereClause != null  && sWhereClause.length() > 0){
			if(sWhereClause.contains("cscode")){
				String[] arrays = sWhereClause.split("and");
				StringBuilder str = new StringBuilder();
				for (int i = 0; i < arrays.length; i++) {
					if(i == 0 ){
						str.append(arrays[i]);
					}else if(arrays[i].contains("cscode")){
						endWhere = arrays[i];
					}else if(str.toString().endsWith(" and ")){//此处注意空格
						str.append(arrays[i]);
						str.append(" and ");
					}else{
						str.append(" and ");
						str.append(arrays[i]);
					}
				}
				sWhereClause = str.toString();
				headstr.append("select distinct ee.* from ( ");
				System.out.println();
			}
		}
		//end
		sbSql
		.append(" select pk_corp,ccalbodyid,cwarehouseid,cinventoryid,dbizdate,")
		.append(" (case when noutnum<0 then abs(noutnum) else 0 end + case when ninnum>0 then ninnum else 0 end ) as ninnum ")
		.append(" from ( ")
		.append(" select pk_corp,ccalbodyid,cwarehouseid,cinventoryid,dbizdate,sum(ninnum) as ninnum,sum(noutnum) as noutnum from ( ")
		.append(" select ads.pk_corp,ads.ccalbodyid,ads.cwarehouseid,ads.cinventoryid,ads.dbizdate,")
		.append(" coalesce(ads.ninnum,0.0) as ninnum,coalesce(ads.noutnum,0.0) as noutnum, ")
		.append(" b.unitname as corpname,c.storname as cwarehousename,inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, ")
		//add by yhj 2014-03-10 start
		.append(" c.storcode as cwarehousecode,invcl.invclasscode,")
		//end
		.append(" meas1.measname AS measdocname,c.pk_calbody as cwarehouseclassid, ")
		.append(" invp.pk_psndoc4 as pk_psndoc4 ,psn.psnname as vplanpsn ,invman.abctype as abctype, ")
		.append(" inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5, ")
		.append(" inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10, ")
		.append(" inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15, ")
		.append(" inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20 ")
		.append(" from ic_keep_detail4 ads ")
		.append(" LEFT OUTER JOIN bd_corp b on ads.pk_corp=b.pk_corp ")
		.append(" LEFT OUTER JOIN bd_stordoc c on ads.cwarehouseid=c.pk_stordoc ")
		.append(" INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody ")
		.append(" LEFT OUTER JOIN bd_invmandoc invman ON ads.cinventoryid = invman.pk_invmandoc")
		.append(" LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc ")
		.append(" LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc ")
		.append(" LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl")
		.append(" INNER JOIN bd_produce invp ON ads.cinventoryid = invp.pk_invmandoc and whclass.pk_calbody = invp.pk_calbody ")
		.append(" LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc  ")
		.append(" where ads.dbizdate >='"+sBeginDate +"' "+sOtherWhere)
		.append(" ) aabb ")
		.append(" where "+sWhereClause)
		.append(" group by pk_corp,ccalbodyid,cwarehouseid,cinventoryid,dbizdate ")
		.append(" ) ccdd ")
		.append(" order by pk_corp,ccalbodyid,cwarehouseid,cinventoryid,dbizdate desc ");
		//add by yhj 2014-03-20
		if(headstr != null && headstr.toString().length() > 0){
			endstr.append(" )ee left join bd_cargdoc on bd_cargdoc.pk_stordoc = ee.cwarehouseid ");
			endWhere = endWhere.toString().trim().substring(1, endWhere.trim().toString().length() -1 );
			endstr.append(" where bd_cargdoc."+endWhere+"");
		}
	    //end
		con= getConnection();
		String sql = headstr.append(sbSql).append(endstr).toString();
		stmt= con.prepareStatement(sql);

		rs= stmt.executeQuery();
		ResultSetMetaData meta= rs.getMetaData();
		ArrayList pivo= new ArrayList();
	
		nc.bs.ic.pub.GenMethod gm=new nc.bs.ic.pub.GenMethod();
		ICGenVO vo = null;
		while (rs.next()) {
			
			vo = new ICGenVO();
			gm.setData(rs, vo, meta);
			alResultData.add(vo);
			
		}

		return alResultData;
	
	} finally {
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (Exception e) {
		}
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {

		}
	}
	
}


protected String getKey_002(CircularlyAccessibleValueObject vo){
	
	String ret = "";
	if(vo==null)
		return ret;
	String[] keys = new String[]{
			"pk_corp",
			"cwarehouseid",
			"cinventoryid"
	};
	String ss = null;
	for(int i=0;i<keys.length;i++){
		ss = (String)vo.getAttributeValue(keys[i]);
		if(ss!=null)
			ss=ss.trim();
		if(ss==null || ss.length()<=0)
			ret+="_";
		else
			ret+=ss;
	}
	return ret;
}

/**
 * 创建者：仲瑞庆
 * 功能：将整理出数据插入结果集
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-23 11:44:47)
 * 修改日期，修改人，修改原因，注释标志：
 * @param alReturnValue java.util.ArrayList
 * @param kivos nc.vo.ic.ic637.StockAgeItemVO[]
 */
protected void fillIntoVO_002(UFDouble[] sKlsds, UFDate logDate,ArrayList alReturnValue, StockAgeItemVO[] kivos) {
	
	if(kivos==null || kivos.length<=0)
		return;
	
	HashMap hskivo = new HashMap();
	UFDouble xcl = null;
	final String slastnumkey = StockAgeItemVO.SPREV_dynamic_num+sKlsds.length;
	for(int i=0;i<kivos.length;i++){
		xcl = CheckTools.toUFDouble(kivos[i].getAttributeValue("xcl"));
		if(xcl==null || xcl.doubleValue()<=0)
			continue;
		kivos[i].setAttributeValue(slastnumkey,xcl);
		hskivo.put(getKey_002(kivos[i]), kivos[i]);
	}
	
	if(alReturnValue==null || alReturnValue.size()<=0)
		return;
	
	if(hskivo.size()<=0)
		return;
	
	ICGenVO tempvo = null;
	String key = null;
	UFDouble ninnum = null;
	StockAgeItemVO kivo = null;
	UFDouble d0 = new UFDouble(0);
	UFDate dbizdate = null;
	
	boolean isset = false;
	for(int i=0;i<alReturnValue.size();i++){
		tempvo = (ICGenVO)alReturnValue.get(i);
		ninnum = CheckTools.toUFDouble(tempvo.getAttributeValue("ninnum"));
		if(ninnum==null || ninnum.doubleValue()<=0)
			continue;
		key = getKey_002(tempvo);
		kivo = (StockAgeItemVO) hskivo.get(key);
		if(kivo==null)
			continue;
		xcl = CheckTools.toUFDouble(kivo.getAttributeValue(slastnumkey));
		if(xcl==null || xcl.doubleValue()<=0){
			hskivo.remove(key);
			continue;
		}
		dbizdate =  CheckTools.toUFDate(tempvo.getAttributeValue("dbizdate"));
		if(dbizdate==null)
			dbizdate = logDate;
		
		isset =false;
		for (int j= 0; j < sKlsds.length ; j++) {
			if (logDate.getDaysBetween(dbizdate, logDate)
				<= sKlsds[j].doubleValue()) {
				
				if(xcl.doubleValue()>ninnum.doubleValue()){
					kivo.setAttributeValue(StockAgeItemVO.SPREV_dynamic_num+j,
							ICGenVO.addWhenNullAsZero((UFDouble)kivo.getAttributeValue(StockAgeItemVO.SPREV_dynamic_num+j),
							ninnum));
				}else{
					kivo.setAttributeValue(StockAgeItemVO.SPREV_dynamic_num+j,
							ICGenVO.addWhenNullAsZero((UFDouble)kivo.getAttributeValue(StockAgeItemVO.SPREV_dynamic_num+j),
							xcl));
				}
				isset = true;
				break;
				
			}
		}
		
		if(isset){
			if(xcl.doubleValue()>ninnum.doubleValue()){
				kivo.setAttributeValue(slastnumkey, xcl.sub(ninnum));
			}else{
				kivo.setAttributeValue(slastnumkey, d0);
			}
		}
	}
	
//	HashMap hsinvnum = new HashMap();
//	
//	
//	String key = null;
//	UFDouble[] values = null;
//	int count = ((ArrayList)alReturnValue.get(0)).size()-3;
//	ArrayList alReturnValueRow= null;
//	for(int i=0,loop=alReturnValue.size();i<loop;i++){
//		alReturnValueRow= ((ArrayList) alReturnValue.get(i));
//		key = "";
//		key+=alReturnValueRow.get(1);
//		key+=alReturnValueRow.get(2);
//		values = (UFDouble[])hsinvnum.get(key);
//		if(values==null){
//			values = new UFDouble[count];
//			hsinvnum.put(key,values);
//		}
//		for(int k=0,loopk=values.length;k<loopk;k++){
//			values[k]=ICGenVO.addWhenNullAsZero(values[k],(UFDouble)alReturnValueRow.get(3+k));
//		}
//		
//	}
//	for (int i= 0; i < kivos.length; i++) {
//		key = "";
//		key+=kivos[i].getAttributeValue("cwarehouseid");
//		key+=kivos[i].getAttributeValue("cinventoryid");
//		values = (UFDouble[])hsinvnum.get(key);
//		if(values!=null){
//			for(int k=0,loopk=values.length;k<loopk;k++){
//				if(values[k]==null || values[k].doubleValue()==0)
//					continue;
//				kivos[i].setAttributeValue(
//						StockAgeItemVO.SPREV_dynamic_num + k,values[k]);
//			}
//		}
//	}
	
//	for (int i= 0; i < kivos.length; i++) {
//		alReturnValueRow= ((ArrayList) alReturnValue.get(i));
//		//for (int k= 0; k < alReturnValue.size(); k++) {
//		//if (((ArrayList)alReturnValue.get(k)).get(0).toString().trim().equals(kivos[i].getCwarehousecode())) {
//		//}
//		//}
//		
//		for (int j= 3; j < alReturnValueRow.size(); j++) {
//			if (alReturnValueRow.get(j) == null
//				|| ((UFDouble) alReturnValueRow.get(j)).doubleValue() == 0) {
//			} else {
//				kivos[i].setAttributeValue(
//					StockAgeItemVO.SPREV_dynamic_num + Integer.toString(j - 3).trim(),
//					alReturnValueRow.get(j));
//			}
//		}
//	}
}

/**
 * 创建者：仲瑞庆
 * 功能：库龄分析总查询
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-21 15:25:47)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.ic.ic637.StockAgeVO
 * @param alFxfs java.util.ArrayList
 * @param sWhereClause java.lang.String
 * @exception java.sql.SQLException 异常说明。
 * @exception javax.transaction.SystemException 异常说明。
 * @exception nc.ui.bd.datainit.BusinessException 异常说明。
 */
public StockAgeVO queryKlfxInfo_002(
	ArrayList alFxfs,
	String[] sKlsds,
	String sWhereClause,
	String sLoginDate,String sinnerWhere,int itype)
	throws BusinessException{
	
	StockAgeVO kvo= new StockAgeVO();
	StockAgeHeaderVO khvo= new StockAgeHeaderVO();
	kvo.setParentVO(khvo);
	ArrayList alkivos= new ArrayList();
	StockAgeItemVO[] kivos= null;
	
	try{

		if (alFxfs.get(0).toString().trim().equals("0")) {
			
			Integer smaxkl=new Integer(sKlsds[sKlsds.length-1]);
			UFDate ufdNowDate= new UFDate(sLoginDate);
			UFDate qichuriqi=ufdNowDate.getDateBefore(smaxkl.intValue());
			//库龄分析
			//查出行中主要数据
			alkivos= queryKlfxMaindataInfo_002(sWhereClause, sLoginDate,sinnerWhere);
			if (alkivos.size() != 0) {
				kivos= new StockAgeItemVO[alkivos.size()];
				alkivos.toArray(kivos);
				
				//系统设置中出库是否跟踪到入库单据号
				//查出行中附加数据,加入本单据及入库单据的HID
				//queryKlfxOtherdataHidInfo(sWhereClause);
				//查出行中附加数据,无本单据及入库单据的HID
				ArrayList alOtherdate= queryKlfxOtherdataInfo_002(sWhereClause,qichuriqi.toString(),itype);
				
				UFDouble[] dKlsds = new UFDouble[sKlsds.length];
				for(int i=0;i<sKlsds.length;i++)
					dKlsds[i] = new UFDouble(sKlsds[i]);
				//将整理出数据插入结果集
				fillIntoVO_002(dKlsds, ufdNowDate, alOtherdate, kivos);
				
				//补充价格及金额
				fillMnyPriceIntoVO(kivos,StockAgeItemVO.SPREV_dynamic_num,StockAgeItemVO.SPREV_dynamic_mny,StockAgeItemVO.SPREV_dynamic_planmny,sKlsds.length);
			}
		} else {
			//预警分析
			alkivos= queryKlYjfxInfo(alFxfs.get(1).toString().trim(), sLoginDate,sWhereClause);
			//整理附加数据，清出库数量，依业务日期早晚而清入库数量
			neatenYjfxDate(alkivos);
			//滤掉所有入库为零的数量,及超出天数>0的数量
			alkivos= packYjfxDate(alkivos);
			kivos= new StockAgeItemVO[alkivos.size()];
			for (int i= 0; i < alkivos.size(); i++) {
				kivos[i]= (StockAgeItemVO) alkivos.get(i);
			}
		}
	}catch(Exception e){
		throw GenMethod.handleException(null, e);
	}
	if (kivos != null && kivos.length != 0) {
		kvo.setChildrenVO(kivos);
	}
	
	return kvo;	

}



/**
 * 创建者：仲瑞庆
 * 功能：库龄分析总查询
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-21 15:25:47)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.ic.ic637.StockAgeVO
 * @param alFxfs java.util.ArrayList
 * @param sWhereClause java.lang.String
 * @exception java.sql.SQLException 异常说明。
 * @exception javax.transaction.SystemException 异常说明。
 * @exception nc.ui.bd.datainit.BusinessException 异常说明。
 */
public StockAgeVO queryKlfxInfo(
	ArrayList alFxfs,
	String[] sKlsds,
	String sWhereClause,
	String sLoginDate,String sinnerWhere)
	throws Exception{
	StockAgeVO kvo= new StockAgeVO();
	StockAgeHeaderVO khvo= new StockAgeHeaderVO();
	kvo.setParentVO(khvo);
	ArrayList alkivos= new ArrayList();
	StockAgeItemVO[] kivos= null;

	if (alFxfs.get(0).toString().trim().equals("0")) {
		//库龄分析
		//查出行中主要数据
		alkivos= queryKlfxMaindataInfo(sWhereClause, sLoginDate,sinnerWhere);
		if (alkivos.size() != 0) {
			ArrayList alOtherdate= new ArrayList();
			kivos= new StockAgeItemVO[alkivos.size()];
			for (int i= 0; i < alkivos.size(); i++) {
				kivos[i]= (StockAgeItemVO) alkivos.get(i);
			}
			//系统设置中出库是否跟踪到入库单据号
			//查出行中附加数据,加入本单据及入库单据的HID
			//queryKlfxOtherdataHidInfo(sWhereClause);
			//查出行中附加数据,无本单据及入库单据的HID
			alOtherdate= queryKlfxOtherdataInfo(sWhereClause);
			
			if (alOtherdate != null && alOtherdate.size() > 0) {
				
//				整理附加数据，清出库数量，依出库对应入库单而清入库数量
				//整理附加数据，清出库数量，依业务日期早晚而清入库数量
				neatenOtherDate(alOtherdate);
				//合并行中数据，清掉所有入库为零的数量，依查询日期段而求和
				ArrayList alReturnValue= packOtherDate(sKlsds, alOtherdate,sLoginDate);
				//将整理出数据插入结果集
				fillIntoVO(alReturnValue, kivos);
				
			}
			
			//补充价格及金额
			fillMnyPriceIntoVO(kivos,StockAgeItemVO.SPREV_dynamic_num,StockAgeItemVO.SPREV_dynamic_mny,StockAgeItemVO.SPREV_dynamic_planmny,sKlsds.length);
			
			//临时加入
//			if (alOtherdate == null || alOtherdate.size() == 0) {
//				return kvo;
//			}
			//以后去掉
		}
	} else {
		//预警分析
		alkivos= queryKlYjfxInfo(alFxfs.get(1).toString().trim(), sLoginDate,sWhereClause);
		//整理附加数据，清出库数量，依业务日期早晚而清入库数量
		neatenYjfxDate(alkivos);
		//滤掉所有入库为零的数量,及超出天数>0的数量
		alkivos= packYjfxDate(alkivos);
		kivos= new StockAgeItemVO[alkivos.size()];
		for (int i= 0; i < alkivos.size(); i++) {
			kivos[i]= (StockAgeItemVO) alkivos.get(i);
		}
	}

	if (kivos != null && kivos.length != 0) {
		kvo.setChildrenVO(kivos);
	}

	return kvo;
}
/**
 * 库龄分析总查询
 * 修改原因：期初取月结
 * @param alFxfs
 * @param sKlsds
 * @param voIn
 * @param sWhereClause
 * @param sLoginDate
 * @return
 * @throws Exception
 */
public StockAgeVO queryKlfxInfo_01(
		ArrayList alFxfs,
		String[] sKlsds,
		ConditionVO[] voIn,
		String sWhereClause,
		String sLoginDate,
		String sinnerWhere)
		throws Exception{
		StockAgeVO kvo= new StockAgeVO();
		StockAgeHeaderVO khvo= new StockAgeHeaderVO();
		kvo.setParentVO(khvo);
		ArrayList alkivos= new ArrayList();
		StockAgeItemVO[] kivos= null;

		if (alFxfs.get(0).toString().trim().equals("0")) {
			//库龄分析
			//查出行中主要数据
			alkivos= queryKlfxMaindataInfo(sWhereClause, sLoginDate,sinnerWhere);
			if (alkivos.size() > 0) {		 
				kivos= new StockAgeItemVO[alkivos.size()];
				alkivos.toArray(kivos);
		
				//查出行中附加数据,无本单据及入库单据的HID 
				//由于数据卸载，原先的数据alOtherdate分成两个部分获得，大于最高库龄的部分通过月结取期初，小于的部分通过业务视图取得 
				int length=sKlsds.length;
				Integer smaxkl=new Integer(sKlsds[length-1]);
				UFDate ufdNowDate= new UFDate(sLoginDate);
				UFDate qichuriqi=ufdNowDate.getDateBefore(smaxkl.intValue());
				List list=queryqichu(voIn,qichuriqi);
				ArrayList alotherdate_all=new ArrayList();
				alotherdate_all=neatqichudate(list,qichuriqi.getDateBefore(1));
//				ArrayList temp;
//				if (list.size() > 0) {
//					for (int i = 0; i < list.size(); i++) {
//						temp = new ArrayList();
//						temp.add(((MonthVO) list.get(i))
//								.getAttributeValue(MonthVO.PK_CORP));
//						temp.add(((MonthVO) list.get(i))
//								.getAttributeValue(MonthVO.PK_WHID));
//						temp.add(((MonthVO) list.get(i))
//								.getAttributeValue(MonthVO.CINVMAN_ID));
//						temp.add("");
//						temp.add(qichuriqi);
//						Double uft=((MonthVO) list.get(i)).getNonhandnum().toDouble();
//						if ((uft.compareTo(new Double(0.0)) > 0)) {
//							nc.vo.scm.pub.SCMEnv.out(uft.doubleValue());
//							temp.add(uft);
//							temp.add(new Double(0.0));
//						}else {
//							temp.add(new Double(0.0));
//							temp.add(uft);
//						}
//						alotherdate_all.add(temp);
//					}
//				}
				ArrayList alotherdatebetween=new ArrayList();
				//查询业务区间数据
				UFDate startdate=ufdNowDate.getDateBefore(smaxkl.intValue());
				alotherdatebetween=queryKlfxOtherdataInfo_01(sWhereClause,startdate,ufdNowDate);
				if (alotherdatebetween != null && alotherdatebetween.size() > 0) {
					for (int i = 0; i < alotherdatebetween.size(); i++) {
						alotherdate_all.add(alotherdatebetween.get(i));
					}
				}
				//
				if (alotherdate_all != null && alotherdate_all.size() > 0) {
					
					//整理附加数据，清出库数量，依出库对应入库单而清入库数量
					//整理附加数据，清出库数量，依业务日期早晚而清入库数量
					neatenOtherDate(alotherdate_all);
					//合并行中数据，清掉所有入库为零的数量，依查询日期段而求和
					ArrayList alReturnValue= packOtherDate(sKlsds, alotherdate_all,sLoginDate);
					//将整理出数据插入结果集
					fillIntoVO(alReturnValue, kivos);				
				}
				
				//补充价格及金额
				fillMnyPriceIntoVO(kivos,StockAgeItemVO.SPREV_dynamic_num,StockAgeItemVO.SPREV_dynamic_mny,StockAgeItemVO.SPREV_dynamic_planmny,sKlsds.length);
				
			}
		} else {
			//预警分析
			alkivos= queryKlYjfxInfo(alFxfs.get(1).toString().trim(), sLoginDate,sWhereClause);
			//整理附加数据，清出库数量，依业务日期早晚而清入库数量
			neatenYjfxDate(alkivos);
			//滤掉所有入库为零的数量,及超出天数>0的数量
			alkivos= packYjfxDate(alkivos);
			kivos= new StockAgeItemVO[alkivos.size()];
			for (int i= 0; i < alkivos.size(); i++) {
				kivos[i]= (StockAgeItemVO) alkivos.get(i);
			}
		}

		if (kivos != null && kivos.length != 0) {
			kvo.setChildrenVO(kivos);
		}

		return kvo;
	}
/**
 *整理期初数据,变成可处理的形式
 * @param list
 * @param qichuriqi
 * @return
 */
private ArrayList neatqichudate(List list, UFDate qichuriqi) {
	ArrayList alotherdate_all=new ArrayList();
	if(list.size()<=0)
		return alotherdate_all;
	//ArrayList alotherdate_all=new ArrayList();
	ArrayList temp;
	if (list.size() > 0) {
		for (int i = 0; i < list.size(); i++) {
			temp = new ArrayList();
			temp.add(((MonthVO) list.get(i))
					.getAttributeValue(MonthVO.PK_CORP));
			temp.add(((MonthVO) list.get(i))
					.getAttributeValue(MonthVO.PK_WHID));
			temp.add(((MonthVO) list.get(i))
					.getAttributeValue(MonthVO.CINVMAN_ID));
			String other="";
			String castunitid=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.CAST_UNIT_ID);
			other+=(castunitid==null?"_":castunitid)+"+";
			String vbatchcode=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.VBATCH_CODE);
			other+=(vbatchcode==null?"_":vbatchcode)+"+";
			String vfree1=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.FREE1);
			other+=(vfree1==null?"_":vfree1)+"+";
			String vfree2=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.FREE2);
			other+=(vfree2==null?"_":vfree2)+"+";
			String vfree3=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.FREE3);
			other+=(vfree3==null?"_":vfree3)+"+";
			String vfree4=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.FREE4);
			other+=(vfree4==null?"_":vfree4)+"+";
			String vfree5=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.FREE5);
			other+=(vfree5==null?"_":vfree5)+"+";
			String vfree6=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.FREE6);
			other+=(vfree6==null?"_":vfree6)+"+";
			String vfree7=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.FREE7);
			other+=(vfree7==null?"_":vfree7)+"+";
			String vfree8=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.FREE8);
			other+=(vfree8==null?"_":vfree8)+"+";
			String vfree9=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.FREE9);
			other+=(vfree9==null?"_":vfree9)+"+";
			String vfree10=(String)((MonthVO) list.get(i)).getAttributeValue(MonthVO.FREE10);
			other+=vfree10==null?"_":vfree10;	
			temp.add(other);
			temp.add(qichuriqi);
			Double uft=((MonthVO) list.get(i)).getNonhandnum().toDouble();
			if ((uft.compareTo(new Double(0.0)) > 0)) {
				nc.vo.scm.pub.SCMEnv.out(uft.doubleValue());
				temp.add(uft);
				temp.add(new Double(0.0));
			}else {
				temp.add(new Double(0.0));
				temp.add(new Double(Math.abs(uft.doubleValue())));
			}
			alotherdate_all.add(temp);
		}
	}
	return alotherdate_all;
}
/**
 * 
 * @param whereClause
 * @param qichuriqi
 * @param ufdNowDate
 * @return
 * @throws SQLException 
 */
private ArrayList queryKlfxOtherdataInfo_01(String sWhereClause, UFDate qichuriqi, UFDate ufdNowDate) throws SQLException {
	
	Connection con= null;
	PreparedStatement stmt= null;
	ResultSet rs= null;

	ArrayList alResultData= new ArrayList(); //结果
	int ooo= 0;
	StringBuffer sbSql= new StringBuffer();
	
	String sOtherWhere = null;
	if(sWhereClause!=null){
		if(sWhereClause.indexOf("cwarehouseid")>=0){
			
		}else if(sWhereClause.indexOf("cwarehouseclassid")>=0){
			//排除转库单,组织内调拨订单,
			sOtherWhere=" where ( coalesce(ads.cbilltypecode,' ') <> '4K' and  " +
					" coalesce(ads.csourcetype,' ') <> '4K' and " +
					" coalesce(ads.csourcetype,' ') <> '5I' and " +
					" coalesce(ads.cfirsttype,' ') <> '5I' ) ";
		}else{
			//排除转库单,组织内调拨订单,组织间调拨订单
			sOtherWhere =" where ( coalesce(ads.cbilltypecode,' ') <> '4K' and " +
					"  coalesce(ads.csourcetype,' ') <> '4K' and " +
					"  coalesce(ads.csourcetype,' ') <> '5I' and " +
					"  coalesce(ads.cfirsttype,' ') <> '5I'  and " +
				    "  coalesce(ads.csourcetype,' ') <> '5E' and " +
				    "  coalesce(ads.cfirsttype,' ') <> '5E'  ) ";
		}
	}
     String sDatebetween=" where dbizdate between "+"'"+qichuriqi+"'"+" and "+"'"+ufdNowDate+"' ";
	try {
		sbSql
			.append(" select  pk_corp,ccalbodyid,cwarehouseid,cinventoryid,other,dbizdate,")
			.append(" case when (noutnum is null)or(noutnum>=0) then 0 else -noutnum end + ")
			.append(" case when ninnum>=0 then ninnum else 0 end as ninnum,")
			.append(" case when noutnum>=0 then noutnum else 0 end + ")
			.append(" case when (ninnum is null)or(ninnum>=0) then 0 else -ninnum end as noutnum from(")
			.append(" select ads.pk_corp,ads.ccalbodyid,ads.cwarehouseid,ads.cinventoryid,")
			.append(" rtrim(coalesce(ads.castunitid,'_'))||'+'||rtrim(coalesce(ads.vbatchcode,'_'))||'+'||")
			.append(" rtrim(coalesce(ads.vfree1,'_'))||'+'||rtrim(coalesce(ads.vfree2,'_'))||'+'||")
			.append(" rtrim(coalesce(ads.vfree3,'_'))||'+'||rtrim(coalesce(ads.vfree4,'_'))||'+'||")
			.append(" rtrim(coalesce(ads.vfree5,'_'))||'+'||rtrim(coalesce(ads.vfree6,'_'))||'+'||")
			.append(" rtrim(coalesce(ads.vfree7,'_'))||'+'||rtrim(coalesce(ads.vfree8,'_'))||'+'||")
			.append(" rtrim(coalesce(ads.vfree9,'_'))||'+'||rtrim(coalesce(ads.vfree10,'_')) as other,")
			.append(" ads.dbizdate,sum(coalesce(ads.ninnum,0.0)) as ninnum,sum(coalesce(ads.noutnum,0.0)) as noutnum")
			.append(" from ic_keep_detail4 ads INNER JOIN (	select * from (")
			.append(" select a.pk_corp,b.unitname as corpname,a.cwarehouseid,c.storname as cwarehousename,")
			.append(" a.cinventoryid,inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, ")
			.append(" meas1.measname AS measdocname,c.pk_calbody as cwarehouseclassid, ")
			.append(" invp.pk_psndoc4 as pk_psndoc4 ,psn.psnname as vplanpsn ,invman.abctype as abctype, ")
			.append(" inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5, ")
			.append(" inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10, ")
			.append(" inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15, ")
			.append(" inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20 ")
			.append(" FROM (")
			.append(" select * from (SELECT pk_corp, cwarehouseid, cinventoryid,")
			.append(" SUM(COALESCE (ninnum,0.0)) - SUM(COALESCE (noutnum, 0.0)) AS xcl")
			.append(" FROM ic_keep_detail4 GROUP BY pk_corp, cwarehouseid, cinventoryid")
			.append(" ) bb WHERE xcl > 0 ) a LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp ")
			.append(" LEFT OUTER JOIN bd_stordoc c on a.cwarehouseid=c.pk_stordoc ")
			.append("	INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody ")
			.append("	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc")
			.append("	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc ")
			.append("	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc ")
			.append("	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl")
			.append("	 INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and whclass.pk_calbody = invp.pk_calbody ")
			.append("	 LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc  ")
			.append("  ) aabb where " + sWhereClause)
			.append(" ) fgh ON ads.pk_corp=fgh.pk_corp and ads.cwarehouseid=fgh.cwarehouseid ")
			.append(" and ads.cinventoryid=fgh.cinventoryid")
			.append( sOtherWhere==null?"":sOtherWhere)
			.append(" group by ads.pk_corp,ads.ccalbodyid,ads.cwarehouseid,ads.cinventoryid,ads.castunitid,ads.vbatchcode,")
			.append(" ads.vfree1,ads.vfree2,ads.vfree3,ads.vfree4,ads.vfree5,")
			.append(" ads.vfree6,ads.vfree7,ads.vfree8,ads.vfree9,ads.vfree10,")
			.append(" ads.dbizdate)bababa "+sDatebetween+
					"order by pk_corp,ccalbodyid,cwarehouseid,cinventoryid,other,dbizdate");

		con= getConnection();
		stmt= con.prepareStatement(sbSql.toString());

		rs= stmt.executeQuery();
		ResultSetMetaData meta= rs.getMetaData();
		int colnum = meta.getColumnCount();
		ArrayList pivo= new ArrayList();
	
		nc.bs.ic.pub.GenMethod gm=new nc.bs.ic.pub.GenMethod();
		while (rs.next()) {
			//nc.vo.scm.pub.SCMEnv.out("第" + ooo + "条记录");
			ooo++;
			pivo= new ArrayList();
			//setData(rs, pivo, meta);
			
			//gm.setData(rs,pivo,meta);
			for (int i = 1; i <= colnum; i++){
				//ccalbodyid
				if(i==2)
					continue;
				pivo.add(rs.getObject(i));
			}
			
			if (null == pivo) {
				nc.vo.scm.pub.SCMEnv.out("无数据，应检查数据库...");
				return null;
			}
			alResultData.add(pivo);
		}

		return alResultData;
	
	} finally {
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (Exception e) {
		}
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {

		}
	}
}
 
/**
 * 调用月结查询库龄期初数据
 * saf/06-06-06
 * @param voIn  vo数组
 * @param qichuriqi 期初日期，由当前日期-（最高库龄时段+1）获得
 * @return
 * @throws NamingException 
 * @throws SystemException 
 * @throws BusinessException 
 */
	private List queryqichu(ConditionVO[] convo, UFDate qichuriqi)
			throws SystemException, NamingException, BusinessException {
		if (convo == null || convo.length == 0)
			return null;
		if (qichuriqi == null)
			return null;
		MonthQuery query = new MonthQuery();
		ConditionVO[] cvos = getMonthCondVOs(convo);
		QryConditionCtrl ctrl = new QryConditionCtrl(cvos);
		String[] saMonthFld =new String[] { MonthVO.PK_CORP,
				MonthVO.PK_WHID, MonthVO.CINVMAN_ID, MonthVO.CAST_UNIT_ID,
				MonthVO.VBATCH_CODE, MonthVO.FREE1, MonthVO.FREE2,
				MonthVO.FREE3, MonthVO.FREE4, MonthVO.FREE5, MonthVO.FREE6,
				MonthVO.FREE7, MonthVO.FREE8, MonthVO.FREE9, MonthVO.FREE10 };
		ctrl.setVOAndSumField(null, new String[] { MonthVO.N_onhand_num });
		ctrl.setPureSelectGroupField(saMonthFld);
		List list = query.qryQiChu_Kernel(ctrl, qichuriqi, null);
		SCMEnv.out(list);
		return list;
	}
/**
 * 将查询模板中的字段转换成和月结表查询中匹配的字段
 * saf/06-06-06
 * @param convo
 * @return
 */
	private ConditionVO[] getMonthCondVOs(ConditionVO[] cvonow) {
		ConditionVO[] cvo = new ConditionVO[cvonow.length];
		for (int i = 0; i < cvonow.length; i++) {
			cvo[i] = (ConditionVO) (cvonow[i].clone());
		}
		ArrayList alcvo = new ArrayList();
		ConditionVO[] convo = null;
		for (int i = 0; i < cvo.length; i++) {
			// 预警天数
			if (cvo[i].getFieldCode().trim().equals("warningdays")) {
				// 预警分析	 
				cvo[i].setFieldCode("1");
				cvo[i].setOperaCode("=");
				cvo[i].setValue("1");
				cvo[i].setDataType(1);
				alcvo.add(cvo[i]);
				continue;
			} else if (cvo[i].getFieldCode().trim().equals("analysestyle")) {
				// 分析方式
				cvo[i].setFieldCode("1");
				cvo[i].setOperaCode("=");
				cvo[i].setValue("1");
				cvo[i].setDataType(1);
				alcvo.add(cvo[i]);
				continue;
			} else if (cvo[i].getFieldCode().trim().equals("cwarehouseclassid")) {
				// 对库存组织的变更
				cvo[i].setFieldCode("pk_calbody");
				alcvo.add(cvo[i]);
				continue;
			}
			else if(cvo[i].getFieldCode().trim().equals("cinventorycode")){
				String sinv="inv.invcode";
				cvo[i].setFieldCode(sinv);
				alcvo.add(cvo[i]);
				continue;
			}
			else if(cvo[i].getFieldCode().trim().startsWith("inv")){
				String sinv="inv."+cvo[i].getFieldCode();
				cvo[i].setFieldCode(sinv);
				alcvo.add(cvo[i]);
				continue;
			}
			else if(cvo[i].getFieldCode().trim().equals("abctype")) {
				cvo[i].setFieldCode("man.abctype");
				alcvo.add(cvo[i]);
				continue;
			}
			else if(cvo[i].getFieldCode().trim().equals("pk_psndoc4")) {
				cvo[i].setFieldCode("produce.pk_psndoc4");
				alcvo.add(cvo[i]);
				continue;
			}
			else {
				alcvo.add(cvo[i]);
			}
		}

		convo = new ConditionVO[alcvo.size()];
		alcvo.toArray(convo);
		return convo;
	}
/**
 * 创建者：李俊
 * 功能：给存货提供接口，库龄查询的接口
 */
public StockAgeVO queryOutInfo(
	ArrayList alFxfs,
	String[] sKlsds,
	String sWhereClause,
	String sLoginDate)
	throws Exception{
	
	StockAgeVO kvo= new StockAgeVO();
	StockAgeHeaderVO khvo= new StockAgeHeaderVO();
	kvo.setParentVO(khvo);
	ArrayList alkivos= new ArrayList();
	StockAgeItemVO[] kivos= null;

	if (alFxfs.get(0).toString().trim().equals("0")) {
		alkivos= queryKlfxMaindataInfo_IA(sWhereClause, sLoginDate);
		if (alkivos.size() != 0) {
			
			
			
			ArrayList alOtherdate= new ArrayList();
			kivos= new StockAgeItemVO[alkivos.size()];
			for (int i= 0; i < alkivos.size(); i++) {
				kivos[i]= (StockAgeItemVO) alkivos.get(i);
			}
			alOtherdate= queryKlfxOtherdataInfo_IA(sWhereClause);
			if (alOtherdate == null || alOtherdate.size() == 0) {
				return kvo;
			}
		
//			neatenOtherDate(alOtherdate);
			ArrayList alReturnValue= packOtherDate(sKlsds, alOtherdate,sLoginDate);
			fillIntoVO(alReturnValue, kivos);
			if (alOtherdate == null || alOtherdate.size() == 0) {
				return kvo;
			}
			
		}
	} 
	if (kivos != null && kivos.length != 0) {
		kvo.setChildrenVO(kivos);
	}

	return kvo;
}

/**
 * 创建者：仲瑞庆
 * 功能：查出行中主要数据
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-22 8:56:10)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.util.ArrayList
 * @param sWhereClause java.lang.String
 * @exception java.sql.SQLException 异常说明。
 * @exception javax.transaction.SystemException 异常说明。
 * @exception nc.ui.bd.datainit.BusinessException 异常说明。
 */
protected ArrayList queryKlfxMaindataInfo(String sWhereClause, String sLoginDate,String sinnerWhere) throws Exception {
	/**
	SELECT 
	--//efef.*,
	
	efef.pk_corp,efef.corpname,efef.cwarehouseid,efef.cwarehousecode,efef.cwarehousename,
	efef.ccalbodyid,efef.ccalbodycode,efef.ccalbodyname,
	efef.cinventoryid,efef.cinventorycode,efef.invname, efef.invspec, efef.invtype, 
	efef.measdocname,efef.cwarehouseclassid,efef.xcl,
	efef.vplanpsn,efef.abctype,
	efef.def1,efef.def2,efef.def3,efef.def4,efef.def5,
	efef.def6,efef.def7,efef.def8,efef.def9,efef.def10,
	efef.def11,efef.def12,efef.def13,efef.def14,efef.def15,
	efef.def16,efef.def17,efef.def18,efef.def19,efef.def20,
	abab.averageinnum7days, cdcd.averageinnum30days 
	from (
	select * from (
	select a.pk_corp,b.unitname as corpname,
	whclass.pk_calbody as ccalbodyid,whclass.bodycode as ccalbodycode,whclass.bodyname as ccalbodyname,
	a.cwarehouseid,c.storcode as cwarehousecode,c.storname as cwarehousename,
	a.cinventoryid,
	inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, 
	meas1.measname AS measdocname, 
	c.pk_calbody as cwarehouseclassid,a.xcl,
	invp.pk_psndoc4 as pk_psndoc4 ,psn.psnname as vplanpsn,invman.abctype as abctype,
	inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5,
	inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10,
	inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15,
	inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20
	FROM (
		--//现存量
		select * from (SELECT pk_corp, cwarehouseid, cinventoryid,
			SUM(COALESCE (ninnum,0.0)) - SUM(COALESCE (noutnum, 0.0)) AS xcl
				  	FROM ic_keep_detail4
					GROUP BY pk_corp, cwarehouseid, cinventoryid
		     ) bb
		WHERE xcl > 0
		  ) a 
	LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp 
	LEFT OUTER JOIN bd_stordoc c
	on a.cwarehouseid=c.pk_stordoc 
		INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody 
	
	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc
	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc 
	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc 
	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl
	 INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and c.pk_calbody = invp.pk_calbody 
	 LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc  	 	
	 	  	 
	) aabb 
	--where whereclause
	)efef 
	LEFT OUTER JOIN (
	--//七日均入库量
		  	SELECT pk_corp, cwarehouseid, cinventoryid, 
			SUM(COALESCE (ninnum, 0.0)) / 7 AS averageinnum7days
			FROM ic_keep_detail4
		  	WHERE DATEDIFF(day, CONVERT(datetime, dbizdate),
			GETDATE()) <= 7 AND ninnum > 0
			GROUP BY pk_corp, cwarehouseid, cinventoryid) abab 
	ON efef.pk_corp = abab.pk_corp AND efef.cwarehouseid = abab.cwarehouseid 
		AND efef.cinventoryid = abab.cinventoryid 
	LEFT OUTER JOIN (
	--//三十日均入库量
		  	SELECT pk_corp, cwarehouseid, cinventoryid,
			SUM(COALESCE (ninnum, 0.0)) / 30 AS averageinnum30days
			FROM ic_keep_detail4
		  	WHERE DATEDIFF(day, CONVERT(datetime, dbizdate), GETDATE()) <= 30 
			AND ninnum > 0
			GROUP BY pk_corp, cwarehouseid, cinventoryid) cdcd 
	ON efef.pk_corp = cdcd.pk_corp AND efef.cwarehouseid = cdcd.cwarehouseid 
		AND efef.cinventoryid = cdcd.cinventoryid
	ORDER BY efef.pk_corp,efef.ccalbodyid, efef.cwarehouseid, efef.cinventoryid
	*/
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;

	ArrayList alResultData = new ArrayList(); //结果
	int ooo = 0;
	StringBuffer sbSql = new StringBuffer();

	try
	{
		sbSql
			.append(" SELECT ")
			.append(" efef.pk_corp,efef.corpname,efef.cwarehouseid,efef.cwarehousecode,efef.cwarehousename,")
			.append(" efef.ccalbodyid,efef.ccalbodycode,efef.ccalbodyname,")
			.append(" efef.cinventoryid,efef.cinventorycode,efef.invname, efef.invspec, efef.invtype, ")
			.append(" efef.measdocname,efef.cwarehouseclassid,efef.xcl,")
			.append(" efef.vplanpsn,efef.abctype,")
			.append(" efef.def1,efef.def2,efef.def3,efef.def4,efef.def5,")
			.append(" efef.def6,efef.def7,efef.def8,efef.def9,efef.def10,")
			.append(" efef.def11,efef.def12,efef.def13,efef.def14,efef.def15,")
			.append(" efef.def16,efef.def17,efef.def18,efef.def19,efef.def20,")
			.append(" abab.averageinnum7days, cdcd.averageinnum30days ")
			.append(" from ( select * from ( select a.pk_corp,b.unitname as corpname,")
			.append(" whclass.pk_calbody as ccalbodyid,whclass.bodycode as ccalbodycode,whclass.bodyname as ccalbodyname,")
			.append(" a.cwarehouseid,c.storcode as cwarehousecode,c.storname as cwarehousename,a.cinventoryid,")
			.append(" inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, ")
			.append(" meas1.measname AS measdocname, c.pk_calbody as cwarehouseclassid,a.xcl, ")
			.append(" invp.pk_psndoc4 as pk_psndoc4 ,psn.psnname as vplanpsn ,invman.abctype as abctype, ")
			.append(" inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5, ")
			.append(" inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10, ")
			.append(" inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15, ")
			.append(" inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20 ")
			.append(" FROM (select * from (SELECT pk_corp, cwarehouseid, cinventoryid,")
			.append(" SUM(COALESCE (ninnum,0.0)) - SUM(COALESCE (noutnum, 0.0)) AS xcl")
			.append(" FROM ic_keep_detail4 "+((sinnerWhere!=null && sinnerWhere.trim().length()>0)?(" where 1=1 "+sinnerWhere):"")+" GROUP BY pk_corp, cwarehouseid, cinventoryid ) bb")
			.append(" WHERE xcl > 0 ) a LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp ")
			.append(" LEFT OUTER JOIN bd_stordoc c on a.cwarehouseid=c.pk_stordoc ")
			.append("	INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody ")
			.append("	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc")
			.append("	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc ")
			.append("	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc ")
			.append("	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl")
            .append("	 INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and whclass.pk_calbody = invp.pk_calbody ")
			.append("	 LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc  ")
			.append(" ) aabb  where " + sWhereClause)
			.append(" )efef LEFT OUTER JOIN (SELECT pk_corp, cwarehouseid, cinventoryid, ")
			.append(" SUM(COALESCE (ninnum, 0.0)) / 7 AS averageinnum7days FROM ic_keep_detail4")
			.append(" WHERE DATEDIFF(day, CONVERT(datetime, dbizdate),convert(datetime,'" + sLoginDate + "')) <= 7 AND ninnum > 0")
			.append(" GROUP BY pk_corp, cwarehouseid, cinventoryid) abab ")
			.append(" ON efef.pk_corp = abab.pk_corp AND efef.cwarehouseid = abab.cwarehouseid ")
			.append(" AND efef.cinventoryid = abab.cinventoryid LEFT OUTER JOIN (")
			.append(" SELECT pk_corp, cwarehouseid, cinventoryid,")
			.append(" SUM(COALESCE (ninnum, 0.0)) / 30 AS averageinnum30days")
			.append(" FROM ic_keep_detail4 WHERE DATEDIFF(day, CONVERT(datetime, dbizdate),convert(datetime,'" + sLoginDate + "')) <= 30 ")
			.append(" AND ninnum > 0 GROUP BY pk_corp, cwarehouseid, cinventoryid) cdcd ")
			.append(" ON efef.pk_corp = cdcd.pk_corp AND efef.cwarehouseid = cdcd.cwarehouseid ")
			.append(" AND efef.cinventoryid = cdcd.cinventoryid ORDER BY efef.pk_corp,efef.ccalbodyid,efef.cwarehouseid, efef.cinventoryid");

		con = getConnection();
		stmt = con.prepareStatement(sbSql.toString());

		rs = stmt.executeQuery();

		StockAgeItemVO pivo = new StockAgeItemVO();
		ResultSetMetaData meta = rs.getMetaData();
		nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
		while (rs.next())
		{
			//nc.vo.scm.pub.SCMEnv.out("第" + ooo + "条记录");
			ooo++;
			pivo = new StockAgeItemVO();
			//setData(rs, pivo);
			gm.setData(rs, pivo, meta);
			if (null == pivo)
			{
				nc.vo.scm.pub.SCMEnv.out("无数据，应检查数据库...");
				return null;
			}
			alResultData.add(pivo);
		}
		return alResultData;

	}
	catch (Exception e)
	{
		nc.vo.scm.pub.SCMEnv.error(e);
		throw e;
	}
	finally
	{
		try
		{
			if (rs != null)
				rs.close();
		}
		catch (Exception e)
		{
		}
		try
		{
			if (stmt != null)
				stmt.close();
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
				con.close();
		}
		catch (Exception e)
		{

		}

	}
}

/**
 * 创建者：仲瑞庆
 * 功能：查出行中主要数据
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-22 8:56:10)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.util.ArrayList
 * @param sWhereClause java.lang.String
 * @exception java.sql.SQLException 异常说明。
 * @exception javax.transaction.SystemException 异常说明。
 * @exception nc.ui.bd.datainit.BusinessException 异常说明。
 */
protected ArrayList queryKlfxMaindataInfo_IA(String sWhereClause, String sLoginDate) throws Exception {
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;

	ArrayList alResultData = new ArrayList(); //结果
	StringBuffer sbSql = new StringBuffer();

	try
	{
//		sbSql
//			.append(" SELECT ")
//			.append(" efef.pk_corp,efef.corpname,efef.cwarehouseid,efef.cwarehousecode,efef.cwarehousename,")
//			.append(" efef.cinventoryid,efef.cinventorycode,efef.invname, efef.invspec, efef.invtype, ")
//			.append(" efef.measdocname,efef.cwarehouseclassid,efef.xcl")
//			.append(" from ( select * from ( select a.pk_corp,b.unitname as corpname,")
//			.append(" a.cwarehouseid,c.storcode as cwarehousecode,c.storname as cwarehousename,a.cinventoryid,")
//			.append(" inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, ")
//			.append(" meas1.measname AS measdocname, c.pk_calbody as cwarehouseclassid,a.xcl")
//			.append(" FROM (select * from (SELECT pk_corp, cwarehouseid, cinventoryid,")
//			.append(" SUM(COALESCE (ninnum,0.0)) AS xcl")
//			.append(" FROM ic_keep_detail4 GROUP BY pk_corp, cwarehouseid, cinventoryid ) bb")
//			.append(" WHERE xcl > 0 ) a LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp ")
//			.append(" LEFT OUTER JOIN bd_stordoc c on a.cwarehouseid=c.pk_stordoc ")
//			.append("	INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody ")
//			.append("	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc")
//			.append("	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc ")
//			.append("	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc ")
//			.append("	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl")
//			.append(" ) aabb where " + sWhereClause)
//			.append(" )efef LEFT OUTER JOIN (SELECT pk_corp, cwarehouseid, cinventoryid ")
//			.append(" FROM ic_keep_detail4")
//			.append(" WHERE ninnum > 0")
//			.append(" GROUP BY pk_corp, cwarehouseid, cinventoryid) abab ")
//			.append(" ON efef.pk_corp = abab.pk_corp AND efef.cwarehouseid = abab.cwarehouseid ")
//			.append(" AND efef.cinventoryid = abab.cinventoryid LEFT OUTER JOIN (")
//			.append(" SELECT pk_corp, cwarehouseid, cinventoryid")
//			.append(" FROM ic_keep_detail4 WHERE ")
//			.append("  ninnum > 0 GROUP BY pk_corp, cwarehouseid, cinventoryid) cdcd ")
//			.append(" ON efef.pk_corp = cdcd.pk_corp AND efef.cwarehouseid = cdcd.cwarehouseid ")
//			.append(" AND efef.cinventoryid = cdcd.cinventoryid ORDER BY efef.pk_corp, efef.cwarehouseid, efef.cinventoryid");

		sbSql.append("SELECT pk_corp, cwarehouseid, cinventoryid,  SUM(COALESCE (ninnum, 0.0)) AS xcl FROM ic_keep_detail4 WHERE " +
				sWhereClause+" GROUP BY pk_corp, cwarehouseid, cinventoryid ");
		con = getConnection();
		stmt = con.prepareStatement(sbSql.toString());

		rs = stmt.executeQuery();

		StockAgeItemVO pivo = new StockAgeItemVO();
		ResultSetMetaData meta = rs.getMetaData();
		nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
		while (rs.next())
		{
			pivo = new StockAgeItemVO();
     		gm.setData(rs, pivo, meta);
			if (null == pivo)
			{
				nc.vo.scm.pub.SCMEnv.out("无数据，应检查数据库...");
				return null;
			}
			alResultData.add(pivo);
		}
		return alResultData;

	}
	catch (Exception e)
	{
		nc.vo.scm.pub.SCMEnv.error(e);
		throw e;
	}
	finally
	{
		try
		{
			if (rs != null)
				rs.close();
		}
		catch (Exception e)
		{
		}
		try
		{
			if (stmt != null)
				stmt.close();
		}
		catch (Exception e)
		{
		}
		try
		{
			if (con != null)
				con.close();
		}
		catch (Exception e)
		{

		}

	}
}

/**
 * 创建者：仲瑞庆
 * 功能：查出行中附加数据,无本单据及入库单据的HID
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-22 8:56:10)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.util.ArrayList
 * @param sWhereClause java.lang.String
 * @exception java.sql.SQLException 异常说明。
 * @exception javax.transaction.SystemException 异常说明。
 * @exception nc.ui.bd.datainit.BusinessException 异常说明。
 */
protected ArrayList queryKlfxOtherdataInfo(String sWhereClause)
	throws
		java.sql.SQLException,
		javax.transaction.SystemException,
		BusinessException {
	/**
	--//进行库龄时段分析用的表
	select  pk_corp,ccalbodyid,cwarehouseid,cinventoryid,other,dbizdate,
	case when (noutnum is null)or(noutnum>=0) then 0 else -noutnum end + 
	case when ninnum>=0 then ninnum else 0 end as ninnum,
	case when noutnum>=0 then noutnum else 0 end + 
	case when (ninnum is null)or(ninnum>=0) then 0 else -ninnum end as noutnum
	from(
	select ads.pk_corp,ads.ccalbodyid,ads.ccalbodyid,ads.cwarehouseid,ads.cinventoryid,
	rtrim(coalesce(ads.castunitid,'_'))||'+'||rtrim(coalesce(ads.vbatchcode,'_'))||'+'||
	rtrim(coalesce(ads.vfree1,'_'))||'+'||rtrim(coalesce(ads.vfree2,'_'))||'+'||
	rtrim(coalesce(ads.vfree3,'_'))||'+'||rtrim(coalesce(ads.vfree4,'_'))||'+'||
	rtrim(coalesce(ads.vfree5,'_'))||'+'||rtrim(coalesce(ads.vfree6,'_'))||'+'||
	rtrim(coalesce(ads.vfree7,'_'))||'+'||rtrim(coalesce(ads.vfree8,'_'))||'+'||
	rtrim(coalesce(ads.vfree9,'_'))||'+'||rtrim(coalesce(ads.vfree10,'_')) as other,
	ads.dbizdate,
	sum(coalesce(ads.ninnum,0.0)) as ninnum,sum(coalesce(ads.noutnum,0.0)) as noutnum
	from ic_keep_detail4 ads
	INNER JOIN (
	select * from (
	select a.pk_corp,b.unitname as corpname,
	a.cwarehouseid,c.storname as cwarehousename,
	a.cinventoryid,
	inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, 
	meas1.measname AS measdocname, 
	c.pk_calbody as cwarehouseclassid,
	invp.pk_psndoc4 as pk_psndoc4 ,psn.psnname as vplanpsn,invman.abctype as abctype,
	inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5,
	inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10,
	inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15,
	inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20
	FROM (
		--//现存量
		select * from (SELECT pk_corp, cwarehouseid, cinventoryid,
			SUM(COALESCE (ninnum,0.0)) - SUM(COALESCE (noutnum, 0.0)) AS xcl
	              	FROM ic_keep_detail4
	                GROUP BY pk_corp, cwarehouseid, cinventoryid
		     ) bb
		WHERE xcl > 0
	      ) a 
	LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp 
	LEFT OUTER JOIN bd_stordoc c
	on a.cwarehouseid=c.pk_stordoc 
		INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody 

	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc
	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc 
	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc 
	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl
	 INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and c.pk_calbody = invp.pk_calbody 
	 LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc  	 
	 
	) aabb 
	--where whereclause
	) fgh 
	ON ads.pk_corp=fgh.pk_corp and ads.cwarehouseid=fgh.cwarehouseid 
	and ads.cinventoryid=fgh.cinventoryid
	-- sOtherWhere
	
	group by ads.pk_corp,ads.ccalbodyid,ads.cwarehouseid,ads.cinventoryid,ads.castunitid,ads.vbatchcode,
	ads.vfree1,ads.vfree2,ads.vfree3,ads.vfree4,ads.vfree5,
	ads.vfree6,ads.vfree7,ads.vfree8,ads.vfree9,ads.vfree10,
	ads.dbizdate
	)bababa
	order by pk_corp,ccalbodyid,cwarehouseid,cinventoryid,other,dbizdate
	--查出的结果置入ArrayList以供分析时段及数量
	*/
	Connection con= null;
	PreparedStatement stmt= null;
	ResultSet rs= null;

	ArrayList alResultData= new ArrayList(); //结果
	int ooo= 0;
	StringBuffer sbSql= new StringBuffer();
	
	String sOtherWhere = null;
	if(sWhereClause!=null){
		if(sWhereClause.indexOf("cwarehouseid")>=0){
			
		}else if(sWhereClause.indexOf("cwarehouseclassid")>=0){
			//排除转库单,组织内调拨订单,
			sOtherWhere=" where ( coalesce(ads.cbilltypecode,' ') <> '4K' and  " +
					" coalesce(ads.csourcetype,' ') <> '4K' and " +
					" coalesce(ads.csourcetype,' ') <> '5I' and " +
					" coalesce(ads.cfirsttype,' ') <> '5I' ) ";
		}else{
			//排除转库单,组织内调拨订单,组织间调拨订单
			sOtherWhere =" where ( coalesce(ads.cbilltypecode,' ') <> '4K' and " +
					"  coalesce(ads.csourcetype,' ') <> '4K' and " +
					"  coalesce(ads.csourcetype,' ') <> '5I' and " +
					"  coalesce(ads.cfirsttype,' ') <> '5I'  and " +
				    "  coalesce(ads.csourcetype,' ') <> '5E' and " +
				    "  coalesce(ads.cfirsttype,' ') <> '5E'  ) ";
		}
	}

	try {
		sbSql
			.append(" select  pk_corp,ccalbodyid,cwarehouseid,cinventoryid,other,dbizdate,")
			.append(" case when (noutnum is null)or(noutnum>=0) then 0 else -noutnum end + ")
			.append(" case when ninnum>=0 then ninnum else 0 end as ninnum,")
			.append(" case when noutnum>=0 then noutnum else 0 end + ")
			.append(" case when (ninnum is null)or(ninnum>=0) then 0 else -ninnum end as noutnum from(")
			.append(" select ads.pk_corp,ads.ccalbodyid,ads.cwarehouseid,ads.cinventoryid,")
			.append(" rtrim(coalesce(ads.castunitid,'_'))||'+'||rtrim(coalesce(ads.vbatchcode,'_'))||'+'||")
			.append(" rtrim(coalesce(ads.vfree1,'_'))||'+'||rtrim(coalesce(ads.vfree2,'_'))||'+'||")
			.append(" rtrim(coalesce(ads.vfree3,'_'))||'+'||rtrim(coalesce(ads.vfree4,'_'))||'+'||")
			.append(" rtrim(coalesce(ads.vfree5,'_'))||'+'||rtrim(coalesce(ads.vfree6,'_'))||'+'||")
			.append(" rtrim(coalesce(ads.vfree7,'_'))||'+'||rtrim(coalesce(ads.vfree8,'_'))||'+'||")
			.append(" rtrim(coalesce(ads.vfree9,'_'))||'+'||rtrim(coalesce(ads.vfree10,'_')) as other,")
			.append(" ads.dbizdate,sum(coalesce(ads.ninnum,0.0)) as ninnum,sum(coalesce(ads.noutnum,0.0)) as noutnum")
			.append(" from ic_keep_detail4 ads INNER JOIN (	select * from (")
			.append(" select a.pk_corp,b.unitname as corpname,a.cwarehouseid,c.storname as cwarehousename,")
			.append(" a.cinventoryid,inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, ")
			.append(" meas1.measname AS measdocname,c.pk_calbody as cwarehouseclassid, ")
			.append(" invp.pk_psndoc4 as pk_psndoc4 ,psn.psnname as vplanpsn ,invman.abctype as abctype, ")
			.append(" inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5, ")
			.append(" inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10, ")
			.append(" inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15, ")
			.append(" inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20 ")
			.append(" FROM (")
			.append(" select * from (SELECT pk_corp, cwarehouseid, cinventoryid,")
			.append(" SUM(COALESCE (ninnum,0.0)) - SUM(COALESCE (noutnum, 0.0)) AS xcl")
			.append(" FROM ic_keep_detail4 GROUP BY pk_corp, cwarehouseid, cinventoryid")
			.append(" ) bb WHERE xcl > 0 ) a LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp ")
			.append(" LEFT OUTER JOIN bd_stordoc c on a.cwarehouseid=c.pk_stordoc ")
			.append("	INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody ")
			.append("	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc")
			.append("	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc ")
			.append("	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc ")
			.append("	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl")
			.append("	 INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and whclass.pk_calbody = invp.pk_calbody ")
			.append("	 LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc  ")
			.append("  ) aabb where " + sWhereClause)
			.append(" ) fgh ON ads.pk_corp=fgh.pk_corp and ads.cwarehouseid=fgh.cwarehouseid ")
			.append(" and ads.cinventoryid=fgh.cinventoryid")
			.append( sOtherWhere==null?"":sOtherWhere)
			.append(" group by ads.pk_corp,ads.ccalbodyid,ads.cwarehouseid,ads.cinventoryid,ads.castunitid,ads.vbatchcode,")
			.append(" ads.vfree1,ads.vfree2,ads.vfree3,ads.vfree4,ads.vfree5,")
			.append(" ads.vfree6,ads.vfree7,ads.vfree8,ads.vfree9,ads.vfree10,")
			.append(" ads.dbizdate)bababa order by pk_corp,ccalbodyid,cwarehouseid,cinventoryid,other,dbizdate");

		con= getConnection();
		stmt= con.prepareStatement(sbSql.toString());

		rs= stmt.executeQuery();
		ResultSetMetaData meta= rs.getMetaData();
		int colnum = meta.getColumnCount();
		ArrayList pivo= new ArrayList();
	
		nc.bs.ic.pub.GenMethod gm=new nc.bs.ic.pub.GenMethod();
		while (rs.next()) {
			//nc.vo.scm.pub.SCMEnv.out("第" + ooo + "条记录");
			ooo++;
			pivo= new ArrayList();
			//setData(rs, pivo, meta);
			
			//gm.setData(rs,pivo,meta);
			for (int i = 1; i <= colnum; i++){
				//ccalbodyid
				if(i==2)
					continue;
				pivo.add(rs.getObject(i));
			}
			
			if (null == pivo) {
				nc.vo.scm.pub.SCMEnv.out("无数据，应检查数据库...");
				return null;
			}
			alResultData.add(pivo);
		}

		return alResultData;
	
	} finally {
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (Exception e) {
		}
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {

		}
	}
	
}


/**
 * 创建者：仲瑞庆
 * 功能：查出行中附加数据,无本单据及入库单据的HID
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-22 8:56:10)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.util.ArrayList
 * @param sWhereClause java.lang.String
 * @exception java.sql.SQLException 异常说明。
 * @exception javax.transaction.SystemException 异常说明。
 * @exception nc.ui.bd.datainit.BusinessException 异常说明。
 */
protected ArrayList queryKlfxOtherdataInfo_IA(String sWhereClause)
	throws java.sql.SQLException,javax.transaction.SystemException,BusinessException {
	Connection con= null;
	PreparedStatement stmt= null;
	ResultSet rs= null;

	ArrayList alResultData= new ArrayList(); //结果
	int ooo= 0;
	StringBuffer sbSql= new StringBuffer();

	try {
//		sbSql
//			.append(" select  pk_corp,cwarehouseid,cinventoryid,other,dbizdate,")
//			.append(" case when (noutnum is null)or(noutnum>=0) then 0 else -noutnum end + ")
//			.append(" case when ninnum>=0 then ninnum else 0 end as ninnum,")
//			.append(" case when noutnum>=0 then noutnum else 0 end + ")
//			.append(" case when (ninnum is null)or(ninnum>=0) then 0 else -ninnum end as noutnum from(")
//			.append(" select ads.pk_corp,ads.cwarehouseid,ads.cinventoryid,")
//			.append(" rtrim(coalesce(ads.castunitid,'_'))||'+'||rtrim(coalesce(ads.vbatchcode,'_'))||'+'||")
//			.append(" rtrim(coalesce(ads.vfree1,'_'))||'+'||rtrim(coalesce(ads.vfree2,'_'))||'+'||")
//			.append(" rtrim(coalesce(ads.vfree3,'_'))||'+'||rtrim(coalesce(ads.vfree4,'_'))||'+'||")
//			.append(" rtrim(coalesce(ads.vfree5,'_'))||'+'||rtrim(coalesce(ads.vfree6,'_'))||'+'||")
//			.append(" rtrim(coalesce(ads.vfree7,'_'))||'+'||rtrim(coalesce(ads.vfree8,'_'))||'+'||")
//			.append(" rtrim(coalesce(ads.vfree9,'_'))||'+'||rtrim(coalesce(ads.vfree10,'_')) as other,")
//			.append(" ads.dbizdate,sum(coalesce(ads.ninnum,0.0)) as ninnum,sum(coalesce(ads.noutnum,0.0)) as noutnum")
//			.append(" from ic_keep_detail4 ads INNER JOIN (	select * from (")
//			.append(" select a.pk_corp,b.unitname as corpname,a.cwarehouseid,c.storname as cwarehousename,")
//			.append(" a.cinventoryid,inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, ")
//			.append(" meas1.measname AS measdocname,c.pk_calbody as cwarehouseclassid	FROM (")
//			.append(" select * from (SELECT pk_corp, cwarehouseid, cinventoryid,")
//			.append(" SUM(COALESCE (ninnum,0.0)) AS xcl")
//			.append(" FROM ic_keep_detail4 GROUP BY pk_corp, cwarehouseid, cinventoryid")
//			.append(" ) bb WHERE xcl > 0 ) a LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp ")
//			.append(" LEFT OUTER JOIN bd_stordoc c on a.cwarehouseid=c.pk_stordoc ")
//			.append("	INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody ")
//			.append("	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc")
//			.append("	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc ")
//			.append("	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc ")
//			.append("	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl")
//			.append("  ) aabb where " + sWhereClause)
//			.append(" ) fgh ON ads.pk_corp=fgh.pk_corp and ads.cwarehouseid=fgh.cwarehouseid ")
//			.append(" and ads.cinventoryid=fgh.cinventoryid")
//			.append(" group by ads.pk_corp,ads.cwarehouseid,ads.cinventoryid,ads.castunitid,ads.vbatchcode,")
//			.append(" ads.vfree1,ads.vfree2,ads.vfree3,ads.vfree4,ads.vfree5,")
//			.append(" ads.vfree6,ads.vfree7,ads.vfree8,ads.vfree9,ads.vfree10,")
//			.append(" ads.dbizdate)bababa order by pk_corp,cwarehouseid,cinventoryid,other,dbizdate");

		
		/**
		 * 
SELECT pk_corp , cwarehouseid , cinventoryid , 1, dbizdate , SUM(COALESCE (ninnum, 0.0)) AS ninnum, 
              SUM(COALESCE (noutnum, 0.0)) AS noutnum
FROM ic_keep_detail4  where (pk_corp = '1001') AND 
                       cinventoryid IN ('1001AA1000000001BVEK') group by pk_corp, cwarehouseid, cinventoryid,dbizdate

		 */
		sbSql.append("SELECT pk_corp , cwarehouseid , cinventoryid , 1, dbizdate , SUM(COALESCE (ninnum, 0.0)) AS ninnum, SUM(COALESCE (noutnum, 0.0)) AS noutnum FROM ic_keep_detail4  where " +
				sWhereClause+" group by pk_corp, cwarehouseid, cinventoryid,dbizdate ");

		con= getConnection();
		stmt= con.prepareStatement(sbSql.toString());

		rs= stmt.executeQuery();
		ResultSetMetaData meta= rs.getMetaData();
		ArrayList pivo= new ArrayList();
	
		nc.bs.ic.pub.GenMethod gm=new nc.bs.ic.pub.GenMethod();
		while (rs.next()) {
			//nc.vo.scm.pub.SCMEnv.out("第" + ooo + "条记录");
			ooo++;
			pivo= new ArrayList();
			//setData(rs, pivo, meta);
			gm.setData(rs,pivo,meta);
			if (null == pivo) {
				nc.vo.scm.pub.SCMEnv.out("无数据，应检查数据库...");
				return null;
			}
			alResultData.add(pivo);
		}

		return alResultData;
	
	} finally {
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (Exception e) {
		}
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {

		}
	}
}









/**
 * 创建者：仲瑞庆
 * 功能：预警分析的查询
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-21 21:03:58)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.ic.ic637.StockAgeItemVO
 * @param sDays java.lang.String
 * @exception java.sql.SQLException 异常说明。
 * @exception javax.transaction.SystemException 异常说明。
 * @exception nc.ui.bd.datainit.BusinessException 异常说明。
 */
protected ArrayList queryKlYjfxInfo(
	String sDays,
	String sLoginDate,
	String sWhereClause)
	throws java.sql.SQLException, javax.transaction.SystemException, BusinessException {
	/**
	--//单独的功能块
	--//预警分析
	select 
	--a.*,
	a.pk_corp, a.cwarehouseid, a.cinventoryid, a.castunitid, a.vbatchcode,
	a.vfree1, a.vfree2, a.vfree3, a.vfree4, a.vfree5,
	a.vfree6, a.vfree7, a.vfree8, a.vfree9, a.vfree10, a.xcl,
	a.ninnum, a.noutnum, a.warnoutdays
	b.unitname as corpname,
	c.storcode as cwarehousecode,c.storname as cwarehousename,
	inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype, 
	meas1.measname AS measdocname, 
	meas2.measname AS castunitname, 
	c.pk_calbody as cwarehouseclassid
	from(
	select 
	--ghw.*,
	ghw.pk_corp,ghw.cwarehouseid,ghw.cinventoryid,ghw.castunitid,ghw.vbatchcode,
	ghw.vfree1,ghw.vfree2,ghw.vfree3,ghw.vfree4,ghw.vfree5,
	ghw.vfree6,ghw.vfree7,ghw.vfree8,ghw.vfree9,ghw.vfree10,ghw.xcl,
	cwg.ninnum,cwg.noutnum,coalesce(cwg.warnoutdays,0) as warnoutdays from
	(
	select * from (
	select pk_corp,cwarehouseid,cinventoryid,castunitid,vbatchcode,
	vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,
	sum(coalesce(ninnum,0.0))-sum(coalesce(noutnum,0.0)) as xcl
	from (select 
	--a.*,
	a.pk_corp,a.cwarehouseid,a.cinventoryid,a.castunitid,a.vbatchcode,
	a.vfree1,a.vfree2,a.vfree3,a.vfree4,a.vfree5,
	a.vfree6,a.vfree7,a.vfree8,a.vfree9,a.vfree10,a.ninnum,a.noutnum,
	c.pk_calbody as cwarehouseclassid from ic_keep_detail4 a
	LEFT OUTER JOIN bd_stordoc c
	on a.cwarehouseid=c.pk_stordoc ) a
	where sWhereClause
	group by pk_corp,cwarehouseid,cinventoryid,castunitid,vbatchcode,
	vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10
	) dww
	where xcl>0
	) ghw
	left outer join (
	select pk_corp,cwarehouseid,cinventoryid,castunitid,vbatchcode,
	vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,
	sum(case when (noutnum is null)or(noutnum>=0) then 0 else -noutnum end + 
	 case when ninnum>=0 then ninnum else 0 end) as ninnum,
	sum(case when noutnum>=0 then noutnum else 0 end + 
	 case when (ninnum is null)or(ninnum>=0) then 0 else -ninnum end) as noutnum,
	DATEDIFF(day, CONVERT(datetime, dbizdate),GETDATE())-warningdays as warnoutdays
	from (select 
	--a.*,
	a.pk_corp, a.cwarehouseid, a.cinventoryid, a.castunitid, a.vbatchcode,
	a.vfree1, a.vfree2, a.vfree3, a.vfree4, a.vfree5,
	a.vfree6, a.vfree7, a.vfree8, a.vfree9, a.vfree10, a.noutnum, a.ninnum, a.dbizdate,
	c.pk_calbody as cwarehouseclassid from ic_keep_detail4 a
	LEFT OUTER JOIN bd_stordoc c
	on a.cwarehouseid=c.pk_stordoc ) a
	where sWhereClause
	group by pk_corp,cwarehouseid,cinventoryid,castunitid,vbatchcode,
	vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,dbizdate
	) cwg
	on ghw.pk_corp=cwg.pk_corp and ghw.cwarehouseid=cwg.cwarehouseid 
	and ghw.cinventoryid=cwg.cinventoryid and isnull(ghw.castunitid,' ')=isnull(cwg.castunitid,' ') 
	and isnull(ghw.vbatchcode,' ')=isnull(cwg.vbatchcode,' ') 
	and isnull(ghw.vfree1,' ')=isnull(cwg.vfree1,' ') and isnull(ghw.vfree2,' ')=isnull(cwg.vfree2,' ') 
	and isnull(ghw.vfree3,' ')=isnull(cwg.vfree3,' ') and isnull(ghw.vfree4,' ')=isnull(cwg.vfree4,' ') 
	and isnull(ghw.vfree5,' ')=isnull(cwg.vfree5,' ') and isnull(ghw.vfree6,' ')=isnull(cwg.vfree6,' ') 
	and isnull(ghw.vfree7,' ')=isnull(cwg.vfree7,' ') and isnull(ghw.vfree8,' ')=isnull(cwg.vfree8,' ') 
	and isnull(ghw.vfree9,' ')=isnull(cwg.vfree9,' ') and isnull(ghw.vfree10,' ')=isnull(cwg.vfree10,' ') 
	)a
	LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp
	
	LEFT OUTER JOIN bd_stordoc c
	on a.cwarehouseid=c.pk_stordoc
	INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody 
	
	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc
	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc 
	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc 
	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl 
	
	LEFT OUTER JOIN bd_measdoc meas2 ON a.castunitid=meas2.pk_measdoc 
	ORDER BY a.pk_corp, a.cwarehouseid, a.cinventoryid, a.castunitid, a.vbatchcode, a.vfree1, 
		a.vfree2, a.vfree3, a.vfree4, a.vfree5, a.vfree6, a.vfree7, a.vfree8, a.vfree9, a.vfree10, 
		a.warnoutdays DESC
	*/
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;

	ArrayList alResultData = new ArrayList(); //结果
	int ooo = 0;
	StringBuffer sbSql = new StringBuffer();
	if (sDays == null)
		return alResultData;
	sDays = sDays.trim();
	
	
	try {
		DefdefDMO defdmo = new DefdefDMO();
		sbSql
			.append(" select ")
			.append("	a.pk_corp,whclass.pk_calbody as ccalbodyid,a.cwarehouseid, a.cinventoryid, a.castunitid, a.vbatchcode,")
			.append("	a.vfree1, a.vfree2, a.vfree3, a.vfree4, a.vfree5,")
			.append("	a.vfree6, a.vfree7, a.vfree8, a.vfree9, a.vfree10, a.xcl,")
			.append("	a.ninnum, a.noutnum, a.warnoutdays, ")
			.append("	invman.abctype as abctype,whclass.bodycode as ccalbodycode, whclass.bodyname as ccalbodyname,psn.psnname as vplanpsn, ")
			.append("	inv.def1 as def1, inv.def2 as def2, inv.def3 as def3,inv.def4 as def4,inv.def5 as def5, ")
			.append("	inv.def6 as def6, inv.def7 as def7, inv.def8 as def8,inv.def9 as def9,inv.def10 as def10, ")
			.append("	inv.def11 as def11, inv.def12 as def12, inv.def13 as def13,inv.def14 as def14,inv.def15 as def15, ")
			.append("	inv.def16 as def16, inv.def17 as def17, inv.def18 as def18,inv.def19 as def19,inv.def20 as def20, ")
			.append("	b.unitname as corpname,c.storcode as cwarehousecode,c.storname as cwarehousename,")
			.append("   inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype,invman.abctype as abctype, ")
			.append("   meas1.measname AS measdocname, meas2.measname AS castunitname, ")
			.append("   c.pk_calbody as cwarehouseclassid from( ")
			.append(" select ")
			.append("	ghw.pk_corp,ghw.cwarehouseid,ghw.cinventoryid,ghw.castunitid,ghw.vbatchcode,")
			.append("	ghw.vfree1,ghw.vfree2,ghw.vfree3,ghw.vfree4,ghw.vfree5,")
			.append("	ghw.vfree6,ghw.vfree7,ghw.vfree8,ghw.vfree9,ghw.vfree10,ghw.xcl,")
			.append("	cwg.ninnum,cwg.noutnum,coalesce(cwg.warnoutdays,0) as warnoutdays from(select * from ( ")
			.append(" select pk_corp,cwarehouseid,cinventoryid,castunitid,vbatchcode,")
			.append(" vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,")
			.append(" sum(coalesce(ninnum,0.0))-sum(coalesce(noutnum,0.0)) as xcl ")
			.append(" from (select ")
			.append("	a.pk_corp,inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype,a.cwarehouseid,a.cinventoryid,a.castunitid,a.vbatchcode,")
			.append("	a.vfree1,a.vfree2,a.vfree3,a.vfree4,a.vfree5,")
			.append("	a.vfree6,a.vfree7,a.vfree8,a.vfree9,a.vfree10,a.ninnum,a.noutnum,")
			.append("	invp.pk_psndoc4 as pk_psndoc4,invman.abctype as abctype,")
			.append("   inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5, ")
			.append("   inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10, ")
			.append("   inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15, ")
			.append("   inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20, ")
			.append("	c.pk_calbody as cwarehouseclassid from ic_keep_detail4 a ")
			.append("	 INNER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc")
			.append("	 INNER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc ")
            .append("	 LEFT OUTER JOIN bd_calbody calbody ON calbody.pk_calbody=a.ccalbodyid ")
			.append("    INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and calbody.pk_calbody = invp.pk_calbody ")
			.append("    LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc ")
			.append(" LEFT OUTER JOIN bd_stordoc c ")
			.append(" on a.cwarehouseid=c.pk_stordoc ) a ")
			.append("	where " + sWhereClause)
			.append(" group by pk_corp,cwarehouseid,cinventoryid,castunitid,vbatchcode,")
			.append(" vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10")
			.append(" ) dww where xcl>0) ghw left outer join (select pk_corp,cwarehouseid,cinventoryid,castunitid,vbatchcode,")
			.append(" vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,")
			.append(" sum(case when (noutnum is null)or(noutnum>=0) then 0 else -noutnum end + ")
			.append(" case when ninnum>=0 then ninnum else 0 end) as ninnum,")
			.append(" sum(case when noutnum>=0 then noutnum else 0 end + ")
			.append(" case when (ninnum is null)or(ninnum>=0) then 0 else -ninnum end) as noutnum,")
			.append(
				" DATEDIFF(day, CONVERT(datetime, min(dbizdate)),convert(datetime,'"
					+ sLoginDate
					+ "'))-"
					+ sDays
					+ " as warnoutdays ")
			.append(" from (select ")
			.append("	a.pk_corp, a.cwarehouseid, inv.invcode AS cinventorycode,inv.invname, inv.invspec, inv.invtype,a.cinventoryid, a.castunitid, a.vbatchcode,")
			.append("	a.vfree1, a.vfree2, a.vfree3, a.vfree4, a.vfree5,")
			.append("	a.vfree6, a.vfree7, a.vfree8, a.vfree9, a.vfree10, a.noutnum, a.ninnum, a.dbizdate,")
			.append("	invp.pk_psndoc4 as pk_psndoc4,invman.abctype as abctype,")
			.append("   inv.def1 as def1,inv.def2 as def2,inv.def3 as def3,inv.def4 as def4,inv.def5 as def5, ")
			.append("   inv.def6 as def6,inv.def7 as def7,inv.def8 as def8,inv.def9 as def9,inv.def10 as def10, ")
			.append("   inv.def11 as def11,inv.def12 as def12,inv.def13 as def13,inv.def14 as def14,inv.def15 as def15, ")
			.append("   inv.def16 as def16,inv.def17 as def17,inv.def18 as def18,inv.def19 as def19,inv.def20 as def20, ")
			.append("	c.pk_calbody as cwarehouseclassid from ic_keep_detail4 a ")
			.append("	 INNER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc")
			.append("	 INNER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc ")
			.append("	 LEFT OUTER JOIN bd_calbody calbody ON calbody.pk_calbody=a.ccalbodyid ")
			.append("    INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and calbody.pk_calbody = invp.pk_calbody ")
			.append("    LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc ")
			.append(" LEFT OUTER JOIN bd_stordoc c ")
			.append(" on a.cwarehouseid=c.pk_stordoc ) a ")
			.append("	where " + sWhereClause)
			.append(" group by pk_corp,cwarehouseid,cinventoryid,castunitid,vbatchcode,")
			.append(" vfree1,vfree2,vfree3,vfree4,vfree5,vfree6,vfree7,vfree8,vfree9,vfree10,dbizdate")
			.append(" ) cwg on ghw.pk_corp=cwg.pk_corp and ghw.cwarehouseid=cwg.cwarehouseid ")
			.append(" and ghw.cinventoryid=cwg.cinventoryid and isnull(ghw.castunitid,' ')=isnull(cwg.castunitid,' ') ")
			.append(" and isnull(ghw.vbatchcode,' ')=isnull(cwg.vbatchcode,' ') ")
			.append(" and isnull(ghw.vfree1,' ')=isnull(cwg.vfree1,' ') and isnull(ghw.vfree2,' ')=isnull(cwg.vfree2,' ') ")
			.append(" and isnull(ghw.vfree3,' ')=isnull(cwg.vfree3,' ') and isnull(ghw.vfree4,' ')=isnull(cwg.vfree4,' ') ")
			.append(" and isnull(ghw.vfree5,' ')=isnull(cwg.vfree5,' ') and isnull(ghw.vfree6,' ')=isnull(cwg.vfree6,' ') ")
			.append(" and isnull(ghw.vfree7,' ')=isnull(cwg.vfree7,' ') and isnull(ghw.vfree8,' ')=isnull(cwg.vfree8,' ') ")
			.append(" and isnull(ghw.vfree9,' ')=isnull(cwg.vfree9,' ') and isnull(ghw.vfree10,' ')=isnull(cwg.vfree10,' ') ")
			.append(" )a LEFT OUTER JOIN bd_corp b on a.pk_corp=b.pk_corp LEFT OUTER JOIN bd_stordoc c")
			.append(" on a.cwarehouseid=c.pk_stordoc INNER JOIN bd_calbody whclass ON whclass.pk_calbody=c.pk_calbody ")
			.append("	 LEFT OUTER JOIN bd_invmandoc invman ON a.cinventoryid = invman.pk_invmandoc")
			.append("	 LEFT OUTER JOIN bd_invbasdoc inv ON  invman.pk_invbasdoc = inv.pk_invbasdoc ")
			.append("	 LEFT OUTER JOIN bd_measdoc meas1 ON inv.pk_measdoc = meas1.pk_measdoc ")
			.append("	 LEFT OUTER JOIN bd_invcl invcl ON inv.pk_invcl = invcl.pk_invcl ")
			.append("    LEFT OUTER JOIN bd_measdoc meas2 ON a.castunitid=meas2.pk_measdoc ")
			.append("    INNER JOIN bd_produce invp ON a.cinventoryid = invp.pk_invmandoc and whclass.pk_calbody = invp.pk_calbody ")
			.append("    LEFT OUTER JOIN bd_psndoc psn ON invp.pk_psndoc4 = psn.pk_psndoc ")
			.append(" ORDER BY a.pk_corp,whclass.pk_calbody, a.cwarehouseid, a.cinventoryid, a.castunitid, a.vbatchcode, a.vfree1, ")
			.append(" a.vfree2, a.vfree3, a.vfree4, a.vfree5, a.vfree6, a.vfree7, a.vfree8, a.vfree9, a.vfree10, ")
			.append(" a.warnoutdays DESC");

		con = getConnection();
		stmt = con.prepareStatement(sbSql.toString());

		rs = stmt.executeQuery();

		StockAgeItemVO pivo = new StockAgeItemVO();
		ResultSetMetaData meta = rs.getMetaData();
		nc.bs.ic.pub.GenMethod gm = new nc.bs.ic.pub.GenMethod();
		while (rs.next()) {
			//nc.vo.scm.pub.SCMEnv.out("第" + ooo + "条记录");
			ooo++;
			pivo = new StockAgeItemVO();
			//			setData(rs, pivo);
			gm.setData(rs, pivo, meta);
			if (null == pivo) {
				nc.vo.scm.pub.SCMEnv.out("无数据，应检查数据库...");
				return null;
			}
			alResultData.add(pivo);
		}

		//读自由项

		if (alResultData.size() > 0)
			for (int j = 0; j < alResultData.size(); j++) {
				StockAgeItemVO tivo = new StockAgeItemVO();
				tivo = (StockAgeItemVO) alResultData.get(j);
				//先给出存货ID
				String sInvID = tivo.getCinventoryid().trim();
				//算出基础档案中的自由项VO
				FreeVO fvoBase = new FreeVO();
				fvoBase = defdmo.queryFreeVOByInvID(sInvID);
				//取出结果集中查出的自由项VO
				FreeVO fvoResult = new FreeVO();

				if (tivo.getFreevo()!=null&&tivo.getFreevo().getVfree0()!=null && tivo.getFreevo().getVfree0().length() > 0) {

					fvoResult = tivo.getFreevo();

					//合并两个VO
					for (int i = 1; i <= 10; i++) {
						if (fvoResult.getAttributeValue("vfree" + Integer.toString(i).trim()) != null)
							fvoBase.setAttributeValue(
								"vfree" + Integer.toString(i).trim(),
								fvoResult.getAttributeValue("vfree" + Integer.toString(i).trim()));
					}
					//置回结果集
					tivo.setFreevo(fvoBase);
					alResultData.set(j, tivo);
				}
			}

		return alResultData;
	}catch(Exception e){
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (Exception e) {
		}
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {

		}
	}
	
}


/**
 * 创建者：yb
 * 功能：将单价，金额查询出，并添入VO
 * 参数： 
 * 返回：
 * 例外：
 * 日期：(2001-8-23 11:44:47)
 * 修改日期，修改人，修改原因，注释标志：
 * @param alReturnValue java.util.ArrayList
 * @param kivos nc.vo.ic.ic637.StockAgeItemVO[]
 */
protected void fillMnyPriceIntoVO(StockAgeItemVO[] kivos,String sprevnumkey,String sprevmnykey,String sprevplanmnykey,int numcount) throws Exception {
	if (kivos==null || kivos.length<=0)
		return;
	
	HashMap hswaretoinvs = new HashMap();
	HashMap hswaretocal = new HashMap();
	ArrayList invlist = null;
	String ccalbodyid = null,cwarehouseid=null,cinventoryid=null;
	String pk_corp = (String)kivos[0].getAttributeValue("pk_corp");
	//按仓库分组存货
	for(int i=0,loop=kivos.length;i<loop;i++){
		cwarehouseid = (String)kivos[i].getAttributeValue("cwarehouseid");
		if(cwarehouseid==null)
			continue;
		cinventoryid = (String)kivos[i].getAttributeValue("cinventoryid");
		if(cinventoryid==null)
			continue;
		invlist = (ArrayList)hswaretoinvs.get(cwarehouseid);
		if(invlist==null){
			invlist = new ArrayList();
			hswaretoinvs.put(cwarehouseid,invlist);
		}
		invlist.add(cinventoryid);
		hswaretocal.put(cwarehouseid,kivos[i].getAttributeValue("ccalbodyid"));
		
	}
	
	//按仓库取价格
	Iterator iter = hswaretoinvs.entrySet().iterator();
	Map.Entry oentry = null;
	PriceDMO pricedmo = new PriceDMO();
	String[] invs = null;
	Hashtable hsprice = null;
	HashMap hsbalanceprice = new HashMap();
	HashMap hsplanprice = new HashMap();
	while(iter.hasNext()){
		oentry = (Map.Entry)iter.next();
		cwarehouseid=(String)oentry.getKey();
		ccalbodyid = (String)hswaretocal.get(cwarehouseid);
		invs=(String[])((ArrayList)oentry.getValue()).toArray(
				new String[((ArrayList)oentry.getValue()).size()]);
		//取存货核算价格
		hsprice = pricedmo.getBalancePrice(pk_corp,ccalbodyid,cwarehouseid,invs);
		if(hsprice!=null)
			hsbalanceprice.put(cwarehouseid,hsprice);
		//取计划价格
		hsprice = pricedmo.getPlanPrice(pk_corp,ccalbodyid,cwarehouseid,invs);
		if(hsprice!=null)
			hsplanprice.put(cwarehouseid,hsprice);
	}
	
	if(hsbalanceprice.size()==0 && hsplanprice.size()==0)
		return;
	
	//填充价格，同时计算金额
	UFDouble nprice=null,nplanprice = null;
	for(int i=0,loop=kivos.length;i<loop;i++){
		cwarehouseid = (String)kivos[i].getAttributeValue("cwarehouseid");
		if(cwarehouseid==null)
			continue;
		cinventoryid = (String)kivos[i].getAttributeValue("cinventoryid");
		if(cinventoryid==null)
			continue;
		//价格
		hsprice = (Hashtable)hsbalanceprice.get(cwarehouseid);
		if(hsprice!=null){
			nprice = (UFDouble)hsprice.get(cinventoryid);
			if(nprice!=null){
				kivos[i].setAttributeValue("nprice",nprice);
				kivos[i].setAttributeValue("nmny0",ICGenVO.mult(nprice,
						(UFDouble)kivos[i].getAttributeValue("averageinnum30days")));
				kivos[i].setAttributeValue("nmny1",ICGenVO.mult(nprice,
						(UFDouble)kivos[i].getAttributeValue("xcl")));
				kivos[i].setAttributeValue("nmny2",ICGenVO.mult(nprice,
						(UFDouble)kivos[i].getAttributeValue("averageinnum7days")));
				for(int k=0;k<numcount;k++){
					kivos[i].setAttributeValue(sprevmnykey+k,ICGenVO.mult(nprice,
							(UFDouble)kivos[i].getAttributeValue(sprevnumkey+k)));
				}
			}
		}
		//计划价
		hsprice = (Hashtable)hsplanprice.get(cwarehouseid);
		if(hsprice!=null){
			nprice = (UFDouble)hsprice.get(cinventoryid);
			if(nprice!=null){
				kivos[i].setAttributeValue("nplanprice",nprice);
				kivos[i].setAttributeValue("nplanmny0",ICGenVO.mult(nprice,
						(UFDouble)kivos[i].getAttributeValue("averageinnum30days")));
				kivos[i].setAttributeValue("nplanmny1",ICGenVO.mult(nprice,
						(UFDouble)kivos[i].getAttributeValue("xcl")));
				kivos[i].setAttributeValue("nplanmny2",ICGenVO.mult(nprice,
						(UFDouble)kivos[i].getAttributeValue("averageinnum7days")));
				for(int k=0;k<numcount;k++){
					kivos[i].setAttributeValue(sprevplanmnykey+k,ICGenVO.mult(nprice,
							(UFDouble)kivos[i].getAttributeValue(sprevnumkey+k)));
				}
			}
		}
	}
	
}

}