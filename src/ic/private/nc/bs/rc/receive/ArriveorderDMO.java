/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.rc.receive;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

import javax.naming.NamingException;

import nc.bs.framework.common.NCLocator;
import nc.bs.po.OrderDMO;
import nc.bs.pr.pray.PraybillDMO;
import nc.bs.pu.pub.PubDMO;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.bs.pub.para.SysInitDMO;
import nc.bs.pub.pf.IBackCheckState;
import nc.bs.pub.pf.ICheckState;
import nc.bs.pub.pf.IQueryData;
import nc.bs.pub.pf.IQueryData2;
import nc.bs.scm.pub.TempTableDMO;
import nc.itf.ic.service.IICToPU_StoreadminDMO;
import nc.itf.pu.pub.fw.LockTool;
import nc.itf.scm.cenpur.service.TempTableUtil;
import nc.itf.uap.sf.ICreateCorpQueryService;
import nc.vo.ic.pub.bill.GeneralBillVO;
import nc.vo.po.OrderHeaderVO;
import nc.vo.po.OrderItemVO;
import nc.vo.po.OrderVO;
import nc.vo.po.pub.OrderPubVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.para.SysInitVO;
import nc.vo.pub.pf.IPFSourceBillFinder;
import nc.vo.pub.pf.SourceBillInfo;
import nc.vo.rc.receive.ArriveorderBbVO;
import nc.vo.rc.receive.ArriveorderHeaderVO;
import nc.vo.rc.receive.ArriveorderItemVO;
import nc.vo.rc.receive.ArriveorderVO;
import nc.vo.rc.receive.CheckRsltItemVO;
import nc.vo.rc.receive.IArriveorderStatus;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.pu.BillStatus;
import nc.vo.scm.pu.BillTypeConst;
import nc.vo.scm.pu.PuPubVO;
import nc.vo.scm.pu.VariableConst;
import nc.vo.scm.pub.SCMEnv;
import nc.vo.scm.pub.TempTableVO;
import nc.vo.scm.pub.excp.RwtIcToPoException;
import nc.vo.scm.qc.pub.QcresultVO;

/**
 * Arriveorder的DMO类。
 *
 * 创建日期：(2001-6-8)
 * @author：晁志平
 */
public class ArriveorderDMO 
extends DataManageObject 
implements 
IQueryData,
ICheckState,
IQueryData2,
nc.itf.pu.inter.IPuToQc_ArriveorderDMO,
IBackCheckState,
IPFSourceBillFinder{

/**
 * ArriveorderDMO 构造子注解。 
 *
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public ArriveorderDMO() throws javax.naming.NamingException, SystemException {
	super();
}
/**
 * ArriveorderDMO 构造子注解。
 *
 * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
 * @exception javax.naming.NamingException 父类构造子抛出的异常。
 * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
 */
public ArriveorderDMO(String dbName) throws javax.naming.NamingException, SystemException {
	super(dbName);
}
/**
 * <p>根据表头的主键查询一个VO。
 * <p>
 * 创建日期：(2001-6-8)
 * @param key ??dbFieldType??
 * @exception java.sql.SQLException 异常说明。
 * 
 * @sicne v51 , 重构， by Chaozp on 2007-02-14
 * 
 */
public ArriveorderVO findByPrimaryKey(String key) throws BusinessException {
  //
	ArriveorderVO vo = new ArriveorderVO();
	//
	ArriveorderHeaderVO header = (ArriveorderHeaderVO) findHeaderByPrimaryKey(key);
	ArriveorderItemVO[] items = null;
	if (header != null) {
		items = queryBodysByHidsSql("carriveorderid = '" + header.getPrimaryKey() + "' ");
	}
	//
	vo.setParentVO(header);
	vo.setChildrenVO(items);
  //
	return vo;
}
/**
 * 父类方法重写:支持下游单据给订单发送上游消息，查询采购订单返回平台要求信息
 * 
 * @see nc.vo.pub.pf.IPFSourceBillFinder#findSourceBill(java.lang.String, nc.vo.pub.AggregatedValueObject)
 */
public SourceBillInfo[] findSourceBill(String strUpBilltype, AggregatedValueObject voThisBill) {
  //数据合法性校验
  if(voThisBill == null){
    SCMEnv.out("到货单VO为空，直接返回!");/*-=notranslate=-*/
    return null;
  }
  //只查询采购订单
  if(!ScmConst.PO_Order.equalsIgnoreCase(strUpBilltype)){
    SCMEnv.out("到货单的上游单据不是采购订单，目前只支持上游为订单的上游消息!");/*-=notranslate=-*/
    return null;
  }
  //
  CircularlyAccessibleValueObject[] items = voThisBill.getChildrenVO();
  if(items == null || items.length == 0){
    return null;
  }
  int iLen = items.length;
  ArrayList<String> listOrderId = new ArrayList<String>();
  for(int i=0; i<iLen; i++){
    if(ScmConst.PO_Order.equalsIgnoreCase((String)items[i].getAttributeValue("cupsourcebilltype"))){
      listOrderId.add((String)items[i].getAttributeValue("cupsourcebillid"));
    }
  }
  if(listOrderId.size() == 0){
    SCMEnv.out("当前操作单据的上层单据均不是采购订单，不会给采购订单发送上游消息");/*-=notranslate=-*/
    return null;
  }
  //返回
  SourceBillInfo[] voaRet = null;
  try{
    voaRet = new OrderDMO().querySourceBillInfos(listOrderId);
  }catch(Exception e){
    SCMEnv.out(e);
//    throw new BusinessException(e.getMessage());
  }
  //
  return voaRet;
}
  /**
   * 根据查询条件，查询表头数据。
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * 
   * @param key
   * @return
   * @throws BusinessException
   *           <p>
   * @author czp
   * @time 2007-2-13 上午08:54:28
   */
  public ArriveorderHeaderVO[] queryHeadersBySql(String strSql)
      throws BusinessException {
    String sql = "select " +
        "carriveorderid, pk_corp, varrordercode, dreceivedate, cvendormangid, cbiztype, ctransmodeid, " +
        "cstoreorganization, creceivepsn, cdeptid, cemployeeid, " +
        "caccountyear, ibillstatus, coperator, cbilltype, vmemo, " +
        "vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10,vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, " +
        "pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20," +
        "cvendorbaseid, cfreecustid, dauditdate, cauditpsn,ts," +
        "bisback,vbackreasonh,iprintcount,pk_purcorp,tmaketime,taudittime,tlastmaketime " +
        "from po_arriveorder " +
        "where dr = 0 ";
    if(strSql != null && strSql.trim().length() > 0){
//      sql += "and (" + strSql + ") ";   // edit by wbp  确实有括号（改正）
    	sql += "and " + strSql + " ";
    }
    ArriveorderHeaderVO arriveorderHeader = null;
    Connection con = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;
    ArrayList<ArriveorderHeaderVO> listHeaders = new ArrayList<ArriveorderHeaderVO>();
    try {
      con = getConnection();
      stmt = con.prepareStatement(sql);
      rs = stmt.executeQuery();
      int index = 0;
      //
      while (rs.next()) {
        //
        index = 0;
        //
        arriveorderHeader = new ArriveorderHeaderVO();
        // carriveorderid :
        arriveorderHeader.setCarriveorderid(rs.getString(++index));
        // pk_corp :
        arriveorderHeader.setPk_corp(rs.getString(++index));
        // varrordercode :
        arriveorderHeader.setVarrordercode(rs.getString(++index));
        // dreceivedate :
        arriveorderHeader.setDreceivedate(PuPubVO.getUFDate(rs.getString(++index)));
        // cvendormangid :
        arriveorderHeader.setCvendormangid(rs.getString(++index));
        // cbiztypeid :
        arriveorderHeader.setCbiztype(rs.getString(++index));
        // ctransmodeid :
        arriveorderHeader.setCtransmodeid(rs.getString(++index));
        // cstoreorganization :
        arriveorderHeader.setCstoreorganization(rs.getString(++index));
        // creceivepsn :
        arriveorderHeader.setCreceivepsn(rs.getString(++index));
        // cdeptid :
        arriveorderHeader.setCdeptid(rs.getString(++index));
        // cemployeeid :
        arriveorderHeader.setCemployeeid(rs.getString(++index));
        // caccountyear :
        arriveorderHeader.setCaccountyear(rs.getString(++index));
        // ibillstatus :
        arriveorderHeader.setIbillstatus(PuPubVO.getInteger_NullAs(rs.getObject(++index), new Integer(BillStatus.FREE)));
        // coperator :
        arriveorderHeader.setCoperator(rs.getString(++index));
        // cbilltype :
        arriveorderHeader.setCbilltype(rs.getString(++index));
        // vmemo :
        arriveorderHeader.setVmemo(rs.getString(++index));
        //vdef1-20:
        for (int i = 0; i < 20; i++) {      
          arriveorderHeader.setAttributeValue("vdef"+(i+1),rs.getString(++index));    
        }
        //pk_defdoc1-20:
        for (int i = 0; i < 20; i++) {      
          arriveorderHeader.setAttributeValue("pk_defdoc"+(i+1),rs.getString(++index));    
        }
        // cvendorbaseid :
        arriveorderHeader.setCvendorbaseid(rs.getString(++index));
        // cfreecustid :
        arriveorderHeader.setCfreecustid(rs.getString(++index));
        // dauditdate
        arriveorderHeader.setDauditdate(PuPubVO.getUFDate(rs.getString(++index), false));
        // cauditpsn
        arriveorderHeader.setCauditpsn(rs.getString(++index));
        // ts
        arriveorderHeader.setTs(rs.getString(++index));
        // bisback
        arriveorderHeader.setBisback(PuPubVO.getUFBoolean_NullAs(rs.getString(++index),UFBoolean.FALSE));
        // vbackreasonh
        arriveorderHeader.setVbackreasonh(rs.getString(++index));
        // iprintcount
        arriveorderHeader.setAttributeValue("iprintcount",PuPubVO.getInteger_NullAs(rs.getObject(++index), new Integer(0)));
        // pk_purcorp
        arriveorderHeader.setPk_purcorp(rs.getString(++index));
        // tmaketime
        arriveorderHeader.setTmaketime(PuPubVO.getUFDateTime(rs.getString(++index)));
        // taudittime
        arriveorderHeader.setTaudittime(PuPubVO.getUFDateTime(rs.getString(++index)));
        // tlastmaketime
        arriveorderHeader.setTlastmaketime(PuPubVO.getUFDateTime(rs.getString(++index)));
        //
        listHeaders.add(arriveorderHeader);
      }
    }
    catch (SQLException e) {
      PubDMO.throwBusinessException(e);
    }
    finally {
      try {
        if (rs != null)
          rs.close();
      }
      catch (Exception e) {
      }
      try {
        if (stmt != null) {
          stmt.close();
        }
      }
      catch (Exception e) {
      }
      try {
        if (con != null) {
          con.close();
        }
      }
      catch (Exception e) {
      }
    }
    //返回
    if(listHeaders.size() == 0){
      return null;
    }
    return listHeaders.toArray(new ArriveorderHeaderVO[listHeaders.size()]);
  }
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2001-6-8)
 * @return nc.vo.rc.receive.ArriveorderHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 * 
 * @since v51, 重构， by Chaozp on 2007-02-13
 */
public CircularlyAccessibleValueObject findHeaderByPrimaryKey(String key) throws BusinessException {
  
  ArriveorderHeaderVO[] headers  = queryHeadersBySql("carriveorderid = '" + key + "' ");
  
  if(headers == null || headers.length == 0){
    return null;
  }
  
  return headers[0];
  
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2001-6-8)
 * @return nc.vo.rc.receive.ArriveorderItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 * 
 * @since v51, 重构, by Chaozp on 2007-02-14
 * 
 */
public CircularlyAccessibleValueObject findItemByPrimaryKey(String key) throws BusinessException {
    ArriveorderItemVO[] items = queryBodysByHidsSql(" carriveorder_bid = '"+ key +"' ");
    
    if(items == null || items.length == 0){
      return null;
    }
    
    return items[0];
}
/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2001-6-8)
 * @return nc.vo.rc.receive.ArriveorderItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 * 
 * @since 2003-09-27 czp modify(方法调整)
 * 
 * @since 2007-02-14 czp modify(重构)
 */
public ArriveorderItemVO[] findItemsForHeader(String key) throws BusinessException {
	if (key == null){
		return null;
  }
	return queryBodysByHidsSql("carriveorderid ='" + key + "' ");
}
/**
 * <p>将VO插入母子表。
 * <p>
 * 创建日期：(2001-6-8)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insert(ArriveorderVO vo) throws SQLException, SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "insert", new Object[]{vo});
	/*************************************************************/

	// 插入表头：
	String key = insertHeaderMy((ArriveorderHeaderVO) vo.getParentVO());
	// 插入表体各项：
	ArriveorderItemVO[] items = (ArriveorderItemVO[]) vo.getChildrenVO();
	//表体外键
	for (int i = 0; i < items.length; i++){
		items[i].setCarriveorderid(key);
	}
	//一次性插入所有表体
	insertItemArray(items);
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "insert", new Object[]{vo});
	/*************************************************************/

	return key;
}







/**
 * <p>使用VO的值更新母子表。
 * <p>
 * 创建日期：(2001-6-8)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 * @exception java.sql.SQLException 异常说明。

 * czp 2003-06-27 批处理

 */
public void update(ArriveorderVO vo) throws SQLException, BusinessException, SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "update", new Object[]{vo});
	/*************************************************************/

	ArriveorderItemVO[] items = (ArriveorderItemVO[]) vo.getChildrenVO();
	Vector vIns = new Vector();
	Vector vUpd = new Vector();
	Vector vDel = new Vector();
	for ( int i = 0; i < items.length; i++ ) {
		switch (items[i].getStatus()) {
			case VOStatus.NEW :
				//insertItem(items[i]);
				vIns.addElement(items[i]);
				break;
			case VOStatus.UPDATED :
				vUpd.addElement(items[i]);
				//updateItem(items[i]);
				break;
			case VOStatus.DELETED :
				vDel.addElement(items[i]);
				//deleteItemMy(items[i]);
				break;
		}
	}
	//批处理
	ArriveorderItemVO[] bvos = null;
	//
	if (vIns.size() >0){
		bvos = new ArriveorderItemVO[vIns.size()];
		vIns.copyInto(bvos);
		insertItemArray(bvos);
	}
	//
	if (vUpd.size() >0){
		bvos = new ArriveorderItemVO[vUpd.size()];
		vUpd.copyInto(bvos);
		updateItemArray(bvos);
	}
	//
	if (vDel.size() >0){
		bvos = new ArriveorderItemVO[vDel.size()];
		vDel.copyInto(bvos);
		deleBodyByItems(bvos);
	}
	updateHeaderMy((ArriveorderHeaderVO) vo.getParentVO());

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "update", new Object[]{vo});
	/*************************************************************/
}



/**
 * 审批一张单据(审批通过)
 *
 * 创建日期：(2001-6-8)
 * @param String pk
 * @exception java.sql.SQLException 异常说明。
 */
public void auditArriveorderMy(String pk ) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "auditArriveorderMy", new Object[]{pk});
	/*************************************************************/

	String sql = "update po_arriveorder set ibillstatus = "+ IArriveorderStatus.PASS +" where carriveorderid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);

		stmt.setString(1, pk);

		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "auditArriveorderMy", new Object[]{pk});
	/*************************************************************/
}
/**
* 作者：晁志平
* 功能：审批订单--逐级弃审(供应链暂不支持)
* 参数：
*		String billId				单据ID
*		String approveId			审批人ID
*		String approveDate			审批日期
*		String checkNote			批语
* 返回：void
* 例外：Exception					一般异常
* 日期：(2005-05-24 15:39:21)
* 修改日期，修改人，修改原因，注释标志：
*/
public void backGoing(String billId, String approveId, String approveDate, String backNote) throws Exception {
      
}
/**
* 作者：晁志平
* 功能：审批订单--驳回
* 参数：
*		String billId				单据ID
*		String approveId			审批人ID
*		String approveDate			审批日期
*		String checkNote			批语
* 返回：void
* 例外：Exception					一般异常
* 日期：(2006-05-16 16:59:21)
* 修改日期，修改人，修改原因，注释标志：
* 
* 2006-05-18	czp		V5：SCM统一，设置“审批时间”
*/
public void backNoState(String billId, String approveId, String approveDate, String backNote) throws Exception {

	String sql =
		"update po_arriveorder set ibillstatus = " + BillStatus.FREE + ", dauditdate = null, cauditpsn = null, taudittime = null where carriveorderid = ? and dr = 0 ";
	Connection con = null;
	PreparedStatement stmt = null;

	try {		
	    con = getConnection();
		
		stmt = prepareStatement(con,sql);
		
		stmt.setString(1, billId);

		executeUpdate(stmt);
		
		executeBatch(stmt);
		
	}finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
}
/**
 * @功能：审批流--正在审批
 * @作者：晁志平
 * 创建日期：(2001-8-3 14:33:54)
 * @param:<|>
 * @return:
 * @exception:
 * @see;
 * @since:
 * 2正在审批 3审批通过 4审批未通过
 * @return boolean
 * @param billId java.lang.String
 * @param ApproveId java.lang.String
* 
* 2006-05-18	czp		V5：SCM统一，设置“审批时间”
 */
public boolean checkGoing(String billId, String ApproveId, String date, String memo)
	throws SQLException, BusinessException {

	String sql =
		"update po_arriveorder set ibillstatus = " + BillStatus.AUDITING + ", dauditdate = ?, cauditpsn = ?, taudittime = ? where carriveorderid = ? and dr = 0 ";
	UFDate CurrDate = new UFDate(date, false);
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		if (CurrDate == null) {
			stmt.setNull(1, Types.CHAR);
		} else {
			stmt.setString(1, CurrDate.toString());
		}
		if (ApproveId == null || ApproveId.trim().equals("")) {
			stmt.setNull(2, Types.CHAR);
		} else {
			stmt.setString(2, ApproveId);
		}
		//审批时间 
		stmt.setString(3, new UFDateTime(System.currentTimeMillis()).toString());
		//主键
		stmt.setString(4, billId);

		stmt.executeUpdate();
	} catch (Exception e) {
		reportException(e);
		throw new BusinessException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	return true;
}

/**
 * @功能：审批流--审批未通过
 * @作者：晁志平
 * 创建日期：(2001-8-3 14:33:35)
 * @param:<|>
 * @return:
 * @exception:
 * @see;
 * @since:
 * 2正在审批 3审批通过 4审批未通过
 * @return boolean
 * @param billId java.lang.String
 * @param ApproveId java.lang.String
* 
* 2006-05-18	czp		V5：SCM统一，设置“审批时间”
 */
public boolean checkNoPass(String billId, String ApproveId, String date, String memo)
	throws SQLException, BusinessException {

	String sql =
		"update po_arriveorder set ibillstatus = " + BillStatus.AUDITFAIL + ", dauditdate = null, cauditpsn = null, taudittime = null where carriveorderid = ? and dr = 0 ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		
		//主键
		stmt.setString(1, billId);

		stmt.executeUpdate();
	} catch (Exception e) {
		reportException(e);
		throw new BusinessException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	return true;
}

/**
 * @功能：审批流--审批通过
 * @作者：晁志平
 * 创建日期：(2001-8-3 14:34:10)
 * @param:<|>
 * @return:
 * @exception:
 * @see;
 * @since:
 * 2正在审批 3审批通过 4审批未通过
 * @return boolean
 * @param billId java.lang.String
 * @param ApproveId java.lang.String
* 
* 2006-05-18	czp		V5：SCM统一，设置“审批时间”
 */
public boolean checkPass(String billId, String ApproveId, String date, String memo)
	throws SQLException, BusinessException {
	String sql =
		"update po_arriveorder set ibillstatus = " + BillStatus.AUDITED + ", dauditdate = ?, cauditpsn = ?, taudittime = ? where carriveorderid = ? and dr = 0 ";
	UFDate CurrDate = new UFDate(date, false);
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		if (CurrDate == null) {
			stmt.setNull(1, Types.CHAR);
		} else {
			stmt.setString(1, CurrDate.toString());
		}
		if (ApproveId == null || ApproveId.trim().equals("")) {
			stmt.setNull(2, Types.CHAR);
		} else {
			stmt.setString(2, ApproveId);
		}
		//审批通过
		stmt.setString(3, new UFDateTime(System.currentTimeMillis()).toString());
		//主键
		stmt.setString(4, billId);
		//
		stmt.executeUpdate();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return true;
}

/**
 * 功能：给质检提供的接口方法，删除累计报检数量
 * 返回：
 * 例外：
 * 日期：(2002-5-17 15:42:32)
 * 修改日期，修改人，修改原因，注释标志：
 *
 * @param saRowId java.lang.String[]
 */
public void deleAccChkNum(String[] saRowId) throws BusinessException {

	//没有数据直接返回
	if (saRowId == null || saRowId.length <= 0)
		return;
	//更新到货单子子表及子表
	Connection con = null;
	PreparedStatement stmt = null;
	String sql = null;
	try {
		con = getConnection();
		//行ID条件串
		String strRowIdsSQL = "carriveorder_bid in ";
		strRowIdsSQL += new TempTableUtil().getSubSql(saRowId);
		strRowIdsSQL += " ";
		//置子表相应行合格数量和不合格数量为空
		sql = "update po_arriveorder_b set naccumchecknum = null where ";
		sql += strRowIdsSQL;
		stmt = con.prepareStatement(sql);
		stmt.executeUpdate();
	} catch (Exception e) {
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000041")/*@res "删除累计报检数量时出错"*/);
	} finally {
		try{
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		}catch(Exception e){
			/**不必抛出的异常*/
		}
	}
}

/**
 * 功能：删除所有质检信息，复检到货单时用，建议质检单弃审时也可调用
 * 返回：
 * 例外：
 * 日期：(2002-5-17 15:42:32)
 * 修改日期，修改人，修改原因，注释标志：
 *
 * @param saRowId java.lang.String[]
 */
public void deleAllCheckInfos(String[] saRowId) throws SQLException {

	//没有数据直接返回
	if (saRowId == null || saRowId.length <= 0)
		return;
	//更新到货单子子表及子表
	Connection con = null;
	PreparedStatement stmt = null;
	String sql = null;
	try {
		con = getConnection();
		//行ID条件串
		String strRowIdsSQL = "carriveorder_bid in ";
		strRowIdsSQL += new TempTableUtil().getSubSql(saRowId);
		strRowIdsSQL += " ";
		//删除子子表数据
		sql = "delete from po_arriveorder_bb where ";
		sql += strRowIdsSQL;
		stmt = con.prepareStatement(sql);
		stmt.executeUpdate();
		//置子表相应行合格数量和不合格数量为空
		sql = "update po_arriveorder_b set nelignum = null , nnotelignum = null where ";
		sql += strRowIdsSQL;
		stmt = con.prepareStatement(sql);
		stmt.executeUpdate();
	} catch (Exception e) {
		reportException(e);
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000042")/*@res "按到货单行ID数组删除质检信息时出错 [ArriveorderDMO.deleAllCheckInfos()]"*/);
	} finally {
		if (stmt != null) {
			stmt.close();
		}
		if (con != null) {
			con.close();
		}
	}
}









/**
 * 弃审多张单据(置成自由状态czp09-30)
 *
 * 创建日期：(2001-6-8)
 * @param String[] pks
 * @exception java.sql.SQLException 异常说明。
 */
public void disauditArrayMy(String pks[]) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"disauditArrayMy",
		new Object[] { pks });
	/*************************************************************/

	String sql =
		"update po_arriveorder set ibillstatus = "
			+ IArriveorderStatus.FREE
			+ " ,dauditdate = null, cauditpsn = null  where ";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		
		String strRowIdsSQL = "carriveorderid in ";
		strRowIdsSQL += new TempTableUtil().getSubSql(pks);
		strRowIdsSQL += " ";
				
		stmt = con.prepareStatement(sql + strRowIdsSQL);
		stmt.executeUpdate();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"disauditArrayMy",
		new Object[] { pks });
	/*************************************************************/
}

/**
 * 弃审一张单据(置成自由状态czp09-30)
 *
 * 创建日期：(2001-6-8)
 * @param String pk
 * @exception java.sql.SQLException 异常说明。
 */
public void disauditArriveorderMy(String pk) throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "disauditArriveorderMy", new Object[]{pk});
	/*************************************************************/

	String sql = "update po_arriveorder set ibillstatus = "+ IArriveorderStatus.FREE +" ,dauditdate = ?, cauditpsn = ?  where carriveorderid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1,null);
		stmt.setString(2,null);
		stmt.setString(3, pk);

		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "disauditArriveorderMy", new Object[]{pk});
	/*************************************************************/
}

/**
 * 功能：批清除到货单行的累计合格、不合格、报检数量
 * 返回：
 * 例外：
 * 日期：(2002-12-04 10:28:32)
 * 修改日期，修改人，修改原因，注释标志：
 *
 * @param saRowId java.lang.String[]
 */
public void doChkCancel(String[] saRowId) throws SQLException {

	//没有数据直接返回
	if (saRowId == null || saRowId.length <= 0)
		return;
	//更新到货单子表
	Connection con = null;
	PreparedStatement stmt = null;
	String sql = null;
	try {
		con = getConnection();
		//行ID条件串
		String strRowIdsSQL = "carriveorder_bid in ";
		strRowIdsSQL += new TempTableUtil().getSubSql(saRowId);
		strRowIdsSQL += " ";
		//置子表相应行合格数量和不合格数量为空
		sql =
			"update po_arriveorder_b set nelignum = null , nnotelignum = null, naccumchecknum = null where ";
		sql += strRowIdsSQL;
		stmt = con.prepareStatement(sql);
		stmt.executeUpdate();
	} catch (Exception e) {
		reportException(e);
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000043")/*@res "批清除到货单行的累计合格、不合格、报检数量 [后台方法：ArriveorderDMO.doChkCancel(String [])]"*/);
	} finally {
		if (stmt != null) {
			stmt.close();
		}
		if (con != null) {
			con.close();
		}
	}
}

/**
 * 到货维护--查询符合条件的到货单头
 * 查询并填充订单日期属性值
 * 创建日期：(2001-09-04)
 * @return nc.vo.rc.receive.ArriveorderHeaderVO[]
 * @param saHid String
 * @param unitCode String
 * @exception java.sql.SQLException 异常说明。
 */
public ArriveorderHeaderVO[] findHeadersForQC(String[] saHid) throws BusinessException{
  
  String strSql = "carriveorderid in ";
  strSql += new TempTableUtil().getSubSql(saHid);
  //
  return queryHeadersBySql(strSql);

}

/**
 * 父类方法重写
 * 
 * @see nc.itf.pu.inter.IPuToQc_ArriveorderDMO#findItemsForQC(java.lang.String[])
 * 
 * @since v51, 重构 , by Chaozp on 2007-02-14
 */
public CircularlyAccessibleValueObject[] findItemsForQC(String saHid[]) throws BusinessException{
  //
	return queryBodysByHidsSql("carriveorderid in " + new TempTableUtil().getSubSql(saHid));
  
}

/**
 * 用公司过滤到货单（审批通过 即状态为：IArriveorderStatus.PASS）
 *
 * 创建日期：(2001-6-8)
 * @return nc.vo.rc.receive.ArriveorderItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public ArriveorderItemVO[] findItemsForCheck(String strSQL) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "findItemsForCheck", new Object[] { strSQL });
	/*************************************************************/
	StringBuffer sql = new StringBuffer("SELECT po_arriveorder_b.carriveorderid, po_arriveorder_b.pk_corp,po_arriveorder_b.corder_bid, po_arriveorder_b.corderid, po_arriveorder_b.cmangid, po_arriveorder_b.cassistunit, po_arriveorder_b.narrvnum, po_arriveorder_b.nassistnum, po_arriveorder_b.nwastnum, po_arriveorder_b.nwastassistnum, po_arriveorder_b.npresentnum, po_arriveorder_b.npresentassistnum, po_arriveorder_b.vproducenum, po_arriveorder_b.ccurrencytypeid, po_arriveorder_b.noriginalcurprice, po_arriveorder_b.noriginalcurmny, po_arriveorder_b.nexchangeotobrate, po_arriveorder_b.nprice, po_arriveorder_b.nmoney, po_arriveorder_b.nexchangeotoarate, po_arriveorder_b.nassistcurprice, po_arriveorder_b.nassistcurmny, po_arriveorder_b.dproducedate, po_arriveorder_b.ivalidday, po_arriveorder_b.dvaliddate, po_arriveorder_b.nelignum, po_arriveorder_b.nnotelignum, po_arriveorder_b.naccumchecknum, po_arriveorder_b.naccumwarehousenum, po_arriveorder_b.cwarehouseid, po_arriveorder_b.cstoreid, po_arriveorder_b.cupsourcebilltype, po_arriveorder_b.cupsourcebillid, po_arriveorder_b.cupsourcebillrowid, po_arriveorder_b.vmemo, po_arriveorder_b.vdef1, po_arriveorder_b.vdef2, po_arriveorder_b.vdef3, po_arriveorder_b.vdef4, po_arriveorder_b.vdef5, po_arriveorder_b.vdef6,po_arriveorder_b.vdef7, po_arriveorder_b.vdef8, po_arriveorder_b.vdef9, po_arriveorder_b.vdef10, po_arriveorder_b.vdef11, po_arriveorder_b.vdef12, po_arriveorder_b.vdef13, po_arriveorder_b.vdef14, po_arriveorder_b.vdef15, po_arriveorder_b.vdef16, po_arriveorder_b.vdef17, po_arriveorder_b.vdef18, po_arriveorder_b.vdef19, po_arriveorder_b.vdef20,");
	sql.append("po_arriveorder_b.pk_defdoc1,po_arriveorder_b.pk_defdoc2,po_arriveorder_b.pk_defdoc3,po_arriveorder_b.pk_defdoc4,po_arriveorder_b.pk_defdoc5,po_arriveorder_b.pk_defdoc6,po_arriveorder_b.pk_defdoc7,po_arriveorder_b.pk_defdoc8,po_arriveorder_b.pk_defdoc9,po_arriveorder_b.pk_defdoc10,po_arriveorder_b.pk_defdoc11,po_arriveorder_b.pk_defdoc12,po_arriveorder_b.pk_defdoc13,po_arriveorder_b.pk_defdoc14,po_arriveorder_b.pk_defdoc15,po_arriveorder_b.pk_defdoc16,po_arriveorder_b.pk_defdoc17,po_arriveorder_b.pk_defdoc18,po_arriveorder_b.pk_defdoc19,po_arriveorder_b.pk_defdoc20,po_arriveorder_b.vfree1, po_arriveorder_b.vfree2, po_arriveorder_b.vfree3, po_arriveorder_b.vfree4, po_arriveorder_b.vfree5 ");
	sql.append(", LTRIM(RTRIM(po_arriveorder.varrordercode))");
	sql.append(", po_arriveorder.cvendorbaseid");
	sql.append(", po_arriveorder_b.carriveorder_bid");
	sql.append(", po_arriveorder_b.cbaseid");
	sql.append(", po_arriveorder_b.csourcebilltype, po_arriveorder_b.csourcebillid, po_arriveorder_b.csourcebillrowid,po_arriveorder.ts,po_arriveorder_b.ts");
	sql.append(", po_arriveorder_b.cprojectid, po_arriveorder_b.cprojectphaseid, po_arriveorder_b.crowno,po_arriveorder_b.vbackreasonb,po_arriveorder_b.naccreplenishnum,po_arriveorder_b.blargess,po_arriveorder_b.blargessuprow ");
	sql.append(",po_arriveorder_b.pk_reqcorp,po_arriveorder_b.pk_reqstoorg,po_arriveorder_b.pk_creqwareid,po_arriveorder_b.pk_invoicecorp, po_arriveorder_b.jyjg,po_arriveorder_b.glnum ");//eric
	sql.append(strSQL);
	ArriveorderItemVO[] arriveorderItems = null;
	ArriveorderItemVO arriveorderItem = null;
	Connection con = null;
	PreparedStatement stmt = null;
	Vector v = new Vector();
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			arriveorderItem = new ArriveorderItemVO();
			// carriveorderid :
			String carriveorderid = rs.getString(1);
			arriveorderItem.setCarriveorderid(carriveorderid == null ? null : carriveorderid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			arriveorderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// corder_bid :
			String corder_bid = rs.getString(3);
			arriveorderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
			// corderid :
			String corderid = rs.getString(4);
			arriveorderItem.setCorderid(corderid == null ? null : corderid.trim());
			// cinventoryid :
			String cmangid = rs.getString(5);
			arriveorderItem.setCmangid(cmangid == null ? null : cmangid.trim());
			// cassistunit :
			String cassistunit = rs.getString(6);
			arriveorderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
			// narrvnum :
			Object narrvnum = rs.getObject(7);
			arriveorderItem.setNarrvnum(
				(narrvnum == null || narrvnum.toString().trim().equals("")) ? null : new UFDouble(narrvnum.toString()));
			// nassistnum :
			Object nassistnum = rs.getObject(8);
			arriveorderItem.setNassistnum(
				(nassistnum == null || nassistnum.toString().trim().equals("")) ? null : new UFDouble(nassistnum.toString()));
			// nwastnum :
			Object nwastnum = rs.getObject(9);
			arriveorderItem.setNwastnum(
				(nwastnum == null || nwastnum.toString().trim().equals("")) ? null : new UFDouble(nwastnum.toString()));
			// nwastassistnum :
			Object nwastassistnum = rs.getObject(10);
			arriveorderItem.setNwastassistnum(
				(nwastassistnum == null || nwastassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(nwastassistnum.toString()));
			// npresentnum :
			Object npresentnum = rs.getObject(11);
			arriveorderItem.setNpresentnum(
				(npresentnum == null || npresentnum.toString().trim().equals("")) ? null : new UFDouble(npresentnum.toString()));
			// npresentassistnum :
			Object npresentassistnum = rs.getObject(12);
			arriveorderItem.setNpresentassistnum(
				(npresentassistnum == null || npresentassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(npresentassistnum.toString()));
			// vproducenum :
			String vproducenum = rs.getString(13);
			arriveorderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());
			// ccurrencytypeid :
			String ccurrencytypeid = rs.getString(14);
			arriveorderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
			// noriginalcurprice :
			Object noriginalcurprice = rs.getObject(15);
			arriveorderItem.setNoriginalcurprice(
				(noriginalcurprice == null || noriginalcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurprice.toString()));
			// noriginalcurmny :
			Object noriginalcurmny = rs.getObject(16);
			arriveorderItem.setNoriginalcurmny(
				(noriginalcurmny == null || noriginalcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurmny.toString()));
			// nexchangeotobrate :
			Object nexchangeotobrate = rs.getObject(17);
			arriveorderItem.setNexchangeotobrate(
				(nexchangeotobrate == null || nexchangeotobrate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotobrate.toString()));
			// nprice :
			Object nprice = rs.getObject(18);
			arriveorderItem.setNprice(
				(nprice == null || nprice.toString().trim().equals("")) ? null : new UFDouble(nprice.toString()));
			// nmoney :
			Object nmoney = rs.getObject(19);
			arriveorderItem.setNmoney(
				(nmoney == null || nmoney.toString().trim().equals("")) ? null : new UFDouble(nmoney.toString()));
			// nexchangeotoarate :
			Object nexchangeotoarate = rs.getObject(20);
			arriveorderItem.setNexchangeotoarate(
				(nexchangeotoarate == null || nexchangeotoarate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotoarate.toString()));
			// nassistcurprice :
			Object nassistcurprice = rs.getObject(21);
			arriveorderItem.setNassistcurprice(
				(nassistcurprice == null || nassistcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurprice.toString()));
			// nassistcurmny :
			Object nassistcurmny = rs.getObject(22);
			arriveorderItem.setNassistcurmny(
				(nassistcurmny == null || nassistcurmny.toString().trim().equals("")) ? null : new UFDouble(nassistcurmny.toString()));
			// dproducedate :
			String dproducedate = rs.getString(23);
			arriveorderItem.setDproducedate(dproducedate == null ? null : new UFDate(dproducedate.trim(), false));
			// ivalidday :
			Integer ivalidday = (Integer) rs.getObject(24);
			arriveorderItem.setIvalidday(ivalidday == null ? null : ivalidday);
			// dvaliddate :
			String dvaliddate = rs.getString(25);
			arriveorderItem.setDvaliddate(dvaliddate == null ? null : new UFDate(dvaliddate.trim(), false));
			// nelignum :
			Object nelignum = rs.getObject(26);
			arriveorderItem.setNelignum(
				(nelignum == null || nelignum.toString().trim().equals("")) ? null : new UFDouble(nelignum.toString()));
			// nnotelignum :
			Object nnotelignum = rs.getObject(27);
			arriveorderItem.setNnotelignum(
				(nnotelignum == null || nnotelignum.toString().trim().equals("")) ? null : new UFDouble(nnotelignum.toString()));
			// naccumchecknum :
			Object naccumchecknum = rs.getObject(28);
			arriveorderItem.setNaccumchecknum(
				(naccumchecknum == null || naccumchecknum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumchecknum.toString()));
			// naccumwarehousenum :
			Object naccumwarehousenum = rs.getObject(29);
			arriveorderItem.setNaccumwarehousenum(
				(naccumwarehousenum == null || naccumwarehousenum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumwarehousenum.toString()));
			// cwarehouseid :
			String cwarehouseid = rs.getString(30);
			arriveorderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
			// cstoreid :
			String cstoreid = rs.getString(31);
			arriveorderItem.setCstoreid(cstoreid == null ? null : cstoreid.trim());
			// cupsourcebilltype :
			String cupsourcebilltype = rs.getString(32);
			arriveorderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
			// cupsourcebillid :
			String cupsourcebillid = rs.getString(33);
			arriveorderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
			// cupsourcebillrowid :
			String cupsourcebillrowid = rs.getString(34);
			arriveorderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
			// vmemo :
			String vmemo = rs.getString(35);
			arriveorderItem.setVmemo(vmemo == null ? null : vmemo.trim());
			// vdef1 :
			String vdef1 = rs.getString(36);
			arriveorderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
			// vdef2 :
			String vdef2 = rs.getString(37);
			arriveorderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
			// vdef3 :
			String vdef3 = rs.getString(38);
			arriveorderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
			// vdef4 :
			String vdef4 = rs.getString(39);
			arriveorderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
			// vdef5 :
			String vdef5 = rs.getString(40);
			arriveorderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
			// vdef6 :
			String vdef6 = rs.getString(41);
			arriveorderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(42);
			arriveorderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8
			String vdef8 = rs.getString(43);
			arriveorderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(44);
			arriveorderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(45);
			arriveorderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(46);
			arriveorderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(47);
			arriveorderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(48);
			arriveorderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(49);
			arriveorderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(50);
			arriveorderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(51);
			arriveorderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(52);
			arriveorderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(53);
			arriveorderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(54);
			arriveorderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(55);
			arriveorderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
			// pk_defdoc1 :
			String pk_defdoc1 = rs.getString(56);
			arriveorderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
			// pk_defdoc2 :
			String pk_defdoc2 = rs.getString(57);
			arriveorderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
			// pk_defdoc3 :
			String pk_defdoc3 = rs.getString(58);
			arriveorderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
			// pk_defdoc4 :
			String pk_defdoc4 = rs.getString(59);
			arriveorderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
			// pk_defdoc5 :
			String pk_defdoc5 = rs.getString(60);
			arriveorderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
			// pk_defdoc6 :
			String pk_defdoc6 = rs.getString(61);
			arriveorderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
			// pk_defdoc7 :
			String pk_defdoc7 = rs.getString(62);
			arriveorderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
			// pk_defdoc8
			String pk_defdoc8 = rs.getString(63);
			arriveorderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
			// pk_defdoc9 :
			String pk_defdoc9 = rs.getString(64);
			arriveorderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
			// pk_defdoc10 :
			String pk_defdoc10 = rs.getString(65);
			arriveorderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
			// pk_defdoc11 :
			String pk_defdoc11 = rs.getString(66);
			arriveorderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
			// pk_defdoc12 :
			String pk_defdoc12 = rs.getString(67);
			arriveorderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
			// pk_defdoc13 :
			String pk_defdoc13 = rs.getString(68);
			arriveorderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
			// pk_defdoc14 :
			String pk_defdoc14 = rs.getString(69);
			arriveorderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
			// pk_defdoc15 :
			String pk_defdoc15 = rs.getString(70);
			arriveorderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
			// pk_defdoc16 :
			String pk_defdoc16 = rs.getString(71);
			arriveorderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
			// pk_defdoc17 :
			String pk_defdoc17 = rs.getString(72);
			arriveorderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
			// pk_defdoc18 :
			String pk_defdoc18 = rs.getString(73);
			arriveorderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
			// pk_defdoc19 :
			String pk_defdoc19 = rs.getString(74);
			arriveorderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
			// pk_defdoc20 :
			String pk_defdoc20 = rs.getString(75);
			arriveorderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
			// vfree1 :
			String vfree1 = rs.getString(76);
			arriveorderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
			// vfree2 :
			String vfree2 = rs.getString(77);
			arriveorderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
			// vfree3 :
			String vfree3 = rs.getString(78);
			arriveorderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
			// vfree4 :
			String vfree4 = rs.getString(79);
			arriveorderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
			// vfree5 :
			String vfree5 = rs.getString(80);
			arriveorderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
			//到货单编码
			String varrordercode = rs.getString(81);
			arriveorderItem.setArrcode(varrordercode == null ? null : varrordercode);
			//供应商ID
			String cvendorbaseid = rs.getString(82);
			arriveorderItem.setCvendorbaseid(cvendorbaseid == null ? null : cvendorbaseid);
			//到货单体ID
			String arriveorder_bid = rs.getString(83);
			arriveorderItem.setPrimaryKey(arriveorder_bid);
			//存货基本档案主键
			String cbaseid = rs.getString(84);
			arriveorderItem.setCbaseid(cbaseid == null ? null : cbaseid);
			// csourcebilltype :
			String csourcebilltype = rs.getString(85);
			arriveorderItem.setAttributeValue("csourcebilltype", csourcebilltype == null ? null : csourcebilltype.trim());
			// csourcebillid :
			String csourcebillid = rs.getString(86);
			arriveorderItem.setAttributeValue("csourcebillid", csourcebillid == null ? null : csourcebillid.trim());
			// csourcebillrowid :
			String csourcebillrowid = rs.getString(87);
			arriveorderItem.setAttributeValue("csourcebillrowid", csourcebillrowid == null ? null : csourcebillrowid.trim());
			// po_arriveorder.ts
			String hts = rs.getString(88);
			arriveorderItem.setTsh(hts);
			// po_arriveorder_b.ts
			String bts = rs.getString(89);
			arriveorderItem.setTs(bts);
			// iispresent
			//String iispresent = rs.getString(56);
			//arriveorderItem.setAttributeValue("iispresent", iispresent == null ? null : new UFBoolean(iispresent.trim()));
			// cprojectid
			String cprojectid = rs.getString(90);
			arriveorderItem.setAttributeValue("cprojectid", cprojectid == null ? null : cprojectid.trim());
			// cprojectphaseid
			String cprojectphaseid = rs.getString(91);
			arriveorderItem.setAttributeValue("cprojectphaseid", cprojectphaseid == null ? null : cprojectphaseid.trim());
			// crowno
			String crowno = rs.getString(92);
			arriveorderItem.setAttributeValue("crowno", crowno == null ? null : crowno.trim());
			//vbackreasonb
			String vbackreasonb = rs.getString(93);
			arriveorderItem.setAttributeValue("vbackreasonb", vbackreasonb);
			//naccreplenishnum
			Object naccreplenishnum = rs.getObject(94);
			arriveorderItem.setNaccreplenishnum(
				(naccreplenishnum == null || naccreplenishnum.toString().trim().equals(""))
					? null
					: new UFDouble(naccreplenishnum.toString()));
			//blargess
			String blargess = rs.getString(95);
			arriveorderItem.setAttributeValue("blargess", blargess == null ? null : new UFBoolean(blargess.trim()));
			//blargessuprow
			String blargessuprow = rs.getString(96);
			arriveorderItem.setAttributeValue("blargessuprow", blargessuprow == null ? null : new UFBoolean(blargessuprow.trim()));
			//V5 New:
			arriveorderItem.setPk_reqcorp(rs.getString(97));
			arriveorderItem.setPk_reqstoorg(rs.getString(98));
			arriveorderItem.setPk_creqwareid(rs.getString(99));
			arriveorderItem.setPk_invoicecorp(rs.getString(100));
			//eric
			arriveorderItem.setJyjg(rs.getString(101));
			arriveorderItem.setGlnum(rs.getString(102)==null?null:new UFDouble(rs.getString(102)));
			//
			v.addElement(arriveorderItem);
		}
		if (rs != null)
			rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	if (v.size() > 0) {
		arriveorderItems = new ArriveorderItemVO[v.size()];
		v.copyInto(arriveorderItems);
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "findItemsForCheck", new Object[] { strSQL });
	/*************************************************************/
	return arriveorderItems;
}
/**
 * 通过主键数组查询相应表体数组
 * 2003-01-23 ljq modify(效率优化)
 * 2003-09-27 czp modify(方法调整)
 */
public Hashtable findItemsForHeaderMyArray(String[] saHid) throws BusinessException {
	ArriveorderItemVO[] items = findItemsForHids(saHid);
	return nc.bs.pu.pub.PubDMO.getHashBodyByHeadKey(items, "carriveorderid");
}

/**
 * 返回表头对应的完整到货单
 *
 * 注意：本方法存在效率问题！建议仅参数长度为一时使用
 *
 * 2003-09-27 czp 解决效率问题
 */
public ArriveorderVO[] findItemsForHeaderMyArray(ArriveorderHeaderVO[] heads) throws BusinessException {
	if (heads == null || heads.length <= 0)
		return null;
	int iLenHead = heads.length;
	//查询表体
	Vector vHid = new Vector();
	for (int i = 0; i < iLenHead; i++) {
		if (heads[i] == null || heads[i].getPrimaryKey() == null)
			continue;
		vHid.addElement(heads[i].getPrimaryKey());
	}
	if (vHid.size() <= 0) {
		SCMEnv.out("未能正确获取单据主键，方法findItemsForHeaderMyArray()处理异常返回NULL");
		return null;
	}
	String[] saHid = new String[vHid.size()];
	vHid.copyInto(saHid);
	Hashtable hTmp = findItemsForHeaderMyArray(saHid);
	//设置表头、体
	String key = null;
	ArriveorderVO[] arriveorders = new ArriveorderVO[heads.length];
	ArriveorderItemVO[] arriveorderItems = null;
	for (int i = 0; i < iLenHead; i++) {
		arriveorders[i] = new ArriveorderVO();
		arriveorders[i].setParentVO(heads[i]);
		if (heads[i] == null || heads[i].getPrimaryKey() == null) {
			arriveorders[i].setChildrenVO(null);
			continue;
		}
		key = heads[i].getPrimaryKey();
		arriveorderItems = (ArriveorderItemVO[]) hTmp.get(key);
		arriveorders[i].setChildrenVO(arriveorderItems);
	}
	//
	return arriveorders;
}





/**
 * 到货单状态(审核、弃审时需判断)
 *
 * 创建日期：(2001-6-23)
 * @return nc.vo.sc.order.OrderHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public String getArrState(String carriveorderid) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.sc.order.OrderDMO", "isAuditState", new Object[] { carriveorderid });
	/*************************************************************/
	if (carriveorderid == null)
		return null;
	String sql = "select ibillstatus from po_arriveorder where  carriveorderid = ? and dr=0 ";
	Integer ibillstatus = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, carriveorderid);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			ibillstatus = (Integer) rs.getObject(1);
		}
		if (rs != null)
			rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return ibillstatus == null ? null : ibillstatus.toString();
}

/**
 * 到货单状态(审核、弃审时需判断)
 *
 * 创建日期：(2001-6-23)
 * @return nc.vo.sc.order.OrderHeaderVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public String[] getArrStateArray(String[] carriveorderids) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.sc.order.OrderDMO", "isAuditState", new Object[] { carriveorderids });
	/*************************************************************/
	if (carriveorderids == null || carriveorderids.length <= 0)
		return null;
	String sql = "select ibillstatus from po_arriveorder where  carriveorderid = ? and dr=0 ";
	String[] sRetStatus = new String[carriveorderids.length];
	Integer ibillstatus = null;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < carriveorderids.length; i++) {
			stmt.setString(1, carriveorderids[i]);
			rs = stmt.executeQuery();
			//
			sRetStatus[i] = null;
			if (rs.next()) {
				ibillstatus = (Integer) rs.getObject(1);
				sRetStatus[i] = ibillstatus == null ? null : ibillstatus.toString();
			}
			if (rs != null)
				rs.close();
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return sRetStatus;
}

/**
 * @功能：查询辅计量主键
 * 根据换算率主键获取辅计量单位ID
 */
public String getAssPkByPk_Convert(String pk_convert) throws SQLException {
	String sql = "select pk_measdoc from bd_convert where  pk_convert = ? ";
	String meas = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, pk_convert);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			meas = rs.getString(1);
		}
		if (rs != null)
			rs.close();
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return meas;
}

/**
 * @功能：查询主辅计量换算率(批量)
 */
public ArrayList getConvertIsfixed(String[] pk_invbasdocs, String[] pk_measdocs) throws SQLException{

	ArrayList ary = new ArrayList();
	Object[] objs = null;
	if (pk_invbasdocs == null || pk_invbasdocs.length <= 0) return null;
	if (pk_measdocs == null   || pk_measdocs.length <= 0)   return null;

	String sql = "select mainmeasrate , fixedflag from bd_convert where pk_invbasdoc = ? and pk_measdoc = ? ";

	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt= con.prepareStatement(sql);
		for (int i = 0; i < pk_invbasdocs.length; i++){
			stmt.setString(1, pk_invbasdocs[i]);
			stmt.setString(2, pk_measdocs[i]);
			rs = stmt.executeQuery();
			objs = new Object[2];
			if (rs.next()) {
				Object measrate = rs.getObject(1);
				objs[0] = ((measrate == null || measrate.toString().trim().equals("")) ? null : new UFDouble(measrate.toString().trim()));
				String isfixed = rs.getString(2);
				if (isfixed != null) isfixed = isfixed.trim();
				objs[1] = new UFBoolean(isfixed);
			}
			ary.add(i,objs);
			//
			rs.close();
		}
	}  finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return ary;
}

/**
 * @功能：查询主辅计量换算率  ArrayList = {Object[],...}
 * (如果固定换算率则 Object[1] = new UFBoolean("Y") 否则 Object[1] = new UFBoolean("N"))
 * @return java.lang.Object[]   Object[0],换算率
 * 								Object[1],是否固定换算率
 * @param pk_invbasdoc java.lang.String[] 存货基本档案主键
 * @param pk_measdoc java.lang.String[]   存货辅计量主键
 */
public ArrayList getConvertIsfixedFlags(String[] pk_invbasdocs, String[] pk_measdocs) throws SQLException{
	ArrayList ary = null;

	ary = getConvertIsfixed(pk_invbasdocs, pk_measdocs);
	return ary;
}

/**
 * 获取公司的本位币精度
   1.取币种ID
   2.取精度
 * @param  pk_corp java.lang.String
 * @return IRetDecimal java.lang.Integer
 * @exception java.sql.SQLException 异常说明。
 */
public Integer getCurrDecimal(String pk_corp) throws Exception {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.sc.order.OrderDMO", "getCurrDecimal", new Object[] { pk_corp });
	/*************************************************************/
	Integer iRetDecimal = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		//取币种ID
		nc.bs.pub.para.SysInitDMO sysdmo = new nc.bs.pub.para.SysInitDMO();
		String currtypeid = sysdmo.getPkValue(pk_corp, "BD301");
		if (currtypeid == null || currtypeid.trim().equals("")) {
			String strCurrName = sysdmo.getParaString(pk_corp, "BD301");
			if (strCurrName == null || strCurrName.trim().equals(""))
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000044")/*@res "币种参数设置错误！"*/);
			currtypeid = getCurrtypePkByCurrName(strCurrName);
			if (currtypeid == null || currtypeid.trim().equals(""))
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000045")/*@res "币种档案数据错误！"*/);
		}
		//取币种精度
		String sql = "select currbusidigit from bd_currtype where pk_currtype = ? and dr = 0 ";
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, currtypeid);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			iRetDecimal = (Integer) rs.getObject(1);
		}
		if (rs != null)
			rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.sc.order.OrderDMO", "getCurrDecimal", new Object[] { pk_corp });
	return iRetDecimal;
}

/**
 * 获取公司的币种精度
 * @param  pk_corp java.lang.String
 * @return IRetDecimal java.lang.Integer
 * @exception java.sql.SQLException 异常说明。
 */
public Integer getCurrDecimal(String pk_corp, String currTypeId) throws Exception {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.sc.order.OrderDMO", "getCurrDecimal", new Object[] { pk_corp, currTypeId });
	/*************************************************************/
	Integer iRetDecimal = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		//取币种精度
		String sql = "select currbusidigit from bd_currtype where pk_currtype = ? and dr = 0 ";
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, currTypeId);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			iRetDecimal = (Integer) rs.getObject(1);
		}
		if (rs != null)
			rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.sc.order.OrderDMO", "getCurrDecimal", new Object[] { pk_corp, currTypeId });
	return iRetDecimal;
}

/**
 * 获取公司的币种精度 -- 批量
 * @exception java.sql.SQLException 异常说明。
 */
public int[] getCurrDecimals(String pk_corp, String[] currTypeIds) throws Exception {

	if (currTypeIds == null || currTypeIds.length <= 0)
		return null;
	int[] iRetDecimals = new int[currTypeIds.length];
	Integer IRetDecimal = null;
	String sql = "select currbusidigit from bd_currtype where pk_currtype = ? and dr = 0 ";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < currTypeIds.length; i++) {
			stmt.setString(1, currTypeIds[i]);
			rs = stmt.executeQuery();
			//
			if (rs.next()) {
				IRetDecimal = (Integer) rs.getObject(1);
			} else {
				IRetDecimal = null;
			}
			iRetDecimals[i] = IRetDecimal == null ? 2 : IRetDecimal.intValue();
			rs.close();
		}
	} catch (Exception e) {
		throw e;
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return iRetDecimals;
}

/**
 * 根据币种名称取得币种ID
 * 创建日期：(2001-10-27 13:34:00)
 * @return java.lang.String
 * @param currname java.lang.String
 */
public String getCurrtypePkByCurrName(String currname) throws SQLException {
	if (currname == null)
		return null;
	if (currname.trim().equals(""))
		return null;
	String currid = null;
	String sql = "SELECT pk_currtype ";
	sql += "FROM bd_currtype ";
	sql += "WHERE RTRIM(LTRIM(currtypename)) = ? ";
	currname = currname.trim();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, currname);
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			currid = rs.getString(1);
		}
		if (rs != null)
			rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return currid;
}

/**
 * 获取存货的是否劳务属性及是否折扣属性(批量)
 * 位置0：是否劳务；位置1：是否折扣
 * 创建日期：(2001-10-18 13:44:49)
 * @return aryReturn       java.util.ArrayList
 * @param arrPk_InvBasDocs java.lang.String[]
 */
public ArrayList getFlagsByInvBasIDsPo(String[] arrPk_InvBasDocs)
	throws SQLException {
	ArrayList aryReturn = new ArrayList();
	if (arrPk_InvBasDocs == null || arrPk_InvBasDocs.length <= 0)
		return aryReturn;
	ArrayList aryForInvId = null;
	String sql =
		" select pk_invbasdoc,discountflag,laborflag from bd_invbasdoc where pk_invbasdoc in ";

	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(arrPk_InvBasDocs,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC001,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql += strIdsSet + " ";
	//for (int i = 0; i < arrPk_InvBasDocs.length; i++) {
		//if (i==0)
			//sql += "pk_invbasdoc = '";
		//else
			//sql += "or pk_invbasdoc = '";
		//sql += arrPk_InvBasDocs[i];
		//sql += "' ";
	//}
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		Hashtable hRslt = new Hashtable();
		rs = stmt.executeQuery();
		String strPk = null, strTmp = null;
		while (rs.next()) {
			//
			aryForInvId = new ArrayList();
			//pk_invbasdoc
			strPk = rs.getString(1);
			//laborflag
			strTmp = rs.getString(2);
			aryForInvId.add(new UFBoolean(strTmp));
			//discountflag
			strTmp = rs.getString(3);
			aryForInvId.add(new UFBoolean(strTmp));
			//
			if (strPk != null)
				hRslt.put(strPk, aryForInvId);
		}
		for (int i = 0; i < arrPk_InvBasDocs.length; i++) {
			aryReturn.add(i, hRslt.get(arrPk_InvBasDocs[i]));
		}
	}  finally {
		if (rs != null) {
			rs.close();
		}
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return aryReturn;
}

/**
 * @功能：是否批次管理
 * @注意：本方法在查询不到数据时返回 "N"
 * @return ArrayList
 * @param pk_invmandocs java.lang.String[]
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList getHaveReplFlags(String[] pk_invmandocs) throws java.sql.SQLException {
	ArrayList ary = null;
	StringBuffer sql = new StringBuffer("SELECT count(a.pk_invmandoc1) ");
	sql.append("FROM bd_invrepl AS a, bd_invmandoc AS b, bd_invbasdoc AS c ");
	sql.append("WHERE (a.pk_invmandoc1 = b.pk_invmandoc AND b.pk_invbasdoc = c.pk_invbasdoc AND ");
	sql.append("a.pk_invmandoc = ? AND UPPER(c.laborflag) = 'N' AND ");
	sql.append("UPPER(c.discountflag) = 'N') ");
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		for (int i = 0; i < pk_invmandocs.length; i++) {
			stmt.setString(1, pk_invmandocs[i]);
			rs = stmt.executeQuery();
			if (rs.next()) {
				if (ary == null)
					ary = new ArrayList();
				Integer num = new Integer(rs.getInt(1));
				if (num.equals(new Integer(0))) {
					ary.add(new UFBoolean(false));
				} else {
					ary.add(new UFBoolean(true));
				}
			}
			if (rs != null)
				rs.close();
		}
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return ary;
}

/**
 * 哈希表：表头ID对应的表头VO
 * 创建日期：(2002-5-9 14:01:10)
 * @return java.util.Hashtable
 * @param vHeadId java.util.Vector
 */
public Hashtable getHeadsByIds(Vector vHeadId) throws Exception {

	Hashtable hRet = null;

	String sql =
		"select pk_corp, varrordercode, dreceivedate, cvendormangid, cbiztype, ctransmodeid, cstoreorganization, creceivepsn, cdeptid, cemployeeid, caccountyear, ibillstatus, coperator, cbilltype, vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, cvendorbaseid, cfreecustid, dauditdate, cauditpsn, ";
	sql += "carriveorderid, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, ";
	sql += "pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20,pk_purcorp,tmaketime,taudittime,tlastmaketime from po_arriveorder ";
	Vector vHeader = new Vector();
	ArriveorderHeaderVO arriveorderHeader = null;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		//处理条件
		sql += "where carriveorderid in ";
		sql += new TempTableUtil().getSubSql(vHeadId);
		sql += " ";
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			arriveorderHeader = new ArriveorderHeaderVO();
			// pk_corp :
			String pk_corp = rs.getString(1);
			arriveorderHeader.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// varrordercode :
			String varrordercode = rs.getString(2);
			arriveorderHeader.setVarrordercode(
				varrordercode == null ? null : varrordercode.trim());
			// dreceivedate :
			String dreceivedate = rs.getString(3);
			arriveorderHeader.setDreceivedate(
				dreceivedate == null ? null : new UFDate(dreceivedate.trim(),false));
			// cvendormangid :
			String cvendormangid = rs.getString(4);
			arriveorderHeader.setCvendormangid(
				cvendormangid == null ? null : cvendormangid.trim());
			// cbiztypeid :
			String cbiztype = rs.getString(5);
			arriveorderHeader.setCbiztype(cbiztype == null ? null : cbiztype.trim());
			// ctransmodeid :
			String ctransmodeid = rs.getString(6);
			arriveorderHeader.setCtransmodeid(
				ctransmodeid == null ? null : ctransmodeid.trim());
			// cstoreorganization :
			String cstoreorganization = rs.getString(7);
			arriveorderHeader.setCstoreorganization(
				cstoreorganization == null ? null : cstoreorganization.trim());
			// creceivepsn :
			String creceivepsn = rs.getString(8);
			arriveorderHeader.setCreceivepsn(
				creceivepsn == null ? null : creceivepsn.trim());
			// cdeptid :
			String cdeptid = rs.getString(9);
			arriveorderHeader.setCdeptid(cdeptid == null ? null : cdeptid.trim());
			// cemployeeid :
			String cemployeeid = rs.getString(10);
			arriveorderHeader.setCemployeeid(
				cemployeeid == null ? null : cemployeeid.trim());
			// caccountyear :
			String caccountyear = rs.getString(11);
			arriveorderHeader.setCaccountyear(
				caccountyear == null ? null : caccountyear.trim());
			// ibillstatus :
			Integer ibillstatus = (Integer) rs.getObject(12);
			arriveorderHeader.setIbillstatus(ibillstatus == null ? null : ibillstatus);
			// coperator :
			String coperator = rs.getString(13);
			arriveorderHeader.setCoperator(coperator == null ? null : coperator.trim());
			// cbilltype :
			String cbilltype = rs.getString(14);
			arriveorderHeader.setCbilltype(cbilltype == null ? null : cbilltype.trim());
			// vmemo :
			String vmemo = rs.getString(15);
			arriveorderHeader.setVmemo(vmemo == null ? null : vmemo.trim());
			// vdef1 :
			String vdef1 = rs.getString(16);
			arriveorderHeader.setVdef1(vdef1 == null ? null : vdef1.trim());
			// vdef2 :
			String vdef2 = rs.getString(17);
			arriveorderHeader.setVdef2(vdef2 == null ? null : vdef2.trim());
			// vdef3 :
			String vdef3 = rs.getString(18);
			arriveorderHeader.setVdef3(vdef3 == null ? null : vdef3.trim());
			// vdef4 :
			String vdef4 = rs.getString(19);
			arriveorderHeader.setVdef4(vdef4 == null ? null : vdef4.trim());
			// vdef5 :
			String vdef5 = rs.getString(20);
			arriveorderHeader.setVdef5(vdef5 == null ? null : vdef5.trim());
			// vdef6 :
			String vdef6 = rs.getString(21);
			arriveorderHeader.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(22);
			arriveorderHeader.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8 :
			String vdef8 = rs.getString(23);
			arriveorderHeader.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(24);
			arriveorderHeader.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(25);
			arriveorderHeader.setVdef10(vdef10 == null ? null : vdef10.trim());

			// cvendorbaseid :
			String cvendorbaseid = rs.getString(26);
			arriveorderHeader.setCvendorbaseid(
				cvendorbaseid == null ? null : cvendorbaseid.trim());

			// cfreecustid :
			String cfreecustid = rs.getString(27);
			arriveorderHeader.setCfreecustid(
				cfreecustid == null ? null : cfreecustid.trim());

			//dauditdate
			String dauditdate = rs.getString(28);
			arriveorderHeader.setAttributeValue(
				"dauditdate",
				dauditdate == null ? null : new UFDate(dauditdate,false));

			//cauditpsn
			String cauditpsn = rs.getString(29);
			arriveorderHeader.setAttributeValue(
				"cauditpsn",
				cauditpsn == null ? null : cauditpsn.trim());
			//carriveorderid
			String carriveorderid = rs.getString(30);
			arriveorderHeader.setAttributeValue(
				"carriveorderid",
				carriveorderid == null ? null : carriveorderid.trim());

			// vdef11 :
			String vdef11 = rs.getString(31);
			arriveorderHeader.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(32);
			arriveorderHeader.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(33);
			arriveorderHeader.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(34);
			arriveorderHeader.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(35);
			arriveorderHeader.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(36);
			arriveorderHeader.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(37);
			arriveorderHeader.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(38);
			arriveorderHeader.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(39);
			arriveorderHeader.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(40);
			arriveorderHeader.setVdef20(vdef20 == null ? null : vdef20.trim());

			// pk_defdoc1 :
			String pk_defdoc1 = rs.getString(41);
			arriveorderHeader.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
			// pk_defdoc2 :
			String pk_defdoc2 = rs.getString(42);
			arriveorderHeader.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
			// pk_defdoc3 :
			String pk_defdoc3 = rs.getString(43);
			arriveorderHeader.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
			// pk_defdoc4 :
			String pk_defdoc4 = rs.getString(44);
			arriveorderHeader.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
			// pk_defdoc5 :
			String pk_defdoc5 = rs.getString(45);
			arriveorderHeader.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
			// pk_defdoc6 :
			String pk_defdoc6 = rs.getString(46);
			arriveorderHeader.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
			// pk_defdoc7 :
			String pk_defdoc7 = rs.getString(47);
			arriveorderHeader.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
			// pk_defdoc8 :
			String pk_defdoc8 = rs.getString(48);
			arriveorderHeader.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
			// pk_defdoc9 :
			String pk_defdoc9 = rs.getString(49);
			arriveorderHeader.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
			// pk_defdoc10 :
			String pk_defdoc10 = rs.getString(50);
			arriveorderHeader.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());

			// pk_defdoc11 :
			String pk_defdoc11 = rs.getString(51);
			arriveorderHeader.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
			// pk_defdoc12 :
			String pk_defdoc12 = rs.getString(52);
			arriveorderHeader.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
			// pk_defdoc13 :
			String pk_defdoc13 = rs.getString(53);
			arriveorderHeader.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
			// pk_defdoc14 :
			String pk_defdoc14 = rs.getString(54);
			arriveorderHeader.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
			// pk_defdoc15 :
			String pk_defdoc15 = rs.getString(55);
			arriveorderHeader.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
			// pk_defdoc16 :
			String pk_defdoc16 = rs.getString(56);
			arriveorderHeader.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
			// pk_defdoc17 :
			String pk_defdoc17 = rs.getString(57);
			arriveorderHeader.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
			// pk_defdoc18 :
			String pk_defdoc18 = rs.getString(58);
			arriveorderHeader.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
			// pk_defdoc19 :
			String pk_defdoc19 = rs.getString(59);
			arriveorderHeader.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
			// pk_defdoc20 :
			String pk_defdoc20 = rs.getString(60);
			arriveorderHeader.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
			//,pk_purcorp
			String strTmp = rs.getString(61);
			arriveorderHeader.setPk_purcorp(strTmp);
			
			//,tmaketime
			strTmp = rs.getString(62);
			arriveorderHeader.setTmaketime(PuPubVO.getUFDateTime(strTmp));
			//,taudittime
			strTmp = rs.getString(63);
			arriveorderHeader.setTaudittime(PuPubVO.getUFDateTime(strTmp));
			//,tlastmaketime
			strTmp = rs.getString(64);
			arriveorderHeader.setTlastmaketime(PuPubVO.getUFDateTime(strTmp));
			vHeader.addElement(arriveorderHeader);
		}
	} finally {
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {

		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"getHeadsByIds",
		new Object[] { vHeadId });
	/*************************************************************/
	if (vHeader.size() > 0) {
		hRet = new Hashtable();
		for (int i = 0; i < vHeader.size(); i++) {
			hRet.put(
				((ArriveorderHeaderVO) vHeader.elementAt(i)).getCarriveorderid(),
				vHeader.elementAt(i));
		}
	}
	return hRet;
}

/**
 * 取得存货的控制信息(到货维护用)
   是否辅计量管理、是否有替换件
 * 如果查询到的 assistunit 等 控制字段为空则认为是 “N”
 * 创建日期：(2001-11-17 8:59:58)
 * @return ary          ArrayList
 * @param  pk_invbasdoc String
 */
public ArrayList getInvFlags(String pk_invbasdoc) throws SQLException {
	UFBoolean isAss = null;
	String assistunit = null;
	UFBoolean isSetpart = null;
	String setpart = null;
	ArrayList ary = new ArrayList();
	String sql = "select assistunit,setpartsflag from bd_invbasdoc where pk_invbasdoc = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, pk_invbasdoc);
		
		rs = stmt.executeQuery();
		while (rs.next()) {
			assistunit = rs.getString(1);
			if (assistunit != null)
				assistunit = assistunit.trim();
			isAss = new UFBoolean(assistunit);
			ary.add(isAss);
			setpart = rs.getString(2);
			if (setpart != null)
				setpart = setpart.trim();
			isSetpart = new UFBoolean(setpart);
			ary.add(isSetpart);
		}
		if (rs != null)
			rs.close();
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	if (ary.size() <= 0)
		ary = null;
	return ary;
}

/**
 * 取得存货的是否辅计量管理及辅计量ID、辅计量换算率等信息(到货维护用)
 * 如果查询到的 assistunit 为空则认为是 “N”,即不进行辅计量管理
 * 返回值是ArrayList 其元素是ArrayList
   目前元素值是：
   0) 是否辅计量管理
   1) 是否替换件
   2) 主计量单位
   3) 采购默认单位(辅单位)
   4) 换算率
   5) 是否固定换算率
 * 创建日期：(2001-11-17 8:59:58)
 * @return ArrayList
 * @param String[] pk_invbasdocs
 */
public ArrayList getInvFlagsAry(String[] pk_invbasdocs) throws SQLException {
	if (pk_invbasdocs == null || pk_invbasdocs.length <= 0)
		return null;
	ArrayList aryRet = new ArrayList();

	UFBoolean isAss = null;
	String assistunit = null;
	UFBoolean isSetpart = null;
	String setpart = null;
	ArrayList aryTmp = new ArrayList();
	String sql =
		"select assistunit,setpartsflag, pk_measdoc, pk_measdoc2 from bd_invbasdoc where  pk_invbasdoc = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < pk_invbasdocs.length; i++) {
			stmt.setString(1, pk_invbasdocs[i]);
			aryTmp = new ArrayList();
			rs = stmt.executeQuery();
			if (rs.next()) {
				assistunit = rs.getString(1);
				if (assistunit != null)
					assistunit = assistunit.trim();
				isAss = new UFBoolean(assistunit);
				//是否辅计量管理
				aryTmp.add(0, isAss);
				setpart = rs.getString(2);
				if (setpart != null)
					setpart = setpart.trim();
				isSetpart = new UFBoolean(setpart);
				//是否替换件
				aryTmp.add(1, isSetpart);
				//主计量单位
				aryTmp.add(2, rs.getString(3));
				//采购默认单位(辅单位)
				aryTmp.add(3, rs.getString(4));
			}
			aryRet.add(aryTmp);
			rs.close();
		}
		//主辅计量是否相同
		boolean isSame = false;
		//换算率
		String fixedflag = null;
		Object bd = null;
		sql =
			"select pk_measdoc,mainmeasrate,fixedflag from bd_convert where pk_invbasdoc = ? and pk_measdoc = ? ";
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < pk_invbasdocs.length; i++) {
			isSame = false;
			aryTmp = (ArrayList) aryRet.get(i);
			if (aryTmp == null || aryTmp.size() <= 0) {
				aryTmp.add(4, null);
				continue;
			}
			//如果主辅计量相同，则换算率为1，而且为固定换算率
			if (aryTmp.get(2) != null && aryTmp.get(2).equals(aryTmp.get(3))) {
				isSame = true;
			}
			if (isSame){
				aryTmp.add(4, new UFDouble(1));
				aryTmp.add(5, new UFBoolean(true));
				continue;
			}
			stmt.setString(1, pk_invbasdocs[i]);
			stmt.setString(2, (String) aryTmp.get(3));
			rs = stmt.executeQuery();
			if (rs.next()) {
				//换算率
				bd = rs.getObject(2);
				aryTmp.add(
					4,
					(bd == null || bd.toString().trim().equals(""))
						? null
						: new UFDouble(bd.toString().trim()));
				//是否固定换算率
				fixedflag = rs.getString(3);
				if (fixedflag != null)
					fixedflag = fixedflag.trim();
				aryTmp.add(5, new UFBoolean(fixedflag));
			} else {
				aryTmp.add(4, null);
				aryTmp.add(5, null);
			}
			rs.close();
		}
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	if (aryRet.size() <= 0)
		aryRet = null;
	return aryRet;
}

/**
 * 取得存货的是否辅计量管理(订单转入用)
 * 如果查询到的 assistunit 为空则认为是 “N”,即不进行辅计量管理
 * 创建日期：(2001-11-17 8:59:58)
 * @return isMana       UFBoolean
 * @param  pk_invbasdoc String
 */
public UFBoolean getInvIsAssMana(String pk_invbasdoc) throws SQLException {
	UFBoolean isMana = null;
	String assistunit = null;
	String sql = "select assistunit from bd_invbasdoc where pk_invbasdoc = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, pk_invbasdoc);
		
		rs = stmt.executeQuery();
		while (rs.next()) {
			assistunit = rs.getString(1);
			if (assistunit != null)
				assistunit = assistunit.trim();
			isMana = new UFBoolean(assistunit);
		}
		if (rs != null)
			rs.close();
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return isMana;
}

/**
 * 取得存货的是否辅计量管理哈希表(订单转入用)
 * 如果查询到的 assistunit 为空则认为是 “N”,即不进行辅计量管理
 * 创建日期：(2001-11-17 8:59:58)
 * @return java.util.Hashtable
 * @param v_cbaseid java.util.Vector
 */
public Hashtable getInvIsAssManaHash(Vector v_cbaseid) throws SQLException {
	Hashtable h = new Hashtable();
	String pk_invbasdoc = null;
	String assistunit = null;
	String sql = "select assistunit from bd_invbasdoc where pk_invbasdoc = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		for (int i = 0; i < v_cbaseid.size(); i++) {
			pk_invbasdoc = (String) v_cbaseid.elementAt(i);
			stmt = con.prepareStatement(sql);
			stmt.setString(1, pk_invbasdoc);
			
			rs = stmt.executeQuery();
			while (rs.next()) {
				assistunit = rs.getString(1);
				if (assistunit != null)
					assistunit = assistunit.trim();
				h.put(pk_invbasdoc, new UFBoolean(assistunit));
			}
			if (rs != null)
				rs.close();
		}
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return h;
}

/**
 * @功能：供应商存货关系,是否免检
 *  说明：1.如果供应商系统没有启用则处理成 免检属性为 false
		  2.如果存货管理档案生产制造页中未定义库存组织和存货关系则免检属性为false
		  3.返回值取 1 OR 2
 * @作者：晁志平
 * 创建日期：(2001-8-27 20:15:01)
 * @param:<|>
 * @return:
 * @exception:
 * @see;
 * @since:
 *
 * @return UFboolean : true,免检 false,质检
 * @param pk_vendor java.lang.String
 * @param pk_inventory java.lang.String
 */
public UFBoolean getIsCheckMy(
	String pk_cumandoc,
	String pk_invmandoc,
	String pk_corp,
	String pk_calbody)
	throws Exception {
	UFBoolean isEnable = new UFBoolean(false);
	//如果没有启用供应商模块
	try {  
		ICreateCorpQueryService dmo = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
//		nc.bs.sm.createcorp.CreatecorpDMO dmo = new nc.bs.sm.createcorp.CreatecorpDMO();
		if (dmo.isEnabled(pk_corp, nc.vo.pub.ProductCode.PROD_VRM)) {
			isEnable = new UFBoolean("Y");
		}
	} catch (Exception e) {
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000046")/*@res "取是否启用供应商模块时出错，请稍后再试"*/,e);
	}
	boolean ischeck = false;
	String sql =
		" select bnocheck from vrm_vendorstock where cvendormangid = ? and cmangid = ? and pk_corp = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		//供应商管理模块启用时才作此处理
		if (isEnable.booleanValue()) {
			stmt = con.prepareStatement(sql);
			stmt.setString(1, pk_cumandoc);
			stmt.setString(2, pk_invmandoc);
			stmt.setString(3, pk_corp);
			rs = stmt.executeQuery();
			if (rs.next()) {
				String check = rs.getString(1);
				//bnocheck 在数据库中取值：char[1] = { 0，1}
				if (check != null && !(check.trim().equals(""))) {
					if (check.equals("1")) {
						ischeck = true;
					}
				}
			}
		}
		//如果已经是免检则不必作此检查
		if (!ischeck) {
			sql =
				"select chkfreeflag from bd_produce where pk_invmandoc = ? and pk_calbody = ? ";
			stmt = con.prepareStatement(sql);
			stmt.setString(1, pk_invmandoc);
			stmt.setString(2, pk_calbody);
			rs = stmt.executeQuery();
			if (rs.next()) {
				String chkfreeflag = rs.getString(1);
				if (chkfreeflag != null && !chkfreeflag.trim().equals("")) {
					if (chkfreeflag.trim().toUpperCase().equals("Y"))
						ischeck = true;
				}
			}
		}
	} finally {
		if (rs != null)
			rs.close();
		if (stmt != null) {
			stmt.close();
		}
		if (con != null) {
			con.close();
		}
	}
	return new UFBoolean(ischeck);
}

/**
 * @功能：是否冻结及供应商名称
 * @return ArrayList
 * @param pk_cumandoc java.lang.String
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList getIsFrozenVendorName(String pk_cumandoc) throws java.sql.SQLException {
	ArrayList ary = null;
	String sql =
		" select bd_cumandoc.frozenflag, bd_cubasdoc.custname, bd_cumandoc.frozendate from bd_cumandoc,bd_cubasdoc where bd_cumandoc.pk_cubasdoc = bd_cubasdoc.pk_cubasdoc and pk_cumandoc = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, pk_cumandoc);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			if (ary == null)
				ary = new ArrayList();
			String isFrozen = rs.getString(1);
			String strCustName = rs.getString(2);
			String strFrozenDate = rs.getString(3);
			ary.add(isFrozen == null ? new UFBoolean(false) : new UFBoolean(isFrozen));
			ary.add(strCustName == null ? "" : strCustName.trim());
			ary.add(strFrozenDate == null ? null : new UFDate(strFrozenDate.trim(), false));
		}
		if (rs != null)
			rs.close();
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return ary;
}

/**
 * @功能：是否批次管理
 * @注意：本方法在“是否批次管理”字段为空时返回 false
 * @作者：晁志平
 * 创建日期：(2001-8-27 20:40:36)
 * @param:<|>
 * @return:
 * @exception:
 * @see;
 * @since:
 *
 * @return boolean
 * @param pk_invmandoc java.lang.String
 * @param pk_corp java.lang.String
 * @exception java.sql.SQLException 异常说明。
 */
public boolean getIsWholeManaMy(String pk_invmandoc, String pk_corp) throws java.sql.SQLException {
	boolean ismana = true;
	String sql = " select wholemanaflag from bd_invmandoc where pk_invmandoc = ? and pk_corp = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, pk_invmandoc);
		stmt.setString(2, pk_corp);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			String mana = rs.getString(1);
			UFBoolean b = new UFBoolean(mana);
			ismana = b.booleanValue();
		}
		if (rs != null)
			rs.close();
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return ismana;
}

/**
 * 获取存货的是否劳务属性及是否折扣属性
 * 位置0：是否劳务；位置1：是否折扣
 * 创建日期：(2001-10-18 13:44:49)
 * @return java.util.ArrayList
 * @param pk_invbasdoc java.lang.String
 */
public ArrayList getLaborDiscountForInv(String pk_invbasdoc) throws SQLException {
	ArrayList ary = new ArrayList();
	String sql = " select discountflag, laborflag from bd_invbasdoc where pk_invbasdoc = ?";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, pk_invbasdoc);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			String laborflag = rs.getString(1);
			UFBoolean lab = new UFBoolean(laborflag);
			ary.add(lab);
			String discountflag = rs.getString(2);
			UFBoolean dis = new UFBoolean(discountflag);
			ary.add(dis);
		}
		if (rs != null)
			rs.close();
	}  finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return ary;
}

/**
 * @功能：查询主辅计量换算率
 * (如果固定换算率则 Object[1] = new UFBoolean("Y") 否则 Object[1] = new UFBoolean("N"))
 * @作者：晁志平
 * 创建日期：(2001-8-27 20:11:44)
 * @param:<|>
 * @return:
 * @exception:
 * @see;
 * @since:
 * @return java.lang.Object[]   Object[0],换算率
 * 								Object[1],是否固定换算率
 * @param pk_invbasdoc java.lang.String 存货基本档案主键
 * @param pk_measdoc java.lang.String 存货辅计量主键
 */
public Object[] getMainmeasRateMy(String pk_invbasdoc, String pk_measdoc) throws SQLException {
	Object[] objs = new Object[2];
	//UFBoolean isfixed  = null;
	//UFDouble  measrate = null;
	String sql = "select mainmeasrate , fixedflag from bd_convert where pk_invbasdoc = ? and pk_measdoc = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, pk_invbasdoc);
		stmt.setString(2, pk_measdoc);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			Object measrate = rs.getObject(1);
			objs[0] = (measrate == null || measrate.toString().trim().equals("")) ? null : new UFDouble(measrate.toString().trim());
			String isfixed = rs.getString(2);
			if (isfixed != null)
				isfixed = isfixed.trim();
			objs[1] = new UFBoolean(isfixed);
		}
		if (rs != null)
			rs.close();
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return objs;
}

/**
 * 订单状态(单个单据)
 *
 * 创建日期：(2001-6-23)
 * @return    String
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public String getOrdStatePo(String corderids) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "getOrdStatePo", new Object[] { corderids });
	/*************************************************************/
	if (corderids == null)
		return null;
	String sql = "select forderstatus from po_order where  corderid = ? and dr=0 ";
	Integer ibillstatus = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, corderids);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			ibillstatus = (Integer) rs.getObject(1);
		}
		if (rs != null)
			rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "getOrdStatePo", new Object[] { corderids });
	/*************************************************************/
	return ibillstatus == null ? null : ibillstatus.toString();
}

/**
 * 订单状态(多个单据)
 *
 * 创建日期：(2001-6-23)
 * @return    String[]
 * @param key String[]
 * @exception java.sql.SQLException 异常说明。
 */
public String[] getOrdStatePoArray(String[] corderids) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "getOrdStatePoArray", new Object[] { corderids });
	/*************************************************************/
	if (corderids == null || corderids.length <= 0)
		return null;
	String[] sStatus = null;
	Vector vStatus = new Vector();
	String sql = "select forderstatus from po_order where  corderid = ? and dr=0 ";
	Integer ibillstatus = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		ResultSet rs = null;
		con = getConnection();
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < corderids.length; i++) {
			stmt.setString(1, corderids[i]);
			rs = stmt.executeQuery();
			//
			if (rs.next()) {
				ibillstatus = (Integer) rs.getObject(1);
				vStatus.add(ibillstatus == null ? null : ibillstatus.toString());
			} else {
				vStatus.add(null);
			}
			if (rs != null)
				rs.close();
		}
		if (vStatus != null && vStatus.size() > 0) {
			sStatus = new String[vStatus.size()];
			vStatus.copyInto(sStatus);
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "getOrdStatePoArray", new Object[] { corderids });
	/*************************************************************/
	return sStatus;
}

/**
 * 委外订单状态(一张单据)
 *
 * 创建日期：(2001-6-23)
 * @return    String
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public String getOrdStateSc(String corderids) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "getOrdStateSc", new Object[] { corderids });
	/*************************************************************/
	if (corderids == null)
		return null;
	String sql = "select ibillstatus from sc_order where  corderid = ? and dr=0 ";
	Integer ibillstatus = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, corderids);
		ResultSet rs = stmt.executeQuery();
		//
		if (rs.next()) {
			ibillstatus = (Integer) rs.getObject(1);
		}
		if (rs != null)
			rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "getOrdStateSc", new Object[] { corderids });
	/*************************************************************/
	return ibillstatus == null ? null : ibillstatus.toString();
}

/**
 * 委外订单状态(多张单据)
 *
 * 创建日期：(2001-6-23)
 * @return    String[]
 * @param key String[]
 * @exception java.sql.SQLException 异常说明。
 */
public String[] getOrdStateScArray(String[] corderids) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "getOrdStateScArray", new Object[] { corderids });
	/*************************************************************/
	if (corderids == null || corderids.length <= 0)
		return null;
	String[] sStatus = null;
	Vector vStatus = new Vector();
	String sql = "select ibillstatus from sc_order where  corderid = ? and dr=0 ";
	Integer ibillstatus = null;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < corderids.length; i++) {
			stmt.setString(1, corderids[i]);
			rs = stmt.executeQuery();
			//
			if (rs.next()) {
				ibillstatus = (Integer) rs.getObject(1);
				vStatus.add(ibillstatus == null ? null : ibillstatus.toString());
			} else {
				vStatus.add(null);
			}
			if (rs != null)
				rs.close();
		}
		if (vStatus != null && vStatus.size() > 0) {
			sStatus = new String[vStatus.size()];
			vStatus.copyInto(sStatus);
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "getOrdStateScArray", new Object[] { corderids });
	/*************************************************************/
	return sStatus;
}

/**
 * @功能：根据人员档案主键获取所在部门主键
 * @作者：晁志平
 * 创建日期：(2001-9-14 11:06:11)
 * @param:<|>
 * @return:
 * @exception:
 * @see;
 * @since:
 *
 * @return java.lang.String
 * @param pk_psndoc java.lang.String
 */
public String getPkDeptByPkPsn(String pk_psndoc) throws SQLException {
	String pk_deptdoc = null;
	String sql = "select pk_deptdoc from bd_psndoc where pk_psndoc = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, pk_psndoc);
		
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			pk_deptdoc = rs.getString(1);
		}
		if (rs != null)
			rs.close();
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return pk_deptdoc;
}

/**
 * @功能：根据操作员主键获取该操作员所对应的人员档案主键
 * @作者：晁志平
 * 创建日期：(2001-10-08 10:59:44)
 * @return java.lang.String
 * @param psnid java.lang.String
 */
public String getPkPsnByPkOper(String userid) throws SQLException {
	String pk_psndoc = null;
	String sql = "select pk_psndoc from sm_userandclerk where userid = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, userid);
		
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			userid = rs.getString(1);
		}
		if (rs != null)
			rs.close();
	}  finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return pk_psndoc;
}



/**
 * 功能：按到货单行返回是否根据质检结果入库
 * 日期：(2002-7-18 21:22:45)
 * 修改日期，修改人，修改原因，注释标志：
 * 2003-11-24,czp,效率优化，到货单查询与主表关联查询改为临时表
 */
public Hashtable getStoreByChkHash(String[] cRowids) throws BusinessException {
	nc.vo.scm.pu.Timer timer = new nc.vo.scm.pu.Timer();
	timer.start("getStoreByChkHash操作开始");

	/**“是否根据质检结果入库”= “N”时可弃审，与上述结果取或*/
	Hashtable hTmpRowid = new Hashtable();
	Hashtable hStockByChk = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;

	try {
		//SQL语名句拼接--临时表
		String strSetId = null;
		nc.bs.scm.pub.TempTableDMO dmoTempTbl = null;
		try {
			dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
			strSetId =
				dmoTempTbl.insertTempTable(cRowids, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU92, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		} catch (Exception e) {
			throw new SQLException(e.getMessage());
		}
		String sql = "select B.carriveorder_bid, B.cmangid, A.cstoreorganization from po_arriveorder A, po_arriveorder_b B ";
		sql += "where A.dr = 0 and B.dr = 0 and A.carriveorderid = B.carriveorderid and B.carriveorder_bid in ";
		sql += strSetId;
		//查询
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		String rowid = null;
		String[] skeys = null;
		while (rs.next()) {
			rowid = rs.getString(1);
			skeys = new String[2];
			skeys[0] = rs.getString(2);
			skeys[1] = rs.getString(3);
			hTmpRowid.put(rowid, skeys);
		}
		rs.close();
		stmt.close();
		timer.addExecutePhase("查询到货单表体");
		//处理是否可入库并返回
		Enumeration keyset = null;
		if (hTmpRowid.size() > 0) {
			/*创建临时表:
			 *nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU93
			 *nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU94
			 */
			keyset = hTmpRowid.keys();
			Vector vAllKey = new Vector(); //除重复ID
			Vector vPkInvmandoc = new Vector();
			Vector vPkCalbody = new Vector();
			while (keyset.hasMoreElements()) {
				rowid = (String) keyset.nextElement();
				skeys = (String[]) hTmpRowid.get(rowid);
				if (!vAllKey.contains(skeys[0] + skeys[1])) {
					vPkInvmandoc.addElement(skeys[0]);
					vPkCalbody.addElement(skeys[1]);
					vAllKey.add(skeys[0] + skeys[1]);
				}
			}
			java.util.ArrayList listTblData = new java.util.ArrayList();
			java.util.ArrayList listTmp = null;
			int iLen = vAllKey.size();
			for (int i = 0; i < iLen; i++) {
				listTmp = new java.util.ArrayList();
				listTmp.add(new Integer(i));
				listTmp.add(vPkCalbody.elementAt(i));
				listTmp.add(vPkInvmandoc.elementAt(i));
				listTblData.add(listTmp);
			}
			String strTblName = null;
			try {
				nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
				strTblName =
					dmo.getTempStringTable(
						nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC012,
						new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "ccalbodyid" , "cmangid" },
						new String[] { "int", "char(20)", "char(20)" },
						nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
						listTblData);
			} catch (Exception e) {
				nc.bs.pu.pub.PubDMO.throwBusinessException(e);
			}
			//拼接SQL
			sql =
				"select /*+ index(bd_produce) */ pro.pk_invmandoc,pro.pk_calbody,pro.stockbycheck from bd_produce as pro,"
					+ strTblName
					+ " as inv "
					+ "where pro.pk_invmandoc = inv.cmangid and pro.pk_calbody = inv.ccalbodyid ";
			/*
			+ " and pro.pk_invmandoc in (select cmangid from "
			+ strTblNameInv
			+ ") "
			+ " and pro.pk_calbody in (select ccalbodyid from "
			+ strTblNameCal
			+ ") ";
			*/
			timer.addExecutePhase("查询物料生产档案前准备");
			//查询
			stmt = con.prepareStatement(sql);
			rs = stmt.executeQuery();
			timer.addExecutePhase("查询物料生产档案");
			//组织返回
			Hashtable hTmpInvCal = new Hashtable();
			String strPkInvmandoc = null;
			String strPkCalbody = null;
			String strStockbycheck = null;
			while (rs.next()) {
				strPkInvmandoc = rs.getString(1);
				strPkCalbody = rs.getString(2);
				strStockbycheck = rs.getString(3);
				hTmpInvCal.put(strPkInvmandoc + strPkCalbody, new UFBoolean("Y".equalsIgnoreCase(strStockbycheck)));
			}
			rs.close();
			stmt.close();
			//
			keyset = hTmpRowid.keys();
			UFBoolean ufbStockByCheck = null;
			while (keyset.hasMoreElements()) {
				rowid = (String) keyset.nextElement();
				skeys = (String[]) hTmpRowid.get(rowid);
				if (skeys == null || skeys.length < 2)
					continue;
				ufbStockByCheck = (UFBoolean) hTmpInvCal.get(skeys[0] + skeys[1]);
				/**未定义时认为是“N”*/
				if (ufbStockByCheck == null)
					ufbStockByCheck = new UFBoolean(false);
				hStockByChk.put(rowid, ufbStockByCheck);
			}
		}
	} catch (Exception e) {
		/*调用采购公用方法抛出异常*/
		PubDMO.throwBusinessException(e);
	} finally {
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {

		}
	}
	timer.addExecutePhase("查询物料生产档案后数据处理");
	timer.showAllExecutePhase("getStoreByChkHash操作结束");
	return hStockByChk;
}

/**
 * 取得仓库的控制信息(到货维护用)
   是否进行货位管理
 * 如果查询到的 csflag 等 控制字段为空则认为是 “N”
 * 创建日期：(2001-11-17 8:59:58)
 * @return ary          ArrayList
 * @param  pk_stordoc   String
 */
public ArrayList getStorFlags(String pk_stordoc) throws SQLException {
	UFBoolean isAllot = null;
	String allot = null;
	ArrayList ary = new ArrayList();
	String sql = "select csflag from bd_stordoc where pk_stordoc = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, pk_stordoc);
		
		rs = stmt.executeQuery();
		while (rs.next()) {
			allot = rs.getString(1);
			if (allot != null)
				allot = allot.trim();
			isAllot = new UFBoolean(allot);
			ary.add(isAllot);
		}
		if (rs != null)
			rs.close();
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	if (ary.size() <= 0)
		ary = null;
	return ary;
}

/**
 * 取得仓库的是否货位管理哈希表(到货维护)
 * 如果查询到的 csflag 为空则认为是 “N”
 * 创建日期：(2001-11-17 8:59:58)
 * @return h java.util.Hashtable
 * @param v_cwarehouseid java.util.Vector
 */
public ArrayList getStorFlagsAry(String[] pk_stordocs) throws SQLException {
	ArrayList ary0 = new ArrayList();
	UFBoolean isAllot = null;
	String allot = null;
	ArrayList ary = new ArrayList();
	String sql = "select csflag from bd_stordoc where pk_stordoc = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < pk_stordocs.length; i++) {
			stmt.setString(1, pk_stordocs[i]);
			
			rs = stmt.executeQuery();
			while (rs.next()) {
				allot = rs.getString(1);
				if (allot != null)
					allot = allot.trim();
				isAllot = new UFBoolean(allot);
				ary.add(isAllot);
			}
			if (ary != null)
				ary0.add(ary);
			if (rs != null)
				rs.close();
		}
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	if (ary0.size() <= 0)
		ary0 = null;
	return ary0;
}



/**
 * @功能：保质期天数
 * @return ArrayList
 * @param pk_invmandocs java.lang.String[]
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList getValiddays(String[] pk_invmandocs) throws java.sql.SQLException {

	ArrayList ary = new ArrayList();
	if (pk_invmandocs == null || pk_invmandocs.length <= 0)
		return null;
	String sql = " select pk_invmandoc,qualitydaynum from bd_invmandoc where pk_invmandoc in ";
	Vector vTmp = new Vector();
	for (int i = 0; i < pk_invmandocs.length; i++) {
		if (!vTmp.contains(pk_invmandocs[i]))
			vTmp.addElement(pk_invmandocs[i]);
	}
	String strIdsSet = "";
	String[] sTmp = new String[vTmp.size()];
	vTmp.toArray(sTmp);
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sTmp,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC005,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql += strIdsSet + " ";
	//for (int i = 0; i < vTmp.size(); i++) {
		//if (i==0)
			//sql += "pk_invmandoc='";
		//else
			//sql += "or pk_invmandoc='";
		//sql += vTmp.elementAt(i);
		//sql += "' ";
	//}
	Hashtable hTmp = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		//查询数据
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		Integer days = null;
		String strId = null;
		while (rs.next()) {
			strId = rs.getString(1);
			days = (Integer) rs.getObject(2);
			if (strId != null && days != null)
				hTmp.put(strId, days);
		}
		rs.close();
		//组织数据返回
		for (int i = 0; i < pk_invmandocs.length; i++) {
			if (pk_invmandocs[i] == null)
				ary.add(null);
			else
				ary.add((Integer) hTmp.get(pk_invmandocs[i]));
		}
	}  finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	if (ary.size() <= 0)
		ary = null;
	return ary;
}

/**
* 获取到货单VO（订单数量及累计到货数量）
* 给相应的两个哈希表属性赋值：
* 一个是  ：订单行ID = 累计到货数量
* 另一个是：订单行ID = 订单数量
* 创建日期：(2001-10-10 18:48:30)
* @return nc.vo.rc.receive.ArriveorderVO
* @param v java.util.Vector
*/
public ArriveorderVO getVOForCheckArrnum(Vector v, String upSourceBillId, int iPower) throws SQLException {
	ArriveorderVO arriveorder = new ArriveorderVO();
	Hashtable h_accNum = new Hashtable();
	Hashtable h_ordNum = new Hashtable();
	String corder_bid = null;
	String sql = "";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	Object naccumarrvnum = null;
	Object nordernum = null;
	try {
		con = getConnection();
		String strTabName = "po_order_b";
		if (upSourceBillId != null && upSourceBillId.trim().equals(ScmConst.SC_Order))
			strTabName = "sc_order_b";
		sql = "select naccumarrvnum,nordernum from " + strTabName + " where corder_bid = ? ";
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < v.size(); i++) {
			corder_bid = (String) v.elementAt(i);
			stmt.setString(1, corder_bid);
			rs = stmt.executeQuery();
			if (rs.next()) {
				naccumarrvnum = rs.getBigDecimal("naccumarrvnum");
				h_accNum.put(
					corder_bid,
					(naccumarrvnum == null || naccumarrvnum.toString().trim().equals(""))
						? new UFDouble(0, iPower)
						: new UFDouble(naccumarrvnum.toString(), iPower));
				nordernum = rs.getBigDecimal("nordernum");
				h_ordNum.put(
					corder_bid,
					(nordernum == null || nordernum.toString().trim().equals(""))
						? new UFDouble(0, iPower)
						: new UFDouble(nordernum.toString(), iPower));
			}
			if (rs != null)
				rs.close();
		}
		arriveorder.setH_accNum(h_accNum);
		arriveorder.setH_ordNum(h_ordNum);
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return arriveorder;
}

/**
 * @功能：是否批次管理
 * @注意：本方法在“是否批次管理”字段为空时返回 false
 * @return ArrayList
 * @param pk_invmandocs java.lang.String[]
 * @exception java.sql.SQLException 异常说明。
 */
public ArrayList getWholeManaFlags(String[] pk_invmandocs) throws java.sql.SQLException {
	ArrayList ary = null;
	String sql = " select wholemanaflag from bd_invmandoc where pk_invmandoc = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = null;
		for (int i = 0; i < pk_invmandocs.length; i++) {
			stmt.setString(1, pk_invmandocs[i]);
			rs = stmt.executeQuery();
			if (rs.next()) {
				if (ary == null)
					ary = new ArrayList();
				String mana = rs.getString(1);
				UFBoolean b = new UFBoolean(mana);
				ary.add(b);
			}
			if (rs != null)
				rs.close();
		}
	} finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return ary;
}

/**
 * @功能：当存货编码改变或新增一张单据时给出编码是否重复: true, 重复；false,不重复
 * @作者：晁志平
 * 创建日期：(2001-8-9 11:14:20)
 * @param:<|>
 * @return:
 * @exception:
 * @see;
 * @since:
 *
 * @return boolean
 * @param newCode java.lang.String
 */
public boolean haveTheArrCodeMy(String newCode) throws SQLException{
	String sql = "select varrordercode from po_arriveorder where varrordercode = ? ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, newCode);
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			return true;
		}
		if (rs != null)
			rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return false;
}

/**
 * 向数据库插入一个VO对象。
 *
 * 创建日期：(2001-6-8)
 * @param node nc.vo.rc.receive.ArriveorderHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insertHeaderMy(ArriveorderHeaderVO arriveorderHeader) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "insertHeader", new Object[]{arriveorderHeader});
	/*************************************************************/
	Connection con = null;
	PreparedStatement stmt = null;
	String key = null;
	String cvendorbaseid = null;

	String  sql  = "select bd_cubasdoc.pk_cubasdoc from bd_cubasdoc, bd_cumandoc ";
			sql += "where bd_cumandoc.pk_cubasdoc = bd_cubasdoc.pk_cubasdoc ";
			sql += "and bd_cumandoc.pk_cumandoc = ? ";

	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		//如果管理档案为空则基本档案也应为空
		if (arriveorderHeader.getCvendormangid() == null || arriveorderHeader.getCvendormangid().trim().equals("")) {
			arriveorderHeader.setCvendorbaseid(null);
		}else{
			stmt.setString(1, arriveorderHeader.getCvendormangid());
			ResultSet rs = stmt.executeQuery();
			while (rs.next()) {
				cvendorbaseid = rs.getString(1);
				arriveorderHeader.setCvendorbaseid(cvendorbaseid);
			}
			if (rs != null) {
				rs.close();
			}
		}
		sql = "insert into po_arriveorder(carriveorderid, pk_corp, varrordercode, dreceivedate, cvendormangid, cbiztype, ctransmodeid, cstoreorganization, creceivepsn, cdeptid, cemployeeid, caccountyear, ibillstatus, coperator, cbilltype, vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10,vdef11,vdef12,vdef13,vdef14,vdef15,vdef16,vdef17,vdef18,vdef19,vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,cvendorbaseid, cfreecustid, dauditdate, cauditpsn,bisback,vbackreasonh,pk_purcorp,tmaketime,taudittime,tlastmaketime) ";
		sql += " values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		stmt = con.prepareStatement(sql);
		// set PK fields:
		key = getOID(arriveorderHeader.getPk_corp());
		stmt.setString(1, key);
		// set non PK fields:
		if (arriveorderHeader.getPk_corp() == null) {
			stmt.setNull(2, Types.CHAR);
		} else {
			stmt.setString(2, arriveorderHeader.getPk_corp());
		}
		if (arriveorderHeader.getVarrordercode() == null) {
			stmt.setNull(3, Types.CHAR);
		} else {
			stmt.setString(3, arriveorderHeader.getVarrordercode());
		}
		if (arriveorderHeader.getDreceivedate() == null) {
			stmt.setNull(4, Types.CHAR);
		} else {
			stmt.setString(4, arriveorderHeader.getDreceivedate().toString());
		}
		if (arriveorderHeader.getCvendormangid() == null) {
			stmt.setNull(5, Types.CHAR);
		} else {
			stmt.setString(5, arriveorderHeader.getCvendormangid());
		}
		if (arriveorderHeader.getCbiztype() == null) {
			stmt.setNull(6, Types.CHAR);
		} else {
			stmt.setString(6, arriveorderHeader.getCbiztype());
		}
		if (arriveorderHeader.getCtransmodeid() == null) {
			stmt.setNull(7, Types.CHAR);
		} else {
			stmt.setString(7, arriveorderHeader.getCtransmodeid());
		}
		if (arriveorderHeader.getCstoreorganization() == null) {
			stmt.setNull(8, Types.CHAR);
		} else {
			stmt.setString(8, arriveorderHeader.getCstoreorganization());
		}
		if (arriveorderHeader.getCreceivepsn() == null) {
			stmt.setNull(9, Types.CHAR);
		} else {
			stmt.setString(9, arriveorderHeader.getCreceivepsn());
		}
		if (arriveorderHeader.getCdeptid() == null) {
			stmt.setNull(10, Types.CHAR);
		} else {
			stmt.setString(10, arriveorderHeader.getCdeptid());
		}
		if (arriveorderHeader.getCemployeeid() == null) {
			stmt.setNull(11, Types.CHAR);
		} else {
			stmt.setString(11, arriveorderHeader.getCemployeeid());
		}
		if (arriveorderHeader.getCaccountyear() == null) {
			stmt.setNull(12, Types.CHAR);
		} else {
			stmt.setString(12, arriveorderHeader.getCaccountyear());
		}
		if (arriveorderHeader.getIbillstatus() == null) {
			stmt.setNull(13, Types.INTEGER);
		} else {
			stmt.setInt(13, arriveorderHeader.getIbillstatus().intValue());
		}
		if (arriveorderHeader.getCoperator() == null) {
			stmt.setNull(14, Types.CHAR);
		} else {
			stmt.setString(14, arriveorderHeader.getCoperator());
		}
		if (arriveorderHeader.getCbilltype() == null) {
			stmt.setNull(15, Types.CHAR);
		} else {
			stmt.setString(15, arriveorderHeader.getCbilltype());
		}
		if (arriveorderHeader.getVmemo() == null) {
			stmt.setNull(16, Types.CHAR);
		} else {
			stmt.setString(16, arriveorderHeader.getVmemo());
		}
		if (arriveorderHeader.getVdef1() == null) {
			stmt.setNull(17, Types.CHAR);
		} else {
			stmt.setString(17, arriveorderHeader.getVdef1());
		}
		if (arriveorderHeader.getVdef2() == null) {
			stmt.setNull(18, Types.CHAR);
		} else {
			stmt.setString(18, arriveorderHeader.getVdef2());
		}
		if (arriveorderHeader.getVdef3() == null) {
			stmt.setNull(19, Types.CHAR);
		} else {
			stmt.setString(19, arriveorderHeader.getVdef3());
		}
		if (arriveorderHeader.getVdef4() == null) {
			stmt.setNull(20, Types.CHAR);
		} else {
			stmt.setString(20, arriveorderHeader.getVdef4());
		}
		if (arriveorderHeader.getVdef5() == null) {
			stmt.setNull(21, Types.CHAR);
		} else {
			stmt.setString(21, arriveorderHeader.getVdef5());
		}
		if (arriveorderHeader.getVdef6() == null) {
			stmt.setNull(22, Types.CHAR);
		} else {
			stmt.setString(22, arriveorderHeader.getVdef6());
		}
		if (arriveorderHeader.getVdef7() == null) {
			stmt.setNull(23, Types.CHAR);
		} else {
			stmt.setString(23, arriveorderHeader.getVdef7());
		}
		if (arriveorderHeader.getVdef8() == null) {
			stmt.setNull(24, Types.CHAR);
		} else {
			stmt.setString(24, arriveorderHeader.getVdef8());
		}
		if (arriveorderHeader.getVdef9() == null) {
			stmt.setNull(25, Types.CHAR);
		} else {
			stmt.setString(25, arriveorderHeader.getVdef9());
		}
		if (arriveorderHeader.getVdef10() == null) {
			stmt.setNull(26, Types.CHAR);
		} else {
			stmt.setString(26, arriveorderHeader.getVdef10());
		}
		if (arriveorderHeader.getVdef11() == null) {
			stmt.setNull(27, Types.CHAR);
		} else {
			stmt.setString(27, arriveorderHeader.getVdef11());
		}
		if (arriveorderHeader.getVdef12() == null) {
			stmt.setNull(28, Types.CHAR);
		} else {
			stmt.setString(28, arriveorderHeader.getVdef12());
		}
		if (arriveorderHeader.getVdef13() == null) {
			stmt.setNull(29, Types.CHAR);
		} else {
			stmt.setString(29, arriveorderHeader.getVdef13());
		}
		if (arriveorderHeader.getVdef14() == null) {
			stmt.setNull(30, Types.CHAR);
		} else {
			stmt.setString(30, arriveorderHeader.getVdef14());
		}
		if (arriveorderHeader.getVdef15() == null) {
			stmt.setNull(31, Types.CHAR);
		} else {
			stmt.setString(31, arriveorderHeader.getVdef15());
		}
		if (arriveorderHeader.getVdef16() == null) {
			stmt.setNull(32, Types.CHAR);
		} else {
			stmt.setString(32, arriveorderHeader.getVdef16());
		}
		if (arriveorderHeader.getVdef17() == null) {
			stmt.setNull(33, Types.CHAR);
		} else {
			stmt.setString(33, arriveorderHeader.getVdef17());
		}
		if (arriveorderHeader.getVdef18() == null) {
			stmt.setNull(34, Types.CHAR);
		} else {
			stmt.setString(34, arriveorderHeader.getVdef18());
		}
		if (arriveorderHeader.getVdef19() == null) {
			stmt.setNull(35, Types.CHAR);
		} else {
			stmt.setString(35, arriveorderHeader.getVdef19());
		}
		if (arriveorderHeader.getVdef20() == null) {
			stmt.setNull(36, Types.CHAR);
		} else {
			stmt.setString(36, arriveorderHeader.getVdef20());
		}
		if (arriveorderHeader.getPKDefDoc1() == null) {
			stmt.setNull(37, Types.CHAR);
		} else {
			stmt.setString(37, arriveorderHeader.getPKDefDoc1());
		}
		if (arriveorderHeader.getPKDefDoc2() == null) {
			stmt.setNull(38, Types.CHAR);
		} else {
			stmt.setString(38, arriveorderHeader.getPKDefDoc2());
		}
		if (arriveorderHeader.getPKDefDoc3() == null) {
			stmt.setNull(39, Types.CHAR);
		} else {
			stmt.setString(39, arriveorderHeader.getPKDefDoc3());
		}
		if (arriveorderHeader.getPKDefDoc4() == null) {
			stmt.setNull(40, Types.CHAR);
		} else {
			stmt.setString(40, arriveorderHeader.getPKDefDoc4());
		}
		if (arriveorderHeader.getPKDefDoc5() == null) {
			stmt.setNull(41, Types.CHAR);
		} else {
			stmt.setString(41, arriveorderHeader.getPKDefDoc5());
		}
		if (arriveorderHeader.getPKDefDoc6() == null) {
			stmt.setNull(42, Types.CHAR);
		} else {
			stmt.setString(42, arriveorderHeader.getPKDefDoc6());
		}
		if (arriveorderHeader.getPKDefDoc7() == null) {
			stmt.setNull(43, Types.CHAR);
		} else {
			stmt.setString(43, arriveorderHeader.getPKDefDoc7());
		}
		if (arriveorderHeader.getPKDefDoc8() == null) {
			stmt.setNull(44, Types.CHAR);
		} else {
			stmt.setString(44, arriveorderHeader.getPKDefDoc8());
		}
		if (arriveorderHeader.getPKDefDoc9() == null) {
			stmt.setNull(45, Types.CHAR);
		} else {
			stmt.setString(45, arriveorderHeader.getPKDefDoc9());
		}
		if (arriveorderHeader.getPKDefDoc10() == null) {
			stmt.setNull(46, Types.CHAR);
		} else {
			stmt.setString(46, arriveorderHeader.getPKDefDoc10());
		}
		if (arriveorderHeader.getPKDefDoc11() == null) {
			stmt.setNull(47, Types.CHAR);
		} else {
			stmt.setString(47, arriveorderHeader.getPKDefDoc11());
		}
		if (arriveorderHeader.getPKDefDoc12() == null) {
			stmt.setNull(48, Types.CHAR);
		} else {
			stmt.setString(48, arriveorderHeader.getPKDefDoc12());
		}
		if (arriveorderHeader.getPKDefDoc13() == null) {
			stmt.setNull(49, Types.CHAR);
		} else {
			stmt.setString(49, arriveorderHeader.getPKDefDoc13());
		}
		if (arriveorderHeader.getPKDefDoc14() == null) {
			stmt.setNull(50, Types.CHAR);
		} else {
			stmt.setString(50, arriveorderHeader.getPKDefDoc14());
		}
		if (arriveorderHeader.getPKDefDoc15() == null) {
			stmt.setNull(51, Types.CHAR);
		} else {
			stmt.setString(51, arriveorderHeader.getPKDefDoc15());
		}
		if (arriveorderHeader.getPKDefDoc16() == null) {
			stmt.setNull(52, Types.CHAR);
		} else {
			stmt.setString(52, arriveorderHeader.getPKDefDoc16());
		}
		if (arriveorderHeader.getPKDefDoc17() == null) {
			stmt.setNull(53, Types.CHAR);
		} else {
			stmt.setString(53, arriveorderHeader.getPKDefDoc17());
		}
		if (arriveorderHeader.getPKDefDoc18() == null) {
			stmt.setNull(54, Types.CHAR);
		} else {
			stmt.setString(54, arriveorderHeader.getPKDefDoc18());
		}
		if (arriveorderHeader.getPKDefDoc19() == null) {
			stmt.setNull(55, Types.CHAR);
		} else {
			stmt.setString(55, arriveorderHeader.getPKDefDoc19());
		}
		if (arriveorderHeader.getPKDefDoc20() == null) {
			stmt.setNull(56, Types.CHAR);
		} else {
			stmt.setString(56, arriveorderHeader.getPKDefDoc20());
		}
		//
		if (arriveorderHeader.getCvendorbaseid() == null) {
			stmt.setNull(57, Types.CHAR);
		} else {
			stmt.setString(57, arriveorderHeader.getCvendorbaseid());
		}
		if (arriveorderHeader.getCfreecustid() == null) {
			stmt.setNull(58, Types.CHAR);
		} else {
			stmt.setString(58, arriveorderHeader.getCfreecustid());
		}
		if (arriveorderHeader.getAttributeValue("dauditdate") == null) {
			stmt.setNull(59, Types.CHAR);
		} else {
			stmt.setString(59, arriveorderHeader.getAttributeValue(
					"dauditdate").toString());
		}
		if (arriveorderHeader.getAttributeValue("cauditpsn") == null) {
			stmt.setNull(60, Types.CHAR);
		} else {
			stmt.setString(60, arriveorderHeader.getAttributeValue(
					"cauditpsn").toString());
		}
		if (arriveorderHeader.getAttributeValue("bisback") == null
				|| arriveorderHeader.getAttributeValue("bisback")
						.toString().trim().equals("")) {
			stmt.setString(61, "N");
		} else {
			stmt.setString(61, arriveorderHeader.getBisback()
					.booleanValue() ? "Y" : "N");
		}
		if (arriveorderHeader.getAttributeValue("vbackreasonh") == null) {
			stmt.setNull(62, Types.CHAR);
		} else {
			stmt.setString(62, arriveorderHeader.getAttributeValue(
					"vbackreasonh").toString());
		}
		if (arriveorderHeader.getAttributeValue("pk_purcorp") == null) {
			stmt.setNull(63, Types.CHAR);
		} else {
			stmt.setString(63, arriveorderHeader.getAttributeValue(
					"pk_purcorp").toString());
		}
		if (arriveorderHeader.getAttributeValue("tmaketime") == null) {
			stmt.setNull(64, Types.CHAR);
		} else {
			stmt.setString(64, arriveorderHeader.getAttributeValue(
					"tmaketime").toString());
		}
		if (arriveorderHeader.getAttributeValue("taudittime") == null) {
			stmt.setNull(65, Types.CHAR);
		} else {
			stmt.setString(65, arriveorderHeader.getAttributeValue(
					"taudittime").toString());
		}
		if (arriveorderHeader.getAttributeValue("tlastmaketime") == null) {
			stmt.setNull(66, Types.CHAR);
		} else {
			stmt.setString(66, arriveorderHeader.getAttributeValue(
					"tlastmaketime").toString());
		}
		//
		stmt.executeUpdate();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "insertHeader", new Object[]{arriveorderHeader});
	/*************************************************************/

	return key;
}

/**
 * 向数据库插入一个VO对象。
 *
 * 创建日期：(2001-6-8)
 * @param node nc.vo.rc.receive.ArriveorderItemVO
 * @exception java.sql.SQLException 异常说明。
 */
public String insertItemArray(ArriveorderItemVO[] arriveorderItems) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "insertItem", new Object[]{arriveorderItems});
	/*************************************************************/

	String sql  = "insert into po_arriveorder_b(carriveorder_bid, carriveorderid, pk_corp, corder_bid, corderid, cmangid, cassistunit, narrvnum, nassistnum, nwastnum, nwastassistnum, npresentnum, npresentassistnum, vproducenum, ccurrencytypeid, noriginalcurprice, noriginalcurmny, nexchangeotobrate, nprice, nmoney, nexchangeotoarate, nassistcurprice, nassistcurmny, dproducedate, ivalidday, dvaliddate, nelignum, nnotelignum, naccumchecknum, naccumwarehousenum, cwarehouseid, cstoreid, ";
		   sql += "cupsourcebilltype, cupsourcebillid, cupsourcebillrowid, vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7,vdef8,vdef9,vdef10,vdef11,vdef12,vdef13,vdef14,vdef15,vdef16,vdef17,vdef18,vdef19,vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,";
		   sql += "vfree1, vfree2, vfree3, vfree4, vfree5, cbaseid, csourcebilltype, csourcebillid, csourcebillrowid, cprojectid, cprojectphaseid, crowno, vbackreasonb,naccreplenishnum,corder_bb1id,blargess,blargessuprow" +
		   		",pk_reqcorp,pk_reqstoorg,pk_creqwareid,pk_invoicecorp) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)";
	ArriveorderItemVO arriveorderItem = null;
	String key = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = prepareStatement(con,sql);
		for (int i = 0; i < arriveorderItems.length; i++){
			arriveorderItem = arriveorderItems[i];
			// set PK fields:
			key = getOID(arriveorderItem.getPk_corp());
			stmt.setString(1, key);
			// set non PK fields:
			if (arriveorderItem.getCarriveorderid() == null) {
				stmt.setNull(2, Types.CHAR);
			} else {
				stmt.setString(2, arriveorderItem.getCarriveorderid());
			}
			if (arriveorderItem.getPk_corp() == null) {
				stmt.setNull(3, Types.CHAR);
			} else {
				stmt.setString(3, arriveorderItem.getPk_corp());
			}
			if (arriveorderItem.getCorder_bid() == null) {
				stmt.setNull(4, Types.CHAR);
			} else {
				stmt.setString(4, arriveorderItem.getCorder_bid());
			}
			if (arriveorderItem.getCorderid() == null) {
				stmt.setNull(5, Types.CHAR);
			} else {
				stmt.setString(5, arriveorderItem.getCorderid());
			}
			if (arriveorderItem.getCmangid() == null) {
				stmt.setNull(6, Types.CHAR);
			} else {
				stmt.setString(6, arriveorderItem.getCmangid());
			}
			if (arriveorderItem.getCassistunit() == null) {
				stmt.setNull(7, Types.CHAR);
			} else {
				stmt.setString(7, arriveorderItem.getCassistunit());
			}
			if (arriveorderItem.getNarrvnum() == null) {
				stmt.setNull(8, Types.INTEGER);
			} else {
				stmt.setDouble(8, arriveorderItem.getNarrvnum()
						.doubleValue());
			}
			if (arriveorderItem.getNassistnum() == null) {
				stmt.setNull(9, Types.INTEGER);
			} else {
				stmt.setDouble(9, arriveorderItem.getNassistnum()
						.doubleValue());
			}
			if (arriveorderItem.getNwastnum() == null) {
				stmt.setNull(10, Types.INTEGER);
			} else {
				stmt.setDouble(10, arriveorderItem.getNwastnum()
						.doubleValue());
			}
			if (arriveorderItem.getNwastassistnum() == null) {
				stmt.setNull(11, Types.INTEGER);
			} else {
				stmt.setDouble(11, arriveorderItem.getNwastassistnum()
						.doubleValue());
			}
			if (arriveorderItem.getNpresentnum() == null) {
				stmt.setNull(12, Types.INTEGER);
			} else {
				stmt.setDouble(12, arriveorderItem.getNpresentnum()
						.doubleValue());
			}
			if (arriveorderItem.getNpresentassistnum() == null) {
				stmt.setNull(13, Types.INTEGER);
			} else {
				stmt.setDouble(13, arriveorderItem.getNpresentassistnum()
						.doubleValue());
			}
			if (arriveorderItem.getVproducenum() == null) {
				stmt.setNull(14, Types.CHAR);
			} else {
				stmt.setString(14, arriveorderItem.getVproducenum());
			}
			if (arriveorderItem.getCcurrencytypeid() == null) {
				stmt.setNull(15, Types.CHAR);
			} else {
				stmt.setString(15, arriveorderItem.getCcurrencytypeid());
			}
			if (arriveorderItem.getNoriginalcurprice() == null) {
				stmt.setNull(16, Types.INTEGER);
			} else {
				stmt.setDouble(16, arriveorderItem.getNoriginalcurprice()
						.doubleValue());
			}
			if (arriveorderItem.getNoriginalcurmny() == null) {
				stmt.setNull(17, Types.INTEGER);
			} else {
				stmt.setDouble(17, arriveorderItem.getNoriginalcurmny()
						.doubleValue());
			}
			if (arriveorderItem.getNexchangeotobrate() == null) {
				stmt.setNull(18, Types.INTEGER);
			} else {
				stmt.setDouble(18, arriveorderItem.getNexchangeotobrate()
						.doubleValue());
			}
			if (arriveorderItem.getNprice() == null) {
				stmt.setNull(19, Types.INTEGER);
			} else {
				stmt.setDouble(19, arriveorderItem.getNprice()
						.doubleValue());
			}
			if (arriveorderItem.getNmoney() == null) {
				stmt.setNull(20, Types.INTEGER);
			} else {
				stmt.setDouble(20, arriveorderItem.getNmoney()
						.doubleValue());
			}
			if (arriveorderItem.getNexchangeotoarate() == null) {
				stmt.setNull(21, Types.INTEGER);
			} else {
				stmt.setDouble(21, arriveorderItem.getNexchangeotoarate()
						.doubleValue());
			}
			if (arriveorderItem.getNassistcurprice() == null) {
				stmt.setNull(22, Types.INTEGER);
			} else {
				stmt.setDouble(22, arriveorderItem.getNassistcurprice()
						.doubleValue());
			}
			if (arriveorderItem.getNassistcurmny() == null) {
				stmt.setNull(23, Types.INTEGER);
			} else {
				stmt.setDouble(23, arriveorderItem.getNassistcurmny()
						.doubleValue());
			}
			if (arriveorderItem.getDproducedate() == null) {
				stmt.setNull(24, Types.CHAR);
			} else {
				stmt.setString(24, arriveorderItem.getDproducedate()
						.toString());
			}
			if (arriveorderItem.getIvalidday() == null) {
				stmt.setNull(25, Types.INTEGER);
			} else {
				stmt.setInt(25, arriveorderItem.getIvalidday().intValue());
			}
			if (arriveorderItem.getDvaliddate() == null) {
				stmt.setNull(26, Types.CHAR);
			} else {
				stmt.setString(26, arriveorderItem.getDvaliddate()
						.toString());
			}
			if (arriveorderItem.getNelignum() == null) {
				stmt.setNull(27, Types.INTEGER);
			} else {
				stmt.setDouble(27, arriveorderItem.getNelignum()
						.doubleValue());
			}
			if (arriveorderItem.getNnotelignum() == null) {
				stmt.setNull(28, Types.INTEGER);
			} else {
				stmt.setDouble(28, arriveorderItem.getNnotelignum()
						.doubleValue());
			}
			if (arriveorderItem.getNaccumchecknum() == null) {
				stmt.setNull(29, Types.INTEGER);
			} else {
				stmt.setDouble(29, arriveorderItem.getNaccumchecknum()
						.doubleValue());
			}
			if (arriveorderItem.getNaccumwarehousenum() == null) {
				stmt.setNull(30, Types.INTEGER);
			} else {
				stmt.setDouble(30, arriveorderItem.getNaccumwarehousenum()
						.doubleValue());
			}
			if (arriveorderItem.getCwarehouseid() == null) {
				stmt.setNull(31, Types.CHAR);
			} else {
				stmt.setString(31, arriveorderItem.getCwarehouseid());
			}
			if (arriveorderItem.getCstoreid() == null) {
				stmt.setNull(32, Types.CHAR);
			} else {
				stmt.setString(32, arriveorderItem.getCstoreid());
			}
			if (arriveorderItem.getCupsourcebilltype() == null) {
				stmt.setNull(33, Types.CHAR);
			} else {
				stmt.setString(33, arriveorderItem.getCupsourcebilltype());
			}
			if (arriveorderItem.getCupsourcebillid() == null) {
				stmt.setNull(34, Types.CHAR);
			} else {
				stmt.setString(34, arriveorderItem.getCupsourcebillid());
			}
			if (arriveorderItem.getCupsourcebillrowid() == null) {
				stmt.setNull(35, Types.CHAR);
			} else {
				stmt.setString(35, arriveorderItem.getCupsourcebillrowid());
			}
			if (arriveorderItem.getVmemo() == null) {
				stmt.setNull(36, Types.CHAR);
			} else {
				stmt.setString(36, arriveorderItem.getVmemo());
			}
			if (arriveorderItem.getVdef1() == null) {
				stmt.setNull(37, Types.CHAR);
			} else {
				stmt.setString(37, arriveorderItem.getVdef1());
			}
			if (arriveorderItem.getVdef2() == null) {
				stmt.setNull(38, Types.CHAR);
			} else {
				stmt.setString(38, arriveorderItem.getVdef2());
			}
			if (arriveorderItem.getVdef3() == null) {
				stmt.setNull(39, Types.CHAR);
			} else {
				stmt.setString(39, arriveorderItem.getVdef3());
			}
			if (arriveorderItem.getVdef4() == null) {
				stmt.setNull(40, Types.CHAR);
			} else {
				stmt.setString(40, arriveorderItem.getVdef4());
			}
			if (arriveorderItem.getVdef5() == null) {
				stmt.setNull(41, Types.CHAR);
			} else {
				stmt.setString(41, arriveorderItem.getVdef5());
			}
			if (arriveorderItem.getVdef6() == null) {
				stmt.setNull(42, Types.CHAR);
			} else {
				stmt.setString(42, arriveorderItem.getVdef6());
			}
			if (arriveorderItem.getVdef7() == null) {
				stmt.setNull(43, Types.CHAR);
			} else {
				stmt.setString(43, arriveorderItem.getVdef7());
			}
			if (arriveorderItem.getVdef8() == null) {
				stmt.setNull(44, Types.CHAR);
			} else {
				stmt.setString(44, arriveorderItem.getVdef8());
			}
			if (arriveorderItem.getVdef9() == null) {
				stmt.setNull(45, Types.CHAR);
			} else {
				stmt.setString(45, arriveorderItem.getVdef9());
			}
			if (arriveorderItem.getVdef10() == null) {
				stmt.setNull(46, Types.CHAR);
			} else {
				stmt.setString(46, arriveorderItem.getVdef10());
			}
			if (arriveorderItem.getVdef11() == null) {
				stmt.setNull(47, Types.CHAR);
			} else {
				stmt.setString(47, arriveorderItem.getVdef11());
			}
			if (arriveorderItem.getVdef12() == null) {
				stmt.setNull(48, Types.CHAR);
			} else {
				stmt.setString(48, arriveorderItem.getVdef12());
			}
			if (arriveorderItem.getVdef13() == null) {
				stmt.setNull(49, Types.CHAR);
			} else {
				stmt.setString(49, arriveorderItem.getVdef13());
			}
			if (arriveorderItem.getVdef14() == null) {
				stmt.setNull(50, Types.CHAR);
			} else {
				stmt.setString(50, arriveorderItem.getVdef14());
			}
			if (arriveorderItem.getVdef15() == null) {
				stmt.setNull(51, Types.CHAR);
			} else {
				stmt.setString(51, arriveorderItem.getVdef15());
			}
			if (arriveorderItem.getVdef16() == null) {
				stmt.setNull(52, Types.CHAR);
			} else {
				stmt.setString(52, arriveorderItem.getVdef16());
			}
			if (arriveorderItem.getVdef17() == null) {
				stmt.setNull(53, Types.CHAR);
			} else {
				stmt.setString(53, arriveorderItem.getVdef17());
			}
			if (arriveorderItem.getVdef18() == null) {
				stmt.setNull(54, Types.CHAR);
			} else {
				stmt.setString(54, arriveorderItem.getVdef18());
			}
			if (arriveorderItem.getVdef19() == null) {
				stmt.setNull(55, Types.CHAR);
			} else {
				stmt.setString(55, arriveorderItem.getVdef19());
			}
			if (arriveorderItem.getVdef20() == null) {
				stmt.setNull(56, Types.CHAR);
			} else {
				stmt.setString(56, arriveorderItem.getVdef20());
			}
			if (arriveorderItem.getPKDefDoc1() == null) {
				stmt.setNull(57, Types.CHAR);
			} else {
				stmt.setString(57, arriveorderItem.getPKDefDoc1());
			}
			if (arriveorderItem.getPKDefDoc2() == null) {
				stmt.setNull(58, Types.CHAR);
			} else {
				stmt.setString(58, arriveorderItem.getPKDefDoc2());
			}
			if (arriveorderItem.getPKDefDoc3() == null) {
				stmt.setNull(59, Types.CHAR);
			} else {
				stmt.setString(59, arriveorderItem.getPKDefDoc3());
			}
			if (arriveorderItem.getPKDefDoc4() == null) {
				stmt.setNull(60, Types.CHAR);
			} else {
				stmt.setString(60, arriveorderItem.getPKDefDoc4());
			}
			if (arriveorderItem.getPKDefDoc5() == null) {
				stmt.setNull(61, Types.CHAR);
			} else {
				stmt.setString(61, arriveorderItem.getPKDefDoc5());
			}
			if (arriveorderItem.getPKDefDoc6() == null) {
				stmt.setNull(62, Types.CHAR);
			} else {
				stmt.setString(62, arriveorderItem.getPKDefDoc6());
			}
			if (arriveorderItem.getPKDefDoc7() == null) {
				stmt.setNull(63, Types.CHAR);
			} else {
				stmt.setString(63, arriveorderItem.getPKDefDoc7());
			}
			if (arriveorderItem.getPKDefDoc8() == null) {
				stmt.setNull(64, Types.CHAR);
			} else {
				stmt.setString(64, arriveorderItem.getPKDefDoc8());
			}
			if (arriveorderItem.getPKDefDoc9() == null) {
				stmt.setNull(65, Types.CHAR);
			} else {
				stmt.setString(65, arriveorderItem.getPKDefDoc9());
			}
			if (arriveorderItem.getPKDefDoc10() == null) {
				stmt.setNull(66, Types.CHAR);
			} else {
				stmt.setString(66, arriveorderItem.getPKDefDoc10());
			}
			if (arriveorderItem.getPKDefDoc11() == null) {
				stmt.setNull(67, Types.CHAR);
			} else {
				stmt.setString(67, arriveorderItem.getPKDefDoc11());
			}
			if (arriveorderItem.getPKDefDoc12() == null) {
				stmt.setNull(68, Types.CHAR);
			} else {
				stmt.setString(68, arriveorderItem.getPKDefDoc12());
			}
			if (arriveorderItem.getPKDefDoc13() == null) {
				stmt.setNull(69, Types.CHAR);
			} else {
				stmt.setString(69, arriveorderItem.getPKDefDoc13());
			}
			if (arriveorderItem.getPKDefDoc14() == null) {
				stmt.setNull(70, Types.CHAR);
			} else {
				stmt.setString(70, arriveorderItem.getPKDefDoc14());
			}
			if (arriveorderItem.getPKDefDoc15() == null) {
				stmt.setNull(71, Types.CHAR);
			} else {
				stmt.setString(71, arriveorderItem.getPKDefDoc15());
			}
			if (arriveorderItem.getPKDefDoc16() == null) {
				stmt.setNull(72, Types.CHAR);
			} else {
				stmt.setString(72, arriveorderItem.getPKDefDoc16());
			}
			if (arriveorderItem.getPKDefDoc17() == null) {
				stmt.setNull(73, Types.CHAR);
			} else {
				stmt.setString(73, arriveorderItem.getPKDefDoc17());
			}
			if (arriveorderItem.getPKDefDoc18() == null) {
				stmt.setNull(74, Types.CHAR);
			} else {
				stmt.setString(74, arriveorderItem.getPKDefDoc18());
			}
			if (arriveorderItem.getPKDefDoc19() == null) {
				stmt.setNull(75, Types.CHAR);
			} else {
				stmt.setString(75, arriveorderItem.getPKDefDoc19());
			}
			if (arriveorderItem.getPKDefDoc20() == null) {
				stmt.setNull(76, Types.CHAR);
			} else {
				stmt.setString(76, arriveorderItem.getPKDefDoc20());
			}
			if (arriveorderItem.getVfree1() == null) {
				stmt.setNull(77, Types.CHAR);
			} else {
				stmt.setString(77, arriveorderItem.getVfree1());
			}
			if (arriveorderItem.getVfree2() == null) {
				stmt.setNull(78, Types.CHAR);
			} else {
				stmt.setString(78, arriveorderItem.getVfree2());
			}
			if (arriveorderItem.getVfree3() == null) {
				stmt.setNull(79, Types.CHAR);
			} else {
				stmt.setString(79, arriveorderItem.getVfree3());
			}
			if (arriveorderItem.getVfree4() == null) {
				stmt.setNull(80, Types.CHAR);
			} else {
				stmt.setString(80, arriveorderItem.getVfree4());
			}
			if (arriveorderItem.getVfree5() == null) {
				stmt.setNull(81, Types.CHAR);
			} else {
				stmt.setString(81, arriveorderItem.getVfree5());
			}
			//存货基本档案主键
			if (arriveorderItem.getCbaseid() == null) {
				stmt.setNull(82, Types.CHAR);
			} else {
				stmt.setString(82, arriveorderItem.getCbaseid());
			}
			if (arriveorderItem.getAttributeValue("csourcebilltype") == null) {
				stmt.setNull(83, Types.CHAR);
			} else {
				stmt.setString(83, (String) arriveorderItem
						.getAttributeValue("csourcebilltype"));
			}
			if (arriveorderItem.getAttributeValue("csourcebillid") == null) {
				stmt.setNull(84, Types.CHAR);
			} else {
				stmt.setString(84, (String) arriveorderItem
						.getAttributeValue("csourcebillid"));
			}
			if (arriveorderItem.getAttributeValue("csourcebillrowid") == null) {
				stmt.setNull(85, Types.CHAR);
			} else {
				stmt.setString(85, (String) arriveorderItem
						.getAttributeValue("csourcebillrowid"));
			}
			//是否赠品
			//if (arriveorderItem.getAttributeValue("iispresent") == null)
			// {
			//stmt.setNull(52, Types.CHAR);
			//}
			//else {
			//stmt.setString(52,
			// arriveorderItem.getAttributeValue("iispresent").toString().trim());
			//}
			//项目
			if (arriveorderItem.getAttributeValue("cprojectid") == null) {
				stmt.setNull(86, Types.CHAR);
			} else {
				stmt.setString(86, arriveorderItem.getAttributeValue(
						"cprojectid").toString().trim());
			}
			//项目阶段
			if (arriveorderItem.getAttributeValue("cprojectphaseid") == null) {
				stmt.setNull(87, Types.CHAR);
			} else {
				stmt.setString(87, arriveorderItem.getAttributeValue(
						"cprojectphaseid").toString().trim());
			}
			//单据行号
			if (arriveorderItem.getAttributeValue("crowno") == null) {
				stmt.setNull(88, Types.CHAR);
			} else {
				stmt.setString(88, arriveorderItem.getAttributeValue(
						"crowno").toString().trim());
			}
			//退货理由
			if (arriveorderItem.getAttributeValue("vbackreasonb") == null) {
				stmt.setNull(89, Types.CHAR);
			} else {
				stmt.setString(89, arriveorderItem.getAttributeValue(
						"vbackreasonb").toString().trim());
			}
			//naccreplenishnum
			if (arriveorderItem.getNaccreplenishnum() == null) {
				stmt.setNull(90, Types.INTEGER);
			} else {
				stmt.setDouble(90, arriveorderItem.getNaccreplenishnum()
						.doubleValue());
			}
			//norder_bb1id
			if (arriveorderItem.getCorder_bb1id() == null) {
				stmt.setNull(91, Types.CHAR);
			} else {
				stmt.setString(91, arriveorderItem.getCorder_bb1id()
						.toString().trim());
			}

			//是否赠品
			if (arriveorderItem.getAttributeValue("blargess") == null) {
				stmt.setNull(92, Types.CHAR);
			} else {
				stmt.setString(92, arriveorderItem.getAttributeValue(
						"blargess").toString());
			}

			//来源订单行是否赠品行
			if (arriveorderItem.getAttributeValue("blargessuprow") == null) {
				stmt.setNull(93, Types.CHAR);
			} else {
				stmt.setString(93, arriveorderItem.getAttributeValue(
						"blargessuprow").toString());
			}
			//V5 New : 
			if (arriveorderItem.getPk_reqcorp() == null) {
				stmt.setNull(94, Types.CHAR);
			} else {
				stmt.setString(94, arriveorderItem.getPk_reqcorp()
						.toString());
			}
			if (arriveorderItem.getPk_reqstoorg() == null) {
				stmt.setNull(95, Types.CHAR);
			} else {
				stmt.setString(95, arriveorderItem.getPk_reqstoorg()
						.toString());
			}
			if (arriveorderItem.getPk_creqwareid() == null) {
				stmt.setNull(96, Types.CHAR);
			} else {
				stmt.setString(96, arriveorderItem.getPk_creqwareid()
						.toString());
			}
			if (arriveorderItem.getPk_invoicecorp() == null) {
				stmt.setNull(97, Types.CHAR);
			} else {
				stmt.setString(97, arriveorderItem.getPk_invoicecorp()
						.toString());
			}
			//
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "insertItem", new Object[]{arriveorderItems});
	/*************************************************************/

	return key;
}

public String[] insertItemBatch(ArriveorderItemVO[] arriveorderItems) throws java.sql.SQLException, nc.bs.pub.SystemException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "insertItem", new Object[]{arriveorderItems});
	/*************************************************************/
//eric 增加检验结果，隔离数量
	String sql  = "insert into po_arriveorder_b(carriveorder_bid, carriveorderid, pk_corp, corder_bid, corderid, cmangid, cassistunit, narrvnum, nassistnum, nwastnum, nwastassistnum, npresentnum, npresentassistnum, vproducenum, ccurrencytypeid, noriginalcurprice, noriginalcurmny, nexchangeotobrate, nprice, nmoney, nexchangeotoarate, nassistcurprice, nassistcurmny, dproducedate, ivalidday, dvaliddate, nelignum, nnotelignum, naccumchecknum, naccumwarehousenum, cwarehouseid, cstoreid, ";
		   sql += "cupsourcebilltype, cupsourcebillid, cupsourcebillrowid, vmemo, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7,vdef8,vdef9,vdef10,vdef11,vdef12,vdef13,vdef14,vdef15,vdef16,vdef17,vdef18,vdef19,vdef20,pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20,";
		   sql += "vfree1, vfree2, vfree3, vfree4, vfree5, cbaseid, csourcebilltype, csourcebillid, csourcebillrowid, cprojectid, cprojectphaseid, crowno, vbackreasonb,naccreplenishnum,corder_bb1id,blargess,blargessuprow" +
		   		",pk_reqcorp,pk_reqstoorg,pk_creqwareid,pk_invoicecorp,jyjg,glnum) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)";
	ArriveorderItemVO arriveorderItem = null;
	String key = null;
	Vector vKey = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = prepareStatement(con,sql);
		for (int i = 0; i < arriveorderItems.length; i++){
			arriveorderItem = arriveorderItems[i];
			// set PK fields:
			key = getOID(arriveorderItem.getPk_corp());
			vKey.addElement(key);
			stmt.setString(1, key);
			// set non PK fields:
			if (arriveorderItem.getCarriveorderid() == null) {
				stmt.setNull(2, Types.CHAR);
			} else {
				stmt.setString(2, arriveorderItem.getCarriveorderid());
			}
			if (arriveorderItem.getPk_corp() == null) {
				stmt.setNull(3, Types.CHAR);
			} else {
				stmt.setString(3, arriveorderItem.getPk_corp());
			}
			if (arriveorderItem.getCorder_bid() == null) {
				stmt.setNull(4, Types.CHAR);
			} else {
				stmt.setString(4, arriveorderItem.getCorder_bid());
			}
			if (arriveorderItem.getCorderid() == null) {
				stmt.setNull(5, Types.CHAR);
			} else {
				stmt.setString(5, arriveorderItem.getCorderid());
			}
			if (arriveorderItem.getCmangid() == null) {
				stmt.setNull(6, Types.CHAR);
			} else {
				stmt.setString(6, arriveorderItem.getCmangid());
			}
			if (arriveorderItem.getCassistunit() == null) {
				stmt.setNull(7, Types.CHAR);
			} else {
				stmt.setString(7, arriveorderItem.getCassistunit());
			}
			if (arriveorderItem.getNarrvnum() == null) {
				stmt.setNull(8, Types.INTEGER);
			} else {
				stmt.setDouble(8, arriveorderItem.getNarrvnum()
						.doubleValue());
			}
			if (arriveorderItem.getNassistnum() == null) {
				stmt.setNull(9, Types.INTEGER);
			} else {
				stmt.setDouble(9, arriveorderItem.getNassistnum()
						.doubleValue());
			}
			if (arriveorderItem.getNwastnum() == null) {
				stmt.setNull(10, Types.INTEGER);
			} else {
				stmt.setDouble(10, arriveorderItem.getNwastnum()
						.doubleValue());
			}
			if (arriveorderItem.getNwastassistnum() == null) {
				stmt.setNull(11, Types.INTEGER);
			} else {
				stmt.setDouble(11, arriveorderItem.getNwastassistnum()
						.doubleValue());
			}
			if (arriveorderItem.getNpresentnum() == null) {
				stmt.setNull(12, Types.INTEGER);
			} else {
				stmt.setDouble(12, arriveorderItem.getNpresentnum()
						.doubleValue());
			}
			if (arriveorderItem.getNpresentassistnum() == null) {
				stmt.setNull(13, Types.INTEGER);
			} else {
				stmt.setDouble(13, arriveorderItem.getNpresentassistnum()
						.doubleValue());
			}
			if (arriveorderItem.getVproducenum() == null) {
				stmt.setNull(14, Types.CHAR);
			} else {
				stmt.setString(14, arriveorderItem.getVproducenum());
			}
			if (arriveorderItem.getCcurrencytypeid() == null) {
				stmt.setNull(15, Types.CHAR);
			} else {
				stmt.setString(15, arriveorderItem.getCcurrencytypeid());
			}
			if (arriveorderItem.getNoriginalcurprice() == null) {
				stmt.setNull(16, Types.INTEGER);
			} else {
				stmt.setDouble(16, arriveorderItem.getNoriginalcurprice()
						.doubleValue());
			}
			if (arriveorderItem.getNoriginalcurmny() == null) {
				stmt.setNull(17, Types.INTEGER);
			} else {
				stmt.setDouble(17, arriveorderItem.getNoriginalcurmny()
						.doubleValue());
			}
			if (arriveorderItem.getNexchangeotobrate() == null) {
				stmt.setNull(18, Types.INTEGER);
			} else {
				stmt.setDouble(18, arriveorderItem.getNexchangeotobrate()
						.doubleValue());
			}
			if (arriveorderItem.getNprice() == null) {
				stmt.setNull(19, Types.INTEGER);
			} else {
				stmt.setDouble(19, arriveorderItem.getNprice()
						.doubleValue());
			}
			if (arriveorderItem.getNmoney() == null) {
				stmt.setNull(20, Types.INTEGER);
			} else {
				stmt.setDouble(20, arriveorderItem.getNmoney()
						.doubleValue());
			}
			if (arriveorderItem.getNexchangeotoarate() == null) {
				stmt.setNull(21, Types.INTEGER);
			} else {
				stmt.setDouble(21, arriveorderItem.getNexchangeotoarate()
						.doubleValue());
			}
			if (arriveorderItem.getNassistcurprice() == null) {
				stmt.setNull(22, Types.INTEGER);
			} else {
				stmt.setDouble(22, arriveorderItem.getNassistcurprice()
						.doubleValue());
			}
			if (arriveorderItem.getNassistcurmny() == null) {
				stmt.setNull(23, Types.INTEGER);
			} else {
				stmt.setDouble(23, arriveorderItem.getNassistcurmny()
						.doubleValue());
			}
			if (arriveorderItem.getDproducedate() == null) {
				stmt.setNull(24, Types.CHAR);
			} else {
				stmt.setString(24, arriveorderItem.getDproducedate()
						.toString());
			}
			if (arriveorderItem.getIvalidday() == null) {
				stmt.setNull(25, Types.INTEGER);
			} else {
				stmt.setInt(25, arriveorderItem.getIvalidday().intValue());
			}
			if (arriveorderItem.getDvaliddate() == null) {
				stmt.setNull(26, Types.CHAR);
			} else {
				stmt.setString(26, arriveorderItem.getDvaliddate()
						.toString());
			}
			if (arriveorderItem.getNelignum() == null) {
				stmt.setNull(27, Types.INTEGER);
			} else {
				stmt.setDouble(27, arriveorderItem.getNelignum()
						.doubleValue());
			}
			if (arriveorderItem.getNnotelignum() == null) {
				stmt.setNull(28, Types.INTEGER);
			} else {
				stmt.setDouble(28, arriveorderItem.getNnotelignum()
						.doubleValue());
			}
			if (arriveorderItem.getNaccumchecknum() == null) {
				stmt.setNull(29, Types.INTEGER);
			} else {
				stmt.setDouble(29, arriveorderItem.getNaccumchecknum()
						.doubleValue());
			}
			if (arriveorderItem.getNaccumwarehousenum() == null) {
				stmt.setNull(30, Types.INTEGER);
			} else {
				stmt.setDouble(30, arriveorderItem.getNaccumwarehousenum()
						.doubleValue());
			}
			if (arriveorderItem.getCwarehouseid() == null) {
				stmt.setNull(31, Types.CHAR);
			} else {
				stmt.setString(31, arriveorderItem.getCwarehouseid());
			}
			if (arriveorderItem.getCstoreid() == null) {
				stmt.setNull(32, Types.CHAR);
			} else {
				stmt.setString(32, arriveorderItem.getCstoreid());
			}
			if (arriveorderItem.getCupsourcebilltype() == null) {
				stmt.setNull(33, Types.CHAR);
			} else {
				stmt.setString(33, arriveorderItem.getCupsourcebilltype());
			}
			if (arriveorderItem.getCupsourcebillid() == null) {
				stmt.setNull(34, Types.CHAR);
			} else {
				stmt.setString(34, arriveorderItem.getCupsourcebillid());
			}
			if (arriveorderItem.getCupsourcebillrowid() == null) {
				stmt.setNull(35, Types.CHAR);
			} else {
				stmt.setString(35, arriveorderItem.getCupsourcebillrowid());
			}
			if (arriveorderItem.getVmemo() == null) {
				stmt.setNull(36, Types.CHAR);
			} else {
				stmt.setString(36, arriveorderItem.getVmemo());
			}
			if (arriveorderItem.getVdef1() == null) {
				stmt.setNull(37, Types.CHAR);
			} else {
				stmt.setString(37, arriveorderItem.getVdef1());
			}
			if (arriveorderItem.getVdef2() == null) {
				stmt.setNull(38, Types.CHAR);
			} else {
				stmt.setString(38, arriveorderItem.getVdef2());
			}
			if (arriveorderItem.getVdef3() == null) {
				stmt.setNull(39, Types.CHAR);
			} else {
				stmt.setString(39, arriveorderItem.getVdef3());
			}
			if (arriveorderItem.getVdef4() == null) {
				stmt.setNull(40, Types.CHAR);
			} else {
				stmt.setString(40, arriveorderItem.getVdef4());
			}
			if (arriveorderItem.getVdef5() == null) {
				stmt.setNull(41, Types.CHAR);
			} else {
				stmt.setString(41, arriveorderItem.getVdef5());
			}
			if (arriveorderItem.getVdef6() == null) {
				stmt.setNull(42, Types.CHAR);
			} else {
				stmt.setString(42, arriveorderItem.getVdef6());
			}
			if (arriveorderItem.getVdef7() == null) {
				stmt.setNull(43, Types.CHAR);
			} else {
				stmt.setString(43, arriveorderItem.getVdef7());
			}
			if (arriveorderItem.getVdef8() == null) {
				stmt.setNull(44, Types.CHAR);
			} else {
				stmt.setString(44, arriveorderItem.getVdef8());
			}
			if (arriveorderItem.getVdef9() == null) {
				stmt.setNull(45, Types.CHAR);
			} else {
				stmt.setString(45, arriveorderItem.getVdef9());
			}
			if (arriveorderItem.getVdef10() == null) {
				stmt.setNull(46, Types.CHAR);
			} else {
				stmt.setString(46, arriveorderItem.getVdef10());
			}
			if (arriveorderItem.getVdef11() == null) {
				stmt.setNull(47, Types.CHAR);
			} else {
				stmt.setString(47, arriveorderItem.getVdef11());
			}
			if (arriveorderItem.getVdef12() == null) {
				stmt.setNull(48, Types.CHAR);
			} else {
				stmt.setString(48, arriveorderItem.getVdef12());
			}
			if (arriveorderItem.getVdef13() == null) {
				stmt.setNull(49, Types.CHAR);
			} else {
				stmt.setString(49, arriveorderItem.getVdef13());
			}
			if (arriveorderItem.getVdef14() == null) {
				stmt.setNull(50, Types.CHAR);
			} else {
				stmt.setString(50, arriveorderItem.getVdef14());
			}
			if (arriveorderItem.getVdef15() == null) {
				stmt.setNull(51, Types.CHAR);
			} else {
				stmt.setString(51, arriveorderItem.getVdef15());
			}
			if (arriveorderItem.getVdef16() == null) {
				stmt.setNull(52, Types.CHAR);
			} else {
				stmt.setString(52, arriveorderItem.getVdef16());
			}
			if (arriveorderItem.getVdef17() == null) {
				stmt.setNull(53, Types.CHAR);
			} else {
				stmt.setString(53, arriveorderItem.getVdef17());
			}
			if (arriveorderItem.getVdef18() == null) {
				stmt.setNull(54, Types.CHAR);
			} else {
				stmt.setString(54, arriveorderItem.getVdef18());
			}
			if (arriveorderItem.getVdef19() == null) {
				stmt.setNull(55, Types.CHAR);
			} else {
				stmt.setString(55, arriveorderItem.getVdef19());
			}
			if (arriveorderItem.getVdef20() == null) {
				stmt.setNull(56, Types.CHAR);
			} else {
				stmt.setString(56, arriveorderItem.getVdef20());
			}
			if (arriveorderItem.getPKDefDoc1() == null) {
				stmt.setNull(57, Types.CHAR);
			} else {
				stmt.setString(57, arriveorderItem.getPKDefDoc1());
			}
			if (arriveorderItem.getPKDefDoc2() == null) {
				stmt.setNull(58, Types.CHAR);
			} else {
				stmt.setString(58, arriveorderItem.getPKDefDoc2());
			}
			if (arriveorderItem.getPKDefDoc3() == null) {
				stmt.setNull(59, Types.CHAR);
			} else {
				stmt.setString(59, arriveorderItem.getPKDefDoc3());
			}
			if (arriveorderItem.getPKDefDoc4() == null) {
				stmt.setNull(60, Types.CHAR);
			} else {
				stmt.setString(60, arriveorderItem.getPKDefDoc4());
			}
			if (arriveorderItem.getPKDefDoc5() == null) {
				stmt.setNull(61, Types.CHAR);
			} else {
				stmt.setString(61, arriveorderItem.getPKDefDoc5());
			}
			if (arriveorderItem.getPKDefDoc6() == null) {
				stmt.setNull(62, Types.CHAR);
			} else {
				stmt.setString(62, arriveorderItem.getPKDefDoc6());
			}
			if (arriveorderItem.getPKDefDoc7() == null) {
				stmt.setNull(63, Types.CHAR);
			} else {
				stmt.setString(63, arriveorderItem.getPKDefDoc7());
			}
			if (arriveorderItem.getPKDefDoc8() == null) {
				stmt.setNull(64, Types.CHAR);
			} else {
				stmt.setString(64, arriveorderItem.getPKDefDoc8());
			}
			if (arriveorderItem.getPKDefDoc9() == null) {
				stmt.setNull(65, Types.CHAR);
			} else {
				stmt.setString(65, arriveorderItem.getPKDefDoc9());
			}
			if (arriveorderItem.getPKDefDoc10() == null) {
				stmt.setNull(66, Types.CHAR);
			} else {
				stmt.setString(66, arriveorderItem.getPKDefDoc10());
			}
			if (arriveorderItem.getPKDefDoc11() == null) {
				stmt.setNull(67, Types.CHAR);
			} else {
				stmt.setString(67, arriveorderItem.getPKDefDoc11());
			}
			if (arriveorderItem.getPKDefDoc12() == null) {
				stmt.setNull(68, Types.CHAR);
			} else {
				stmt.setString(68, arriveorderItem.getPKDefDoc12());
			}
			if (arriveorderItem.getPKDefDoc13() == null) {
				stmt.setNull(69, Types.CHAR);
			} else {
				stmt.setString(69, arriveorderItem.getPKDefDoc13());
			}
			if (arriveorderItem.getPKDefDoc14() == null) {
				stmt.setNull(70, Types.CHAR);
			} else {
				stmt.setString(70, arriveorderItem.getPKDefDoc14());
			}
			if (arriveorderItem.getPKDefDoc15() == null) {
				stmt.setNull(71, Types.CHAR);
			} else {
				stmt.setString(71, arriveorderItem.getPKDefDoc15());
			}
			if (arriveorderItem.getPKDefDoc16() == null) {
				stmt.setNull(72, Types.CHAR);
			} else {
				stmt.setString(72, arriveorderItem.getPKDefDoc16());
			}
			if (arriveorderItem.getPKDefDoc17() == null) {
				stmt.setNull(73, Types.CHAR);
			} else {
				stmt.setString(73, arriveorderItem.getPKDefDoc17());
			}
			if (arriveorderItem.getPKDefDoc18() == null) {
				stmt.setNull(74, Types.CHAR);
			} else {
				stmt.setString(74, arriveorderItem.getPKDefDoc18());
			}
			if (arriveorderItem.getPKDefDoc19() == null) {
				stmt.setNull(75, Types.CHAR);
			} else {
				stmt.setString(75, arriveorderItem.getPKDefDoc19());
			}
			if (arriveorderItem.getPKDefDoc20() == null) {
				stmt.setNull(76, Types.CHAR);
			} else {
				stmt.setString(76, arriveorderItem.getPKDefDoc20());
			}
			if (arriveorderItem.getVfree1() == null) {
				stmt.setNull(77, Types.CHAR);
			} else {
				stmt.setString(77, arriveorderItem.getVfree1());
			}
			if (arriveorderItem.getVfree2() == null) {
				stmt.setNull(78, Types.CHAR);
			} else {
				stmt.setString(78, arriveorderItem.getVfree2());
			}
			if (arriveorderItem.getVfree3() == null) {
				stmt.setNull(79, Types.CHAR);
			} else {
				stmt.setString(79, arriveorderItem.getVfree3());
			}
			if (arriveorderItem.getVfree4() == null) {
				stmt.setNull(80, Types.CHAR);
			} else {
				stmt.setString(80, arriveorderItem.getVfree4());
			}
			if (arriveorderItem.getVfree5() == null) {
				stmt.setNull(81, Types.CHAR);
			} else {
				stmt.setString(81, arriveorderItem.getVfree5());
			}
			//存货基本档案主键
			if (arriveorderItem.getCbaseid() == null) {
				stmt.setNull(82, Types.CHAR);
			} else {
				stmt.setString(82, arriveorderItem.getCbaseid());
			}
			if (arriveorderItem.getAttributeValue("csourcebilltype") == null) {
				stmt.setNull(83, Types.CHAR);
			} else {
				stmt.setString(83, (String) arriveorderItem
						.getAttributeValue("csourcebilltype"));
			}
			if (arriveorderItem.getAttributeValue("csourcebillid") == null) {
				stmt.setNull(84, Types.CHAR);
			} else {
				stmt.setString(84, (String) arriveorderItem
						.getAttributeValue("csourcebillid"));
			}
			if (arriveorderItem.getAttributeValue("csourcebillrowid") == null) {
				stmt.setNull(85, Types.CHAR);
			} else {
				stmt.setString(85, (String) arriveorderItem
						.getAttributeValue("csourcebillrowid"));
			}
			//是否赠品
			//if (arriveorderItem.getAttributeValue("iispresent") == null)
			// {
			//stmt.setNull(52, Types.CHAR);
			//}
			//else {
			//stmt.setString(52,
			// arriveorderItem.getAttributeValue("iispresent").toString().trim());
			//}
			//项目
			if (arriveorderItem.getAttributeValue("cprojectid") == null) {
				stmt.setNull(86, Types.CHAR);
			} else {
				stmt.setString(86, arriveorderItem.getAttributeValue(
						"cprojectid").toString().trim());
			}
			//项目阶段
			if (arriveorderItem.getAttributeValue("cprojectphaseid") == null) {
				stmt.setNull(87, Types.CHAR);
			} else {
				stmt.setString(87, arriveorderItem.getAttributeValue(
						"cprojectphaseid").toString().trim());
			}
			//单据行号
			if (arriveorderItem.getAttributeValue("crowno") == null) {
				stmt.setNull(88, Types.CHAR);
			} else {
				stmt.setString(88, arriveorderItem.getAttributeValue(
						"crowno").toString().trim());
			}
			//退货理由
			if (arriveorderItem.getAttributeValue("vbackreasonb") == null) {
				stmt.setNull(89, Types.CHAR);
			} else {
				stmt.setString(89, arriveorderItem.getAttributeValue(
						"vbackreasonb").toString().trim());
			}
			//naccreplenishnum
			if (arriveorderItem.getNaccreplenishnum() == null) {
				stmt.setNull(90, Types.INTEGER);
			} else {
				stmt.setDouble(90, arriveorderItem.getNaccreplenishnum()
						.doubleValue());
			}
			//norder_bb1id
			if (arriveorderItem.getCorder_bb1id() == null) {
				stmt.setNull(91, Types.CHAR);
			} else {
				stmt.setString(91, arriveorderItem.getCorder_bb1id()
						.toString().trim());
			}

			//是否赠品
			if (arriveorderItem.getAttributeValue("blargess") == null) {
				stmt.setNull(92, Types.CHAR);
			} else {
				stmt.setString(92, arriveorderItem.getAttributeValue(
						"blargess").toString());
			}

			//来源订单行是否赠品行
			if (arriveorderItem.getAttributeValue("blargessuprow") == null) {
				stmt.setNull(93, Types.CHAR);
			} else {
				stmt.setString(93, arriveorderItem.getAttributeValue(
						"blargessuprow").toString());
			}
			//V5 New : 
			if (arriveorderItem.getPk_reqcorp() == null) {
				stmt.setNull(94, Types.CHAR);
			} else {
				stmt.setString(94, arriveorderItem.getPk_reqcorp()
						.toString());
			}
			if (arriveorderItem.getPk_reqstoorg() == null) {
				stmt.setNull(95, Types.CHAR);
			} else {
				stmt.setString(95, arriveorderItem.getPk_reqstoorg()
						.toString());
			}
			if (arriveorderItem.getPk_creqwareid() == null) {
				stmt.setNull(96, Types.CHAR);
			} else {
				stmt.setString(96, arriveorderItem.getPk_creqwareid()
						.toString());
			}
			if (arriveorderItem.getPk_invoicecorp() == null) {
				stmt.setNull(97, Types.CHAR);
			} else {
				stmt.setString(97, arriveorderItem.getPk_invoicecorp()
						.toString());
			}
			if (arriveorderItem.getJyjg() == null) {
				stmt.setNull(98, Types.CHAR);
			} else {
				stmt.setString(98, arriveorderItem.getJyjg()
						.toString());
			}
			//eric
			if (arriveorderItem.getGlnum() == null) {
				stmt.setNull(99, Types.DOUBLE);
			} else {
				stmt.setDouble(99, arriveorderItem.getGlnum().doubleValue());
			}
			//
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "insertItem", new Object[]{arriveorderItems});
	/*************************************************************/

	if(vKey.size() > 0){
		String sID[] = new String[vKey.size()];
		vKey.copyInto(sID);
		return sID;
	}
	return null;
}

/**
 * 给定一个串返回是否含有 类"where"关健字
 * 注意：当源串中含有
   "where"、"Where"、"WHERE" 等where关健字时返回 true
 * 创建日期：(2001-11-8 16:19:10)
 * @return boolean
 * @exception java.sql.SQLException 异常说明。
 */
public boolean isContainsWhere(String whereString) throws java.sql.SQLException {
	if (whereString == null) return false;
	if (whereString.trim().equals("")) return false;
	String lowWhereString = whereString.toLowerCase();
	if (lowWhereString.indexOf("where") >=0) return true;
	return false;
}

/**
 * 是否生成入库单检查
 * true : 存在 非作废的入库单行的上层单据ID = 本方法参数到货单ID
 * 创建日期：(2001-10-20 14:32:01)
 * @author：Administrator
 */
public boolean isCreated(String carriveorderid) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "isCreated", new Object[] { carriveorderid });
	/*************************************************************/
	if (carriveorderid == null)
		return false;
	if (carriveorderid.trim().equals(""))
		return false;
	boolean ret = false;
	String sql = "select cgeneralbid from ic_general_b  where csourcebillhid = ? and dr = 0 ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, carriveorderid);
		ResultSet rs = stmt.executeQuery();
		if (rs.next()) {
			ret = true;
		} else {
			ret = false;
		}
		if (rs != null)
			rs.close();
	} catch (Exception e) {
		reportException(e);
		throw new SQLException("isCreated() Error!");
	} finally {
		if (stmt != null) {
			stmt.close();
		}
		if (con != null) {
			con.close();
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "isCreated", new Object[] { carriveorderid });
	/*************************************************************/
	return ret;
}

/**
 * 插入子子表记录时的合法性检查
 * 创建日期：(2002-5-8 17:04:44)
 * @param vos QcresultVO[]
 */
private boolean isExistBBRec(QcresultVO[] vos) throws SQLException {
	boolean isExist = false;
	//没有数据直接返回
	if (vos == null || vos.length <= 0)
		return false;
	//更新到货单子子表及子表
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	String sqlQuery = "select carriveorder_bid from po_arriveorder_bb where ";
	boolean bFirst = true;
	String sqlORWhere = "";
	try {
		con = getConnection();
		for (int i = 0; i < vos.length; i++) {
			if (vos[i].getCsourcebillrowid() == null
				|| vos[i].getCsourcebillrowid().trim().equals(""))
				continue;
			if (vos[i].getCmodeids() == null || vos[i].getCmodeids().length <= 0)
				continue;
			for (int j = 0; j < vos[i].getCmodeids().length; j++) {
				if (vos[i].getCmodeids()[j] == null
					|| vos[i].getCmodeids()[j].trim().equals(""))
					continue;
				if (bFirst){
					sqlORWhere += "(carriveorder_bid = '";
					bFirst = false;
				}else
					sqlORWhere += " or (carriveorder_bid = '";
				sqlORWhere += vos[i].getCsourcebillrowid();
				sqlORWhere += "' and cqualitylevelid = '";
				sqlORWhere += vos[i].getCmodeids()[j];
				sqlORWhere += "') ";
			}
		}
		sqlQuery += sqlORWhere;
		stmt = con.prepareStatement(sqlQuery);
		rs = stmt.executeQuery();
		if (rs.next())
			isExist = true;
	} catch (Exception e) {
		SCMEnv.out(e);
		throw new SQLException("isExistBBRec():"+e.getMessage());
	} finally {
		if (rs != null) {
			rs.close();
		}
		if (stmt != null) {
			stmt.close();
		}
		if (con != null) {
			con.close();
		}
	}
	return isExist;
}

/**
 * 根据到货单行ID判断是否存在纪录
 * 注意：如果该行不满足条件，dr=0 则返回 false
 * 创建日期：(2001-10-20 14:32:01)
 * @author：Administrator
 */
public boolean isExistRecord(String carriveorder_bid) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.pu.rc.StoreToReceive", "isExistPrice", new Object[] { carriveorder_bid });
	/*************************************************************/
	if (carriveorder_bid == null)
		return false;
	if (carriveorder_bid.trim().equals(""))
		return false;
	String sql = "select * from po_arriveorder_b  where carriveorder_bid = ?  and dr = 0 ";
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, carriveorder_bid);
		ResultSet rs = stmt.executeQuery();
		if (!rs.next()) {
			if (rs != null)
				rs.close();
			return true;
		} else {
			if (rs != null)
				rs.close();
			return false;
		}
	} catch (Exception e) {
		reportException(e);
		throw new SQLException("isExistRecord() Error!");
	} finally {
		if (stmt != null) {
			stmt.close();
		}
		if (con != null) {
			con.close();
		}
	}
}

/**
 * 质检调用的方法：是否可弃审
 	1.是否生成入库单
  	//2.如果生产制造档案中的"存货管理ID＋库存组织"　＝＞“存货是否根据质检结果入库”为“N”则返回真 --暂不考虑 xy 0709
 	3.是否生成补货订单
 * 创建日期：(2002-5-8 17:04:44)
 * @return nc.vo.pub.lang.UFBoolean[]
 * @param cRowids java.lang.String[]
 */
public UFBoolean[] isUnAuditQc(String[] cRowids) throws BusinessException {

	if (cRowids == null || cRowids.length <= 0)
		return null;

	//默认可以进行后续操作
	boolean isCanDel = true;

	UFBoolean[] bRets = new UFBoolean[cRowids.length];

	// 如果入库单已填写应收数量, 质量检验单不能弃审
	//----> yux 2006/04/13修改
	String sql = "select nshouldinnum from ic_general_b " +
			"where dr = 0 and csourcebillbid = ?";
//	String sql = "select po_arriveorder_b.carriveorder_bid ";
//	sql += "from po_arriveorder_b ";
//	sql
//		+= "inner join po_arriveorder on po_arriveorder.carriveorderid = po_arriveorder_b.carriveorderid ";
//	sql += "where po_arriveorder_b.carriveorder_bid = ?  ";
//	sql += "and (";
//	//存在到货单行ID：满足，无入库记录，可弃审
//	sql += "isnull(po_arriveorder_b.naccumwarehousenum,0) = 0 ";
//	sql += ") ";
//	sql += "and po_arriveorder_b.dr = 0 ";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;

	UFBoolean _N = new UFBoolean("N");
	UFBoolean _Y = new UFBoolean("Y");

	try {
		con = getConnection();
		/**根据入库数量是否可弃审,无，则可弃审*/
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < cRowids.length; i++) {
			if (cRowids[i] == null || cRowids[i].length() <= 0) {
				bRets[i] = _Y;//id为空可以弃审
				continue;
			}
			stmt.setString(1, cRowids[i]);
			rs = stmt.executeQuery();
			if (rs.next()) {
				// 已填写应收数量,不能弃审
				// 未填写应收数量,可以弃审
				bRets[i] = rs.getBigDecimal(1) == null? _Y : _N;
			} else {
				// 没有入库单,可以弃审
				bRets[i] = _Y;
			}
			rs.close();
		}
		stmt.close();
		//<----
		/**采购订单是否用到货累计不合格数量或累计途耗数量生成了补货订单*/
		Hashtable hTmp = new Hashtable();
		nc.bs.pu.pub.PubDMO pubDmo = new nc.bs.pu.pub.PubDMO();
		hTmp =
			pubDmo.fetchArrayValue(
				"po_arriveorder_b",
				"corder_bid",
				"carriveorder_bid",
				cRowids);
		String[] saOrdBid = new String[cRowids.length];
		for (int i = 0; i < cRowids.length; i++) {
			saOrdBid[i] = (String) hTmp.get(cRowids[i]);
		}
		/* 不能一次性查询出结果，因为查询结果无法对照订单行ID
		sql = "select ccorrectrowid from po_order_b where ( 1 >0 ";
		for (int i = 0; i < saOrdBid.length; i++) {
			sql += "or ccorrectrowid = '";
			sql += saOrdBid[i];
			sql += "' ";
		}
		sql += ") ";
		*/
		sql =
			"select corder_bid from po_order_b where ccorrectrowid = ? and iisreplenish = 1 ";
		stmt = con.prepareStatement(sql);
		for (int i = 0; i < saOrdBid.length; i++) {
			if (saOrdBid[i] == null || saOrdBid[i].length() <= 0) {
				continue;
			}
			stmt.setString(1, saOrdBid[i]);
			rs = stmt.executeQuery();
			/**用下述处理实现与入库单查询结果的“与”*/
			if (rs.next()) {
				bRets[i] = _N;
			} else {
				//bRets[i] = _Y;
			}
			rs.close();
		}
		stmt.close();
		//是否可进行后续操作
		if (bRets != null && bRets.length > 0) {
			/**获取“是否根据检验结果入库”哈希表*/
			Hashtable hStorByChk = getStoreByChkHash(cRowids);
			for (int i = 0; i < bRets.length; i++) {
				/**参数优先考虑：“不根据检验结果入库”则认为无后续操作*/
				if (hStorByChk != null
					&& hStorByChk.get(cRowids[i]) != null
					&& !((UFBoolean) hStorByChk.get(cRowids[i])).booleanValue()) {
					bRets[i] = _Y;
				}
				if (bRets[i].equals(_N)) {
					isCanDel = false;
					break;
				}
			}
		}
	} catch (Exception e) {
		PubDMO.throwBusinessException(e);
	} finally {
		try {
			if (con != null) {
				con.close();
			}
			if (isCanDel) {
				deleAllCheckInfos(cRowids);
			}
		} catch (Exception e) {
			PubDMO.throwBusinessException(e);
		} finally {

		}
	}
	return bRets;
}

/**
 * 功能：到货单推式生成入库单前的处理
 *
 * 处理：
 * 1)	如果到货单行中存货属性"是否根据质检结果入库"为"N"，则到货单数量不变，
 *		质量等级等于VariableConst. _ID_QC_NO_CHECK_；
 * 2)	如果到货单行中存货属性"是否根据质检结果入库"为"Y"，则如果质量管理没
 *		有启用，且合格数量 > 0，则到货数量为合格数量，质量等级等于VariableConst.
 *		_ID_QC_ELIG_；不合格数量不入库；
 * 3)	如果到货单行中存货属性"是否根据质检结果入库"为"Y"，则如果质量管理启
 *		用，且合格数量 > 0，则根据质量等级对到货单进行拆行，但只对属性为合格的
 *		质量等级数量入库，质量等级为对应的到货单子子表中字段；属性为不合格的质
 *		量等级数量不入库；
 * 4)	根据上述标准对到货单进行处理，剔除不可入库到货单行，剔除无表体到货单；
 *
 * 返回：
 * 例外：
 * 日期：(2002-5-21 8:37:25)
 * 作者：晁志平
 * 修改日期，修改人，修改原因，注释标志：
 *
 * @return nc.vo.rc.receive.ArriveorderVO[]
 * @param vos nc.vo.rc.receive.ArriveorderVO[]
 */
public ArriveorderVO[] processBefChange(ArriveorderVO[] vos) throws BusinessException {
	ArriveorderVO[] retVOs = vos;
	if (retVOs != null && retVOs.length > 0){
		for(int i = 0; i < retVOs.length; i++){
			ArriveorderItemVO bodyVO[] = (ArriveorderItemVO[]) retVOs[i].getChildrenVO();
			for(int j = 0; j < bodyVO.length; j++) bodyVO[j].setNwillstorenum(bodyVO[j].getNarrvnum());
		}
	}else{
		return null;
	}
	
	
	String sCmangId = null;

	nc.bs.pu.pub.PubDMO pDmo = null;
	ICreateCorpQueryService cDmo = null;
	boolean isQCEnable = false;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	String sSql = "select ccheckstate_bid,bqualified from qc_checkstate_b ";
	//检验状态(质量等级)ID = “是否合格”
	Hashtable hChkElg = new Hashtable();
	//存货管理档案ID =“存货是否根据质检结果入库”
	Hashtable hCmangIdChk = new Hashtable();
	Vector vRslt = new Vector();
	try {
		//质量检验是否启用
		cDmo = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
		String pk_corp = ((ArriveorderHeaderVO) retVOs[0].getParentVO()).getPk_corp();
		isQCEnable = cDmo.isEnabled(pk_corp, "QC");
		//检验状态－是否合格[质量管理启用]
		if (isQCEnable) {
			con = getConnection();
			stmt = con.prepareStatement(sSql);
			rs = stmt.executeQuery();
			String strQualified = null;
			while (rs.next()) {
				strQualified = rs.getString(2);
				if(strQualified == null || strQualified.trim().length() == 0){
					strQualified = "N";
				}
				hChkElg.put(rs.getString(1), strQualified);
			}
			rs.close();
		}
		//V5:是否审批通过
		String[] saHid = new String[retVOs.length];
		for (int i = 0; i < retVOs.length; i++) {
			saHid[i] = retVOs[i].getHeadVO().getPrimaryKey();
		}
		HashMap mapRet = new PubDMO().queryArrayValues("po_arriveorder", "carriveorderid", new String[]{"ibillstatus"},saHid, "dr=0");
		if(mapRet == null){
			mapRet = new HashMap();
		}
		//
		Vector vTmp = null;
		ArriveorderItemVO item = null;
		ArriveorderBbVO[] bbItems = null;
		ArriveorderBbDMO bbDmo = new ArriveorderBbDMO();
		String sChkId = null;
		Object[] oaPassed = null;
		Integer iBillStatus = null;
		for (int i = 0; i < retVOs.length; i++) {
			
			//V5:审批通过才生成入库单
			oaPassed = (Object[]) mapRet.get(retVOs[i].getHeadVO().getPrimaryKey());
			iBillStatus = VariableConst.ZERO_INTEGER;
			if(oaPassed != null && oaPassed.length > 0){
				iBillStatus = PuPubVO.getInteger_NullAs(oaPassed[0], VariableConst.ZERO_INTEGER);
			}
			if(iBillStatus.intValue() != 3){
				continue;
			}
			//			
			ArriveorderItemVO[] items = (ArriveorderItemVO[]) retVOs[i].getChildrenVO();
			String[] saCmangId = new String[items.length];
			for (int j = 0; j < items.length; j++)
				saCmangId[j] = items[j].getCmangid();

			//库存组织
			String pk_calbody = ((ArriveorderHeaderVO) vos[i].getParentVO()).getCstoreorganization();
			//取得是否按质检结果入库
			pDmo = new nc.bs.pu.pub.PubDMO();
			String wherePart = " pk_calbody = '" + pk_calbody + "' and pk_invmandoc in ";

			//for (int k = 1; k < saCmangId.length; k++) {
			//wherePart = wherePart + " or pk_invmandoc = '" + saCmangId[k] + "'";
			//}
			//wherePart += ")";
			String strIdsSet = "";
   			nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
			strIdsSet =
				tmpTblDmo.insertTempTable(saCmangId,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC010,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
			if (strIdsSet == null || strIdsSet.trim().length() == 0)
				strIdsSet = "('TempTableDMOError')";
			wherePart += strIdsSet + " ";

			Object[][] objs =
				pDmo.queryResultsFromAnyTable("bd_produce", new String[] { "pk_invmandoc", "stockbycheck" }, wherePart);
			if (objs != null && objs.length != 0) {
				for (int h = 0; h < objs.length; h++) {
					if (objs[h][1] != null && !objs[h][1].toString().trim().equals("")) {
						hCmangIdChk.put(objs[h][0].toString(), objs[h][1].toString());
					}
				}
			}

			vTmp = new Vector();
			items = (ArriveorderItemVO[]) retVOs[i].getChildrenVO();
			if (items == null || items.length <= 0)
				continue;
			for (int j = 0; j < items.length; j++) {
				sCmangId = items[j].getCmangid();
				if (sCmangId == null || sCmangId.trim().equals(""))
					continue;
				//存货不需质检即可入库
				if (hCmangIdChk == null || hCmangIdChk.get(sCmangId) == null || hCmangIdChk.get(sCmangId).equals("N")) {
					items[j].setsQualityLevel(null);
					items[j].setsQualitylevelName(null);
					vTmp.addElement(items[j]);
				}
				//存货需要质检方可入库
				else {
					//质检系统启用
					if (isQCEnable) {
						if (items[j].getNelignum() != null && items[j].getNelignum().doubleValue() > 0) {
							//按到货单行获取子子表VO[]
							bbItems = bbDmo.findVOsByRowId(items[j].getCarriveorder_bid());
							if (bbItems != null && bbItems.length > 0) {
								//按质量等级拆行
								for (int k = 0; k < bbItems.length; k++) {
									item = (ArriveorderItemVO) items[j].clone();
									sChkId = bbItems[k].getCqualitylevelid();
									if (sChkId == null || sChkId.trim().equals(""))
										continue;
									if (hChkElg.get(sChkId) != null && hChkElg.get(sChkId).equals("Y")) {
										//拆分的新行置值
										item.setsQualityLevel(bbItems[k].getCqualitylevelid());
										item.setsQualitylevelName(bbItems[k].getCheckname());
										item.setCdeal(bbItems[k].getCdealid());
										item.setCdealname(bbItems[k].getDealname());
										item.setNarrvnum(bbItems[k].getNnum());
										vTmp.addElement(item);
									}
								}
							}
						}
					}
					//质检系统未启用
					else {
						if (items[j].getNelignum() != null && items[j].getNelignum().doubleValue() > 0) {
							items[j].setsQualityLevel(null);
							items[j].setsQualitylevelName(null);
							items[j].setNarrvnum(items[j].getNelignum());
							vTmp.addElement(items[j]);
						}
					}
				}
			}
			//生成处理结果
			if (vTmp.size() > 0) {
				items = new ArriveorderItemVO[vTmp.size()];
				vTmp.copyInto(items);
				retVOs[i].setChildrenVO(items);
				vRslt.addElement(retVOs[i]);
			} else {
				String[] value = new String[]{String.valueOf(i=1)};
				throw new BusinessException(
					nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000049",null,value)/*@res "第" + (i + 1) + "张到货单数据错：\n所有表体行存货要求有质检结果才能入库，但相应表体行均无质检结果"*/);
			}
		}
	} catch (Exception e) {
		SCMEnv.out(e);
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000050")/*@res "到货单推式生成入库单前的处理时出现异常，请稍后再试"*/);
	} finally {
		try {
			if (stmt != null)
				stmt.close();
			if (con != null)
				con.close();
		} catch (Exception e) {

		}
	}
	if (vRslt.size() > 0) {
		retVOs = new ArriveorderVO[vRslt.size()];
		vRslt.copyInto(retVOs);
		//处理赠品标志
//		ArriveorderItemVO[] items = null;
//		if (retVOs != null && retVOs.length > 0) {
//			for (int i = 0; i < retVOs.length; i++) {
//				items = (ArriveorderItemVO[]) retVOs[i].getChildrenVO();
//				if (items == null || items.length <= 0)
//					continue;
//				for (int j = 0; j < items.length; j++) {
//					if (items[j].getNpresentnum() != null && items[j].getNpresentnum().doubleValue() != 0) {
//						items[j].setIispresent(new UFBoolean(true));
//					} else {
//						items[j].setIispresent(new UFBoolean(false));
//					}
//				}
//			}
//		}
	} else {
		retVOs = null;
	}
	return retVOs;
}

/**
 * @功能：实现IQueryData的方法--按表头查询所有表体信息
 * @作者：晁志平
 * 创建日期：(2001-8-2 18:28:50)
 * @param:<|>
 * @return:
 * @exception:
 * @see;
 * @since:
 *
 * @return nc.vo.pub.CircularlyAccessibleValueObject
 * @param pk_head java.lang.String
 */
public CircularlyAccessibleValueObject[] queryAllBodyData(String key) throws BusinessException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "findItemsForHeader", new Object[] { key });
	/*************************************************************/
	SCMEnv.out("4");
	if (key == null)
		return null;
	if (key.trim().equals(""))
		return null;
	String sql =
		"select po_arriveorder_b.carriveorder_bid, po_arriveorder_b.carriveorderid, po_arriveorder_b.pk_corp, po_arriveorder_b.corder_bid, po_arriveorder_b.corderid, po_arriveorder_b.cmangid, po_arriveorder_b.cassistunit, po_arriveorder_b.narrvnum, po_arriveorder_b.nassistnum, po_arriveorder_b.nwastnum, po_arriveorder_b.nwastassistnum, po_arriveorder_b.npresentnum, po_arriveorder_b.npresentassistnum, po_arriveorder_b.vproducenum, po_arriveorder_b.ccurrencytypeid, po_arriveorder_b.noriginalcurprice, po_arriveorder_b.noriginalcurmny, po_arriveorder_b.nexchangeotobrate, po_arriveorder_b.nprice, po_arriveorder_b.nmoney, po_arriveorder_b.nexchangeotoarate, po_arriveorder_b.nassistcurprice, po_arriveorder_b.nassistcurmny, po_arriveorder_b.dproducedate, po_arriveorder_b.ivalidday, po_arriveorder_b.dvaliddate, po_arriveorder_b.nelignum, po_arriveorder_b.nnotelignum, po_arriveorder_b.naccumchecknum, po_arriveorder_b.naccumwarehousenum, po_arriveorder_b.cwarehouseid, po_arriveorder_b.cstoreid, po_arriveorder_b.cupsourcebilltype, po_arriveorder_b.cupsourcebillid, po_arriveorder_b.cupsourcebillrowid, po_arriveorder_b.vmemo, po_arriveorder_b.vdef1, po_arriveorder_b.vdef2, po_arriveorder_b.vdef3, po_arriveorder_b.vdef4, po_arriveorder_b.vdef5, po_arriveorder_b.vdef6,po_arriveorder_b.vdef7, po_arriveorder_b.vdef8, po_arriveorder_b.vdef9, po_arriveorder_b.vdef10, po_arriveorder_b.vdef11, po_arriveorder_b.vdef12, po_arriveorder_b.vdef13, po_arriveorder_b.vdef14, po_arriveorder_b.vdef15, po_arriveorder_b.vdef16, po_arriveorder_b.vdef17, po_arriveorder_b.vdef18, po_arriveorder_b.vdef19, po_arriveorder_b.vdef20,";
	sql += "po_arriveorder_b.pk_defdoc1,po_arriveorder_b.pk_defdoc2,po_arriveorder_b.pk_defdoc3,po_arriveorder_b.pk_defdoc4,po_arriveorder_b.pk_defdoc5,po_arriveorder_b.pk_defdoc6,po_arriveorder_b.pk_defdoc7,po_arriveorder_b.pk_defdoc8,po_arriveorder_b.pk_defdoc9,po_arriveorder_b.pk_defdoc10,po_arriveorder_b.pk_defdoc11,po_arriveorder_b.pk_defdoc12,po_arriveorder_b.pk_defdoc13,po_arriveorder_b.pk_defdoc14,po_arriveorder_b.pk_defdoc15,po_arriveorder_b.pk_defdoc16,po_arriveorder_b.pk_defdoc17,po_arriveorder_b.pk_defdoc18,po_arriveorder_b.pk_defdoc19,po_arriveorder_b.pk_defdoc20,po_arriveorder_b.vfree1, po_arriveorder_b.vfree2, po_arriveorder_b.vfree3, po_arriveorder_b.vfree4, po_arriveorder_b.vfree5, po_arriveorder_b.cbaseid, po_arriveorder_b.csourcebilltype, po_arriveorder_b.csourcebillid, po_arriveorder_b.csourcebillrowid,po_arriveorder_b.cprojectid,po_arriveorder_b.cprojectphaseid,po_arriveorder_b.crowno,po_arriveorder_b.vbackreasonb,po_arriveorder_b.corder_bb1id ,po_arriveorder_b.blargess,po_arriveorder_b.blargessuprow" +
			",po_arriveorder_b.pk_reqcorp,po_arriveorder_b.pk_reqstoorg,po_arriveorder_b.pk_creqwareid,po_arriveorder_b.pk_invoicecorp from po_arriveorder_b where po_arriveorder_b.carriveorderid = ?";
	ArriveorderItemVO[] arriveorderItems = null;
	Vector v = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, key);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			ArriveorderItemVO arriveorderItem = new ArriveorderItemVO();
			//
			int index = 1;
			String carriveorder_bid = rs.getString(index++);
			arriveorderItem.setCarriveorder_bid(carriveorder_bid == null ? null : carriveorder_bid.trim());
			//
			String carriveorderid = rs.getString(index++);
			arriveorderItem.setCarriveorderid(carriveorderid == null ? null : carriveorderid.trim());
			//
			String pk_corp = rs.getString(index++);
			arriveorderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			//
			String corder_bid = rs.getString(index++);
			arriveorderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
			//
			String corderid = rs.getString(index++);
			arriveorderItem.setCorderid(corderid == null ? null : corderid.trim());
			//
			String cmangid = rs.getString(index++);
			arriveorderItem.setCmangid(cmangid == null ? null : cmangid.trim());
			//
			String cassistunit = rs.getString(index++);
			arriveorderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
			//
			Object narrvnum = rs.getObject(index++);
			arriveorderItem.setNarrvnum(
				(narrvnum == null || narrvnum.toString().trim().equals("")) ? null : new UFDouble(narrvnum.toString().trim()));
			//
			Object nassistnum = rs.getObject(index++);
			arriveorderItem.setNassistnum(
				(nassistnum == null || nassistnum.toString().trim().equals("")) ? null : new UFDouble(nassistnum.toString().trim()));
			//
			Object nwastnum = rs.getObject(index++);
			arriveorderItem.setNwastnum(
				(nwastnum == null || nwastnum.toString().trim().equals("")) ? null : new UFDouble(nwastnum.toString().trim()));
			//
			Object nwastassistnum = rs.getObject(index++);
			arriveorderItem.setNwastassistnum(
				(nwastassistnum == null || nwastassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(nwastassistnum.toString().trim()));
			//
			Object npresentnum = rs.getObject(index++);
			arriveorderItem.setNpresentnum(
				(npresentnum == null || npresentnum.toString().trim().equals("")) ? null : new UFDouble(npresentnum.toString().trim()));
			//
			Object npresentassistnum = rs.getObject(index++);
			arriveorderItem.setNpresentassistnum(
				(npresentassistnum == null || npresentassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(npresentassistnum.toString().trim()));
			//
			String vproducenum = rs.getString(index++);
			arriveorderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());
			//
			String ccurrencytypeid = rs.getString(index++);
			arriveorderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
			//
			Object noriginalcurprice = rs.getObject(index++);
			arriveorderItem.setNoriginalcurprice(
				(noriginalcurprice == null || noriginalcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurprice.toString().trim()));
			//
			Object noriginalcurmny = rs.getObject(index++);
			arriveorderItem.setNoriginalcurmny(
				(noriginalcurmny == null || noriginalcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurmny.toString().trim()));
			//
			Object nexchangeotobrate = rs.getObject(index++);
			arriveorderItem.setNexchangeotobrate(
				(nexchangeotobrate == null || nexchangeotobrate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotobrate.toString().trim()));
			//
			Object nprice = rs.getObject(index++);
			arriveorderItem.setNprice(
				(nprice == null || nprice.toString().trim().equals("")) ? null : new UFDouble(nprice.toString().trim()));
			//
			Object nmoney = rs.getObject(index++);
			arriveorderItem.setNmoney(
				(nmoney == null || nmoney.toString().trim().equals("")) ? null : new UFDouble(nmoney.toString().trim()));
			//
			Object nexchangeotoarate = rs.getObject(index++);
			arriveorderItem.setNexchangeotoarate(
				(nexchangeotoarate == null || nexchangeotoarate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotoarate.toString().trim()));
			//
			Object nassistcurprice = rs.getObject(index++);
			arriveorderItem.setNassistcurprice(
				(nassistcurprice == null || nassistcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurprice.toString().trim()));
			//
			Object nassistcurmny = rs.getObject(index++);
			arriveorderItem.setNassistcurmny(
				(nassistcurmny == null || nassistcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurmny.toString().trim()));
			//
			String dproducedate = rs.getString(index++);
			arriveorderItem.setDproducedate(dproducedate == null ? null : new UFDate(dproducedate.trim(), false));
			//
			Integer ivalidday = (Integer) rs.getObject(index++);
			arriveorderItem.setIvalidday(ivalidday == null ? null : ivalidday);
			//
			String dvaliddate = rs.getString(index++);
			arriveorderItem.setDvaliddate(dvaliddate == null ? null : new UFDate(dvaliddate.trim(), false));
			//
			Object nelignum = rs.getObject(index++);
			arriveorderItem.setNelignum(
				(nelignum == null || nelignum.toString().trim().equals("")) ? null : new UFDouble(nelignum.toString().trim()));
			//
			Object nnotelignum = rs.getObject(index++);
			arriveorderItem.setNnotelignum(
				(nnotelignum == null || nnotelignum.toString().trim().equals("")) ? null : new UFDouble(nnotelignum.toString().trim()));
			//
			Object naccumchecknum = rs.getObject(index++);
			arriveorderItem.setNaccumchecknum(
				(naccumchecknum == null || naccumchecknum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumchecknum.toString().trim()));
			//
			Object naccumwarehousenum = rs.getObject(index++);
			arriveorderItem.setNaccumwarehousenum(
				(naccumwarehousenum == null || naccumwarehousenum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumwarehousenum.toString().trim()));
			//
			String cwarehouseid = rs.getString(index++);
			arriveorderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
			//
			String cstoreid = rs.getString(index++);
			arriveorderItem.setCstoreid(cstoreid == null ? null : cstoreid.trim());
			//
			String cupsourcebilltype = rs.getString(index++);
			arriveorderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
			//
			String cupsourcebillid = rs.getString(index++);
			arriveorderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
			//
			String cupsourcebillrowid = rs.getString(index++);
			arriveorderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
			//
			String vmemo = rs.getString(index++);
			arriveorderItem.setVmemo(vmemo == null ? null : vmemo.trim());
			//
			String vdef1 = rs.getString(index++);
			arriveorderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
			//
			String vdef2 = rs.getString(index++);
			arriveorderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
			//
			String vdef3 = rs.getString(index++);
			arriveorderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
			//
			String vdef4 = rs.getString(index++);
			arriveorderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
			//
			String vdef5 = rs.getString(index++);
			arriveorderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
			//
			String vdef6 = rs.getString(index++);
			arriveorderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(index++);
			arriveorderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8
			String vdef8 = rs.getString(index++);
			arriveorderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(index++);
			arriveorderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(index++);
			arriveorderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(index++);
			arriveorderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(index++);
			arriveorderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(index++);
			arriveorderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(index++);
			arriveorderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(index++);
			arriveorderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(index++);
			arriveorderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(index++);
			arriveorderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(index++);
			arriveorderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(index++);
			arriveorderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(index++);
			arriveorderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
			// pk_defdoc1 :
			String pk_defdoc1 = rs.getString(index++);
			arriveorderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
			// pk_defdoc2 :
			String pk_defdoc2 = rs.getString(index++);
			arriveorderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
			// pk_defdoc3 :
			String pk_defdoc3 = rs.getString(index++);
			arriveorderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
			// pk_defdoc4 :
			String pk_defdoc4 = rs.getString(index++);
			arriveorderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
			// pk_defdoc5 :
			String pk_defdoc5 = rs.getString(index++);
			arriveorderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
			// pk_defdoc6 :
			String pk_defdoc6 = rs.getString(index++);
			arriveorderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
			// pk_defdoc7 :
			String pk_defdoc7 = rs.getString(index++);
			arriveorderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
			// pk_defdoc8
			String pk_defdoc8 = rs.getString(index++);
			arriveorderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
			// pk_defdoc9 :
			String pk_defdoc9 = rs.getString(index++);
			arriveorderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
			// pk_defdoc10 :
			String pk_defdoc10 = rs.getString(index++);
			arriveorderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
			// pk_defdoc11 :
			String pk_defdoc11 = rs.getString(index++);
			arriveorderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
			// pk_defdoc12 :
			String pk_defdoc12 = rs.getString(index++);
			arriveorderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
			// pk_defdoc13 :
			String pk_defdoc13 = rs.getString(index++);
			arriveorderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
			// pk_defdoc14 :
			String pk_defdoc14 = rs.getString(index++);
			arriveorderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
			// pk_defdoc15 :
			String pk_defdoc15 = rs.getString(index++);
			arriveorderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
			// pk_defdoc16 :
			String pk_defdoc16 = rs.getString(index++);
			arriveorderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
			// pk_defdoc17 :
			String pk_defdoc17 = rs.getString(index++);
			arriveorderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
			// pk_defdoc18 :
			String pk_defdoc18 = rs.getString(index++);
			arriveorderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
			// pk_defdoc19 :
			String pk_defdoc19 = rs.getString(index++);
			arriveorderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
			// pk_defdoc20 :
			String pk_defdoc20 = rs.getString(index++);
			arriveorderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
			//
			String vfree1 = rs.getString(index++);
			arriveorderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
			//
			String vfree2 = rs.getString(index++);
			arriveorderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
			//
			String vfree3 = rs.getString(index++);
			arriveorderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
			//
			String vfree4 = rs.getString(index++);
			arriveorderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
			//
			String vfree5 = rs.getString(index++);
			arriveorderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
			//存货基本档案主键
			String cbaseid = rs.getString(index++);
			arriveorderItem.setCbaseid(cbaseid == null ? null : cbaseid);
			// csourcebilltype :
			String csourcebilltype = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebilltype", csourcebilltype == null ? null : csourcebilltype.trim());
			// csourcebillid :
			String csourcebillid = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebillid", csourcebillid == null ? null : csourcebillid.trim());
			// csourcebillrowid :
			String csourcebillrowid = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebillrowid", csourcebillrowid == null ? null : csourcebillrowid.trim());
			// iispresent :
			//String iispresent = rs.getString(index++);
			//arriveorderItem.setAttributeValue("iispresent", iispresent == null ? null : new UFBoolean(iispresent.trim()));
			// cprojectid :
			String cprojectid = rs.getString(index++);
			arriveorderItem.setAttributeValue("cprojectid", cprojectid == null ? null : cprojectid.trim());
			// cprojectphaseid :
			String cprojectphaseid = rs.getString(index++);
			arriveorderItem.setAttributeValue("cprojectphaseid", cprojectphaseid == null ? null : cprojectphaseid.trim());
			// crowno :
			String crowno = rs.getString(index++);
			arriveorderItem.setAttributeValue("crowno", crowno == null ? null : crowno.trim());
			// vbackreasonb :
			String vbackreasonb = rs.getString(index++);
			arriveorderItem.setAttributeValue("vbackreasonb", vbackreasonb);
			//corder_bb1id
			String corder_bb1id = rs.getString(index++);
			arriveorderItem.setCorder_bb1id(corder_bb1id == null ? null : corder_bb1id.trim());
			//blargess
			String blargess = rs.getString(index++);
			arriveorderItem.setAttributeValue("blargess", blargess == null ? null : new UFBoolean(blargess.trim()));
			//blargessuprow
			String blargessuprow = rs.getString(index++);
			arriveorderItem.setAttributeValue("blargessuprow", blargessuprow == null ? null : new UFBoolean(blargessuprow.trim()));
			//V5 New:
			arriveorderItem.setPk_reqcorp(rs.getString(index++));
			arriveorderItem.setPk_reqstoorg(rs.getString(index++));
			arriveorderItem.setPk_creqwareid(rs.getString(index++));
			arriveorderItem.setPk_invoicecorp(rs.getString(index++));
			//
			v.addElement(arriveorderItem);
		}
		if (rs != null)
			rs.close();
	}catch(SQLException e){
		PubDMO.throwBusinessException(e);
	}finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	arriveorderItems = new ArriveorderItemVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(arriveorderItems);
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "findItemsForHeader", new Object[] { key });
	/*************************************************************/
	SCMEnv.out("queryAllBodyData Succ ! ");
	return (CircularlyAccessibleValueObject[]) arriveorderItems;
}

/**
 *  功能：实现IQueryData的方法--按表头查询所有表体信息
 *  实现：参照到货单入库时查询到货单
 *  设计：
	1.	如果质量管理启用，
			对存货属性"是否根据质检结果入库"为"Y"的处理：存在质检结果、审批完成、没有完全入库的到货单行，按照检验结果的不同质量等级、可入库数量进行行拆分显示，传递到库存系统，质量等级显示对应质量管理系统的检验状态名称；
			对存货属性"是否根据质检结果入库"为"N"的处理：不管是否有质量检验结果，均不拆行，显示该到货单子表行的可入库数量，质量等级显示为NULL；
	2.	如果质量管理没有启用，到货单向入库单提供可入库数量为合格数量-累计入库数量；
 *  modified by czp on 2002-09-10 ： 基于《NC-SCM采购管理详细需求说明书V2.11》修改
 *  modified by czp on 2003-11-06 ： 加是否可入库限制
 */
public CircularlyAccessibleValueObject[] queryAllBodyData(String key, String whereString) throws BusinessException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "queryAllBodyData", new Object[] { key, whereString });
	/*************************************************************/
	if (key == null)
		return null;
	if (key.trim().equals(""))
		return null;
	ArriveorderItemVO[] arriveorderItems = null;
	Vector v = new Vector(), vRowid = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	Hashtable table = null, hArrNum = new Hashtable(), hAccNum = new Hashtable();
	ResultSet rs = null;
	String strCorpId = null;
	boolean isQCEnable = false;
	ICreateCorpQueryService dmoCrtCorp = null;
	try {
		con = getConnection();
		//质检是否启用
		String strSQL = "select pk_corp from po_arriveorder where carriveorderid = ? ";
		stmt = con.prepareStatement(strSQL);
		stmt.setString(1, key);
		rs = stmt.executeQuery();
		if (rs.next()) {
			strCorpId = rs.getString(1);
		}
		if (!(strCorpId == null || strCorpId.trim().equals(""))) {
			try {
				dmoCrtCorp = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
				isQCEnable = dmoCrtCorp.isEnabled(strCorpId, "QC");
			} catch (Exception e) {
				throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000051")/*@res "查询质检是否启用时出错"*/);
			}
		}
		rs.close();
		stmt.close();
		StringBuffer sql = new StringBuffer(" ");
		sql.append("select distinct ");
		//质量管理启用
		if (isQCEnable) {
			sql.append("po_arriveorder_bb.cqualitylevelid,");
			sql.append("qc_checkstate_b.ccheckstatename,");
			sql.append("po_arriveorder_bb.nnum,");
			sql.append("po_arriveorder_bb.naccumnum,");
			sql.append("po_arriveorder_bb.cdealid,");
			sql.append("qc_defectprocess.cdefectprocessname,");
			sql.append("po_arriveorder_bb.bcheckin,");
		}
		sql.append("po_arriveorder_b.carriveorder_bid, po_arriveorder_b.carriveorderid, po_arriveorder_b.pk_corp, po_arriveorder_b.corder_bid, po_arriveorder_b.corderid, po_arriveorder_b.cmangid, po_arriveorder_b.cassistunit, ");
		sql.append("po_arriveorder_b.narrvnum, ");
		sql.append("po_arriveorder_b.nassistnum, ");
		sql.append("po_arriveorder_b.nwastnum, po_arriveorder_b.nwastassistnum, po_arriveorder_b.npresentnum, po_arriveorder_b.npresentassistnum, po_arriveorder_b.vproducenum, po_arriveorder_b.ccurrencytypeid, po_arriveorder_b.noriginalcurprice, po_arriveorder_b.noriginalcurmny, po_arriveorder_b.nexchangeotobrate, po_arriveorder_b.nprice, ");
		sql.append("po_arriveorder_b.nmoney, ");
		sql.append("po_arriveorder_b.nexchangeotoarate, po_arriveorder_b.nassistcurprice, po_arriveorder_b.nassistcurmny, po_arriveorder_b.dproducedate, po_arriveorder_b.ivalidday, po_arriveorder_b.dvaliddate, po_arriveorder_b.nelignum, po_arriveorder_b.nnotelignum, po_arriveorder_b.naccumchecknum, po_arriveorder_b.naccumwarehousenum, po_arriveorder_b.cwarehouseid, po_arriveorder_b.cstoreid, po_arriveorder_b.cupsourcebilltype, po_arriveorder_b.cupsourcebillid, po_arriveorder_b.cupsourcebillrowid, po_arriveorder_b.vmemo, po_arriveorder_b.vdef1, po_arriveorder_b.vdef2, po_arriveorder_b.vdef3, po_arriveorder_b.vdef4, po_arriveorder_b.vdef5, po_arriveorder_b.vdef6,po_arriveorder_b.vdef7, po_arriveorder_b.vdef8, po_arriveorder_b.vdef9, po_arriveorder_b.vdef10, po_arriveorder_b.vdef11, po_arriveorder_b.vdef12, po_arriveorder_b.vdef13, po_arriveorder_b.vdef14, po_arriveorder_b.vdef15, po_arriveorder_b.vdef16, po_arriveorder_b.vdef17, po_arriveorder_b.vdef18, po_arriveorder_b.vdef19, po_arriveorder_b.vdef20,");
		sql.append("po_arriveorder_b.pk_defdoc1,po_arriveorder_b.pk_defdoc2,po_arriveorder_b.pk_defdoc3,po_arriveorder_b.pk_defdoc4,po_arriveorder_b.pk_defdoc5,po_arriveorder_b.pk_defdoc6,po_arriveorder_b.pk_defdoc7,po_arriveorder_b.pk_defdoc8,po_arriveorder_b.pk_defdoc9,po_arriveorder_b.pk_defdoc10,po_arriveorder_b.pk_defdoc11,po_arriveorder_b.pk_defdoc12,po_arriveorder_b.pk_defdoc13,po_arriveorder_b.pk_defdoc14,po_arriveorder_b.pk_defdoc15,po_arriveorder_b.pk_defdoc16,po_arriveorder_b.pk_defdoc17,po_arriveorder_b.pk_defdoc18,po_arriveorder_b.pk_defdoc19,po_arriveorder_b.pk_defdoc20,po_arriveorder_b.vfree1, po_arriveorder_b.vfree2, po_arriveorder_b.vfree3, po_arriveorder_b.vfree4, po_arriveorder_b.vfree5, po_arriveorder_b.cbaseid, po_arriveorder_b.csourcebilltype, po_arriveorder_b.csourcebillid, po_arriveorder_b.csourcebillrowid, po_arriveorder_b.ts,po_arriveorder_b.cprojectid,po_arriveorder_b.cprojectphaseid, po_arriveorder_b.crowno,po_arriveorder_b.vbackreasonb,po_arriveorder_b.corder_bb1id " +
				",po_arriveorder_b.pk_reqcorp,po_arriveorder_b.pk_reqstoorg,po_arriveorder_b.pk_creqwareid,po_arriveorder_b.pk_invoicecorp ");
		sql.append("from po_arriveorder_b ");
		//质量管理启用
		if (isQCEnable) {
			sql.append("left outer join po_arriveorder_bb on po_arriveorder_b.carriveorder_bid = po_arriveorder_bb.carriveorder_bid ");
			sql.append("left outer join qc_checkstate_b on qc_checkstate_b.ccheckstate_bid = po_arriveorder_bb.cqualitylevelid ");
			sql.append("left outer join qc_defectprocess on qc_defectprocess.cdefectprocessid = po_arriveorder_bb.cdealid ");
		}
		//Where 条件
		sql.append("where ");
		sql.append("po_arriveorder_b.carriveorderid = ? ");
		sql.append("and po_arriveorder_b.dr = 0 ");
		//正到货才可入库 czp&xy/03/09/08
		sql.append("and isnull(narrvnum,0) > 0 ");
		//累计入库小于到货(注意：暂未考虑容差czp&xy/03/09/08)
		sql.append("and isnull(narrvnum,0) - isnull(naccumwarehousenum,0) > 0 ");
		//质检未启用: 过滤掉“累计合格为零”或“累计合格-累计入库”的行
		if (!isQCEnable) {
			sql.append("and not isnull(nelignum,0) = 0 ");
			sql.append("and not isnull(nelignum,0) - isnull(naccumwarehousenum,0) = 0 ");
		}
		////过虑到检验单中不可入库得表体行
		//if (isQCEnable) {
			//sql.append("and isnull(po_arriveorder_bb.bcheckin,'N') = 'Y' ");
		//}
		sql.append("order by po_arriveorder_b.crowno ");

		SCMEnv.out("给入库单过滤数据查询语句：" + sql.toString());

		stmt = con.prepareStatement(sql.toString());
		stmt.setString(1, key);
		rs = stmt.executeQuery();
		//处理辅数量及金额的准备工作
		//哈希表结构：table = {到货单行ID = 换算率}
		table = new Hashtable(0);
		String sRowId = null;
		UFDouble ufdArr = null, ufdAss = null, ufdRate = null, ufdAcc = null;
		//
		Object nnum = null, naccumnum = null;
		while (rs.next()) {
			ArriveorderItemVO arriveorderItem = new ArriveorderItemVO();
			int index = 1;
			//质量管理启用
			if (isQCEnable) {
				//质量等级ID
				String cqualitylevelid = rs.getString(index++);
				//质量等级名称
				String cqualitylevelname = rs.getString(index++);
				arriveorderItem.setsQualityLevel(cqualitylevelid == null ? null : cqualitylevelid.trim());
				arriveorderItem.setsQualitylevelName(cqualitylevelname);
				//质量等级对应数量
				nnum = rs.getObject(index++);
				//质量等级对应累计入库数量
				naccumnum = rs.getObject(index++);
				//建议处理意见ID
				String cdealid = rs.getString(index++);
				arriveorderItem.setCdeal(cdealid == null ? null : cdealid.trim());
				//建议处理意见名称
				String cdealname = rs.getString(index++);
				arriveorderItem.setCdealname(cdealname == null ? null : cdealname.trim());
				//到货单行是否可入库
				String strCheckin = rs.getString(index++);
				arriveorderItem.setBcheckin(strCheckin == null ? new UFBoolean(true):new UFBoolean(strCheckin.trim()));

			}
			//
			String carriveorder_bid = rs.getString(index++);
			arriveorderItem.setCarriveorder_bid(carriveorder_bid == null ? null : carriveorder_bid.trim());
			sRowId = arriveorderItem.getCarriveorder_bid();
			if (!vRowid.contains(sRowId))
				vRowid.add(sRowId);
			//
			String carriveorderid = rs.getString(index++);
			arriveorderItem.setCarriveorderid(carriveorderid == null ? null : carriveorderid.trim());
			//
			String pk_corp = rs.getString(index++);
			arriveorderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			//
			String corder_bid = rs.getString(index++);
			arriveorderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
			//
			String corderid = rs.getString(index++);
			arriveorderItem.setCorderid(corderid == null ? null : corderid.trim());
			//
			String cmangid = rs.getString(index++);
			arriveorderItem.setCmangid(cmangid == null ? null : cmangid.trim());
			//
			String cassistunit = rs.getString(index++);
			arriveorderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
			//到货数量(默认未质检)
			Object narrvnum = rs.getObject(index++);
			arriveorderItem.setNarrvnum((narrvnum == null || narrvnum.toString().trim().equals("")) ? null : new UFDouble(narrvnum.toString().trim()));
			ufdArr = arriveorderItem.getNarrvnum();
			//
			Object nassistnum = rs.getObject(index++);
			arriveorderItem.setNassistnum((nassistnum == null || nassistnum.toString().trim().equals("")) ? null : new UFDouble(nassistnum.toString().trim()));
			ufdAss = arriveorderItem.getNassistnum();
			//
			Object nwastnum = rs.getObject(index++);
			arriveorderItem.setNwastnum((nwastnum == null || nwastnum.toString().trim().equals("")) ? null : new UFDouble(nwastnum.toString().trim()));
			//
			Object nwastassistnum = rs.getObject(index++);
			arriveorderItem.setNwastassistnum((nwastassistnum == null || nwastassistnum.toString().trim().equals("")) ? null : new UFDouble(nwastassistnum.toString().trim()));
			//
			Object npresentnum = rs.getObject(index++);
			arriveorderItem.setNpresentnum((npresentnum == null || npresentnum.toString().trim().equals("")) ? null : new UFDouble(npresentnum.toString().trim()));
			//
			Object npresentassistnum = rs.getObject(index++);
			arriveorderItem.setNpresentassistnum((npresentassistnum == null || npresentassistnum.toString().trim().equals("")) ? null : new UFDouble(npresentassistnum.toString().trim()));
			//
			String vproducenum = rs.getString(index++);
			arriveorderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());
			//
			String ccurrencytypeid = rs.getString(index++);
			arriveorderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
			//
			Object noriginalcurprice = rs.getObject(index++);
			arriveorderItem.setNoriginalcurprice((noriginalcurprice == null || noriginalcurprice.toString().trim().equals("")) ? null : new UFDouble(noriginalcurprice.toString().trim()));
			//
			Object noriginalcurmny = rs.getObject(index++);
			arriveorderItem.setNoriginalcurmny((noriginalcurmny == null || noriginalcurmny.toString().trim().equals("")) ? null : new UFDouble(noriginalcurmny.toString().trim()));
			//
			Object nexchangeotobrate = rs.getObject(index++);
			arriveorderItem.setNexchangeotobrate((nexchangeotobrate == null || nexchangeotobrate.toString().trim().equals("")) ? null : new UFDouble(nexchangeotobrate.toString().trim()));
			//
			Object nprice = rs.getObject(index++);
			arriveorderItem.setNprice((nprice == null || nprice.toString().trim().equals("")) ? null : new UFDouble(nprice.toString().trim()));
			//
			Object nmoney = rs.getObject(index++);
			arriveorderItem.setNmoney((nmoney == null || nmoney.toString().trim().equals("")) ? null : new UFDouble(nmoney.toString().trim()));
			//
			Object nexchangeotoarate = rs.getObject(index++);
			arriveorderItem.setNexchangeotoarate((nexchangeotoarate == null || nexchangeotoarate.toString().trim().equals("")) ? null : new UFDouble(nexchangeotoarate.toString().trim()));
			//
			Object nassistcurprice = rs.getObject(index++);
			arriveorderItem.setNassistcurprice((nassistcurprice == null || nassistcurprice.toString().trim().equals("")) ? null : new UFDouble(nassistcurprice.toString().trim()));
			//
			Object nassistcurmny = rs.getObject(index++);
			arriveorderItem.setNassistcurmny((nassistcurmny == null || nassistcurmny.toString().trim().equals("")) ? null : new UFDouble(nassistcurmny.toString().trim()));
			//
			String dproducedate = rs.getString(index++);
			arriveorderItem.setDproducedate(dproducedate == null ? null : new UFDate(dproducedate.trim(), false));
			//
			Integer ivalidday = (Integer) rs.getObject(index++);
			arriveorderItem.setIvalidday(ivalidday == null ? null : ivalidday);
			//
			String dvaliddate = rs.getString(index++);
			arriveorderItem.setDvaliddate(dvaliddate == null ? null : new UFDate(dvaliddate.trim(), false));
			//
			Object nelignum = rs.getObject(index++);
			arriveorderItem.setNelignum((nelignum == null || nelignum.toString().trim().equals("")) ? null : new UFDouble(nelignum.toString().trim()));
			//
			Object nnotelignum = rs.getObject(index++);
			arriveorderItem.setNnotelignum((nnotelignum == null || nnotelignum.toString().trim().equals("")) ? null : new UFDouble(nnotelignum.toString().trim()));
			//
			Object naccumchecknum = rs.getObject(index++);
			arriveorderItem.setNaccumchecknum((naccumchecknum == null || naccumchecknum.toString().trim().equals("")) ? null : new UFDouble(naccumchecknum.toString().trim()));
			//
			Object naccumwarehousenum = rs.getObject(index++);
			arriveorderItem.setNaccumwarehousenum((naccumwarehousenum == null || naccumwarehousenum.toString().trim().equals("")) ? null : new UFDouble(naccumwarehousenum.toString().trim()));
			//
			//累计入库数量
			ufdAcc = arriveorderItem.getNaccumwarehousenum();
			//
			String cwarehouseid = rs.getString(index++);
			arriveorderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
			//
			String cstoreid = rs.getString(index++);
			arriveorderItem.setCstoreid(cstoreid == null ? null : cstoreid.trim());
			//
			String cupsourcebilltype = rs.getString(index++);
			arriveorderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
			//
			String cupsourcebillid = rs.getString(index++);
			arriveorderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
			//
			String cupsourcebillrowid = rs.getString(index++);
			arriveorderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
			//
			String vmemo = rs.getString(index++);
			arriveorderItem.setVmemo(vmemo == null ? null : vmemo.trim());
			//
			String vdef1 = rs.getString(index++);
			arriveorderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
			//
			String vdef2 = rs.getString(index++);
			arriveorderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
			//
			String vdef3 = rs.getString(index++);
			arriveorderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
			//
			String vdef4 = rs.getString(index++);
			arriveorderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
			//
			String vdef5 = rs.getString(index++);
			arriveorderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
			//
			String vdef6 = rs.getString(index++);
			arriveorderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(index++);
			arriveorderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8
			String vdef8 = rs.getString(index++);
			arriveorderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(index++);
			arriveorderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(index++);
			arriveorderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(index++);
			arriveorderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(index++);
			arriveorderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(index++);
			arriveorderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(index++);
			arriveorderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(index++);
			arriveorderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(index++);
			arriveorderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(index++);
			arriveorderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(index++);
			arriveorderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(index++);
			arriveorderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(index++);
			arriveorderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
			// pk_defdoc1 :
			String pk_defdoc1 = rs.getString(index++);
			arriveorderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
			// pk_defdoc2 :
			String pk_defdoc2 = rs.getString(index++);
			arriveorderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
			// pk_defdoc3 :
			String pk_defdoc3 = rs.getString(index++);
			arriveorderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
			// pk_defdoc4 :
			String pk_defdoc4 = rs.getString(index++);
			arriveorderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
			// pk_defdoc5 :
			String pk_defdoc5 = rs.getString(index++);
			arriveorderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
			// pk_defdoc6 :
			String pk_defdoc6 = rs.getString(index++);
			arriveorderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
			// pk_defdoc7 :
			String pk_defdoc7 = rs.getString(index++);
			arriveorderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
			// pk_defdoc8
			String pk_defdoc8 = rs.getString(index++);
			arriveorderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
			// pk_defdoc9 :
			String pk_defdoc9 = rs.getString(index++);
			arriveorderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
			// pk_defdoc10 :
			String pk_defdoc10 = rs.getString(index++);
			arriveorderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
			// pk_defdoc11 :
			String pk_defdoc11 = rs.getString(index++);
			arriveorderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
			// pk_defdoc12 :
			String pk_defdoc12 = rs.getString(index++);
			arriveorderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
			// pk_defdoc13 :
			String pk_defdoc13 = rs.getString(index++);
			arriveorderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
			// pk_defdoc14 :
			String pk_defdoc14 = rs.getString(index++);
			arriveorderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
			// pk_defdoc15 :
			String pk_defdoc15 = rs.getString(index++);
			arriveorderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
			// pk_defdoc16 :
			String pk_defdoc16 = rs.getString(index++);
			arriveorderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
			// pk_defdoc17 :
			String pk_defdoc17 = rs.getString(index++);
			arriveorderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
			// pk_defdoc18 :
			String pk_defdoc18 = rs.getString(index++);
			arriveorderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
			// pk_defdoc19 :
			String pk_defdoc19 = rs.getString(index++);
			arriveorderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
			// pk_defdoc20 :
			String pk_defdoc20 = rs.getString(index++);
			arriveorderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
			//
			String vfree1 = rs.getString(index++);
			arriveorderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
			//
			String vfree2 = rs.getString(index++);
			arriveorderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
			//
			String vfree3 = rs.getString(index++);
			arriveorderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
			//
			String vfree4 = rs.getString(index++);
			arriveorderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
			//
			String vfree5 = rs.getString(index++);
			arriveorderItem.setVfree5(vfree5 == null ? null : vfree5.trim());

			//存货基本档案主键
			String cbaseid = rs.getString(index++);
			arriveorderItem.setCbaseid(cbaseid == null ? null : cbaseid);

			// csourcebilltype :
			String csourcebilltype = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebilltype", csourcebilltype == null ? null : csourcebilltype.trim());
			// csourcebillid :
			String csourcebillid = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebillid", csourcebillid == null ? null : csourcebillid.trim());
			// csourcebillrowid :
			String csourcebillrowid = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebillrowid", csourcebillrowid == null ? null : csourcebillrowid.trim());
			// ts
			String ts = rs.getString(index++);
			arriveorderItem.setTs(ts);
			// cprojectid
			String cprojectid = rs.getString(index++);
			arriveorderItem.setAttributeValue("cprojectid", cprojectid == null ? null : cprojectid.trim());
			// cprojectphaseid
			String cprojectphaseid = rs.getString(index++);
			arriveorderItem.setAttributeValue("cprojectphaseid", cprojectphaseid == null ? null : cprojectphaseid.trim());
			// crowno
			String crowno = rs.getString(index++);
			arriveorderItem.setAttributeValue("crowno", crowno == null ? null : crowno.trim());
			// vbackreasonb
			String vbackreasonb = rs.getString(index++);
			arriveorderItem.setAttributeValue("vbackreasonb", vbackreasonb);
			//corder_bb1id
			String corder_bb1id = rs.getString(index++);
			arriveorderItem.setCorder_bb1id(corder_bb1id == null ? null : corder_bb1id.trim());

			//V5 New:
			arriveorderItem.setPk_reqcorp(rs.getString(index++));
			arriveorderItem.setPk_reqstoorg(rs.getString(index++));
			arriveorderItem.setPk_creqwareid(rs.getString(index++));
			arriveorderItem.setPk_invoicecorp(rs.getString(index++));
			
			//质检启用时，按质量等级拆分到货数量-累计入库数量
			
			/*注：此处未考虑“是否根据检验结果入库”参数，统统处理成按质量检验结果拆行。
			 * 
			 *如果“是否根据检验结果入库”参数为否，即不做质量检验拆行入库而按到货单行入库时，由后续代码处理
			 *
			 *参见：代码段{合并不根据质检结果入库的行}
			 */
			
			//处理1 ：设置到货数量、累计入库数量
			if (isQCEnable) {
				arriveorderItem.setNarrvnum(
				    (PuPubVO.getUFDouble_ZeroAsNull(nnum) == null) 
				        ? arriveorderItem.getNarrvnum() 
				        : PuPubVO.getUFDouble_ValueAsValue(nnum));
				arriveorderItem.setNaccumwarehousenum(
					(PuPubVO.getUFDouble_ZeroAsNull(naccumnum) == null && PuPubVO.getUFDouble_ZeroAsNull(nnum) == null)
						? arriveorderItem.getNaccumwarehousenum()
						: PuPubVO.getUFDouble_ValueAsValue(naccumnum));
			}else {//质检未启用时处理，到货数量<<--合格数量,质量信息为 NULL				
				arriveorderItem.setNarrvnum(arriveorderItem.getNelignum());//注意：getNelignum() != null 由查询条件保证
				arriveorderItem.setsQualityLevel(null);
				arriveorderItem.setsQualitylevelName(null);
				arriveorderItem.setCdeal(null);
				arriveorderItem.setCdealname(null);
			}
			//处理2 ：可入库数量:到货数量(质量检验未启用时为“合格数量”)-累计入库数量
			arriveorderItem.setNarrvnum(
			        PuPubVO.getUFDouble_NullAsZero(arriveorderItem.getNarrvnum()).sub(PuPubVO.getUFDouble_NullAsZero(arriveorderItem.getNaccumwarehousenum())));
			//
			v.addElement(arriveorderItem);
			//换算率哈希表处理
			if (!(ufdAss == null)) {
				ufdRate = ufdArr.div(ufdAss);
			} else {
				ufdRate = new UFDouble(0);
			}
			table.put(sRowId, ufdRate);
			//到货数量缓存
			hArrNum.put(carriveorder_bid, ufdArr);
			//累计入库数量缓存
			if (ufdAcc != null)
				hAccNum.put(carriveorder_bid, ufdAcc);
		}
		//关闭结果集
		rs.close();
		//
		if (v.size() > 0) {
			arriveorderItems = new ArriveorderItemVO[v.size()];
			v.copyInto(arriveorderItems);
			/*过滤掉不可入库单据行*/
			arriveorderItems = getCanStoreItems(arriveorderItems);
			if (arriveorderItems == null) {
				SCMEnv.out("过滤掉不可入库单据行后单据行为NULL");
			}
		}
		Hashtable hTmp = null;
		//质量启用的特殊处理
		if (isQCEnable) {
			if (arriveorderItems != null && arriveorderItems.length > 0) {
				/**除去不合法表行："存货根据质检结果入库且合格和不合格均为零"*/
				/**除去元素："质检结果入库且等式：“合格+不合格-累计入库=零”成立"*/
				Vector vRslt = new Vector();
				String[] saRowid = new String[vRowid.size()];
				vRowid.copyInto(saRowid);
				//是否根据检验结果入库哈希表{子表行ID=是否根据检验结果入库}
				hTmp = getStoreByChkHash(saRowid);
				UFBoolean isByChk = null;
				UFDouble ufdElg = null, ufdElgNot = null, ufdAccWar = null;
				ufdArr = null;
				int iDelCnt = 0;
				for (int i = 0; i < arriveorderItems.length; i++) {
					ufdArr = arriveorderItems[i].getNarrvnum();
					if (ufdArr == null || ufdArr.doubleValue() == 0)
						continue;
					isByChk = (UFBoolean) hTmp.get(arriveorderItems[i].getCarriveorder_bid());
					ufdElg = arriveorderItems[i].getNelignum();
					ufdElgNot = arriveorderItems[i].getNnotelignum();
					ufdAccWar = arriveorderItems[i].getNaccumwarehousenum();
					/**除去不合法表行："存货根据质检结果入库且不可入库"*/
					boolean bcheckin = arriveorderItems[i].getBcheckin().booleanValue();
					if (isByChk.booleanValue()
						&& (((ufdElg == null || ufdElg.compareTo(new UFDouble(0)) == 0) && (ufdElgNot == null || ufdElgNot.compareTo(new UFDouble(0)) == 0))
							|| (ufdAccWar != null && ufdAccWar.equals((ufdElg == null ? new UFDouble(0) : ufdElg).add(ufdElgNot == null ? new UFDouble(0) : ufdElgNot))) || !bcheckin))
						iDelCnt += 1;
					else
						vRslt.addElement(arriveorderItems[i]);
				}
				if (iDelCnt > 0 && iDelCnt == arriveorderItems.length)
					throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000052")/*@res "查询到的数据发生并发操作，请重新查询刷新界面"*/);
				if (vRslt.size() > 0) {
					arriveorderItems = new ArriveorderItemVO[vRslt.size()];
					vRslt.copyInto(arriveorderItems);
				}
				//合并不根据质检结果入库的行
				if (arriveorderItems != null && arriveorderItems.length > 0) {
					vRslt = new Vector();
					Vector vNoCheck = new Vector();
					isByChk = null;
					//区分不需要质检即入库的行
					for (int i = 0; i < arriveorderItems.length; i++) {
						isByChk = (UFBoolean) hTmp.get(arriveorderItems[i].getCarriveorder_bid());
						if (!isByChk.booleanValue()) {
							//不需质检即可入库的行质检ID置空
							arriveorderItems[i].setsQualityLevel(null);
							arriveorderItems[i].setsQualitylevelName(null);
							arriveorderItems[i].setCdeal(null);
							arriveorderItems[i].setCdealname(null);
							vNoCheck.addElement(arriveorderItems[i]);
						} else {
							vRslt.addElement(arriveorderItems[i]);
						}
					}
					//按表行合并
					Hashtable hNoCheck = new Hashtable();
					Vector vTmp = null;
					if (vNoCheck.size() > 0) {
						for (int i = 0; i < vNoCheck.size(); i++) {
							if (!hNoCheck.containsKey(((ArriveorderItemVO) vNoCheck.elementAt(i)).getCarriveorder_bid())) {
								vTmp = new Vector();
							} else {
								vTmp = (Vector) hNoCheck.get(((ArriveorderItemVO) vNoCheck.elementAt(i)).getCarriveorder_bid());
							}
							vTmp.addElement(vNoCheck.elementAt(i));
							hNoCheck.put(((ArriveorderItemVO) vNoCheck.elementAt(i)).getCarriveorder_bid(), vTmp);
						}
					}
					if (hNoCheck.size() > 0) {
						Enumeration keys = hNoCheck.keys();
						ArriveorderItemVO arriveorderItem = null;
						sRowId = null;
						while (keys.hasMoreElements()) {
							sRowId = (String) keys.nextElement();
							vTmp = (Vector) hNoCheck.get(sRowId);
							//合并“不根据质检入库”的到货单行
							arriveorderItem = (ArriveorderItemVO) vTmp.elementAt(0);
							//重置到货数量
							arriveorderItem.setNarrvnum((UFDouble) hArrNum.get(sRowId));
							//重置累计入库数量
							arriveorderItem.setNaccumwarehousenum((UFDouble) hAccNum.get(sRowId));
							//置库存可入库数量
							arriveorderItem.setNarrvnum(
								!(arriveorderItem.getNaccumwarehousenum() == null || arriveorderItem.getNaccumwarehousenum().toString().trim().equals(""))
									? arriveorderItem.getNarrvnum().sub(arriveorderItem.getNaccumwarehousenum())
									: arriveorderItem.getNarrvnum());
							vRslt.addElement(arriveorderItem);
						}
					}
					arriveorderItems = new ArriveorderItemVO[vRslt.size()];
					vRslt.copyInto(arriveorderItems);
				}
			}
		}
		//处理辅数量及金额
		ufdRate = null;
		if (arriveorderItems != null && arriveorderItems.length > 0) {
			for (int i = 0; i < arriveorderItems.length; i++) {
				//换算率
				arriveorderItems[i].setConvertrate((UFDouble) table.get(arriveorderItems[i].getCarriveorder_bid()));
				//辅数量=数量/换算率
				ufdRate = (UFDouble) table.get(arriveorderItems[i].getCarriveorder_bid());
				arriveorderItems[i].setNassistnum(ufdRate.doubleValue() == 0 ? null : arriveorderItems[i].getNarrvnum().div(ufdRate));
				//金额=数量*单价
				arriveorderItems[i].setNmoney(
					(arriveorderItems[i].getNprice() == null || arriveorderItems[i].getNarrvnum() == null) ? null : arriveorderItems[i].getNprice().multiply(arriveorderItems[i].getNarrvnum()));
			}
		}
		/**传入库时,是否赠品的处理*/
//		if (arriveorderItems != null && arriveorderItems.length > 0) {
//			for (int i = 0; i < arriveorderItems.length; i++) {
//				if (arriveorderItems[i].getNpresentnum() != null) {
//					if (arriveorderItems[i].getNpresentnum().compareTo(new UFDouble(0)) == 0) {
//						arriveorderItems[i].setNpresentnum(null);
//						arriveorderItems[i].setNpresentassistnum(null);
//						arriveorderItems[i].setIispresent(new UFBoolean(false));
//					} else {
//						arriveorderItems[i].setIispresent(new UFBoolean(true));
//					}
//				} else {
//					arriveorderItems[i].setIispresent(new UFBoolean(false));
//				}
//			}
//		}
		//处理自由项
		arriveorderItems = (ArriveorderItemVO[]) nc.bs.pu.pub.PubDMO.getBodysWithFree(arriveorderItems, "cmangid", "vfree0");
	} catch (Exception e) {
		PubDMO.throwBusinessException(e);
	}finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "queryAllBodyData", new Object[] { key, whereString });
	/*************************************************************/

	return (CircularlyAccessibleValueObject[]) arriveorderItems;
}

/**
 * 查询到货单行质检信息
 * 功能：
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2002-10-11 9:15:43)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.rc.receive.CheckRsltItemVO[]
 * @param id java.lang.String
 */
public CheckRsltItemVO[] queryAllChkInfo(String sCarriveorder_bid) throws SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "queryAllChkInfo", new Object[] { sCarriveorder_bid });
	/*************************************************************/

	CheckRsltItemVO[] items = null;
	Connection con = null;
	PreparedStatement stmt = null;
	java.util.Vector v = new Vector();

	StringBuffer bfSql1 = new StringBuffer();
	bfSql1.append("SELECT qc_checkstate_b.ccheckstatename, qc_checkstate_b.bqualified,");
	bfSql1.append(" qc_defectprocess.cdefectprocessname, po_arriveorder_bb.nnum,");
	bfSql1.append(" po_arriveorder_b.naccumwarehousenum,po_arriveorder_bb.bcheckin,");
	bfSql1.append(" po_arriveorder_bb.cmangid,po_arriveorder_bb.cbaseid,po_arriveorder_bb.nassistnum,");
	bfSql1.append(" po_arriveorder_bb.bchange,po_arriveorder_bb.nconvertrate,po_arriveorder_bb.cassistunit");
	bfSql1.append(" FROM po_arriveorder_b INNER JOIN");
	bfSql1.append(" po_arriveorder_bb ON ");
	bfSql1.append(" po_arriveorder_b.carriveorder_bid = po_arriveorder_bb.carriveorder_bid ");
	bfSql1.append(" LEFT OUTER JOIN qc_checkstate_b ON ");
	bfSql1.append(" qc_checkstate_b.ccheckstate_bid = po_arriveorder_bb.cqualitylevelid ");
	bfSql1.append(" LEFT OUTER JOIN qc_defectprocess ON ");
	bfSql1.append(" qc_defectprocess.cdefectprocessid = po_arriveorder_bb.cdealid");
	bfSql1.append(" where po_arriveorder_b.carriveorder_bid = '");
	bfSql1.append(sCarriveorder_bid);
	bfSql1.append("' and ISNULL(po_arriveorder_bb.bchange, 'N') = 'Y'");

	StringBuffer bfSql2 = new StringBuffer();
	bfSql2.append("SELECT qc_checkstate_b.ccheckstatename, qc_checkstate_b.bqualified,");
	bfSql2.append(" qc_defectprocess.cdefectprocessname, po_arriveorder_bb.nnum,");
	bfSql2.append(" po_arriveorder_b.naccumwarehousenum,po_arriveorder_bb.bcheckin,");
	bfSql2.append(" null,null,po_arriveorder_bb.nassistnum,");
	bfSql2.append(" po_arriveorder_bb.bchange,po_arriveorder_bb.nconvertrate,po_arriveorder_b.cassistunit");
	bfSql2.append(" FROM po_arriveorder_b INNER JOIN");
	bfSql2.append(" po_arriveorder_bb ON ");
	bfSql2.append(" po_arriveorder_b.carriveorder_bid = po_arriveorder_bb.carriveorder_bid ");
	bfSql2.append(" LEFT OUTER JOIN qc_checkstate_b ON ");
	bfSql2.append(" qc_checkstate_b.ccheckstate_bid = po_arriveorder_bb.cqualitylevelid ");
	bfSql2.append(" LEFT OUTER JOIN qc_defectprocess ON ");
	bfSql2.append(" qc_defectprocess.cdefectprocessid = po_arriveorder_bb.cdealid");
	bfSql2.append(" where po_arriveorder_b.carriveorder_bid = '");
	bfSql2.append(sCarriveorder_bid);
	bfSql2.append("' and ISNULL(po_arriveorder_bb.bchange, 'N') = 'N'");

	try {
		con = getConnection();
		stmt = con.prepareStatement(bfSql1.toString());
		ResultSet rs = stmt.executeQuery();
		while (rs.next()) {
			CheckRsltItemVO vo = new CheckRsltItemVO();
			//检验状态
			String checkstate = rs.getString(1);
			vo.setChkstatus(checkstate == null ? null : checkstate.trim());
			//是否合格
			String iselg = rs.getString(2);
			if (iselg == null || iselg.trim().equalsIgnoreCase("N")) {
				vo.setIsElg(new UFBoolean(false));
			} else
				vo.setIsElg(new UFBoolean(true));
			//建议处理方式
			String deal = rs.getString(3);
			vo.setDealmethod(deal == null ? null : deal.trim());
			//数量
			Object nnum = rs.getObject(4);
			vo.setNum(nnum == null ? null : new UFDouble(nnum.toString()));
			//累计入库数量
			Object naccum = rs.getObject(5);
			vo.setNaccnum(naccum == null ? null : new UFDouble(naccum.toString()));
			//是否可入库
			String sBcheckin = rs.getString(6);
			if (sBcheckin == null || sBcheckin.trim().equalsIgnoreCase("N")) {
				vo.setBcheckin(new UFBoolean(false));
			} else
				vo.setBcheckin(new UFBoolean(true));
			//存货管理ID
			String sMangid = rs.getString(7);
			vo.setCmangid(sMangid == null ? null : sMangid.trim());
			//存货基础ID
			String sBaseid = rs.getString(8);
			vo.setCbaseid(sBaseid == null ? null : sBaseid.trim());
			//辅数量
			Object oAssisNum = rs.getObject(9);
			vo.setAssisNum(oAssisNum == null ? null : new UFDouble(oAssisNum.toString()));
			//是否改判
			String sChange = rs.getString(10);
			if (sChange == null || sChange.trim().equalsIgnoreCase("N")) {
				vo.setBchange(new UFBoolean(false));
			} else
				vo.setBchange(new UFBoolean(true));
			//换算率
			Object oConvertrate = rs.getObject(11);
			vo.setConvertrate(oConvertrate == null ? null : new UFDouble(oConvertrate.toString()));
			//存货基础ID
			String sAssistUnit = rs.getString(12);
			vo.setCassisunit(sAssistUnit == null ? null : sAssistUnit.trim());

			v.addElement(vo);
		}
		if (stmt != null) stmt.close();

		stmt = con.prepareStatement(bfSql2.toString());
		rs = stmt.executeQuery();
		while (rs.next()) {
			CheckRsltItemVO vo = new CheckRsltItemVO();
			//检验状态
			String checkstate = rs.getString(1);
			vo.setChkstatus(checkstate == null ? null : checkstate.trim());
			//是否合格
			String iselg = rs.getString(2);
			if (iselg == null || iselg.trim().equalsIgnoreCase("N")) {
				vo.setIsElg(new UFBoolean(false));
			} else
				vo.setIsElg(new UFBoolean(true));
			//建议处理方式
			String deal = rs.getString(3);
			vo.setDealmethod(deal == null ? null : deal.trim());
			//数量
			Object nnum = rs.getObject(4);
			vo.setNum(nnum == null ? null : new UFDouble(nnum.toString()));
			//累计入库数量
			Object naccum = rs.getObject(5);
			vo.setNaccnum(naccum == null ? null : new UFDouble(naccum.toString()));
			//是否可入库
			String sBcheckin = rs.getString(6);
			if (sBcheckin == null || sBcheckin.trim().equalsIgnoreCase("N")) {
				vo.setBcheckin(new UFBoolean(false));
			} else
				vo.setBcheckin(new UFBoolean(true));
			//存货管理ID
			String sMangid = rs.getString(7);
			vo.setCmangid(sMangid == null ? null : sMangid.trim());
			//存货基础ID
			String sBaseid = rs.getString(8);
			vo.setCbaseid(sBaseid == null ? null : sBaseid.trim());
			//辅数量
			Object oAssisNum = rs.getObject(9);
			vo.setAssisNum(oAssisNum == null ? null : new UFDouble(oAssisNum.toString()));
			//是否改判
			String sChange = rs.getString(10);
			if (sChange == null || sChange.trim().equalsIgnoreCase("N")) {
				vo.setBchange(new UFBoolean(false));
			} else
				vo.setBchange(new UFBoolean(true));
			//换算率
			Object oConvertrate = rs.getObject(11);
			vo.setConvertrate(oConvertrate == null ? null : new UFDouble(oConvertrate.toString()));
			//存货基础ID
			String sAssistUnit = rs.getString(12);
			vo.setCassisunit(sAssistUnit == null ? null : sAssistUnit.trim());

			v.addElement(vo);
		}
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "queryAllChkInfo", new Object[] { sCarriveorder_bid });
	/*************************************************************/
	items = new CheckRsltItemVO[v.size()];
	if (v.size() > 0) {
		v.copyInto(items);
	}
	return items;
}

/**
 * @功能：实现IQueryData的方法--查询所有表头信息--czp 0530 对审批流要有影响
 * 附加条件：  czp 0530 修改
  		非作废；
  		审批通过；
  		质检启用：
  			过滤掉累计入库和到货数量相同的行；
	  		过滤掉这样的到货单行：该行存货要求质检后才能入库但该行上无质检结果
	  		过滤掉这样的到货单行：该行存货要求质检后才能入库但该行上质检结果(累计合格+累计不合格)与累计入库数量相同
	  	质检未启用：
  			过滤掉累计入库和累计合格相同的行
  			过滤掉累计合格为零的行；
 * @作者：晁志平
 * 创建日期：(2001-8-2 18:26:48)
 * @return nc.vo.pub.CircularlyAccessibleValueObject
 * @param unitCode java.lang.String
 *  modified by czp on 2003-11-06 ： 加是否可入库限制
 */
public CircularlyAccessibleValueObject[] queryAllHeadData(String whereString) throws BusinessException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "queryAllHeadData", new Object[] { whereString });
	/*************************************************************/
	Vector v = new Vector(), vRowid = new Vector();
	ArriveorderHeaderVO[] arriveorderHeaders = null;
	ArriveorderHeaderVO arriveorderHeader = null;
	Connection con = null;
	PreparedStatement stmt = null;
	ICreateCorpQueryService dmoCrtCorp = null;
	String strCorpId = null;
	boolean isQCEnable = false;
	StringBuffer sql = null;
	ResultSet rs = null;
	try {
		//质检是否启用
		String sb1 = whereString.substring(whereString.indexOf("pk_corp"));
		strCorpId = sb1.substring(sb1.indexOf("'") + 1, sb1.indexOf("'") + 5);
		if (!(strCorpId == null || strCorpId.trim().equals(""))) {
			try {
				dmoCrtCorp = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
				isQCEnable = dmoCrtCorp.isEnabled(strCorpId, "QC");
			} catch (Exception e) {
				throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000053")/*@res "查询是否质检启用时出错"*/);
			}
		}
		//isQCEnable = false;
		sql = new StringBuffer(" ");
		if (whereString != null && !whereString.trim().equals("")) {
			//处理供应商分类编码
			whereString = setCustClassCode(strCorpId, "bd_areacl.areaclcode", whereString);
			//处理存货分类编码
			whereString = setInvClassCode("bd_invcl.invclasscode", whereString);
			sql.append("select distinct po_arriveorder.pk_corp, po_arriveorder.varrordercode, po_arriveorder.dreceivedate, po_arriveorder.cvendormangid, po_arriveorder.cbiztype, po_arriveorder.ctransmodeid, po_arriveorder.cstoreorganization, po_arriveorder.creceivepsn, po_arriveorder.cdeptid, po_arriveorder.cemployeeid, po_arriveorder.caccountyear, po_arriveorder.ibillstatus, po_arriveorder.coperator, po_arriveorder.cbilltype, po_arriveorder.vmemo, po_arriveorder.vdef1, po_arriveorder.vdef2, po_arriveorder.vdef3, po_arriveorder.vdef4, po_arriveorder.vdef5, po_arriveorder.vdef6, po_arriveorder.vdef7, po_arriveorder.vdef8, po_arriveorder.vdef9, po_arriveorder.vdef10,po_arriveorder.vdef11, po_arriveorder.vdef12, po_arriveorder.vdef13, po_arriveorder.vdef14, po_arriveorder.vdef15, po_arriveorder.vdef16, po_arriveorder.vdef17, po_arriveorder.vdef18, po_arriveorder.vdef19, po_arriveorder.vdef20,po_arriveorder.cvendorbaseid, po_arriveorder.cfreecustid, po_arriveorder.dauditdate, po_arriveorder.cauditpsn, po_arriveorder.carriveorderid ,po_arriveorder.ts,po_arriveorder.bisback,po_arriveorder.vbackreasonh ");
			/**质检启用时要查询生产制造页控制信息及表体信息，用于过滤*/
			if (isQCEnable) {
				sql.append(
					",po_arriveorder_b.carriveorder_bid, po_arriveorder_b.nelignum, po_arriveorder_b.nnotelignum,po_arriveorder_b.naccumwarehousenum ");
				sql.append(",po_arriveorder_bb.bcheckin ");
			}
			sql.append(",pk_purcorp,tmaketime,taudittime,tlastmaketime from po_arriveorder ");
			//子表
			sql.append("inner join po_arriveorder_b on po_arriveorder.carriveorderid = po_arriveorder_b.carriveorderid ");
			//子子表
			if (isQCEnable)
				sql.append(
					"left outer join po_arriveorder_bb on po_arriveorder_b.carriveorder_bid = po_arriveorder_bb.carriveorder_bid ");
			//供应商
			sql.append("inner join bd_cubasdoc on po_arriveorder.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
			//地区分类
			sql.append("inner join bd_areacl on bd_areacl.pk_areacl = bd_cubasdoc.pk_areacl ");
			//存货及存货分类
			sql.append("inner join bd_invbasdoc on po_arriveorder_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
			sql.append("inner join bd_invmandoc on po_arriveorder_b.cmangid = bd_invmandoc.pk_invmandoc ");
			sql.append("inner join bd_invcl on bd_invbasdoc.pk_invcl = bd_invcl.pk_invcl ");
			//部门
			sql.append("inner join bd_deptdoc on po_arriveorder.cdeptid = bd_deptdoc.pk_deptdoc ");
			//库存组织
			sql.append("inner join bd_calbody on po_arriveorder.cstoreorganization = bd_calbody.pk_calbody ");
			//物料生产档案
			sql.append("left outer join bd_produce prod1 on prod1.pk_invmandoc = po_arriveorder_b.cmangid ");
			//仓库
			sql.append("LEFT OUTER JOIN bd_stordoc ON po_arriveorder_b.cwarehouseid = bd_stordoc.pk_stordoc ");
			//业务员
			sql.append("inner join bd_psndoc ON po_arriveorder.cemployeeid = bd_psndoc.pk_psndoc ");
			//操作员(制单人)
			sql.append("inner join sm_user ON po_arriveorder.coperator = sm_user.cuserid ");
			//操作员(审批人)
			sql.append("LEFT OUTER JOIN sm_user sm_user1 ON po_arriveorder.cauditpsn = sm_user1.cuserid ");
			//项目
			sql.append("LEFT OUTER JOIN bd_jobmngfil ON po_arriveorder_b.cprojectid = bd_jobmngfil.pk_jobmngfil ");
			sql.append("LEFT OUTER JOIN bd_jobbasfil ON bd_jobmngfil.pk_jobbasfil = bd_jobbasfil.pk_jobbasfil ");
			//项目阶段
			sql.append("LEFT OUTER JOIN bd_jobobjpha ON po_arriveorder_b.cprojectphaseid = bd_jobobjpha.pk_jobobjpha ");
			sql.append("LEFT OUTER JOIN bd_jobphase ON bd_jobphase.pk_jobphase = bd_jobobjpha.pk_jobphase ");
			//发运方式
			sql.append("LEFT OUTER JOIN bd_sendtype ON bd_sendtype.pk_sendtype = po_arriveorder.ctransmodeid ");
			//常用条件
			sql.append("where prod1.pk_calbody = po_arriveorder.cstoreorganization ");
			//对审批流的特殊处理
			String key = "carriveorderid";
			if (whereString != null && !whereString.trim().equals("") && whereString.indexOf(key) >= 0) {
				String mid = whereString;
				whereString = "";
				int iIndexCarriveorderid = mid.indexOf(key);
				whereString = mid.substring(0, iIndexCarriveorderid) + " ";
				whereString += " po_arriveorder." + key + " ";
				whereString += mid.substring(iIndexCarriveorderid + key.length(), mid.length()) + " ";
			}
			sql.append("and " + whereString + " ");
			sql.append("and po_arriveorder.dr = 0 and po_arriveorder_b.dr = 0 ");
			//正到货才可入库 czp&xy/03/09/08
			sql.append("and isnull(po_arriveorder_b.narrvnum,0) > 0 ");
			//累计入库小于到货(注意：暂未考虑容差czp&xy/03/09/08)
			sql.append("and isnull(po_arriveorder_b.narrvnum,0) - isnull(po_arriveorder_b.naccumwarehousenum,0) > 0 ");
			//质检未启用 : 过滤掉累计合格为零或累计合格数量-累计入库数量为零的行
			if (!isQCEnable) {
				sql.append("and not isnull(po_arriveorder_b.nelignum,0) = 0 ");
				sql.append("and not isnull(po_arriveorder_b.nelignum,0) - isnull(po_arriveorder_b.naccumwarehousenum,0) = 0 ");
			}
			//物料生产档案
			sql.append("and isnull(prod1.isused,'N') = 'Y' ");
			//
			sql.append("order by po_arriveorder.carriveorderid ");
		}
		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		rs = stmt.executeQuery();
		//
		int index = 0;
		while (rs.next()) {
			//
			index = 0;
			//
			arriveorderHeader = new ArriveorderHeaderVO();
			// pk_corp :
			String pk_corp = rs.getString(++index);
			arriveorderHeader.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// varrordercode :
			String varrordercode = rs.getString(++index);
			arriveorderHeader.setVarrordercode(varrordercode == null ? null : varrordercode.trim());
			// dreceivedate :
			String dreceivedate = rs.getString(++index);
			arriveorderHeader.setDreceivedate(dreceivedate == null ? null : new UFDate(dreceivedate.trim(), false));
			// cvendormangid :
			String cvendormangid = rs.getString(++index);
			arriveorderHeader.setCvendormangid(cvendormangid == null ? null : cvendormangid.trim());
			// cbiztypeid :
			String cbiztype = rs.getString(++index);
			arriveorderHeader.setCbiztype(cbiztype == null ? null : cbiztype.trim());
			// ctransmodeid :
			String ctransmodeid = rs.getString(++index);
			arriveorderHeader.setCtransmodeid(ctransmodeid == null ? null : ctransmodeid.trim());
			// cstoreorganization :
			String cstoreorganization = rs.getString(++index);
			arriveorderHeader.setCstoreorganization(cstoreorganization == null ? null : cstoreorganization.trim());
			// creceivepsn :
			String creceivepsn = rs.getString(++index);
			arriveorderHeader.setCreceivepsn(creceivepsn == null ? null : creceivepsn.trim());
			// cdeptid :
			String cdeptid = rs.getString(++index);
			arriveorderHeader.setCdeptid(cdeptid == null ? null : cdeptid.trim());
			// cemployeeid :
			String cemployeeid = rs.getString(++index);
			arriveorderHeader.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
			// caccountyear :
			String caccountyear = rs.getString(++index);
			arriveorderHeader.setCaccountyear(caccountyear == null ? null : caccountyear.trim());
			// ibillstatus :
			Integer ibillstatus = (Integer) rs.getObject(++index);
			arriveorderHeader.setIbillstatus(ibillstatus == null ? null : ibillstatus);
			// coperator :
			String coperator = rs.getString(++index);
			arriveorderHeader.setCoperator(coperator == null ? null : coperator.trim());
			// cbilltype :
			String cbilltype = rs.getString(++index);
			arriveorderHeader.setCbilltype(cbilltype == null ? null : cbilltype.trim());
			// vmemo :
			String vmemo = rs.getString(++index);
			arriveorderHeader.setVmemo(vmemo == null ? null : vmemo.trim());
			// vdef1 :
			String vdef1 = rs.getString(++index);
			arriveorderHeader.setVdef1(vdef1 == null ? null : vdef1.trim());
			// vdef2 :
			String vdef2 = rs.getString(++index);
			arriveorderHeader.setVdef2(vdef2 == null ? null : vdef2.trim());
			// vdef3 :
			String vdef3 = rs.getString(++index);
			arriveorderHeader.setVdef3(vdef3 == null ? null : vdef3.trim());
			// vdef4 :
			String vdef4 = rs.getString(++index);
			arriveorderHeader.setVdef4(vdef4 == null ? null : vdef4.trim());
			// vdef5 :
			String vdef5 = rs.getString(++index);
			arriveorderHeader.setVdef5(vdef5 == null ? null : vdef5.trim());
			// vdef6 :
			String vdef6 = rs.getString(++index);
			arriveorderHeader.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(++index);
			arriveorderHeader.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8 :
			String vdef8 = rs.getString(++index);
			arriveorderHeader.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(++index);
			arriveorderHeader.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(++index);
			arriveorderHeader.setVdef10(vdef10 == null ? null : vdef10.trim());

			// vdef11 :
			String vdef11 = rs.getString(++index);
			arriveorderHeader.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(++index);
			arriveorderHeader.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(++index);
			arriveorderHeader.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(++index);
			arriveorderHeader.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(++index);
			arriveorderHeader.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(++index);
			arriveorderHeader.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(++index);
			arriveorderHeader.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(++index);
			arriveorderHeader.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(++index);
			arriveorderHeader.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(++index);
			arriveorderHeader.setVdef20(vdef20 == null ? null : vdef20.trim());
			// cvendorbaseid :
			String cvendorbaseid = rs.getString(++index);
			arriveorderHeader.setCvendorbaseid(cvendorbaseid == null ? null : cvendorbaseid.trim());
			// cfreecustid :
			String cfreecustid = rs.getString(++index);
			arriveorderHeader.setCfreecustid(cfreecustid == null ? null : cfreecustid.trim());
			//dauditdate
			String dauditdate = rs.getString(++index);
			arriveorderHeader.setAttributeValue("dauditdate", dauditdate == null ? null : new UFDate(dauditdate, false));
			//cauditpsn
			String cauditpsn = rs.getString(++index);
			arriveorderHeader.setAttributeValue("cauditpsn", cauditpsn == null ? null : cauditpsn.trim());
			//po_arriveorder.carriveorderid
			String carriveorderid = rs.getString(++index);
			arriveorderHeader.setAttributeValue("carriveorderid", carriveorderid == null ? null : carriveorderid.trim());
			//ts
			String ts = rs.getString(++index);
			arriveorderHeader.setTs(ts);
			//bisback
			String bisback = rs.getString(++index);
			if (bisback == null || bisback.trim().equals("")) {
				arriveorderHeader.setBisback(new UFBoolean(false));
			} else {
				arriveorderHeader.setBisback(new UFBoolean(bisback.trim()));
			}
			//vbackreasonh
			String vbackreasonh = rs.getString(++index);
			arriveorderHeader.setVbackreasonh(vbackreasonh);
			///**质检启用时要查询生产制造页控制信息及表体信息，用于过滤*/
			if (isQCEnable) {
				/**子表ID*/
				String rowid = rs.getString(++index);
				arriveorderHeader.setCarriveorderrowid(rowid);
				vRowid.add(rowid);
				/**累计合格数量*/
				Object objElg = rs.getObject(++index);
				if (objElg == null || objElg.toString().trim().equals(""))
					arriveorderHeader.setElg(null);
				else
					arriveorderHeader.setElg(new UFDouble(objElg.toString().trim()));
				/**累计不合格数量*/
				Object objElgNot = rs.getObject(++index);
				if (objElgNot == null || objElgNot.toString().trim().equals(""))
					arriveorderHeader.setElgNot(null);
				else
					arriveorderHeader.setElgNot(new UFDouble(objElgNot.toString().trim()));
				/**累计入库数量*/
				Object objAccWar = rs.getObject(++index);
				if (objAccWar == null || objAccWar.toString().trim().equals(""))
					arriveorderHeader.setAccWar(null);
				else
					arriveorderHeader.setAccWar(new UFDouble(objAccWar.toString().trim()));
				//到货单表头是否可入库
				String strCheckin = rs.getString(++index);
				arriveorderHeader.setBcheckin(strCheckin == null ? new UFBoolean(true) : new UFBoolean(strCheckin.trim()));
			}
			//,pk_purcorp
			String strTmp = rs.getString(++index);
			arriveorderHeader.setPk_purcorp(strTmp);
			//,tmaketime
			strTmp = rs.getString(++index);
			arriveorderHeader.setTmaketime(PuPubVO.getUFDateTime(strTmp));
			//,taudittime
			strTmp = rs.getString(++index);
			arriveorderHeader.setTaudittime(PuPubVO.getUFDateTime(strTmp));
			//,tlastmaketime
			strTmp = rs.getString(++index);
			arriveorderHeader.setTlastmaketime(PuPubVO.getUFDateTime(strTmp));
			//
			v.addElement(arriveorderHeader);
		}
		if (rs != null)
			rs.close();
	} catch (SQLException e) {
		PubDMO.throwBusinessException(e);
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/**质检是否启用时的处理*/
	Vector vRslt = new Vector(), vTmp = new Vector();
	Hashtable hTmp = new Hashtable();
	String sHid = null;
	/**质检启用时的处理*/
	if (isQCEnable) {
		Hashtable hStoreByChk = new Hashtable();
		if (v.size() > 0) {
			/**分组*/
			for (int i = 0; i < v.size(); i++) {
				sHid = ((ArriveorderHeaderVO) v.elementAt(i)).getCarriveorderid();
				if (hTmp.containsKey(sHid)) {
					vTmp = (Vector) hTmp.get(sHid);
					vTmp.add(v.elementAt(i));
				} else {
					vTmp = new Vector();
					vTmp.add(v.elementAt(i));
					hTmp.put(sHid, vTmp);
				}
			}
			/**取是否通过质检结果入库*/
			String[] saRowid = new String[vRowid.size()];
			vRowid.copyInto(saRowid);
			hStoreByChk = getStoreByChkHash(saRowid);
		}
		/**除去元素："质检结果入库且合格和不合格均为零"*/
		/**除去元素："质检结果入库且等式：“合格+不合格-累计入库=零”成立"*/
		Enumeration keyset = hTmp.keys();
		UFBoolean isByChk = null;
		UFDouble ufdElg = null, ufdElgNot = null, ufdAccWar = null;
		int iDelCnt = 0;
		while (keyset.hasMoreElements()) {
			sHid = (String) keyset.nextElement();
			vTmp = (Vector) hTmp.get(sHid);
			iDelCnt = 0;
			for (int i = 0; i < vTmp.size(); i++) {
				isByChk = (UFBoolean) hStoreByChk.get(((ArriveorderHeaderVO) vTmp.elementAt(i)).getCarriveorderrowid());
				ufdElg = ((ArriveorderHeaderVO) vTmp.elementAt(i)).getElg();
				ufdElgNot = ((ArriveorderHeaderVO) vTmp.elementAt(i)).getElgNot();
				ufdAccWar = ((ArriveorderHeaderVO) vTmp.elementAt(i)).getAccWar();
				/**除去不合法表行："存货根据质检结果入库且不可入库"*/
				boolean bcheckin = ((ArriveorderHeaderVO) vTmp.elementAt(i)).getBcheckin().booleanValue();
				if (isByChk.booleanValue()
					&& (((ufdElg == null || ufdElg.compareTo(new UFDouble(0)) == 0)
						&& (ufdElgNot == null || ufdElgNot.compareTo(new UFDouble(0)) == 0))
						|| (ufdAccWar != null
							&& ufdAccWar.equals((ufdElg == null ? new UFDouble(0) : ufdElg).add(ufdElgNot == null ? new UFDouble(0) : ufdElgNot)))
						|| !bcheckin))
					iDelCnt += 1;
			}
			if (iDelCnt < vTmp.size())
				vRslt.addElement(vTmp.elementAt(0));
		}
		/**质检未启用时的处理*/
	} else {
		vRslt = v;
	}
	if (vRslt.size() > 0) {
		arriveorderHeaders = new ArriveorderHeaderVO[vRslt.size()];
		vRslt.copyInto(arriveorderHeaders);
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "queryAllHeadData", new Object[] { whereString });
	/*************************************************************/
	return arriveorderHeaders;
}



/**
 * 质检回写累计报检数量(适用于到货单报检未成功，质检充当报检点角色的需求)
 * 创建日期：(2002-5-29 16:07:10)
 * 2004-02-19	WYF		修改bean.remove()的处理
 */
public void rewriteAccChkNumForQc(
	String coperatorid,
	String[] carriveorderids,
	String[] carriveorder_bids,
	String[] hts,
	String[] bts,
	UFDouble[] nums)
	throws BusinessException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"rewriteChkNumForQc",
		new Object[] { carriveorderids,carriveorder_bids,hts,bts,nums});
	/*************************************************************/

	String sql = "";
	String carriveorder_bid = "";
	UFDouble naccumchecknum = new UFDouble(0);
	Connection con = null;
	PreparedStatement stmt = null;
	boolean bCanOper = false;
//	LockBOAccess m_boLock = null ;
	try {
		if (coperatorid == null || coperatorid.trim().equals(""))
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("SCMCOMMON","UPPSCMCommon-000389")/*@res "数据非法!没有操作员。"*/);
		//加锁
		//LockHome home = (LockHome) getBeanHome(LockHome.class, "nc.bs.pub.lock.LockBO");
		//m_boLock = home.create();
//		m_boLock = new LockBOAccess();
		Vector vAllId = new Vector();
		String[] saAllId = null;
		if (carriveorderids != null && carriveorderids.length > 0) {
			for (int i = 0; i < carriveorderids.length; i++) {
				if (!vAllId.contains(carriveorderids))
					vAllId.addElement(carriveorderids[i]);
			}
		}
		if (carriveorder_bids != null && carriveorder_bids.length > 0)
			for (int i = 0; i < carriveorder_bids.length; i++) {
				if (!vAllId.contains(carriveorder_bids[i]))
					vAllId.addElement(carriveorder_bids[i]);
			}
		if (vAllId.size() <= 0) {
			SCMEnv.out("没有可检验的数据");
			return;
		}
		//是否可操作
		saAllId = new String[vAllId.size()];
		vAllId.copyInto(saAllId);
//		bCanOper = m_boLock.lockPKArray(saAllId, coperatorid, "");
		bCanOper = LockTool.setLockForPks(saAllId, coperatorid);
		if (bCanOper) {
			try {
				nc.bs.pu.pub.PubDMO dmo = new nc.bs.pu.pub.PubDMO();
				dmo.checkTsNoChanged(
          ScmConst.PO_Arrive,
					carriveorderids,
					hts,
					carriveorder_bids,
					bts,
					null,
					null);
				//合法性检查通过时回写
				con = getConnection();
				sql =
					"update po_arriveorder_b set naccumchecknum = ?  where carriveorder_bid = ? ";
				stmt = prepareStatement(con,sql);
				for (int i = 0; i < carriveorder_bids.length; i++) {
					carriveorder_bid = carriveorder_bids[i];
					naccumchecknum = nums[i] == null ? new UFDouble(0) : nums[i];
					stmt.setDouble(1, naccumchecknum.doubleValue());
					stmt.setString(2, carriveorder_bid);
					executeUpdate(stmt);
				}
				executeBatch(stmt);
			} catch (Exception t) {
				PubDMO.throwBusinessException(t);
			} finally {
				//解锁
				if (bCanOper)
//					m_boLock.freePKArrayByUser(saAllId, coperatorid, "");
					LockTool.releaseLockForPks(saAllId, coperatorid);
				//if (m_boLock != null)
					//m_boLock.remove();
			}
		} else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("SCMCOMMON","UPPSCMCommon-000316")/*@res "正在进行相关操作，请稍后再试"*/);

	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
		//nc.bs.pu.pub.PubDMO.removeBean_InFinally(m_boLock) ;
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"rewriteChkNumForQc",
		new Object[] { carriveorderids,carriveorder_bids,hts,bts,nums});
	/*************************************************************/

}

/**
 * 质量检验未启用时回写累计报检数量、累计合格数量、累计不合格数量
 * 创建日期：(2001-10-23 19:35:10)
 * @param h java.util.Hashtable
 */
public void rewriteNaccumchecknumMy(
	String[] carriveorder_bids,
	ArrayList aryNum,
	String pk_corp)
	throws SQLException, Exception {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"rewriteNaccumchecknumMy",
		new Object[] { carriveorder_bids, aryNum, pk_corp });
	/*************************************************************/

	String sql = "";
	String carriveorder_bid = "";
	UFDouble nelignum = new UFDouble(0);
	UFDouble nnotelignum = new UFDouble(0);
	UFDouble naccumchecknum = new UFDouble(0);
	UFDouble glnum = new UFDouble(0);
	String jyjg = "";
	Connection con = null;
	PreparedStatement stmt = null;
//	UFDouble[] arrNums = null;eric
	Object[] arrNums = null;
	try {
		con = getConnection();

		//更新子表
		sql =
			"update po_arriveorder_b set nelignum = ?, nnotelignum = ?, naccumchecknum = ? ,jyjg = ? ,glnum=?  where carriveorder_bid = ? ";
		stmt = prepareStatement(con,sql);
		for (int i = 0; i < carriveorder_bids.length; i++) {
			carriveorder_bid = carriveorder_bids[i];
			arrNums = (Object[])aryNum.get(i);
			nelignum = arrNums[0] == null ? new UFDouble(0) : new UFDouble(arrNums[0].toString());
			nnotelignum = arrNums[1] == null ? new UFDouble(0) : new UFDouble(arrNums[1].toString());
			naccumchecknum = arrNums[2] == null ? new UFDouble(0) : new UFDouble(arrNums[2].toString());
			jyjg = arrNums[3] == null ? "":arrNums[3].toString();
			glnum =  arrNums[4] == null ? new UFDouble(0) : new UFDouble(arrNums[4].toString());
			stmt.setDouble(1, nelignum.doubleValue());
			stmt.setDouble(2, nnotelignum.doubleValue());
			stmt.setDouble(3, naccumchecknum.doubleValue());
			stmt.setString(4,jyjg);
			stmt.setDouble(5, glnum.doubleValue());
			stmt.setString(6, carriveorder_bid);
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	} catch (SQLException e) {
		throw e;
	} catch (Exception e) {
		throw e;
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"rewriteNaccumchecknumMy",
		new Object[] { carriveorder_bids, aryNum, pk_corp });
	/*************************************************************/
}

/**
 * 到货检验启用时回写累计报检数量:累计报检数量=到货数量
 * 创建日期：(2002-5-9 13:35:10)
 */
public void rewriteNaccumchecknumMyQc(
	String[] carriveorder_bids,
	ArrayList aryNum)
	throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"rewriteNaccumchecknumMyQc",
		new Object[] { carriveorder_bids, aryNum });
	/*************************************************************/

	String sql = "";
	String carriveorder_bid = "";
//	Vector v = new Vector();
//	UFDouble nnotelignum = new UFDouble(0);
	UFDouble naccumchecknum = new UFDouble(0);
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		UFDouble[] arrNums = null;
		sql =
			"update po_arriveorder_b set naccumchecknum = ?  where carriveorder_bid = ? ";
		stmt = prepareStatement(con,sql);
		for (int i = 0; i < carriveorder_bids.length; i++) {
			carriveorder_bid = carriveorder_bids[i];
			arrNums = (UFDouble[]) aryNum.get(i);
			naccumchecknum = arrNums[2] == null ? new UFDouble(0) : arrNums[2];
			stmt.setDouble(1, naccumchecknum.doubleValue());
			stmt.setString(2, carriveorder_bid);

			executeUpdate(stmt);
		}
		executeBatch(stmt);
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"rewriteNaccumchecknumMyQc",
		new Object[] { carriveorder_bids, aryNum });
	/*************************************************************/
}

/**
 * 更新累计入库数量 （内部调用库存的接口,回写上层、子表及子子表）
 * 参数：
		 String   carriveorder_bid  到货单行ID
		 UFDouble newnum            新累计入库数量
		 String   ccheckid          质量等级ID
 * 注意： 1、newnum = null 或 newnum.toString().equal("") 情况均置参数累计入库数量为零
		  2、回写上层部分放在 ToICDMO.setInNum() 来做
		  3.如果传过来的质量检验ID+到货单行ID查询不到指定的到货单子子表行，
		    则认为是采购入库单自由项质量检验状态设置不匹配(还有一种情况是子子表行记录被删除)
   算法：
		约定：
		1.	如果质量等级不为空，则回写子子表、子表累计入库数量；
		2.	如果质量等级为空，质量管理没有启用，则回写到货单行累计入库数量，合法性规则：累计入库数量<=合格数量
		3.	如果质量等级为空，质量管理启用，则为"不按质检结果入库"的存货，回写到货单行累计入库数量，合法性规则：累计入库数量<=到货数量
 * 创建日期：(2001-10-20 14:32:01)
 * @author：Administrator
 */
public void rewriteNaccumwarehousenumByLineId(
	String carriveorder_bid,
	UFDouble newnum,
	String ccheckid)
	throws SQLException, BusinessException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"rewriteNaccumwarehousenumByLineId",
		new Object[] { carriveorder_bid, newnum, ccheckid });
	/*************************************************************/

	if (carriveorder_bid == null)
		return;
	if (carriveorder_bid.trim().equals(""))
		return;
	//if (!isExistRecord(carriveorder_bid))
	//return;
	if (newnum == null)
		newnum = new UFDouble(0);
	if (newnum.toString().trim().equals(""))
		newnum = new UFDouble(0);
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	PreparedStatement stmt1 = null;
	String sql1 = null;
	boolean isQCEnable = false;
	boolean isStockByCheck = false, isChkFree = false;
	String strCorpId = null;
	ICreateCorpQueryService dmoCrtCorp = null;
	try {
		con = getConnection();
		//质检是否启用
		String sql = "select pk_corp from po_arriveorder_b where carriveorder_bid = ? ";
		stmt = con.prepareStatement(sql);
		stmt.setString(1, carriveorder_bid);
		rs = stmt.executeQuery();
		if (rs.next())
			strCorpId = rs.getString(1);
		if (!(strCorpId == null || strCorpId.trim().equals(""))) {
			dmoCrtCorp = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
			isQCEnable = dmoCrtCorp.isEnabled(strCorpId, "QC");
		}
		rs.close();
		stmt.close();
		//存货是否根据质检结果入库
		Hashtable hTmp = getStoreByChkHash(new String[] { carriveorder_bid });
		isStockByCheck = ((UFBoolean) hTmp.get(carriveorder_bid)).booleanValue();
		//存货是否免检
		String pk_cumandoc = null,
			pk_invmandoc = null,
			pk_corp = null,
			pk_calbody = null;
		sql = "select h.cvendormangid,b.cmangid,h.pk_corp,h.cstoreorganization ";
		sql += "from po_arriveorder_b b,po_arriveorder h ";
		sql += "where b.carriveorderid = h.carriveorderid ";
		sql += "and carriveorder_bid = ? ";
		stmt = con.prepareStatement(sql);
		stmt.setString(1, carriveorder_bid);
		rs = stmt.executeQuery();
		if (rs.next()) {
			pk_cumandoc = rs.getString(1);
			pk_invmandoc = rs.getString(2);
			pk_corp = rs.getString(3);
			pk_calbody = rs.getString(4);
		} else {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000054")/*@res "查询数据错：用到货单子表ID查询不到公司、供应商、库存组织、存货管理ID信息，导致无法判断存货是否免检"*/);
		}
		rs.close();
		stmt.close();
		isChkFree =
			getIsCheckMy(pk_cumandoc, pk_invmandoc, pk_corp, pk_calbody).booleanValue();

		//传入检验状态ID不为空，但查询不到子子表内容且存货要根据质检结果入库，则抛异常
		if (ccheckid != null && !ccheckid.trim().equals("")) {
			//如果免检，则直接忽略质检ID
			if (isChkFree) {
				ccheckid = null;
			} else {
				sql = "select carriveorder_bid from po_arriveorder_bb ";
				sql += "where carriveorder_bid = ? and cqualitylevelid = ? ";
				stmt = con.prepareStatement(sql);
				stmt.setString(1, carriveorder_bid);
				stmt.setString(2, ccheckid);
				rs = stmt.executeQuery();
				if (!rs.next()) {
					//无子子表记录且要通过质检结果入库时抛异常
					if (isStockByCheck) {
						throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000055")/*@res "业务异常！\n入库单的自由项存在不匹配的质量等级设置"*/);
					} else {
						//无子子表记录，且不必通过子子表入库时不回写子子表，下面的回写全法性校验也不用子子表
						ccheckid = null;
					}
				}
				rs.close();
				stmt.close();
			}
		}
		//回写到货单数据
		UFDouble ling = new UFDouble(0);
		UFDouble oldelgnum_b = ling;
		UFDouble oldarrnum_b = ling;
		UFDouble oldaccnum_b = ling;
		UFDouble oldarrnum_bb = ling;
		UFDouble oldaccnum_bb = ling;
		UFDouble maxnum_b = ling;
		UFDouble maxnum_bb = ling;
		UFDouble newnum_b = ling;
		UFDouble newnum_bb = ling;
		//如果质量等级不为空
		if (ccheckid != null && !ccheckid.trim().equals("")) {
			//新子表数量
			sql =
				"select isnull(naccumwarehousenum,0), isnull(narrvnum,0) from po_arriveorder_b ";
			sql += "where carriveorder_bid = ? ";
			stmt = con.prepareStatement(sql);
			stmt.setString(1, carriveorder_bid);
			rs = stmt.executeQuery();
			if (rs.next()) {
				Object bnaccold_b = rs.getObject(1);
				oldaccnum_b =
					((bnaccold_b == null || bnaccold_b.toString().trim().equals(""))
						? new UFDouble(0)
						: new UFDouble(bnaccold_b.toString().trim()));
				Object boldarrnum_b = rs.getObject(2);
				oldarrnum_b =
					((boldarrnum_b == null || boldarrnum_b.toString().trim().equals(""))
						? new UFDouble(0)
						: new UFDouble(boldarrnum_b.toString().trim()));
			} else {
				oldaccnum_b = new UFDouble(0);
				oldarrnum_b = new UFDouble(0);
			}
			//到货单子表行数量即为最大到货数量
			rs.close();
			stmt.close();
			//新子子表数量
			sql = "select isnull(naccumnum,0), isnull(nnum,0) from po_arriveorder_bb ";
			sql += "where carriveorder_bid = ? and cqualitylevelid = ? ";
			stmt = con.prepareStatement(sql);
			stmt.setString(1, carriveorder_bid);
			stmt.setString(2, ccheckid);
			rs = stmt.executeQuery();
			if (rs.next()) {
				Object bnaccold_bb = rs.getObject(1);
				oldaccnum_bb =
					((bnaccold_bb == null || bnaccold_bb.toString().trim().equals(""))
						? new UFDouble(0)
						: new UFDouble(bnaccold_bb.toString().trim()));
				Object boldarrnum_bb = rs.getObject(2);
				oldarrnum_bb =
					((boldarrnum_bb == null || boldarrnum_bb.toString().trim().equals(""))
						? new UFDouble(0)
						: new UFDouble(boldarrnum_bb.toString().trim()));
			} else {
				oldaccnum_bb = new UFDouble(0);
				oldarrnum_bb = new UFDouble(0);
			}
			//到货单子子表行数量即为最大到货数量
			maxnum_bb = oldarrnum_bb;
			rs.close();
			stmt.close();
			//更新到货单子表
			newnum_b = newnum.add(oldaccnum_b);
			sql = "update po_arriveorder_b set naccumwarehousenum = ? ";
			sql += "where carriveorder_bid = ? ";
			stmt = con.prepareStatement(sql);
			stmt.setDouble(1, newnum_b.doubleValue());
			stmt.setString(2, carriveorder_bid);
			//更新到货单子子表SQL语句
			newnum_bb = newnum.add(oldaccnum_bb);
			sql1 = "update po_arriveorder_bb set naccumnum = ? ";
			sql1 += "where carriveorder_bid = ? and cqualitylevelid = ? ";
			stmt1 = con.prepareStatement(sql1);
			stmt1.setDouble(1, newnum_bb.doubleValue());
			stmt1.setString(2, carriveorder_bid);
			stmt1.setString(3, ccheckid);
			//到货数量大于等于零
			if (maxnum_bb.compareTo(new UFDouble(0)) >= 0) {
				if (maxnum_bb.compareTo(newnum_bb) >= 0) {
					stmt1.executeUpdate();
					stmt.executeUpdate();
				} else {
					String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
					throw new BusinessException(
						nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000200",null,value)/*@res "业务异常!\n到货数量："+ oldarrnum_bb
							+ ";\n"
							+ "累计入库数量："
							+ oldaccnum_bb
							+ ";\n"
							+ " 可入库数量：[0,"
							+ maxnum_bb.sub(oldaccnum_bb)
							+ "];\n"
							+ "本次入库："
							+ newnum
							+ ".\n"*/
							);
				}
			}
			//到货数量小于零
			else {
				if (maxnum_bb.compareTo(newnum_bb) <= 0) {
					stmt1.executeUpdate();
					stmt.executeUpdate();
				} else {
					String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
					
					throw new BusinessException(
						nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000200",null,value)/*@res "业务异常!\n到货数量："+ oldarrnum_bb
							+ ";\n"
							+ "累计入库数量："
							+ oldaccnum_bb
							+ ";\n"
							+ " 可入库数量：["
							+ maxnum_bb.sub(oldaccnum_bb)
							+ ",0];\n"
							+ "本次入库："
							+ newnum
							+ ".\n"*/
							);
				}
			}
		}
		//如果质量等级为空
		else {
			//默认可入库下限
			UFDouble ufdLowest = null;
			sql =
				"select isnull(naccumwarehousenum,0), isnull(nelignum,0), isnull(narrvnum,0) from po_arriveorder_b ";
			sql += "where carriveorder_bid = ? ";

			stmt = con.prepareStatement(sql);
			stmt.setString(1, carriveorder_bid);
			rs = stmt.executeQuery();
			if (rs.next()) {
				BigDecimal bnaccold = rs.getBigDecimal(1);
				oldaccnum_b = (bnaccold == null ? new UFDouble(0) : new UFDouble(bnaccold));
				BigDecimal bnelignum = rs.getBigDecimal(2);
				oldelgnum_b = (bnelignum == null ? new UFDouble(0) : new UFDouble(bnelignum));
				BigDecimal bnarrold = rs.getBigDecimal(3);
				oldarrnum_b = (bnarrold == null ? new UFDouble(0) : new UFDouble(bnarrold));
			} else {
				oldaccnum_b = new UFDouble(0);
				oldelgnum_b = new UFDouble(0);
				oldarrnum_b = new UFDouble(0);
			}
			//默认最大可入库数量
			maxnum_b = oldelgnum_b;
			rs.close();
			stmt.close();
			//质检启用且不根据质检结果入库时，最大可入库数量即合法性校验时用“到货数量”
			if (isQCEnable && !isStockByCheck) {
				maxnum_b = oldarrnum_b;
			}
			newnum_b = newnum.add(oldaccnum_b);
			sql = "update po_arriveorder_b set naccumwarehousenum = ? ";
			sql += "where carriveorder_bid = ? ";
			stmt = con.prepareStatement(sql);
			stmt.setDouble(1, newnum_b.doubleValue());
			stmt.setString(2, carriveorder_bid);
			//累计入库下限
			ufdLowest = oldaccnum_b;
			if (ufdLowest == null)
				ufdLowest = new UFDouble(0);
			//求反
			ufdLowest = ufdLowest.multiply(-1);
			//到货数量大于等于零
			if (maxnum_b.compareTo(new UFDouble(0)) >= 0) {
				//要求最后的累计入库数量为非负
				if (newnum_b != null && newnum_b.doubleValue() < 0) {
					String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
					throw new BusinessException(
						nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000200",null,value)/*@res "业务异常!\n到货数量："+ oldarrnum_b
							+ ";\n"
							+ "累计入库数量："
							+ oldaccnum_b
							+ ";\n"
							+ "可入库数量：["
							+ ufdLowest.toString()
							+ ","
							+ maxnum_b.sub(oldaccnum_b)
							+ "];\n"
							+ "本次入库："
							+ newnum
							+ ".\n"*/
							);
				}
				//要求“最大可入库数量>=本次入库量”
				if (maxnum_b.compareTo(newnum_b) >= 0) {
					stmt.executeUpdate();
				} else {
					String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
					
					throw new BusinessException(
						nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000200",null,value)/*@res "业务异常!\n到货数量："+ oldarrnum_b
							+ ";\n"
							+ "累计入库数量："
							+ oldaccnum_b
							+ ";\n"
							+ "可入库数量：["
							+ ufdLowest.toString()
							+ ","
							+ maxnum_b.sub(oldaccnum_b)
							+ "];\n"
							+ "本次入库："
							+ newnum
							+ ".\n"*/
							);
				}
			}
			//到货数量小于零
			else {
				//要求最后的累计入库数量为非负
				if (newnum_b != null && newnum_b.doubleValue() > 0) {
					String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
					
					throw new BusinessException(
						nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000200",null,value)/*@res "业务异常!\n到货数量："+ oldarrnum_b
							+ ";\n"
							+ "累计入库数量："
							+ oldaccnum_b
							+ ";\n"
							+ "可入库数量：["
							+ maxnum_b.sub(oldaccnum_b)
							+ ","
							+ ufdLowest.toString()
							+ "];\n"
							+ "本次入库："
							+ newnum
							+ ".\n"*/
							);
				}
				//要求“最大可入库数量<=本次入库量”
				if (maxnum_b.compareTo(newnum_b) <= 0) {
					stmt.executeUpdate();
				} else {
					String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
					
					throw new BusinessException(
						nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000200",null,value)/*@res "业务异常!\n到货数量："+ oldarrnum_b
							+ ";\n"
							+ "累计入库数量："
							+ oldaccnum_b
							+ ";\n"
							+ "可入库数量：["
							+ maxnum_b.sub(oldaccnum_b)
							+ ","
							+ ufdLowest.toString()
							+ "];\n"
							+ "本次入库："
							+ newnum
							+ ".\n"*/
							);
				}
			}
		}
	} catch (BusinessException b) {
		throw b;
	} catch (Exception e) {
		reportException(e);
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000056")/*@res "采购入库单回写累计入库数量时出错"*/);
	} finally {
		//释放资源
		if (stmt != null) {
			stmt.close();
		}
		if (stmt1 != null) {
			stmt1.close();
		}
		if (con != null) {
			con.close();
		}
	}
}

/**
 * 质检调用的方法：按质量等级回写子子表(insert)同时回写累计合格数量和累计不合格数量(update)
 * 创建日期：(2002-5-8 17:04:44)
 * @param vos QcresultVO[]
 */
//public void rewriteQualityCheck(QcresultVO[] vos) throws Exception, SQLException, BusinessException {
public void rewriteQualityCheck(CircularlyAccessibleValueObject[] qcVos) throws BusinessException {
	//没有数据直接返回
	if (qcVos == null || qcVos.length <= 0)
		return;
	QcresultVO[] vos = (QcresultVO[])qcVos;
	//更新到货单子子表及子表
	Connection con = null;
	PreparedStatement stmt = null;
	String sql = null;
	try {
		//查询是否已经存在相同主键的记录，控制 carriveorder_bid + cqualitylevelid 唯一
		if (isExistBBRec(vos))
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000057")/*@res "业务异常：\n到货单子子表中要插入记录已经存在"*/);
		con = getConnection();
		Hashtable t = new Hashtable();
		String csourcebillrowid[] = vos[0].getCsourcebillrowids();
		UFBoolean b[] = vos[0].getIseligs();
		UFDouble dd[] = vos[0].getNnums();
		for(int i = 0; i < csourcebillrowid.length; i++){
			if(t.get(csourcebillrowid[i]) != null){
				UFDouble d[] = (UFDouble[]) t.get(csourcebillrowid[i]);
				if(b[i].booleanValue() && d[0] != null) d[0] = d[0].add(dd[i]);
				if(!b[i].booleanValue() && d[1] != null) d[1] = d[1].add(dd[i]);
				t.put(csourcebillrowid[i], d);
			}else{
				if(b[i].booleanValue()){
					t.put(csourcebillrowid[i], new UFDouble[]{dd[i],new UFDouble(0)});
				}else{
					t.put(csourcebillrowid[i], new UFDouble[]{new UFDouble(0),dd[i]});
				}
			}
		}

		//更新子子表
		sql =
			"insert into po_arriveorder_bb(carriveorder_bid, pk_corp, cqualitylevelid, nnum ,cdealid,bcheckin,cmangid,cbaseid,nassistnum,cassistunit,bchange,nconvertrate) values(?,?,?,?,?,?,?,?,?,?,?,?) ";
		stmt = prepareStatement(con,sql);
		//是否可入库
		UFBoolean[] ufbIsstroe = null;
		for (int i = 0; i < vos.length; i++) {
			if (vos[i].getCsourcebillrowid() == null
				|| vos[i].getCsourcebillrowid().trim().equals(""))
				continue;
			if (vos[i].getCmodeids() == null || vos[i].getCmodeids().length <= 0)
				continue;
			ufbIsstroe = vos[i].gebcheckins();
			for (int j = 0; j < vos[i].getCmodeids().length; j++) {
				stmt.setString(1, vos[i].getCsourcebillrowids()[j]);
				if (vos[i].getPk_corp() == null)
					stmt.setNull(2, Types.CHAR);
				else
					stmt.setString(2, vos[i].getPk_corp());
				if (vos[i].getCmodeids()[j] == null
					|| vos[i].getCmodeids()[j].trim().equals(""))
					continue;
				stmt.setString(3, vos[i].getCmodeids()[j]);
				if (vos[i].getNnums()[j] == null)
					stmt.setNull(4, Types.INTEGER);
				else
					stmt.setDouble(4, vos[i].getNnums()[j].doubleValue());
				if (vos[i].getCdealids()[j] == null)
					stmt.setNull(5, Types.CHAR);
				else
					stmt.setString(5, vos[i].getCdealids()[j]);
				if(ufbIsstroe[j] == null)
					stmt.setNull(6, Types.CHAR);
				else
					stmt.setString(6, ufbIsstroe[j].toString());
				//存货管理ID
				if(vos[i].getCchgmangids()[j] == null)
					stmt.setNull(7, Types.CHAR);
				else
					stmt.setString(7, vos[i].getCchgmangids()[j]);
				//存货基础ID
				if(vos[i].getCchgbaseids()[j] == null)
					stmt.setNull(8, Types.CHAR);
				else
					stmt.setString(8, vos[i].getCchgbaseids()[j]);
				//辅数量
				if(vos[i].getNassistnums()[j] == null)
					stmt.setNull(9, Types.CHAR);
				else
					stmt.setDouble(9, vos[i].getNassistnums()[j].doubleValue());
				//辅单位
				if(vos[i].getCchgassistunitids()[j] == null)
					stmt.setNull(10, Types.CHAR);
				else
					stmt.setString(10, vos[i].getCchgassistunitids()[j]);
				//是否改判
				if(vos[i].getBchanges()[j] == null)
					stmt.setNull(11, Types.CHAR);
				else
					stmt.setString(11, vos[i].getBchanges()[j].toString());
				//换算率
				if(vos[i].getNexchangeratebs()[j] == null)
					stmt.setNull(12, Types.CHAR);
				else
					stmt.setDouble(12, vos[i].getNexchangeratebs()[j].doubleValue());
				executeUpdate(stmt);
			}
		}
		executeBatch(stmt);
		//更新子表
		sql =
			"update po_arriveorder_b set nelignum = ? ,nnotelignum = ?  where carriveorder_bid = ? ";
		stmt = prepareStatement(con,sql);
		for (int i = 0; i < csourcebillrowid.length; i++) {
			if(t.get(csourcebillrowid[i]) != null){
				UFDouble d[] = (UFDouble[]) t.get(csourcebillrowid[i]);
				if (d[0] == null)
					stmt.setNull(1, Types.INTEGER);
				else
					stmt.setDouble(1, d[0].doubleValue());
				if (d[1] == null)
					stmt.setNull(2, Types.INTEGER);
				else
					stmt.setDouble(2, d[1].doubleValue());
				stmt.setString(3, csourcebillrowid[i]);
				executeUpdate(stmt);
			}
		}
		executeBatch(stmt);
	} catch (Exception e) {
		PubDMO.throwBusinessException(e);
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {

		}
	}
}

/**
 * 作者：李金巧
 * 功能：为实现到货单推式生成入库单，做VO转换前的分单
 * 参数：vos   需要分单的采购到货单数组
 * 返回：分单完成后的采购到货单数组
 * 例外：
 * 日期：(2002-4-2 9:57:36)
 * 修改日期，修改人，修改原因，注释标志：
 * 2002-06-04	WYF	修改一个数组越界错误
 * 2002-09-23	CZP	过滤负到货单（2.30需求：负到货单不再生成入库）
 */
public ArriveorderVO[] splitVOForIC(ArriveorderVO[] vos)
	throws BusinessException {

	String		sMethodName = "nc.bs.rc.receive.ArriveorderDMO.splitVOForIC(ArriveorderVO [])" ;
	//过滤负到货单
	vos = splitVOForIC_filterNeg(vos);
	//
	if (vos == null || vos.length <= 0)
		return null;
	ArriveorderVO[] resultVOs = null;
	SysInitDMO sysDmo = null;
	nc.bs.pu.pub.PubDMO pubDmo = null;
	String pk_corp = (String) vos[0].getParentVO().getAttributeValue("pk_purcorp");
	try {
		sysDmo = new SysInitDMO();
		pubDmo = new nc.bs.pu.pub.PubDMO();
		//默认分单方式为“仓库”
		String splitMode = "仓库";

		//取得根据到货单推式生成入库单的分单默认参数
		try {
			SysInitVO initVO = sysDmo.queryByParaCode(pk_corp, "IC035");
			if (initVO != null)
				splitMode = initVO.getValue().trim();
		} catch (Exception e) {
			throw e;
		}

		//如果到货单行“仓库”字段为空，取存货默认仓库
		Hashtable table = null;
		Vector vCbaseids = new Vector();
		ArriveorderItemVO[] items = null;
		String[] cBaseids = null;
		//取的没有对应仓库的存货管理ID集合
		for (int i = 0; i < vos.length; i++) {
			items = (ArriveorderItemVO[]) vos[i].getChildrenVO();
			for (int j = 0; j < items.length; j++) {
				if (items[j].getCwarehouseid() == null
					|| items[j].getCwarehouseid().trim().equals("")) {
					//if (!vCbaseids.contains(items[i].getCbaseid())) {
					if (!vCbaseids.contains(items[j].getCbaseid())) {
						vCbaseids.addElement(items[j].getCbaseid());
					}
				}
			}
		}
		//取得存货的默认仓库
		if (vCbaseids != null && vCbaseids.size() > 0) {
			cBaseids = new String[vCbaseids.size()];
			vCbaseids.copyInto(cBaseids);
			table =
				pubDmo.fetchArrayValue("bd_produce", "pk_stordoc", "pk_invbasdoc", cBaseids);
			if (table == null || table.size() <= 0)
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000059")/*@res "没有找到存货相应的仓库，无法生成采购入库单！"*/);
		}

		if (table != null && table.size() > 0) {
			for (int i = 0; i < vos.length; i++) {
				items = (ArriveorderItemVO[]) vos[i].getChildrenVO();
				for (int j = 0; j < items.length; j++) {
					if (items[j].getCwarehouseid() == null
						|| items[j].getCwarehouseid().trim() == "") {
						if (table.containsKey(items[j].getCbaseid()))
							items[j].setCwarehouseid((String) table.get(items[j].getCbaseid()));
						else
							throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000059")/*@res "没有找到存货相应的仓库，无法生成采购入库单！"*/);
					}
				}
			}
		}

		//按仓库分单
		if (splitMode.equalsIgnoreCase("仓库")) {
			resultVOs =
				(ArriveorderVO[]) nc.vo.scm.pub.vosplit.SplitBillVOs.getSplitVOs(
					"nc.vo.rc.receive.ArriveorderVO",
					"nc.vo.rc.receive.ArriveorderHeaderVO",
					"nc.vo.rc.receive.ArriveorderItemVO",
					vos,
					null,
					new String[] { "cwarehouseid" });
		}

		//按仓库+保管员分单
		else if (splitMode.equalsIgnoreCase("仓库+保管员")) {
			//
			String[] cInventoryids = null;
			String[] cWarehouseids = null;
			Vector vInvids = new Vector();
			Vector vWarehouseids = new Vector();
			String cinvid = null;
			String cwarehouseid = null;
			Vector vInvAndStores = new Vector();
			for (int i = 0; i < vos.length; i++) {
				items = (ArriveorderItemVO[]) vos[i].getChildrenVO();
				for (int j = 0; j < items.length; j++) {
					cinvid = items[j].getCmangid();
					cwarehouseid = items[j].getCwarehouseid();
					if (items[j].getCwarehouseid() != null
						&& items[j].getCwarehouseid().trim() != ""
						&& !vInvAndStores.contains(cinvid + cWarehouseids)) {
						vInvids.addElement(cinvid == null ? "" : cinvid);
						vWarehouseids.addElement(cWarehouseids);
					}
				}
			}
			if (vInvAndStores.size() > 0) {
				cInventoryids = new String[vInvids.size()];
				vInvids.copyInto(cInventoryids);
				cWarehouseids = new String[vWarehouseids.size()];
				vWarehouseids.copyInto(cWarehouseids);
			}
			//调用库存管理接口取得库管员
//			nc.bs.ic.ic004.StoreadminDMO storedmo = new nc.bs.ic.ic004.StoreadminDMO();
			//table = storedmo.get(pk_corp, null, cWarehouseids,cInventoryids);
//			IICToPU_StoreadminDMO storedmo =  (IICToPU_StoreadminDMO)new InterServBO().getInterInstance(ProductCode.PROD_IC,InterRegister.IC0009);
			IICToPU_StoreadminDMO storedmo =  (IICToPU_StoreadminDMO) NCLocator.getInstance().lookup(IICToPU_StoreadminDMO.class.getName());
			//库管员赋值
			for (int i = 0; i < vos.length; i++) {
				items = (ArriveorderItemVO[]) vos[i].getChildrenVO();
				for (int j = 0; j < items.length; j++) {
					cinvid = items[j].getCmangid();
					cwarehouseid = items[j].getCwarehouseid();
					if (items[j].getCwarehouseid() != null
						&& items[j].getCwarehouseid().trim() != "") {
						items[j].setcStoreAdmin(
							storedmo.getWHManager(pk_corp, null, cwarehouseid, cinvid));

					}
				}
			}

			//分单
			resultVOs =
				(ArriveorderVO[]) nc.vo.scm.pub.vosplit.SplitBillVOs.getSplitVOs(
					"nc.vo.rc.receive.ArriveorderVO",
					"nc.vo.rc.receive.ArriveorderHeaderVO",
					"nc.vo.rc.receive.ArriveorderItemVO",
					vos,
					null,
					new String[] { "cwarehouseid", "cstoreadmin" });
		}

		//按仓库+存货大类分单
		else if (splitMode.equalsIgnoreCase("仓库+存货分类末级")) {

			Vector vBaseids = new Vector();
			String cinvid = null;
			String[] cinvids = null;
			//取得存货对应的存货大类
			for (int i = 0; i < vos.length; i++) {
				items = (ArriveorderItemVO[]) vos[i].getChildrenVO();
				for (int j = 0; j < items.length; j++) {
					cinvid = items[j].getCbaseid();
					if (!vBaseids.contains(cinvid))
						vBaseids.addElement(cinvid);
				}
			}
			if (vBaseids.size() > 0) {
				cinvids = new String[vBaseids.size()];
				vBaseids.copyInto(cinvids);

				table =
					pubDmo.fetchArrayValue("bd_invbasdoc", "pk_invcl", "pk_invbasdoc", cinvids);

				//存货大类赋值
				for (int i = 0; i < vos.length; i++) {
					items = (ArriveorderItemVO[]) vos[i].getChildrenVO();
					for (int j = 0; j < items.length; j++) {
						cinvid = items[j].getCbaseid();
						if (vBaseids.contains(cinvid))
							items[j].setcInvSort((String) table.get(cinvid));
					}
				}
			}
			resultVOs =
				(ArriveorderVO[]) nc.vo.scm.pub.vosplit.SplitBillVOs.getSplitVOs(
					"nc.vo.rc.receive.ArriveorderVO",
					"nc.vo.rc.receive.ArriveorderHeaderVO",
					"nc.vo.rc.receive.ArriveorderItemVO",
					vos,
					null,
					new String[] { "cwarehouseid", "cinvsort" });
		}

		//按仓库+单品分单
		else if (splitMode.equalsIgnoreCase("仓库+按单品")) {
			resultVOs =
				(ArriveorderVO[]) nc.vo.scm.pub.vosplit.SplitBillVOs.getSplitVOs(
					"nc.vo.rc.receive.ArriveorderVO",
					"nc.vo.rc.receive.ArriveorderHeaderVO",
					"nc.vo.rc.receive.ArriveorderItemVO",
					vos,
					null,
					new String[] { "cwarehouseid", "cmangid" });
		}

		//不存在的分单方式
		else {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000060")/*@res "采购到货单推式生成入库单，分单方式设置错误！"*/);
		}
	} catch (Exception e) {
		reportException(e) ;
		nc.bs.pu.pub.PubDMO.throwBusinessException(sMethodName,e) ;
	}
	return resultVOs;
}
/**
 * 用一个VO对象的属性更新数据库中的值。
 *
 * 创建日期：(2001-6-8)
 * @param arriveorderHeader nc.vo.rc.receive.ArriveorderHeaderVO
 * @exception java.sql.SQLException 异常说明。
 */
public void updateHeaderMy(ArriveorderHeaderVO arriveorderHeader)
	throws java.sql.SQLException {

	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"updateHeader",
		new Object[] { arriveorderHeader });
	/*************************************************************/
	Connection con = null;
	PreparedStatement stmt = null;

	String sql = "select bd_cubasdoc.pk_cubasdoc from bd_cubasdoc, bd_cumandoc ";
	sql += "where bd_cumandoc.pk_cubasdoc = bd_cubasdoc.pk_cubasdoc ";
	sql += "and bd_cumandoc.pk_cumandoc = ? ";

	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);

		//如果管理档案为空则基本档案也应为空
		if (arriveorderHeader.getCvendormangid() == null
			|| arriveorderHeader.getCvendormangid().trim().equals("")) {
			arriveorderHeader.setCvendorbaseid(null);
		} else {
			stmt.setString(1, arriveorderHeader.getCvendormangid());
			ResultSet rs = stmt.executeQuery();
			while (rs.next()) {
				String cvendorbaseid = rs.getString(1);
				if (cvendorbaseid != null && !cvendorbaseid.trim().equals(""))
					arriveorderHeader.setCvendorbaseid(cvendorbaseid);
			}
			if (rs != null) {
				rs.close();
			}
		}
		sql =
			"update po_arriveorder set pk_corp = ?, varrordercode = ?, dreceivedate = ?, cvendormangid = ?, cbiztype = ?, ctransmodeid = ?, cstoreorganization = ?, creceivepsn = ?, cdeptid = ?, cemployeeid = ?, caccountyear = ?, ibillstatus = ?, coperator = ?, cbilltype = ?, vmemo = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vdef7 = ?, vdef8 = ?, vdef9 = ?, vdef10 = ?,vdef11 = ?, vdef12 = ?, vdef13 = ?, vdef14 = ?, vdef15 = ?, vdef16 = ?, vdef17 = ?, vdef18 = ?, vdef19 = ?, vdef20 = ?,";
		sql += " pk_defdoc1 = ?, pk_defdoc2 = ?, pk_defdoc3 = ?, pk_defdoc4 = ?, pk_defdoc5 = ?, pk_defdoc6 = ?, pk_defdoc7 = ?, pk_defdoc8 = ?, pk_defdoc9 = ?, pk_defdoc10 = ?,pk_defdoc11 = ?, pk_defdoc12 = ?, pk_defdoc13 = ?, pk_defdoc14 = ?, pk_defdoc15 = ?, pk_defdoc16 = ?, pk_defdoc17 = ?, pk_defdoc18 = ?, pk_defdoc19 = ?, pk_defdoc20 = ?,cvendorbaseid = ?, cfreecustid = ? ,dauditdate = ? ,cauditpsn = ?,bisback = ?,vbackreasonh = ?,pk_purcorp = ?,tmaketime = ?,taudittime = ?,tlastmaketime = ? where carriveorderid = ? ";
		stmt = con.prepareStatement(sql);
		// update non PK fields:
		if (arriveorderHeader.getPk_corp() == null) {
			stmt.setNull(1, Types.CHAR);
		} else {
			stmt.setString(1, arriveorderHeader.getPk_corp());
		}
		if (arriveorderHeader.getVarrordercode() == null) {
			stmt.setNull(2, Types.CHAR);
		} else {
			stmt.setString(2, arriveorderHeader.getVarrordercode());
		}
		if (arriveorderHeader.getDreceivedate() == null) {
			stmt.setNull(3, Types.CHAR);
		} else {
			stmt.setString(3, arriveorderHeader.getDreceivedate()
					.toString());
		}
		if (arriveorderHeader.getCvendormangid() == null) {
			stmt.setNull(4, Types.CHAR);
		} else {
			stmt.setString(4, arriveorderHeader.getCvendormangid());
		}
		if (arriveorderHeader.getCbiztype() == null) {
			stmt.setNull(5, Types.CHAR);
		} else {
			stmt.setString(5, arriveorderHeader.getCbiztype());
		}
		if (arriveorderHeader.getCtransmodeid() == null) {
			stmt.setNull(6, Types.CHAR);
		} else {
			stmt.setString(6, arriveorderHeader.getCtransmodeid());
		}
		if (arriveorderHeader.getCstoreorganization() == null) {
			stmt.setNull(7, Types.CHAR);
		} else {
			stmt.setString(7, arriveorderHeader.getCstoreorganization());
		}
		if (arriveorderHeader.getCreceivepsn() == null) {
			stmt.setNull(8, Types.CHAR);
		} else {
			stmt.setString(8, arriveorderHeader.getCreceivepsn());
		}
		if (arriveorderHeader.getCdeptid() == null) {
			stmt.setNull(9, Types.CHAR);
		} else {
			stmt.setString(9, arriveorderHeader.getCdeptid());
		}
		if (arriveorderHeader.getCemployeeid() == null) {
			stmt.setNull(10, Types.CHAR);
		} else {
			stmt.setString(10, arriveorderHeader.getCemployeeid());
		}
		if (arriveorderHeader.getCaccountyear() == null) {
			stmt.setNull(11, Types.CHAR);
		} else {
			stmt.setString(11, arriveorderHeader.getCaccountyear());
		}
		if (arriveorderHeader.getIbillstatus() == null) {
			stmt.setNull(12, Types.INTEGER);
		} else {
			stmt.setInt(12, arriveorderHeader.getIbillstatus().intValue());
		}
		if (arriveorderHeader.getCoperator() == null) {
			stmt.setNull(13, Types.CHAR);
		} else {
			stmt.setString(13, arriveorderHeader.getCoperator());
		}
		if (arriveorderHeader.getCbilltype() == null) {
			stmt.setNull(14, Types.CHAR);
		} else {
			stmt.setString(14, arriveorderHeader.getCbilltype());
		}
		if (arriveorderHeader.getVmemo() == null) {
			stmt.setNull(15, Types.CHAR);
		} else {
			stmt.setString(15, arriveorderHeader.getVmemo());
		}
		if (arriveorderHeader.getVdef1() == null) {
			stmt.setNull(16, Types.CHAR);
		} else {
			stmt.setString(16, arriveorderHeader.getVdef1());
		}
		if (arriveorderHeader.getVdef2() == null) {
			stmt.setNull(17, Types.CHAR);
		} else {
			stmt.setString(17, arriveorderHeader.getVdef2());
		}
		if (arriveorderHeader.getVdef3() == null) {
			stmt.setNull(18, Types.CHAR);
		} else {
			stmt.setString(18, arriveorderHeader.getVdef3());
		}
		if (arriveorderHeader.getVdef4() == null) {
			stmt.setNull(19, Types.CHAR);
		} else {
			stmt.setString(19, arriveorderHeader.getVdef4());
		}
		if (arriveorderHeader.getVdef5() == null) {
			stmt.setNull(20, Types.CHAR);
		} else {
			stmt.setString(20, arriveorderHeader.getVdef5());
		}
		if (arriveorderHeader.getVdef6() == null) {
			stmt.setNull(21, Types.CHAR);
		} else {
			stmt.setString(21, arriveorderHeader.getVdef6());
		}
		if (arriveorderHeader.getVdef7() == null) {
			stmt.setNull(22, Types.CHAR);
		} else {
			stmt.setString(22, arriveorderHeader.getVdef7());
		}
		if (arriveorderHeader.getVdef8() == null) {
			stmt.setNull(23, Types.CHAR);
		} else {
			stmt.setString(23, arriveorderHeader.getVdef8());
		}
		if (arriveorderHeader.getVdef9() == null) {
			stmt.setNull(24, Types.CHAR);
		} else {
			stmt.setString(24, arriveorderHeader.getVdef9());
		}
		if (arriveorderHeader.getVdef10() == null) {
			stmt.setNull(25, Types.CHAR);
		} else {
			stmt.setString(25, arriveorderHeader.getVdef10());
		}
		if (arriveorderHeader.getVdef11() == null) {
			stmt.setNull(26, Types.CHAR);
		} else {
			stmt.setString(26, arriveorderHeader.getVdef11());
		}
		if (arriveorderHeader.getVdef12() == null) {
			stmt.setNull(27, Types.CHAR);
		} else {
			stmt.setString(27, arriveorderHeader.getVdef12());
		}
		if (arriveorderHeader.getVdef13() == null) {
			stmt.setNull(28, Types.CHAR);
		} else {
			stmt.setString(28, arriveorderHeader.getVdef13());
		}
		if (arriveorderHeader.getVdef14() == null) {
			stmt.setNull(29, Types.CHAR);
		} else {
			stmt.setString(29, arriveorderHeader.getVdef14());
		}
		if (arriveorderHeader.getVdef15() == null) {
			stmt.setNull(30, Types.CHAR);
		} else {
			stmt.setString(30, arriveorderHeader.getVdef15());
		}
		if (arriveorderHeader.getVdef16() == null) {
			stmt.setNull(31, Types.CHAR);
		} else {
			stmt.setString(31, arriveorderHeader.getVdef16());
		}
		if (arriveorderHeader.getVdef17() == null) {
			stmt.setNull(32, Types.CHAR);
		} else {
			stmt.setString(32, arriveorderHeader.getVdef17());
		}
		if (arriveorderHeader.getVdef18() == null) {
			stmt.setNull(33, Types.CHAR);
		} else {
			stmt.setString(33, arriveorderHeader.getVdef18());
		}
		if (arriveorderHeader.getVdef19() == null) {
			stmt.setNull(34, Types.CHAR);
		} else {
			stmt.setString(34, arriveorderHeader.getVdef19());
		}
		if (arriveorderHeader.getVdef20() == null) {
			stmt.setNull(35, Types.CHAR);
		} else {
			stmt.setString(35, arriveorderHeader.getVdef20());
		}
		if (arriveorderHeader.getPKDefDoc1() == null) {
			stmt.setNull(36, Types.CHAR);
		} else {
			stmt.setString(36, arriveorderHeader.getPKDefDoc1());
		}
		if (arriveorderHeader.getPKDefDoc2() == null) {
			stmt.setNull(37, Types.CHAR);
		} else {
			stmt.setString(37, arriveorderHeader.getPKDefDoc2());
		}
		if (arriveorderHeader.getPKDefDoc3() == null) {
			stmt.setNull(38, Types.CHAR);
		} else {
			stmt.setString(38, arriveorderHeader.getPKDefDoc3());
		}
		if (arriveorderHeader.getPKDefDoc4() == null) {
			stmt.setNull(39, Types.CHAR);
		} else {
			stmt.setString(39, arriveorderHeader.getPKDefDoc4());
		}
		if (arriveorderHeader.getPKDefDoc5() == null) {
			stmt.setNull(40, Types.CHAR);
		} else {
			stmt.setString(40, arriveorderHeader.getPKDefDoc5());
		}
		if (arriveorderHeader.getPKDefDoc6() == null) {
			stmt.setNull(41, Types.CHAR);
		} else {
			stmt.setString(41, arriveorderHeader.getPKDefDoc6());
		}
		if (arriveorderHeader.getPKDefDoc7() == null) {
			stmt.setNull(42, Types.CHAR);
		} else {
			stmt.setString(42, arriveorderHeader.getPKDefDoc7());
		}
		if (arriveorderHeader.getPKDefDoc8() == null) {
			stmt.setNull(43, Types.CHAR);
		} else {
			stmt.setString(43, arriveorderHeader.getPKDefDoc8());
		}
		if (arriveorderHeader.getPKDefDoc9() == null) {
			stmt.setNull(44, Types.CHAR);
		} else {
			stmt.setString(44, arriveorderHeader.getPKDefDoc9());
		}
		if (arriveorderHeader.getPKDefDoc10() == null) {
			stmt.setNull(45, Types.CHAR);
		} else {
			stmt.setString(45, arriveorderHeader.getPKDefDoc10());
		}
		if (arriveorderHeader.getPKDefDoc11() == null) {
			stmt.setNull(46, Types.CHAR);
		} else {
			stmt.setString(46, arriveorderHeader.getPKDefDoc11());
		}
		if (arriveorderHeader.getPKDefDoc12() == null) {
			stmt.setNull(47, Types.CHAR);
		} else {
			stmt.setString(47, arriveorderHeader.getPKDefDoc12());
		}
		if (arriveorderHeader.getPKDefDoc13() == null) {
			stmt.setNull(48, Types.CHAR);
		} else {
			stmt.setString(48, arriveorderHeader.getPKDefDoc13());
		}
		if (arriveorderHeader.getPKDefDoc14() == null) {
			stmt.setNull(49, Types.CHAR);
		} else {
			stmt.setString(49, arriveorderHeader.getPKDefDoc14());
		}
		if (arriveorderHeader.getPKDefDoc15() == null) {
			stmt.setNull(50, Types.CHAR);
		} else {
			stmt.setString(50, arriveorderHeader.getPKDefDoc15());
		}
		if (arriveorderHeader.getPKDefDoc16() == null) {
			stmt.setNull(51, Types.CHAR);
		} else {
			stmt.setString(51, arriveorderHeader.getPKDefDoc16());
		}
		if (arriveorderHeader.getPKDefDoc17() == null) {
			stmt.setNull(52, Types.CHAR);
		} else {
			stmt.setString(52, arriveorderHeader.getPKDefDoc17());
		}
		if (arriveorderHeader.getPKDefDoc18() == null) {
			stmt.setNull(53, Types.CHAR);
		} else {
			stmt.setString(53, arriveorderHeader.getPKDefDoc18());
		}
		if (arriveorderHeader.getPKDefDoc19() == null) {
			stmt.setNull(54, Types.CHAR);
		} else {
			stmt.setString(54, arriveorderHeader.getPKDefDoc19());
		}
		if (arriveorderHeader.getPKDefDoc20() == null) {
			stmt.setNull(55, Types.CHAR);
		} else {
			stmt.setString(55, arriveorderHeader.getPKDefDoc20());
		}
		if (arriveorderHeader.getCvendorbaseid() == null) {
			stmt.setNull(56, Types.CHAR);
		} else {
			stmt.setString(56, arriveorderHeader.getCvendorbaseid());
		}
		if (arriveorderHeader.getCfreecustid() == null) {
			stmt.setNull(57, Types.CHAR);
		} else {
			stmt.setString(57, arriveorderHeader.getCfreecustid());
		}
		if (arriveorderHeader.getAttributeValue("dauditdate") == null) {
			stmt.setNull(58, Types.CHAR);
		} else {
			stmt.setString(58, arriveorderHeader.getAttributeValue(
					"dauditdate").toString());
		}
		if (arriveorderHeader.getAttributeValue("cauditpsn") == null) {
			stmt.setNull(59, Types.CHAR);
		} else {
			stmt.setString(59, arriveorderHeader.getAttributeValue(
					"cauditpsn").toString());
		}
		if (arriveorderHeader.getAttributeValue("bisback") == null
				|| arriveorderHeader.getAttributeValue("bisback")
						.toString().trim().equals("")) {
			stmt.setString(60, "N");
		} else {
			stmt.setString(60, arriveorderHeader.getBisback()
					.booleanValue() ? "Y" : "N");
		}
		if (arriveorderHeader.getAttributeValue("vbackreasonh") == null) {
			stmt.setNull(61, Types.CHAR);
		} else {
			stmt.setString(61, arriveorderHeader.getAttributeValue(
					"vbackreasonh").toString());
		}
		if (arriveorderHeader.getAttributeValue("pk_purcorp") == null) {
			stmt.setNull(62, Types.CHAR);
		} else {
			stmt.setString(62, arriveorderHeader.getAttributeValue(
					"pk_purcorp").toString());
		}
		if (arriveorderHeader.getAttributeValue("tmaketime") == null) {
			stmt.setNull(63, Types.CHAR);
		} else {
			stmt.setString(63, arriveorderHeader.getAttributeValue(
					"tmaketime").toString());
		}
		if (arriveorderHeader.getAttributeValue("taudittime") == null) {
			stmt.setNull(64, Types.CHAR);
		} else {
			stmt.setString(64, arriveorderHeader.getAttributeValue(
					"taudittime").toString());
		}
		if (arriveorderHeader.getAttributeValue("tlastmaketime") == null) {
			stmt.setNull(65, Types.CHAR);
		} else {
			stmt.setString(65, arriveorderHeader.getAttributeValue(
					"tlastmaketime").toString());
		}

		//主键
		stmt.setString(66, arriveorderHeader.getCarriveorderid());

		stmt.executeUpdate();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"updateHeader",
		new Object[] { arriveorderHeader });
	/*************************************************************/
}

/**
 * 作者：晁志平
 * 功能：检查赠品数量是否超订单
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2003-10-20 9:57:36)
 * 修改日期，修改人，修改原因，注释标志：
 */
public void checkPresent(ArriveorderVO vo) throws SQLException,BusinessException {
	//
	if (vo == null || vo.getChildrenVO() == null || vo.getChildrenVO().length <= 0) {
		SCMEnv.out("传入方法");
		return;
	}
	//取得订单行ID
	String sRowid = null;
	Vector vId = new Vector();
	ArriveorderItemVO[] items = (ArriveorderItemVO[]) vo.getChildrenVO();
	int iLen = items.length;
	for (int i = 0; i < iLen; i++) {
		sRowid = items[i].getCorder_bid();
		if (sRowid == null || vId.contains(sRowid))
			continue;
		vId.addElement(sRowid);
	}
	if (vId.size() == 0)
		return;
	iLen = vId.size();
	//String strIdOr = "(";
	//for (int i = 0; i < iLen; i++) {
		//if (i==0)
			//strIdOr += "po_arriveorder_b.corder_bid = '";
		//else
			//strIdOr += "or po_arriveorder_b.corder_bid = '";
		//strIdOr += vId.elementAt(i);
		//strIdOr += "' ";
	//}
	//strIdOr += ") ";
	String[] sItemsKey = new String[iLen];
	vId.toArray(sItemsKey);
	String strIdOr = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
		strIdOr =
			tmpTblDmo.insertTempTable(sItemsKey,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC009,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdOr == null || strIdOr.trim().length() == 0)
			strIdOr = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	strIdOr += " ";
	//查询
	String sql = null;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	UFBoolean ufbIsBack = (UFBoolean) vo.getParentVO().getAttributeValue("bisback");
	if (ufbIsBack == null)
		ufbIsBack = new UFBoolean(false);
	try {
		//
		con = getConnection();
		//到货单赠品(含调整、退货):SUM(到货数量) - SUM(累计入库数量)
		sql = "select corder_bid, sum(narrvnum)-sum(isnull(naccumwarehousenum,0)) ";
		sql += "from po_arriveorder_b ";
		sql += "inner join po_arriveorder on po_arriveorder_b.carriveorderid = po_arriveorder.carriveorderid ";
		sql += "where narrvnum = npresentnum and po_arriveorder.dr = 0 and po_arriveorder_b.dr = 0 ";
		sql += "and po_arriveorder_b.corder_bid in ";
		sql += strIdOr;
		sql += "group by corder_bid ";
		stmt = prepareStatement(con, sql);
		rs = stmt.executeQuery();
		String strRowId = null;
		BigDecimal bdTmp = null;
		UFDouble ufdArrNum = null;
		Hashtable hArr = new Hashtable();
		while (rs.next()) {
			strRowId = rs.getString(1);
			bdTmp = rs.getBigDecimal(2);
			if (strRowId == null)
				continue;
			if (bdTmp == null)
				ufdArrNum = new UFDouble(0.0);
			else
				ufdArrNum = new UFDouble(bdTmp);
			//检查(1): 到货赠品 - 累计入库赠品 >= 0
			if (ufdArrNum.doubleValue() < 0)
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000062")/*@res "按订单行检查赠品数量发现不满足关系：\n“到货赠品 - 累计入库赠品 >= 0”\n请调整赠品数量后再操作"*/);
			hArr.put(strRowId, ufdArrNum);
		}
		//没有赠品数据直接返回
		if (hArr.size() == 0)
			return;
		//上游单据子表名
		String strSubTabName = "po_order_b";
		String strUpBillType = (String) vo.getChildrenVO()[0].getAttributeValue("cupsourcebilltype");
		if (ScmConst.SC_Order.equals(strUpBillType)) {
			strSubTabName = "sc_order_b";
		}
		//订单(包括采购、委外)退货赠品 : SUM(订单累计退货数量)
		sql = "select po_arriveorder_b.corder_bid, sum(isnull(nbackarrvnum,0)) ";
		sql += "from po_arriveorder_b ";
		sql += "inner join po_arriveorder on po_arriveorder_b.carriveorderid = po_arriveorder.carriveorderid ";
		sql += "inner join " + strSubTabName + " on " + strSubTabName + ".corder_bid = po_arriveorder_b.corder_bid ";
		sql += "where narrvnum = npresentnum and isnull(bisback,'N') = 'Y' and po_arriveorder.dr = 0 and po_arriveorder_b.dr = 0 and " + strSubTabName + ".dr = 0 ";
		sql += "and po_arriveorder_b.corder_bid in ";
		sql += strIdOr;
		sql += "group by po_arriveorder_b.corder_bid ";
		stmt = prepareStatement(con, sql);
		rs = stmt.executeQuery();
		Hashtable hBack = new Hashtable();
		while (rs.next()) {
			strRowId = rs.getString(1);
			bdTmp = rs.getBigDecimal(2);
			if (strRowId == null)
				continue;
			if (bdTmp == null)
				ufdArrNum = new UFDouble(1.0);
			else
				ufdArrNum = new UFDouble(bdTmp);
			hBack.put(strRowId, ufdArrNum);
		}
		//检查(2):到货赠品-累计入库赠品-累计退货赠品>=0
		Enumeration keySet = hArr.keys();
		UFDouble ufdBack = null;
		while (keySet.hasMoreElements()) {
			strRowId = (String) keySet.nextElement();
			ufdArrNum = (UFDouble) hArr.get(strRowId);
			ufdBack = (UFDouble) hBack.get(strRowId);
			if (ufdBack == null)
				continue;
			ufdArrNum = ufdArrNum.add(ufdBack);
			if (ufdArrNum.doubleValue() < 0)
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000063")/*@res "按订单行检查赠品数量发现不满足关系：\n“到货赠品 - 累计入库赠品 - 累计退货赠品 >= 0”\n请调整赠品数量后再操作"*/);
		}
	} catch (Exception e) {
		reportException(e);
		nc.bs.pu.pub.PubDMO.throwBusinessException("nc.bs.rc.receive.ArriveorderDMO.checkPresent(ArriveorderVO)",e);
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {

		}
	}
}

/**
 * 批删除子表数据　(dr++)
 * czp 2003-06-27 效率优化
 */
public void deleBodyByItems(ArriveorderItemVO[] vos) throws java.sql.SQLException {

	if (vos == null || vos.length <= 0)
		return;
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "deleteItemMy", new Object[] { vos });
	/*************************************************************/

	String sql = "update po_arriveorder_b set dr = dr + 1 where ";
	boolean bFirst = true;
	String strOr = "";
	for (int i = 0; i < vos.length; i++) {
		if (vos[i].getPrimaryKey() == null)
			continue;
		if (bFirst){
			strOr += "carriveorder_bid ='";
			bFirst = false;
		}else
			strOr += "or carriveorder_bid ='";
		strOr += vos[i].getPrimaryKey();
		strOr += "' ";
	}
	if (strOr.length() <= 0){
		SCMEnv.out("NCMMOUT:@@=>未获取单据行ID，直接返回");
		return;
	}
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql+strOr);
		//
		stmt.executeUpdate();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "deleteItemMy", new Object[] { vos });
	/*************************************************************/
}

/**
 * 根据主键在数据库中删除主子表数据（dr++）
 *
 * czp 2003-06-27 效率优化
 */
public void deleHeadBodyByHIds(String[] saHId) throws java.sql.SQLException {

	if (saHId == null || saHId.length <= 0)
		return;
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "deleteByHIdArray", new Object[] { saHId });
	/*************************************************************/
	String strSqlOrId = "";
	boolean bFirst = true;
	for (int i = 0; i < saHId.length; i++) {
		if (saHId[i] == null)
			continue;
		if (bFirst){
			strSqlOrId += "carriveorderid='";
			bFirst = false;
		}else
			strSqlOrId += "or carriveorderid='";
		strSqlOrId += saHId[i];
		strSqlOrId += "' ";
	}
	if (strSqlOrId.length() <= 0){
		SCMEnv.out("NCMMOUT:@@=>未获取单据ID，直接返回");
		return;
	}
	String sqlh = "update po_arriveorder  set dr = dr + 1 where " + strSqlOrId;
	String sqlb = "update po_arriveorder_b  set dr = dr + 1 where " + strSqlOrId;

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		//体
		stmt = con.prepareStatement(sqlb);
		stmt.executeUpdate();
		stmt.close();
		//头
		stmt = con.prepareStatement(sqlh);
		stmt.executeUpdate();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "deleteByHIdArray", new Object[] { saHId });
	/*************************************************************/
}

/**
 * 通过主键查找一个VO对象。
 *
 * 创建日期：(2001-6-8)
 * @return nc.vo.rc.receive.ArriveorderItemVO
 * @param key String
 * @exception java.sql.SQLException 异常说明。
 */
public ArriveorderItemVO[] findItemsDetail(String strSQL, boolean bScEnabled) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "findItemsForResult", new Object[] { strSQL });
	/*************************************************************/
	/*
	新加字段:
	到货单号 po_arriveorder.varrordercode
	供应商ID	 po_arriveorder.cvendorbaseid
	到货单子表ID po_arriveorder_b.carriveorder_bid
	到货单编码   po_arriveorder.varrordercode
	计划到货日期 po_arriveorder.dreceivedate
	到货日期     po_order_b.dplanarrvdate
	订单号	 po_order.vordercode
	订单日期	 po_order.dorderdate
	*/
	String sql =
		"SELECT po_arriveorder_b.carriveorderid, po_arriveorder_b.pk_corp,po_arriveorder_b.corder_bid, po_arriveorder_b.corderid, po_arriveorder_b.cmangid, po_arriveorder_b.cassistunit, po_arriveorder_b.narrvnum, po_arriveorder_b.nassistnum, po_arriveorder_b.nwastnum, po_arriveorder_b.nwastassistnum, po_arriveorder_b.npresentnum, po_arriveorder_b.npresentassistnum, po_arriveorder_b.vproducenum, po_arriveorder_b.ccurrencytypeid, po_arriveorder_b.noriginalcurprice, po_arriveorder_b.noriginalcurmny, po_arriveorder_b.nexchangeotobrate, po_arriveorder_b.nprice, po_arriveorder_b.nmoney, po_arriveorder_b.nexchangeotoarate, po_arriveorder_b.nassistcurprice, po_arriveorder_b.nassistcurmny, po_arriveorder_b.dproducedate, po_arriveorder_b.ivalidday, po_arriveorder_b.dvaliddate, po_arriveorder_b.nelignum, po_arriveorder_b.nnotelignum, po_arriveorder_b.naccumchecknum, po_arriveorder_b.naccumwarehousenum, po_arriveorder_b.cwarehouseid, po_arriveorder_b.cstoreid, po_arriveorder_b.cupsourcebilltype, po_arriveorder_b.cupsourcebillid, po_arriveorder_b.cupsourcebillrowid, po_arriveorder_b.vmemo, po_arriveorder_b.vdef1, po_arriveorder_b.vdef2, po_arriveorder_b.vdef3, po_arriveorder_b.vdef4, po_arriveorder_b.vdef5, po_arriveorder_b.vdef6,po_arriveorder_b.vdef7, po_arriveorder_b.vdef8, po_arriveorder_b.vdef9, po_arriveorder_b.vdef10, po_arriveorder_b.vdef11, po_arriveorder_b.vdef12, po_arriveorder_b.vdef13, po_arriveorder_b.vdef14, po_arriveorder_b.vdef15, po_arriveorder_b.vdef16, po_arriveorder_b.vdef17, po_arriveorder_b.vdef18, po_arriveorder_b.vdef19, po_arriveorder_b.vdef20,";
	sql += "po_arriveorder_b.pk_defdoc1,po_arriveorder_b.pk_defdoc2,po_arriveorder_b.pk_defdoc3,po_arriveorder_b.pk_defdoc4,po_arriveorder_b.pk_defdoc5,po_arriveorder_b.pk_defdoc6,po_arriveorder_b.pk_defdoc7,po_arriveorder_b.pk_defdoc8,po_arriveorder_b.pk_defdoc9,po_arriveorder_b.pk_defdoc10,po_arriveorder_b.pk_defdoc11,po_arriveorder_b.pk_defdoc12,po_arriveorder_b.pk_defdoc13,po_arriveorder_b.pk_defdoc14,po_arriveorder_b.pk_defdoc15,po_arriveorder_b.pk_defdoc16,po_arriveorder_b.pk_defdoc17,po_arriveorder_b.pk_defdoc18,po_arriveorder_b.pk_defdoc19,po_arriveorder_b.pk_defdoc20,po_arriveorder_b.vfree1, po_arriveorder_b.vfree2, po_arriveorder_b.vfree3, po_arriveorder_b.vfree4, po_arriveorder_b.vfree5, po_arriveorder.varrordercode, po_arriveorder.cvendorbaseid, po_arriveorder_b.carriveorder_bid,po_order.vordercode , po_order_b.dplanarrvdate, po_arriveorder.dreceivedate, po_arriveorder_b.cbaseid, po_arriveorder_b.csourcebilltype, po_arriveorder_b.csourcebillid, po_arriveorder_b.csourcebillrowid,po_arriveorder_b.cprojectid,po_arriveorder_b.cprojectphaseid,po_arriveorder_b.crowno,po_arriveorder_b.vbackreasonb,po_arriveorder_b.naccreplenishnum,po_order.dorderdate,po_arriveorder_b.corder_bb1id,po_arriveorder_b.blargess,po_arriveorder_b.blargessuprow ";
	sql += ",po_arriveorder_b.pk_reqcorp,po_arriveorder_b.pk_reqstoorg,po_arriveorder_b.pk_creqwareid,po_arriveorder_b.pk_invoicecorp ";
	if (bScEnabled) {
		sql += ",sc_order.vordercode,sc_order_b.dplanarrvdate,sc_order.dorderdate ";
	}
	sql += strSQL;
	ArriveorderItemVO[] arriveorderItems = null;
	ArriveorderItemVO arriveorderItem = null;
	Connection con = null;
	PreparedStatement stmt = null;
	Vector v = new Vector();
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			arriveorderItem = new ArriveorderItemVO();
			// carriveorderid :
			String carriveorderid = rs.getString(1);
			arriveorderItem.setCarriveorderid(carriveorderid == null ? null : carriveorderid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			arriveorderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// corder_bid :
			String corder_bid = rs.getString(3);
			arriveorderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
			// corderid :
			String corderid = rs.getString(4);
			arriveorderItem.setCorderid(corderid == null ? null : corderid.trim());
			// cinventoryid :
			String cmangid = rs.getString(5);
			arriveorderItem.setCmangid(cmangid == null ? null : cmangid.trim());
			// cassistunit :
			String cassistunit = rs.getString(6);
			arriveorderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
			// narrvnum :
			Object narrvnum = rs.getObject(7);
			arriveorderItem.setNarrvnum(
				(narrvnum == null || narrvnum.toString().trim().equals("")) ? null : new UFDouble(narrvnum.toString().trim()));
			// nassistnum :
			Object nassistnum = rs.getObject(8);
			arriveorderItem.setNassistnum(
				(nassistnum == null || nassistnum.toString().trim().equals("")) ? null : new UFDouble(nassistnum.toString().trim()));
			// nwastnum :
			Object nwastnum = rs.getObject(9);
			arriveorderItem.setNwastnum(
				(nwastnum == null || nwastnum.toString().trim().equals("")) ? null : new UFDouble(nwastnum.toString().trim()));
			// nwastassistnum :
			Object nwastassistnum = rs.getObject(10);
			arriveorderItem.setNwastassistnum(
				(nwastassistnum == null || nwastassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(nwastassistnum.toString().trim()));
			// npresentnum :
			Object npresentnum = rs.getObject(11);
			arriveorderItem.setNpresentnum(
				(npresentnum == null || npresentnum.toString().trim().equals("")) ? null : new UFDouble(npresentnum.toString().trim()));
			// npresentassistnum :
			Object npresentassistnum = rs.getObject(12);
			arriveorderItem.setNpresentassistnum(
				(npresentassistnum == null || npresentassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(npresentassistnum.toString().trim()));
			// vproducenum :
			String vproducenum = rs.getString(13);
			arriveorderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());
			// ccurrencytypeid :
			String ccurrencytypeid = rs.getString(14);
			arriveorderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
			// noriginalcurprice :
			Object noriginalcurprice = rs.getObject(15);
			arriveorderItem.setNoriginalcurprice(
				(noriginalcurprice == null || noriginalcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurprice.toString().trim()));
			// noriginalcurmny :
			Object noriginalcurmny = rs.getObject(16);
			arriveorderItem.setNoriginalcurmny(
				(noriginalcurmny == null || noriginalcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurmny.toString().trim()));
			// nexchangeotobrate :
			Object nexchangeotobrate = rs.getObject(17);
			arriveorderItem.setNexchangeotobrate(
				(nexchangeotobrate == null || nexchangeotobrate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotobrate.toString().trim()));
			// nprice :
			Object nprice = rs.getObject(18);
			arriveorderItem.setNprice(
				(nprice == null || nprice.toString().trim().equals("")) ? null : new UFDouble(nprice.toString().trim()));
			// nmoney :
			Object nmoney = rs.getObject(19);
			arriveorderItem.setNmoney(
				(nmoney == null || nmoney.toString().trim().equals("")) ? null : new UFDouble(nmoney.toString().trim()));
			// nexchangeotoarate :
			Object nexchangeotoarate = rs.getObject(20);
			arriveorderItem.setNexchangeotoarate(
				(nexchangeotoarate == null || nexchangeotoarate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotoarate.toString().trim()));
			// nassistcurprice :
			Object nassistcurprice = rs.getObject(21);
			arriveorderItem.setNassistcurprice(
				(nassistcurprice == null || nassistcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurprice.toString().trim()));
			// nassistcurmny :
			Object nassistcurmny = rs.getObject(22);
			arriveorderItem.setNassistcurmny(
				(nassistcurmny == null || nassistcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurmny.toString().trim()));
			// dproducedate :
			String dproducedate = rs.getString(23);
			arriveorderItem.setDproducedate(dproducedate == null ? null : new UFDate(dproducedate.trim(), false));
			// ivalidday :
			Integer ivalidday = (Integer) rs.getObject(24);
			arriveorderItem.setIvalidday(ivalidday == null ? null : ivalidday);
			// dvaliddate :
			String dvaliddate = rs.getString(25);
			arriveorderItem.setDvaliddate(dvaliddate == null ? null : new UFDate(dvaliddate.trim(), false));
			// nelignum :
			Object nelignum = rs.getObject(26);
			arriveorderItem.setNelignum(
				(nelignum == null || nelignum.toString().trim().equals("")) ? null : new UFDouble(nelignum.toString().trim()));
			// nnotelignum :
			Object nnotelignum = rs.getObject(27);
			arriveorderItem.setNnotelignum(
				(nnotelignum == null || nnotelignum.toString().trim().equals("")) ? null : new UFDouble(nnotelignum.toString().trim()));
			// naccumchecknum :
			Object naccumchecknum = rs.getObject(28);
			arriveorderItem.setNaccumchecknum(
				(naccumchecknum == null || naccumchecknum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumchecknum.toString().trim()));
			// naccumwarehousenum :
			Object naccumwarehousenum = rs.getObject(29);
			arriveorderItem.setNaccumwarehousenum(
				(naccumwarehousenum == null || naccumwarehousenum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumwarehousenum.toString().trim()));
			// cwarehouseid :
			String cwarehouseid = rs.getString(30);
			arriveorderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
			// cstoreid :
			String cstoreid = rs.getString(31);
			arriveorderItem.setCstoreid(cstoreid == null ? null : cstoreid.trim());
			// cupsourcebilltype :
			String cupsourcebilltype = rs.getString(32);
			arriveorderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
			// cupsourcebillid :
			String cupsourcebillid = rs.getString(33);
			arriveorderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
			// cupsourcebillrowid :
			String cupsourcebillrowid = rs.getString(34);
			arriveorderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
			// vmemo :
			String vmemo = rs.getString(35);
			arriveorderItem.setVmemo(vmemo == null ? null : vmemo.trim());
			// vdef1 :
			String vdef1 = rs.getString(36);
			arriveorderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
			// vdef2 :
			String vdef2 = rs.getString(37);
			arriveorderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
			// vdef3 :
			String vdef3 = rs.getString(38);
			arriveorderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
			// vdef4 :
			String vdef4 = rs.getString(39);
			arriveorderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
			// vdef5 :
			String vdef5 = rs.getString(40);
			arriveorderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
			// vdef6 :
			String vdef6 = rs.getString(41);
			arriveorderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(42);
			arriveorderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8
			String vdef8 = rs.getString(43);
			arriveorderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(44);
			arriveorderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(45);
			arriveorderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(46);
			arriveorderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(47);
			arriveorderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(48);
			arriveorderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(49);
			arriveorderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(50);
			arriveorderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(51);
			arriveorderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(52);
			arriveorderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(53);
			arriveorderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(54);
			arriveorderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(55);
			arriveorderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
			// pk_defdoc1 :
			String pk_defdoc1 = rs.getString(56);
			arriveorderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
			// pk_defdoc2 :
			String pk_defdoc2 = rs.getString(57);
			arriveorderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
			// pk_defdoc3 :
			String pk_defdoc3 = rs.getString(58);
			arriveorderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
			// pk_defdoc4 :
			String pk_defdoc4 = rs.getString(59);
			arriveorderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
			// pk_defdoc5 :
			String pk_defdoc5 = rs.getString(60);
			arriveorderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
			// pk_defdoc6 :
			String pk_defdoc6 = rs.getString(61);
			arriveorderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
			// pk_defdoc7 :
			String pk_defdoc7 = rs.getString(62);
			arriveorderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
			// pk_defdoc8
			String pk_defdoc8 = rs.getString(63);
			arriveorderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
			// pk_defdoc9 :
			String pk_defdoc9 = rs.getString(64);
			arriveorderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
			// pk_defdoc10 :
			String pk_defdoc10 = rs.getString(65);
			arriveorderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
			// pk_defdoc11 :
			String pk_defdoc11 = rs.getString(66);
			arriveorderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
			// pk_defdoc12 :
			String pk_defdoc12 = rs.getString(67);
			arriveorderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
			// pk_defdoc13 :
			String pk_defdoc13 = rs.getString(68);
			arriveorderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
			// pk_defdoc14 :
			String pk_defdoc14 = rs.getString(69);
			arriveorderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
			// pk_defdoc15 :
			String pk_defdoc15 = rs.getString(70);
			arriveorderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
			// pk_defdoc16 :
			String pk_defdoc16 = rs.getString(71);
			arriveorderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
			// pk_defdoc17 :
			String pk_defdoc17 = rs.getString(72);
			arriveorderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
			// pk_defdoc18 :
			String pk_defdoc18 = rs.getString(73);
			arriveorderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
			// pk_defdoc19 :
			String pk_defdoc19 = rs.getString(74);
			arriveorderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
			// pk_defdoc20 :
			String pk_defdoc20 = rs.getString(75);
			arriveorderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
			// vfree1 :
			String vfree1 = rs.getString(76);
			arriveorderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
			// vfree2 :
			String vfree2 = rs.getString(77);
			arriveorderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
			// vfree3 :
			String vfree3 = rs.getString(78);
			arriveorderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
			// vfree4 :
			String vfree4 = rs.getString(79);
			arriveorderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
			// vfree5 :
			String vfree5 = rs.getString(80);
			arriveorderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
			//到货单号
			String varrordercode = rs.getString(81);
			arriveorderItem.setArrcode(varrordercode == null ? null : varrordercode);
			//供应商ID
			String cvendorid = rs.getString(82);
			arriveorderItem.setCvendorbaseid(cvendorid == null ? null : cvendorid);
			//到货单体ID
			String arriveorder_bid = rs.getString(83);
			arriveorderItem.setPrimaryKey(arriveorder_bid);
			//订单号
			String ordercode = rs.getString(84);
			arriveorderItem.setOrdercode(ordercode == null ? null : ordercode);
			//计划到货日期
			String dplanarrvdate = rs.getString(85);
			arriveorderItem.setPlandate(dplanarrvdate == null ? null : new UFDate(dplanarrvdate, false));
			//到货日期
			String dreceivedate = rs.getString(86);
			arriveorderItem.setArrvdate(dreceivedate == null ? null : new UFDate(dreceivedate, false));
			//存货基本档案主键
			String cbaseid = rs.getString(87);
			arriveorderItem.setCbaseid(cbaseid == null ? null : cbaseid);
			// csourcebilltype :
			String csourcebilltype = rs.getString(88);
			arriveorderItem.setAttributeValue("csourcebilltype", csourcebilltype == null ? null : csourcebilltype.trim());
			// csourcebillid :
			String csourcebillid = rs.getString(89);
			arriveorderItem.setAttributeValue("csourcebillid", csourcebillid == null ? null : csourcebillid.trim());
			// csourcebillrowid :
			String csourcebillrowid = rs.getString(90);
			arriveorderItem.setAttributeValue("csourcebillrowid", csourcebillrowid == null ? null : csourcebillrowid.trim());
			// 项目名称
			String cprojectid = rs.getString(91);
			arriveorderItem.setAttributeValue("cprojectid", cprojectid == null ? null : cprojectid.trim());
			//项目阶段名称
			String cprojectphaseid = rs.getString(92);
			arriveorderItem.setAttributeValue("cprojectphaseid", cprojectphaseid == null ? null : cprojectphaseid.trim());
			//单据行号
			String crowno = rs.getString(93);
			arriveorderItem.setAttributeValue("crowno", crowno == null ? null : crowno.trim());
			//vbackreasonb
			String vbackreasonb = rs.getString(94);
			arriveorderItem.setAttributeValue("vbackreasonb", vbackreasonb);
			//naccreplenishnum
			Object naccreplenishnum = rs.getObject(95);
			arriveorderItem.setNaccreplenishnum(
				(naccreplenishnum == null || naccreplenishnum.toString().trim().equals(""))
					? null
					: new UFDouble(naccreplenishnum.toString().trim()));
			//订单日期
			String date = rs.getString(96);
			arriveorderItem.setOrderdate(date == null ? null : new UFDate(date, false));
			//corder_bb1id
			String sCorder_bb1id = rs.getString(97);
			arriveorderItem.setCorder_bb1id(sCorder_bb1id == null ? null : sCorder_bb1id);
			//blargess
			String blargess = rs.getString(98);
			arriveorderItem.setAttributeValue("blargess", blargess == null ? null : new UFBoolean(blargess.trim()));
			//blargessuprow
			String blargessuprow = rs.getString(99);
			arriveorderItem.setAttributeValue("blargessuprow", blargessuprow == null ? null : new UFBoolean(blargessuprow.trim()));
			
			//V5 New:
			arriveorderItem.setPk_reqcorp(rs.getString(100));
			arriveorderItem.setPk_reqstoorg(rs.getString(101));
			arriveorderItem.setPk_creqwareid(rs.getString(102));
			arriveorderItem.setPk_invoicecorp(rs.getString(103));
			
			//委外处理
			if (bScEnabled && ScmConst.SC_Order.equals(arriveorderItem.getCupsourcebilltype())) {
				String strTmp = rs.getString(104);
				arriveorderItem.setOrdercode(strTmp);
				strTmp = rs.getString(105);
				arriveorderItem.setPlandate(strTmp == null ? null : new UFDate(strTmp, false));
				strTmp = rs.getString(106);
				arriveorderItem.setOrderdate(strTmp == null ? null : new UFDate(strTmp, false));
			}
			v.addElement(arriveorderItem);
		}
		if (rs != null)
			rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	if (v.size() > 0) {
		arriveorderItems = new ArriveorderItemVO[v.size()];
		v.copyInto(arriveorderItems);
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "findItemsForResult", new Object[] { strSQL });
	/*************************************************************/
	return arriveorderItems;
}

/**
 * 查询表体数据。
 * <p>
 * <b>examples:</b>
 * <p>
 * 使用示例
 * <p>
 * <b>参数说明</b>
 * @param strSubSql   形如， 
 * <li>carriveroderid in (select po_arriveorder.carriveorderid from ...)
 * <li>carriveorderid = 'ddd'
 * <li>的查询条件串
 * @return  到货单表体VO数组
 * @throws BusinessException
 * <p>
 * @author czp
 * @time 2007-2-14 上午11:42:47
 */
public ArriveorderItemVO[] queryBodysByHidsSql(String strSubSql) throws BusinessException {
  //eric
  String sql =
    "select carriveorder_bid, carriveorderid, pk_corp, corder_bid, corderid, cmangid, cassistunit, " +
    "narrvnum, nassistnum, nwastnum, nwastassistnum, npresentnum, npresentassistnum, vproducenum, " +
    "ccurrencytypeid, noriginalcurprice, noriginalcurmny, nexchangeotobrate, nprice, nmoney, nexchangeotoarate, " +
    "nassistcurprice, nassistcurmny, dproducedate, ivalidday, dvaliddate, nelignum, nnotelignum," +
    "naccumchecknum, naccumwarehousenum, cwarehouseid, cstoreid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid, vmemo, " +
    "vdef1, vdef2, vdef3, vdef4, vdef5, vdef6,vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, " +
    "pk_defdoc1,pk_defdoc2,pk_defdoc3,pk_defdoc4,pk_defdoc5,pk_defdoc6,pk_defdoc7,pk_defdoc8,pk_defdoc9,pk_defdoc10,pk_defdoc11,pk_defdoc12,pk_defdoc13,pk_defdoc14,pk_defdoc15,pk_defdoc16,pk_defdoc17,pk_defdoc18,pk_defdoc19,pk_defdoc20, " +
    "vfree1, vfree2, vfree3, vfree4, vfree5, " +
    "cbaseid, csourcebilltype, csourcebillid, csourcebillrowid, ts, cprojectid, cprojectphaseid, " +
    "crowno,vbackreasonb,naccreplenishnum,corder_bb1id ,blargess,blargessuprow ,pk_reqcorp," +
    "pk_reqstoorg,pk_creqwareid,pk_invoicecorp,jyjg,glnum ";
  sql += "from po_arriveorder_b ";
  sql += "where dr = 0 ";
  if(strSubSql == null || strSubSql.trim().length() == 0){
    SCMEnv.out("ArriveorderDMO::queryBodysByHidSubSql()调用错误：未传入具体查询条件，可能有效率问题，直接返回空!");/*-=notranslate=-*/
    strSubSql = " 'a'='b' ";
  }
  sql += "and (" + strSubSql + ") ";
  sql += "order by carriveorder_bid,cast(crowno as decimal(20,8)) ";
  ArriveorderItemVO[] arriveorderItems = null;
  Vector v = new Vector();
  Connection con = null;
  PreparedStatement stmt = null;
  ResultSet rs = null;
  String sHid, sTmp;
  Object oTmp;
  Integer iTmp;
  ArriveorderItemVO arriveorderItem = null;
  try {
    con = getConnection();
    stmt = con.prepareStatement(sql);
    //查询表体
    rs = stmt.executeQuery();
    //
    int index = 0;
    while (rs.next()) {
      //
      index = 0;
      //
      arriveorderItem = new ArriveorderItemVO();
      //
      arriveorderItem.setCarriveorder_bid(rs.getString(++index));
      //
      arriveorderItem.setCarriveorderid(rs.getString(++index));
      //
      arriveorderItem.setPk_corp(rs.getString(++index));
      //
      arriveorderItem.setCorder_bid(rs.getString(++index));
      //
      arriveorderItem.setCorderid(rs.getString(++index));
      //
      arriveorderItem.setCmangid(rs.getString(++index));
      //
      arriveorderItem.setCassistunit(rs.getString(++index));
      //
      arriveorderItem.setNarrvnum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNassistnum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNwastnum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNwastassistnum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNpresentnum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNpresentassistnum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setVproducenum(rs.getString(++index));
      //
      arriveorderItem.setCcurrencytypeid(rs.getString(++index));
      //
      arriveorderItem.setNoriginalcurprice(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNoriginalcurmny(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNexchangeotobrate(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNprice(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNmoney(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNexchangeotoarate(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNassistcurprice(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNassistcurmny(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setDproducedate(PuPubVO.getUFDate(rs.getString(++index),false));
      //
      arriveorderItem.setIvalidday((Integer) rs.getObject(++index));
      //
      arriveorderItem.setDvaliddate(PuPubVO.getUFDate(rs.getString(++index),false));
      //
      arriveorderItem.setNelignum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNnotelignum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNaccumchecknum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setNaccumwarehousenum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      arriveorderItem.setCwarehouseid(rs.getString(++index));
      //
      arriveorderItem.setCstoreid(rs.getString(++index));
      //
      arriveorderItem.setCupsourcebilltype(rs.getString(++index));
      //
      arriveorderItem.setCupsourcebillid(rs.getString(++index));
      //
      arriveorderItem.setCupsourcebillrowid(rs.getString(++index));
      //
      arriveorderItem.setVmemo(rs.getString(++index));
      //vdef1-20
      for (int i = 0; i < 20; i++) {
        arriveorderItem.setAttributeValue("vdef"+(i+1), rs.getString(++index));
      }
      //pk_defdoc1-20
      for (int i = 0; i < 20; i++) {
        arriveorderItem.setAttributeValue("pk_defdoc"+(i+1), rs.getString(++index));
      }
      //vfree1-20
      for (int i = 0; i < 5; i++) {
        arriveorderItem.setAttributeValue("vfree"+(i+1), rs.getString(++index));
      }
      //存货基本档案主键
      arriveorderItem.setCbaseid(rs.getString(++index));
      // csourcebilltype :
      arriveorderItem.setAttributeValue("csourcebilltype", rs.getString(++index));
      // csourcebillid :
      arriveorderItem.setAttributeValue("csourcebillid", rs.getString(++index));
      // csourcebillrowid :
      arriveorderItem.setAttributeValue("csourcebillrowid", rs.getString(++index));
      // ts
      arriveorderItem.setTs(rs.getString(++index));
      // cprojectid
      arriveorderItem.setAttributeValue("cprojectid", rs.getString(++index));
      // cprojectphaseid
      arriveorderItem.setAttributeValue("cprojectphaseid", rs.getString(++index));
      // crowno
      arriveorderItem.setAttributeValue("crowno", rs.getString(++index));
      //vbackreasonb
      arriveorderItem.setAttributeValue("vbackreasonb", rs.getString(++index));
      //naccreplenishnum
      arriveorderItem.setNaccreplenishnum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //corder_bb1id
      arriveorderItem.setCorder_bb1id(rs.getString(++index));
      //blargess
      arriveorderItem.setAttributeValue("blargess", PuPubVO.getUFBoolean_NullAs(rs.getString(++index), UFBoolean.FALSE));
      //blargessuprow
      arriveorderItem.setAttributeValue("blargessuprow", PuPubVO.getUFBoolean_NullAs(rs.getString(++index), UFBoolean.FALSE));
      //V5 New:
      arriveorderItem.setPk_reqcorp(rs.getString(++index));
      arriveorderItem.setPk_reqstoorg(rs.getString(++index));
      arriveorderItem.setPk_creqwareid(rs.getString(++index));
      arriveorderItem.setPk_invoicecorp(rs.getString(++index));
      //eric 
      arriveorderItem.setJyjg(rs.getString(++index));
      arriveorderItem.setGlnum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
      //
      v.addElement(arriveorderItem);
    }
  }catch(SQLException e){
      PubDMO.throwBusinessException(e);
    } finally {
    try {
      if (con != null) {
        con.close();
      }
    } catch (Exception e) {
    }
  }
  if (v != null && v.size() > 0) {
    arriveorderItems = new ArriveorderItemVO[v.size()];
    v.copyInto(arriveorderItems);
  }
  return arriveorderItems;
}
/**
 * 通过主键数组查询相应表体数组
 * 
 * @since v51 , 重构， by Chaozp on 2007-02-14
 * 
 */
public ArriveorderItemVO[] findItemsForHids(String[] saHid) throws BusinessException {
  //
  return queryBodysByHidsSql("carriveorderid in " + new TempTableUtil().getSubSql(saHid));
  
}

/**
 * 按条件查询到货单表体
 * @return nc.vo.rc.receive.ArriveorderItemVO[]
 * @param strSQL String
 * @exception java.sql.SQLException 异常说明。
 */
public ArriveorderItemVO[] findItemsForStat(String strSQL, boolean bScEnabled) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "findItemsForStat", new Object[] { strSQL });
	/*************************************************************/
	/*
	新加字段:

	到货单号 	 po_arriveorder.varrordercode
	供应商ID	 po_arriveorder.cvendorbaseid
	供应商管理ID po_arriveorder.cvendormangid
	到货日期     po_arriveorder.dreceivedate
	计划到货日期 po_order_b.dplanarrvdate
	订货日期     po_order.dorderdate
	订单号	     po_order.vordercode
	项目名称	 bd_jobbasfil.jobname   		-->>赋值给表体属性 cprojectid
	项目阶段名称 bd_jobphase.jobphasename		-->>赋值给表体属性 cprojectphaseid
	*/
	StringBuffer sql = new StringBuffer("SELECT po_arriveorder_b.carriveorderid, po_arriveorder_b.pk_corp,po_arriveorder_b.corder_bid, po_arriveorder_b.corderid, po_arriveorder_b.cmangid, po_arriveorder_b.cassistunit, po_arriveorder_b.narrvnum, po_arriveorder_b.nassistnum, po_arriveorder_b.nwastnum, po_arriveorder_b.nwastassistnum, po_arriveorder_b.npresentnum, po_arriveorder_b.npresentassistnum, po_arriveorder_b.vproducenum, po_arriveorder_b.ccurrencytypeid, po_arriveorder_b.noriginalcurprice, po_arriveorder_b.noriginalcurmny, po_arriveorder_b.nexchangeotobrate, po_arriveorder_b.nprice, po_arriveorder_b.nmoney, po_arriveorder_b.nexchangeotoarate, po_arriveorder_b.nassistcurprice, po_arriveorder_b.nassistcurmny, po_arriveorder_b.dproducedate, po_arriveorder_b.ivalidday, po_arriveorder_b.dvaliddate, po_arriveorder_b.nelignum, po_arriveorder_b.nnotelignum, po_arriveorder_b.naccumchecknum, po_arriveorder_b.naccumwarehousenum, po_arriveorder_b.cwarehouseid, po_arriveorder_b.cstoreid, po_arriveorder_b.cupsourcebilltype, po_arriveorder_b.cupsourcebillid, po_arriveorder_b.cupsourcebillrowid, po_arriveorder_b.vmemo, po_arriveorder_b.vdef1, po_arriveorder_b.vdef2, po_arriveorder_b.vdef3, po_arriveorder_b.vdef4, po_arriveorder_b.vdef5, po_arriveorder_b.vdef6,po_arriveorder_b.vdef7, po_arriveorder_b.vdef8, po_arriveorder_b.vdef9, po_arriveorder_b.vdef10, po_arriveorder_b.vdef11, po_arriveorder_b.vdef12, po_arriveorder_b.vdef13, po_arriveorder_b.vdef14, po_arriveorder_b.vdef15, po_arriveorder_b.vdef16, po_arriveorder_b.vdef17, po_arriveorder_b.vdef18, po_arriveorder_b.vdef19, po_arriveorder_b.vdef20,");
	sql.append("po_arriveorder_b.pk_defdoc1,po_arriveorder_b.pk_defdoc2,po_arriveorder_b.pk_defdoc3,po_arriveorder_b.pk_defdoc4,po_arriveorder_b.pk_defdoc5,po_arriveorder_b.pk_defdoc6,po_arriveorder_b.pk_defdoc7,po_arriveorder_b.pk_defdoc8,po_arriveorder_b.pk_defdoc9,po_arriveorder_b.pk_defdoc10,po_arriveorder_b.pk_defdoc11,po_arriveorder_b.pk_defdoc12,po_arriveorder_b.pk_defdoc13,po_arriveorder_b.pk_defdoc14,po_arriveorder_b.pk_defdoc15,po_arriveorder_b.pk_defdoc16,po_arriveorder_b.pk_defdoc17,po_arriveorder_b.pk_defdoc18,po_arriveorder_b.pk_defdoc19,po_arriveorder_b.pk_defdoc20,po_arriveorder_b.vfree1, po_arriveorder_b.vfree2, po_arriveorder_b.vfree3, po_arriveorder_b.vfree4, po_arriveorder_b.vfree5,po_arriveorder_b.corder_bb1id, ");
	//报表扩充
	sql.append("po_arriveorder.varrordercode, ");
	sql.append("po_arriveorder.cvendorbaseid, ");
	sql.append("po_arriveorder.cvendormangid, ");
	sql.append("po_arriveorder.dreceivedate, ");
	sql.append("po_order_b.dplanarrvdate, ");
	sql.append("po_order.dorderdate, ");
	sql.append("po_order.vordercode, ");
	//原来补充
	sql.append("po_arriveorder_b.carriveorder_bid,");
	sql.append("po_arriveorder_b.cbaseid, ");
	sql.append("po_arriveorder_b.csourcebilltype,");
	sql.append("po_arriveorder_b.csourcebillid, ");
	sql.append("po_arriveorder_b.csourcebillrowid,");
	sql.append("po_arriveorder_b.blargess,po_arriveorder_b.blargessuprow,");
	sql.append("bd_jobbasfil.jobname,bd_jobphase.jobphasename ");
	sql.append(",po_arriveorder_b.pk_reqcorp,po_arriveorder_b.pk_reqstoorg,po_arriveorder_b.pk_creqwareid,po_arriveorder_b.pk_invoicecorp ");
	if (bScEnabled) {
		sql.append(",sc_order.vordercode,sc_order_b.dplanarrvdate,sc_order.dorderdate ");
	}
	sql.append(strSQL);
	ArriveorderItemVO[] arriveorderItems = null;
	ArriveorderItemVO arriveorderItem = null;
	Connection con = null;
	PreparedStatement stmt = null;
	Vector v = new Vector();
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		ResultSet rs = stmt.executeQuery();
		//
		while (rs.next()) {
			arriveorderItem = new ArriveorderItemVO();
			// carriveorderid :
			String carriveorderid = rs.getString(1);
			arriveorderItem.setCarriveorderid(carriveorderid == null ? null : carriveorderid.trim());
			// pk_corp :
			String pk_corp = rs.getString(2);
			arriveorderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// corder_bid :
			String corder_bid = rs.getString(3);
			arriveorderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
			// corderid :
			String corderid = rs.getString(4);
			arriveorderItem.setCorderid(corderid == null ? null : corderid.trim());
			// cinventoryid :
			String cmangid = rs.getString(5);
			arriveorderItem.setCmangid(cmangid == null ? null : cmangid.trim());
			// cassistunit :
			String cassistunit = rs.getString(6);
			arriveorderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
			// narrvnum :
			Object narrvnum = rs.getObject(7);
			arriveorderItem.setNarrvnum(
				(narrvnum == null || narrvnum.toString().trim().equals("")) ? null : new UFDouble(narrvnum.toString().trim()));
			// nassistnum :
			Object nassistnum = rs.getObject(8);
			arriveorderItem.setNassistnum(
				(nassistnum == null || nassistnum.toString().trim().equals("")) ? null : new UFDouble(nassistnum.toString().trim()));
			// nwastnum :
			Object nwastnum = rs.getObject(9);
			arriveorderItem.setNwastnum(
				(nwastnum == null || nwastnum.toString().trim().equals("")) ? null : new UFDouble(nwastnum.toString().trim()));
			// nwastassistnum :
			Object nwastassistnum = rs.getObject(10);
			arriveorderItem.setNwastassistnum(
				(nwastassistnum == null || nwastassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(nwastassistnum.toString().trim()));
			// npresentnum :
			Object npresentnum = rs.getObject(11);
			arriveorderItem.setNpresentnum(
				(npresentnum == null || npresentnum.toString().trim().equals("")) ? null : new UFDouble(npresentnum.toString().trim()));
			// npresentassistnum :
			Object npresentassistnum = rs.getObject(12);
			arriveorderItem.setNpresentassistnum(
				(npresentassistnum == null || npresentassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(npresentassistnum.toString().trim()));
			// vproducenum :
			String vproducenum = rs.getString(13);
			arriveorderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());
			// ccurrencytypeid :
			String ccurrencytypeid = rs.getString(14);
			arriveorderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
			// noriginalcurprice :
			Object noriginalcurprice = rs.getObject(15);
			arriveorderItem.setNoriginalcurprice(
				(noriginalcurprice == null || noriginalcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurprice.toString().trim()));
			// noriginalcurmny :
			Object noriginalcurmny = rs.getObject(16);
			arriveorderItem.setNoriginalcurmny(
				(noriginalcurmny == null || noriginalcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurmny.toString().trim()));
			// nexchangeotobrate :
			Object nexchangeotobrate = rs.getObject(17);
			arriveorderItem.setNexchangeotobrate(
				(nexchangeotobrate == null || nexchangeotobrate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotobrate.toString().trim()));
			// nprice :
			Object nprice = rs.getObject(18);
			arriveorderItem.setNprice(
				(nprice == null || nprice.toString().trim().equals("")) ? null : new UFDouble(nprice.toString().trim()));
			// nmoney :
			Object nmoney = rs.getObject(19);
			arriveorderItem.setNmoney(
				(nmoney == null || nmoney.toString().trim().equals("")) ? null : new UFDouble(nmoney.toString().trim()));
			// nexchangeotoarate :
			Object nexchangeotoarate = rs.getObject(20);
			arriveorderItem.setNexchangeotoarate(
				(nexchangeotoarate == null || nexchangeotoarate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotoarate.toString().trim()));
			// nassistcurprice :
			Object nassistcurprice = rs.getObject(21);
			arriveorderItem.setNassistcurprice(
				(nassistcurprice == null || nassistcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurprice.toString().trim()));
			// nassistcurmny :
			Object nassistcurmny = rs.getObject(22);
			arriveorderItem.setNassistcurmny(
				(nassistcurmny == null || nassistcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurmny.toString().trim()));
			// dproducedate :
			String dproducedate = rs.getString(23);
			arriveorderItem.setDproducedate(dproducedate == null ? null : new UFDate(dproducedate.trim(), false));
			// ivalidday :
			Integer ivalidday = (Integer) rs.getObject(24);
			arriveorderItem.setIvalidday(ivalidday == null ? null : ivalidday);
			// dvaliddate :
			String dvaliddate = rs.getString(25);
			arriveorderItem.setDvaliddate(dvaliddate == null ? null : new UFDate(dvaliddate.trim(), false));
			// nelignum :
			Object nelignum = rs.getObject(26);
			arriveorderItem.setNelignum(
				(nelignum == null || nelignum.toString().trim().equals("")) ? null : new UFDouble(nelignum.toString().trim()));
			// nnotelignum :
			Object nnotelignum = rs.getObject(27);
			arriveorderItem.setNnotelignum(
				(nnotelignum == null || nnotelignum.toString().trim().equals("")) ? null : new UFDouble(nnotelignum.toString().trim()));
			// naccumchecknum :
			Object naccumchecknum = rs.getObject(28);
			arriveorderItem.setNaccumchecknum(
				(naccumchecknum == null || naccumchecknum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumchecknum.toString().trim()));
			// naccumwarehousenum :
			Object naccumwarehousenum = rs.getObject(29);
			arriveorderItem.setNaccumwarehousenum(
				(naccumwarehousenum == null || naccumwarehousenum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumwarehousenum.toString().trim()));
			// cwarehouseid :
			String cwarehouseid = rs.getString(30);
			arriveorderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
			// cstoreid :
			String cstoreid = rs.getString(31);
			arriveorderItem.setCstoreid(cstoreid == null ? null : cstoreid.trim());
			// cupsourcebilltype :
			String cupsourcebilltype = rs.getString(32);
			arriveorderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
			// cupsourcebillid :
			String cupsourcebillid = rs.getString(33);
			arriveorderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
			// cupsourcebillrowid :
			String cupsourcebillrowid = rs.getString(34);
			arriveorderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
			// vmemo :
			String vmemo = rs.getString(35);
			arriveorderItem.setVmemo(vmemo == null ? null : vmemo.trim());
			// vdef1 :
			String vdef1 = rs.getString(36);
			arriveorderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
			// vdef2 :
			String vdef2 = rs.getString(37);
			arriveorderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
			// vdef3 :
			String vdef3 = rs.getString(38);
			arriveorderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
			// vdef4 :
			String vdef4 = rs.getString(39);
			arriveorderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
			// vdef5 :
			String vdef5 = rs.getString(40);
			arriveorderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
			// vdef6 :
			String vdef6 = rs.getString(41);
			arriveorderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(42);
			arriveorderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8
			String vdef8 = rs.getString(43);
			arriveorderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(44);
			arriveorderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(45);
			arriveorderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(46);
			arriveorderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(47);
			arriveorderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(48);
			arriveorderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(49);
			arriveorderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(50);
			arriveorderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(51);
			arriveorderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(52);
			arriveorderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(53);
			arriveorderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(54);
			arriveorderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(55);
			arriveorderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
			// pk_defdoc1 :
			String pk_defdoc1 = rs.getString(56);
			arriveorderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
			// pk_defdoc2 :
			String pk_defdoc2 = rs.getString(57);
			arriveorderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
			// pk_defdoc3 :
			String pk_defdoc3 = rs.getString(58);
			arriveorderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
			// pk_defdoc4 :
			String pk_defdoc4 = rs.getString(59);
			arriveorderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
			// pk_defdoc5 :
			String pk_defdoc5 = rs.getString(60);
			arriveorderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
			// pk_defdoc6 :
			String pk_defdoc6 = rs.getString(61);
			arriveorderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
			// pk_defdoc7 :
			String pk_defdoc7 = rs.getString(62);
			arriveorderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
			// pk_defdoc8
			String pk_defdoc8 = rs.getString(63);
			arriveorderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
			// pk_defdoc9 :
			String pk_defdoc9 = rs.getString(64);
			arriveorderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
			// pk_defdoc10 :
			String pk_defdoc10 = rs.getString(65);
			arriveorderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
			// pk_defdoc11 :
			String pk_defdoc11 = rs.getString(66);
			arriveorderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
			// pk_defdoc12 :
			String pk_defdoc12 = rs.getString(67);
			arriveorderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
			// pk_defdoc13 :
			String pk_defdoc13 = rs.getString(68);
			arriveorderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
			// pk_defdoc14 :
			String pk_defdoc14 = rs.getString(69);
			arriveorderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
			// pk_defdoc15 :
			String pk_defdoc15 = rs.getString(70);
			arriveorderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
			// pk_defdoc16 :
			String pk_defdoc16 = rs.getString(71);
			arriveorderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
			// pk_defdoc17 :
			String pk_defdoc17 = rs.getString(72);
			arriveorderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
			// pk_defdoc18 :
			String pk_defdoc18 = rs.getString(73);
			arriveorderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
			// pk_defdoc19 :
			String pk_defdoc19 = rs.getString(74);
			arriveorderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
			// pk_defdoc20 :
			String pk_defdoc20 = rs.getString(75);
			arriveorderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
			// vfree1 :
			String vfree1 = rs.getString(76);
			arriveorderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
			// vfree2 :
			String vfree2 = rs.getString(77);
			arriveorderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
			// vfree3 :
			String vfree3 = rs.getString(78);
			arriveorderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
			// vfree4 :
			String vfree4 = rs.getString(79);
			arriveorderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
			// vfree5 :
			String vfree5 = rs.getString(80);
			arriveorderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
			//corder_bb1id
			String sCorder_bb1id = rs.getString(81);
			arriveorderItem.setCorder_bb1id(sCorder_bb1id == null ? null : sCorder_bb1id);
			//到货单号
			String varrordercode = rs.getString(82);
			arriveorderItem.setArrcode(varrordercode == null ? null : varrordercode);
			//供应商ID
			String cvendorbaseid = rs.getString(83);
			arriveorderItem.setCvendorbaseid(cvendorbaseid == null ? null : cvendorbaseid);
			//供应商管理ID
			String cvendormangid = rs.getString(84);
			arriveorderItem.setCvendormangid(cvendormangid == null ? null : cvendormangid);
			//到货日期
			String dreceivedate = rs.getString(85);
			arriveorderItem.setArrvdate(dreceivedate == null ? null : new UFDate(dreceivedate, false));
			//计划到货日期
			String dplanarrvdate = rs.getString(86);
			arriveorderItem.setPlandate(dplanarrvdate == null ? null : new UFDate(dplanarrvdate, false));
			//订单日期
			String orderdate = rs.getString(87);
			arriveorderItem.setOrderdate(orderdate == null ? null : new UFDate(orderdate, false));
			//订单号
			String ordercode = rs.getString(88);
			arriveorderItem.setOrdercode(ordercode == null ? null : ordercode);
			//到货单体ID
			String arriveorder_bid = rs.getString(89);
			arriveorderItem.setCarriveorder_bid(arriveorder_bid == null ? null : arriveorder_bid);
			//存货基本档案主键
			String cbaseid = rs.getString(90);
			arriveorderItem.setCbaseid(cbaseid == null ? null : cbaseid);
			// csourcebilltype :
			String csourcebilltype = rs.getString(91);
			arriveorderItem.setAttributeValue("csourcebilltype", csourcebilltype == null ? null : csourcebilltype.trim());
			// csourcebillid :
			String csourcebillid = rs.getString(92);
			arriveorderItem.setAttributeValue("csourcebillid", csourcebillid == null ? null : csourcebillid.trim());
			// csourcebillrowid :
			String csourcebillrowid = rs.getString(93);
			arriveorderItem.setAttributeValue("csourcebillrowid", csourcebillrowid == null ? null : csourcebillrowid.trim());
			//blargess
			String blargess = rs.getString(94);
			arriveorderItem.setAttributeValue("blargess", blargess == null ? null : new UFBoolean(blargess.trim()));
			//blargessuprow
			String blargessuprow = rs.getString(95);
			arriveorderItem.setAttributeValue("blargessuprow", blargessuprow == null ? null : new UFBoolean(blargessuprow.trim()));

			// 项目名称
			String cprojectid = rs.getString(96);
			arriveorderItem.setAttributeValue("cprojectid", cprojectid == null ? null : cprojectid.trim());
			//项目阶段名称
			String cprojectphaseid = rs.getString(97);
			arriveorderItem.setAttributeValue("cprojectphaseid", cprojectphaseid == null ? null : cprojectphaseid.trim());
			
			//V5 New:
			arriveorderItem.setPk_reqcorp(rs.getString(98));
			arriveorderItem.setPk_reqstoorg(rs.getString(99));
			arriveorderItem.setPk_creqwareid(rs.getString(100));
			arriveorderItem.setPk_invoicecorp(rs.getString(101));
			
			//委外处理
			if (bScEnabled && ScmConst.SC_Order.equals(arriveorderItem.getCupsourcebilltype())) {
				String strTmp = rs.getString(102);
				arriveorderItem.setOrdercode(strTmp);
				strTmp = rs.getString(103);
				arriveorderItem.setPlandate(strTmp == null ? null : new UFDate(strTmp, false));
				strTmp = rs.getString(104);
				arriveorderItem.setOrderdate(strTmp == null ? null : new UFDate(strTmp, false));
			}
			//
			v.addElement(arriveorderItem);
		}
		if (rs != null)
			rs.close();
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	if (v.size() > 0) {
		arriveorderItems = new ArriveorderItemVO[v.size()];
		v.copyInto(arriveorderItems);
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "findItemsForStat", new Object[] { strSQL });
	/*************************************************************/
	return arriveorderItems;
}

/**
 * 获取供应商地区分类编码串集合: "('abc','bcd',...)"
 */
private String getAreaClassCodeSet(String value, String pk_corp, String opercode) {
	String strAreaClassCodeSet = "(";
	/*加入本级分类*/
	strAreaClassCodeSet += "'" + value + "'";
	try {
		/*调用公用方法获取所有子分类编码*/
		nc.bs.pu.pub.PubDMO pubdmo = new nc.bs.pu.pub.PubDMO();
		String[] saAreaClassCode = pubdmo.getVendorCodeByAreaClassCode(pk_corp, value, opercode);
		if (saAreaClassCode != null && saAreaClassCode.length > 0) {
			for (int i = 0; i < saAreaClassCode.length; i++) {
				if (saAreaClassCode[i] == null || saAreaClassCode[i].trim().equals(""))
					continue;
				strAreaClassCodeSet += ",";
				strAreaClassCodeSet += "'";
				strAreaClassCodeSet += saAreaClassCode[i].trim();
				strAreaClassCodeSet += "'";
			}
		}
	} catch (Exception e) {
		// 不影响业务，不需要抛出
		reportException(e);
	}
	strAreaClassCodeSet += ") ";
	return strAreaClassCodeSet;
}

/**
 * 过滤掉不可入库的单据
 * 库存要求：生产制造属性 isused = 'Y'
 */
private ArriveorderItemVO[] getCanStoreItems(ArriveorderItemVO[] items) throws Exception {

	if (items == null || items.length <= 0)
		return null;
	ArriveorderItemVO[] itemsRslt = null;
	String strHeadKey = null;
	while (strHeadKey == null || strHeadKey.trim().equals("")) {
		for (int i = 0; i < items.length; i++) {
			strHeadKey = items[i].getCarriveorderid();
		}
	}
	if (strHeadKey == null || strHeadKey.trim().equals("")) {
		SCMEnv.out("不能正确获取单据行主键，直接返回!");
		return items;
	}
	String sql = "select cstoreorganization from po_arriveorder where carriveorderid = ? ";

	String pk_calbody = null;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		stmt.setString(1, strHeadKey);
		rs = stmt.executeQuery();
		//
		if (rs.next()) {
			pk_calbody = rs.getString(1);
		} else {
			SCMEnv.out("不能正确获取单据库存组织主键，直接返回!");
			return items;
		}
		//
		Vector vTmp = new Vector();
		int iLen = items.length;
		String cmangid = null, strOrId = "";
		for (int i = 0; i < iLen; i++) {
			cmangid = items[i].getCmangid();
			if (cmangid != null && !vTmp.contains(cmangid)) {
				vTmp.addElement(cmangid);
			}
		}
		int iSize = vTmp.size();
		if (iSize <= 0) {
			SCMEnv.out("不能正确获取单据行存货管理档案主键，直接返回!");
			return items;
		}
		for (int i = 0; i < iSize; i++) {
			if (i == 0) {
				strOrId += "pk_invmandoc = '";
			} else {
				strOrId += "or pk_invmandoc = '";
			}
			strOrId += vTmp.elementAt(i);
			strOrId += "' ";
		}
		strOrId = "(" + strOrId + ") ";
		sql = "SELECT distinct pk_invmandoc,isused FROM bd_produce WHERE pk_calbody = '" + pk_calbody + "' and " + strOrId;
		rs = stmt.executeQuery(sql);
		Hashtable hTmp = new Hashtable();
		String strIsUsed = null;
		while (rs.next()) {
			cmangid = rs.getString(1);
			strIsUsed = rs.getString(2);
			if (cmangid == null) {
				continue;
			}
			if (strIsUsed.trim().equals("")) {
				strIsUsed = "Y";
			}
			hTmp.put(cmangid, new UFBoolean(strIsUsed));
		}
		UFBoolean bIsUsed = null;
		vTmp = new Vector();
		for (int i = 0; i < iLen; i++) {
			if (items[i].getCmangid() == null)
				continue;
			bIsUsed = (UFBoolean) hTmp.get(items[i].getCmangid());
			if (bIsUsed != null && bIsUsed.booleanValue()) {
				vTmp.add(items[i]);
			}
		}
		if (vTmp.size() > 0) {
			itemsRslt = new ArriveorderItemVO[vTmp.size()];
			vTmp.copyInto(itemsRslt);
		}
	}  finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return itemsRslt;
}

	/**
	 * 获取到货入库数量容差值
	 * 创建日期：(2003-9-2 10:40:23)
	 * @param  String　　公司主键
	 * @return UFDouble　容差值，是一个比例
	 */
	private UFDouble getCtrlRateArr(String corpId) throws BusinessException {
		SysInitVO m_initCtrlRateVO = null;
		UFDouble rate = new UFDouble(0.0);

		nc.bs.pub.para.SysInitBO myService = null;
		try {
			myService = new nc.bs.pub.para.SysInitBO();
			m_initCtrlRateVO = myService.queryByParaCode(corpId, "PO41");
			rate = new UFDouble(m_initCtrlRateVO.getValue());
		} catch (Exception e) {
			reportException(e);
			nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000064")/*@res "获取到货入库数量容差值时出错"*/,e);
		}
		return rate;
	}

	/**
	 * 获取到货入库数量容差控制
	 * 创建日期：(2003-9-2 10:40:23)
	 * @param  String　　公司主键
	 * @return String　  是否控制容差{"不控制","不保存"}
	 */
	private String getCtrlStringArr(String corpId) throws BusinessException {
		SysInitVO m_initCtrlRateVO = null;
		String strctrl = "不控制";

		nc.bs.pub.para.SysInitBO myService = null;
		try {
			myService = new nc.bs.pub.para.SysInitBO();
			m_initCtrlRateVO = myService.queryByParaCode(corpId, "PO40");
			strctrl = m_initCtrlRateVO.getValue();
		} catch (Exception e) {
			reportException(e);
			nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000065")/*@res "获取到货入库数量容差控制时出错"*/,e);
		}
		return strctrl;
	}

/**
 * 获取存货分类编码串集合: "('abc','bcd',...)"
 */
private String getInvClassCodeSet(String value, String opercode) throws Exception{
	String strInvClassCodeSet = "(";
	try {
		/*调用公用方法获取所有子分类编码*/
		nc.bs.ps.cost.CostanalyseDMO ddmo = new nc.bs.ps.cost.CostanalyseDMO();
		String saInvClassCode[] =
			ddmo.getSubInvClassCode(value, opercode);
		if (saInvClassCode != null && saInvClassCode.length > 0) {
			for (int i = 0; i < saInvClassCode.length; i++) {
				if (saInvClassCode[i] == null || saInvClassCode[i].trim().equals(""))
					continue;
				if (i > 0) {
					strInvClassCodeSet += ",";
				}
				strInvClassCodeSet += "'";
				strInvClassCodeSet += saInvClassCode[i].trim();
				strInvClassCodeSet += "'";
			}
		}
		/*处理公用方法异常情况*/
		else {
			strInvClassCodeSet += "'";
			strInvClassCodeSet += value;
			strInvClassCodeSet += "'";
		}
	} catch (Exception e) {
		reportException(e);

		strInvClassCodeSet += "'";
		strInvClassCodeSet += value;
		strInvClassCodeSet += "'";

		throw e;
	}
	strInvClassCodeSet += ") ";
	return strInvClassCodeSet;
}

/**
 * 根据委外订单头ID，获取是否有到货环节
 */
public Hashtable getIsBusiHaveArrForSc(Vector vHid) throws SQLException {

	if (vHid == null || vHid.size() <= 0)
		return null;
	int iSize = vHid.size();
	String sql = "select sc_order.corderid from sc_order ";
	sql += "inner join bd_busitype on sc_order.cbiztype = bd_busitype.pk_busitype ";
	sql += "left outer join pub_billbusiness on bd_busitype.pk_busitype = pub_billbusiness.pk_businesstype ";
	sql += "where pub_billbusiness.pk_billtype = '23' and (";
	for (int i = 0; i < iSize; i++) {
		if (i==0)
			sql += "corderid = '";
		else
			sql += "or corderid = '";
		sql += vHid.elementAt(i);
		sql += "' ";
	}
	sql += ") ";
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	Hashtable hRslt = new Hashtable();
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		//
		rs = stmt.executeQuery();
		//
		Vector vIsArr = new Vector();
		while (rs.next()) {
			vIsArr.addElement(rs.getString(1));
		}
		//
		for (int i = 0; i < iSize; i++) {
			hRslt.put(vHid.elementAt(i), new UFBoolean(vIsArr.contains(vHid.elementAt(i))));
		}
	} finally {
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {

		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return hRslt;
}

/**
 * @功能：查询供应商存货关系/生产档案,判断存货是否免检
 *  说明：1.如果供应商系统没有启用则处理成 免检属性为 false
		  2.如果存货管理档案生产制造页中未定义库存组织和存货关系则免检属性为false
		  3.返回值取 1 OR 2
 * @作者：李金巧
 * 创建日期：(2003-01-24)
 * @param:		String pk_cumandocs[]		供应商管理档案ID数组
 * @param:		String pk_invmandocs[]		存货管理档案ID数组
 * @param:		String pk_corp				公司ID
 * @param:		String pk_calbodys[]		库存组织ID数组
 * @return:		UFBoolean[]					是否免检数组
 * @exception:
 * @see;
 * @since:
 */
public UFBoolean[] getIsChecksMy(String pk_cumandoc, String pk_invmandocs[], String pk_corp, String pk_calbody) throws Exception {

	//参数校验
	if (pk_cumandoc == null || pk_cumandoc.equals(""))
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000066")/*@res "getIsChecksMy方法传入供应商参数为空！"*/);
	if (pk_invmandocs == null || pk_invmandocs.length == 0)
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000067")/*@res "getIsChecksMy方法传入存货参数为空！"*/);
	if (pk_calbody == null || pk_calbody.equals(""))
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000068")/*@res "getIsChecksMy方法传入库存组织参数为空！"*/);
	if (pk_corp == null || pk_corp.equals(""))
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000069")/*@res "getIsChecksMy方法公司参数为空！"*/);

	//返回值缺省为false，初始化
	UFBoolean[] isChecks = new UFBoolean[pk_invmandocs.length];
	for (int i = 0; i < isChecks.length; i++) {
		isChecks[i] = new UFBoolean(false);
	}
	//供应商模块是否启用
	boolean flag = false;
	try {
		ICreateCorpQueryService dmo = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
		if (dmo.isEnabled(pk_corp, nc.vo.pub.ProductCode.PROD_VRM)) {
			flag = true;
		}
	} catch (Exception e) {
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000046")/*@res "取是否启用供应商模块时出错，请稍后再试"*/,e);
	}
	Hashtable hash = new Hashtable();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		//
		con = getConnection();
		//供应商管理模块启用
		if (flag) {
			//拼接Sql语句
			StringBuffer sqlBuf = new StringBuffer(" select cvendormangid, cmangid, bnocheck from vrm_vendorstock where cvendormangid = '" + pk_cumandoc + "' ");
			for (int i = 0; i < pk_invmandocs.length; i++) {
				if (i == 0)
					sqlBuf.append(" and (cmangid = '" + pk_invmandocs[i] + "'");
				else
					sqlBuf.append(" or cmangid = '" + pk_invmandocs[i] + "'");
			}
			sqlBuf.append(")");
			stmt = con.prepareStatement(sqlBuf.toString());
			rs = stmt.executeQuery();

			while (rs.next()) {
				String cvendormangid = rs.getString(1);
				String cmangid = rs.getString(2);
				String check = rs.getString(3);
				//bnocheck 在数据库中取值：char[1] = { 0，1}
				if (check != null && !(check.trim().equals(""))) {
					if (check.equals("1")) {
						boolean ischeck = true;
						hash.put(cvendormangid + cmangid + "**", new UFBoolean(ischeck));
					}
				}
			}
		}
		//根据以上查询结果拼接Sql
		StringBuffer sqlBuf = new StringBuffer("select pk_invmandoc, pk_calbody, chkfreeflag from bd_produce where pk_calbody = '" + pk_calbody + "' ");
		for (int i = 0; i < pk_invmandocs.length; i++) {
			//如果该存货在vrm_vendorstock中免检，不再参与查询；
			if (hash.containsKey(pk_cumandoc + pk_invmandocs[i] + " **"))
				continue;
			if (i == 0)
				sqlBuf.append(" and (pk_invmandoc = '" + pk_invmandocs[i] + "'");
			else
				sqlBuf.append(" or pk_invmandoc = '" + pk_invmandocs[i] + "'");
		}
		sqlBuf.append(")");

		stmt = con.prepareStatement(sqlBuf.toString());
		rs = stmt.executeQuery();

		while (rs.next()) {
			String cmangid = rs.getString(1);
			String calbody = rs.getString(2);
			String chkfreeflag = rs.getString(3);
			if (chkfreeflag != null && !chkfreeflag.trim().equals("")) {
				if (chkfreeflag.trim().toUpperCase().equals("Y")) {
					boolean ischeck = true;
					hash.put(cmangid + calbody + "##", new UFBoolean(ischeck));
				}
			}
		}
	} finally {
		if (rs != null)
			rs.close();
		if (stmt != null) {
			stmt.close();
		}
		if (con != null) {
			con.close();
		}
	}

	if (hash != null && hash.size() != 0) {
		for (int j = 0; j < isChecks.length; j++) {
			if (hash.containsKey(pk_cumandoc + pk_invmandocs[j] + "**"))
				isChecks[j] = new UFBoolean(true);
			if (hash.containsKey(pk_invmandocs[j] + pk_calbody + "##"))
				isChecks[j] = new UFBoolean(true);
		}
	}
	return isChecks;
}

/**
 * 查询存货是否免检
 * 说明：本算法前提是入库单每次只回写到同一张到货单,
 		 这样只取同一个供应商、同一个公司、同一个库存组织的存货的否免检属性
 * 创建日期：(2003-07-05 16:10:26)
 */
//private Hashtable getIsChkFreeHash(String[] carriveorder_bids) throws SQLException {
//	if (carriveorder_bids == null || carriveorder_bids.length <= 0)
//		return null;
//	Connection con = null;
//	PreparedStatement stmt = null;
//	ResultSet rs = null;
//	Hashtable hRslt = new Hashtable();
//	try {
//		//
//		con = getConnection();
//		//存货是否免检
//		String pk_cumandoc = null, pk_corp = null, pk_calbody = null;
//		String sql = "select h.cvendormangid,h.pk_corp,h.cstoreorganization ";
//		sql += "from po_arriveorder_b b,po_arriveorder h ";
//		sql += "where b.carriveorderid = h.carriveorderid ";
//		sql += "and carriveorder_bid = ? ";
//		stmt = con.prepareStatement(sql);
//		stmt.setString(1, carriveorder_bids[0]);
//		rs = stmt.executeQuery();
//		if (rs.next()) {
//			pk_cumandoc = rs.getString(1);
//			pk_corp = rs.getString(2);
//			pk_calbody = rs.getString(3);
//		} else {
//			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000054")/*@res "查询数据错：用到货单子表ID查询不到公司、供应商、库存组织、存货管理ID信息，导致无法判断存货是否免检"*/);
//		}
//		rs.close();
//		stmt.close();
//		sql = "select distinct cmangid from po_arriveorder_b where carriveorder_bid in ";
//		String strIdsSet = "";
//		try {
//			nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
//			strIdsSet = tmpTblDmo.insertTempTable(carriveorder_bids,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC002,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
//			if (strIdsSet == null || strIdsSet.trim().length() == 0)
//				strIdsSet = "('TempTableDMOError')";
//		} catch (Exception e) {
//			throw new SQLException(e.getMessage());
//		}
//		sql += strIdsSet + " ";
//		//for (int i = 0; i < carriveorder_bids.length; i++) {
//			//if (i == 0)
//				//sql += "carriveorder_bid = '";
//			//else
//				//sql += "or carriveorder_bid = '";
//			//sql += carriveorder_bids[i];
//			//sql += "' ";
//		//}
//		stmt = con.prepareStatement(sql);
//		rs = stmt.executeQuery();
//		Vector vCmangId = new Vector();
//		String cmangid = null;
//		while (rs.next()) {
//			cmangid = rs.getString(1);
//			if (!vCmangId.contains(cmangid)) {
//				vCmangId.addElement(cmangid);
//			}
//		}
//
//		if (vCmangId.size() > 0) {
//			String[] saCmangId = new String[vCmangId.size()];
//			vCmangId.copyInto(saCmangId);
//			UFBoolean[] isChkFree = getIsChecksMy(pk_cumandoc, saCmangId, pk_corp, pk_calbody);
//			for (int i = 0; i < saCmangId.length; i++) {
//				hRslt.put(saCmangId[i], isChkFree[i]);
//			}
//		}
//	} catch (SQLException e) {
//		throw e;
//	} catch (Exception e) {
//		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000070")/*@res "查询存货是否免检时出错"*/);
//	} finally {
//		try {
//			if (rs != null)
//				rs.close();
//		} catch (Exception e) {
//		}
//		try {
//			if (stmt != null) {
//				stmt.close();
//			}
//		} catch (Exception e) {
//		}
//		try {
//			if (con != null) {
//				con.close();
//			}
//		} catch (Exception e) {
//		}
//	}
//	return hRslt;
//}

/**
 * 查询指定公司质检系统是否启用
 */
private boolean getIsQCEnable(String pk_corp) throws BusinessException {
	boolean isQCEnable = false;
	if (pk_corp == null) {
		SCMEnv.out("查询指定公司质检系统是否启用时出错:传入公司参数为空!");
		return false;
	}
//	nc.bs.sm.createcorp.CreatecorpDMO dmoCrtCorp =new nc.bs.sm.createcorp.CreatecorpDMO();
	ICreateCorpQueryService srv = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
	isQCEnable = srv.isEnabled(pk_corp, "QC");
	
	return isQCEnable;
}

/**
 * 查询到货单子表数量
 * 创建日期：(2003-07-05 16:10:26)
 */
public Hashtable getNotElgNumForSc(Vector vBid) throws SQLException {
	if (vBid == null || vBid.size() <= 0)
		return null;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	Hashtable hRslt = new Hashtable();
	try {
		//
		con = getConnection();
		//
		String sql = "select corder_bid,sum(isnull(nnotelignum,0)) from po_arriveorder_b ";
		sql += "where corder_bid in ";

		String strIdsSet = "";
		String[] sBid = new String[vBid.size()];
		vBid.toArray(sBid);
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sBid,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC006,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";

		sql += strIdsSet + " ";
		//int iLen = vBid.size();
		//for (int i = 0; i < iLen; i++) {
			//if (i == 0)
				//sql += "corder_bid = '";
			//else
				//sql += "or corder_bid = '";
			//sql += vBid.elementAt(i);
			//sql += "' ";
		//}
		sql += " and dr = 0 ";
		sql += "group by corder_bid ";
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		UFDouble ufdNotElgNum;
		BigDecimal bdTmp = null;
		String strTmp = null;
		while (rs.next()) {
			strTmp = rs.getString(1);
			bdTmp = rs.getBigDecimal(2);
			ufdNotElgNum = (bdTmp == null ? new UFDouble(0) : new UFDouble(bdTmp));
			if (strTmp != null)
				hRslt.put(strTmp, ufdNotElgNum);
		}
	} catch (SQLException e) {
		throw e;
	} catch (Exception e) {
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000072")/*@res "从到货单查询委外订单累计不合格数量时出错"*/);
	} finally {
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return hRslt;
}

/**
 * 查询到货单子表数量
 * 创建日期：(2003-07-05 16:10:26)
 */
private Hashtable getNumFromSubTab(String[] carriveorder_bids)
	throws SQLException {
	if (carriveorder_bids == null || carriveorder_bids.length <= 0)
		return null;
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	Hashtable hRslt = new Hashtable();
	try {
		//
		con = getConnection();
		//
		String sql =
			"select carriveorder_bid,isnull(naccumwarehousenum,0), isnull(nelignum,0), isnull(narrvnum,0) from po_arriveorder_b ";
		sql += "where carriveorder_bid in ";

		String strIdsSet = "";
		try {
			nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
			strIdsSet = tmpTblDmo.insertTempTable(carriveorder_bids,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC003,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
			if (strIdsSet == null || strIdsSet.trim().length() == 0)
				strIdsSet = "('TempTableDMOError')";
		} catch (Exception e) {
			throw new SQLException(e.getMessage());
		}
		sql += strIdsSet + " ";
		//for (int i = 0; i < carriveorder_bids.length; i++) {
			//if (i==0)
				//sql += "carriveorder_bid = '";
			//else
				//sql += "or carriveorder_bid = '";
			//sql += carriveorder_bids[i];
			//sql += "' ";
		//}
		//sql += ") ";
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		UFDouble oldaccnum_b, oldelgnum_b, oldarrnum_b;
		BigDecimal bdTmp = null;
		String strTmp = null;
		UFDouble[] saNum = null;
		while (rs.next()) {

			strTmp = rs.getString(1);

			bdTmp = rs.getBigDecimal(2);
			oldaccnum_b = (bdTmp == null ? new UFDouble(0) : new UFDouble(bdTmp));
			bdTmp = rs.getBigDecimal(3);
			oldelgnum_b = (bdTmp == null ? new UFDouble(0) : new UFDouble(bdTmp));
			bdTmp = rs.getBigDecimal(4);
			oldarrnum_b = (bdTmp == null ? new UFDouble(0) : new UFDouble(bdTmp));

			saNum = new UFDouble[3];
			saNum[0] = oldaccnum_b;
			saNum[1] = oldelgnum_b;
			saNum[2] = oldarrnum_b;

			if (strTmp != null)
				hRslt.put(strTmp, saNum);
		}
		rs.close();
		stmt.close();
	} catch (SQLException e) {
		throw e;
	} catch (Exception e) {
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000070")/*@res "查询存货是否免检时出错"*/);
	}
	return hRslt;
}

/**
 * @功能：根据到货单行返回上层单据ID及上层单据行ID
 * @return Hashtable : key = carriveorder_bid, value = String[2]   0,上层单据ID, 1,上层单据行ID
 * 2003-07-07 czp 效率优化增加
 */
public Hashtable getUpSourceBillIdLineIdHash(String[] carriveorder_bids)
	throws java.sql.SQLException {
	String sql =
		" select cupsourcebilltype,cupsourcebillrowid,carriveorder_bid from po_arriveorder_b where carriveorder_bid in ";

	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(carriveorder_bids,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC004,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql += strIdsSet + " ";
	//for (int i = 0; i < carriveorder_bids.length; i++) {
		//if (i==0)
			//sql += "carriveorder_bid ='";
		//else
			//sql += "or carriveorder_bid ='";
		//sql += carriveorder_bids[i];
		//sql += "' ";
	//}
	Connection con = null;
	PreparedStatement stmt = null;
	Hashtable hRslt = new Hashtable();
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		String strTmp = null, strRowId = null;
		String[] ids = null;
		while (rs.next()) {
			//
			ids = new String[2];
			//
			strTmp = rs.getString(1);
			ids[0] = strTmp;
			//
			strTmp = rs.getString(2);
			ids[1] = strTmp;
			//
			strRowId = rs.getString(3);
			//
			if (strRowId != null)
				hRslt.put(strRowId, ids);
		}
		rs.close();
	}  finally {
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return hRslt;
}

/**
 * @功能：是否所有分类编码被处理过
 */
private boolean isAllClassCodeDealed(String strClassKey, String whereString) {
	if (whereString == null || whereString.trim().equals("")) {
		return true;
	}
	if (whereString.indexOf(strClassKey) < 0) {
		return true;
	}
	String strTmp = whereString;
	while (strTmp.indexOf(strClassKey) >= 0) {
		strTmp =
			whereString.substring(whereString.indexOf(strClassKey) + strClassKey.length());
		if (strTmp.trim().startsWith("in")) {
			whereString = strTmp;
		} else {
			return false;
		}
	}
	return true;
}
/**
 * <p>流程动作组件(单张单据，多张单据共用的方法)
 * <p>功能：是否存在生成过补货订单的到货单(到货单弃审时用到)
 * <p>创建日期：(2006-5-29)
 * @param vo ArriveorderVO[]
 */
public boolean validateAfterBills(ArriveorderVO[] vos) throws BusinessException {
	if (vos == null || vos.length <= 0) {
		return true;
	}
	int iLen = vos.length, iLenBody = 0;
	UFBoolean FALSE = new UFBoolean(false);
	UFDouble ufdNum = null;
	for (int i = 0; i < iLen; i++) {
		if (vos[i] == null)
			continue;
		if (vos[i].getParentVO() == null)
			continue;
		if (((ArriveorderHeaderVO) vos[i].getParentVO()).getBisback() != null && ((ArriveorderHeaderVO) vos[i].getParentVO()).getBisback().equals(FALSE))
			continue;
		if (vos[i].getChildrenVO() == null || vos[i].getChildrenVO().length <= 0)
			continue;
		iLenBody = vos[i].getChildrenVO().length;
		for (int j = 0; j < iLenBody; j++) {
			if (vos[i].getChildrenVO()[j] == null)
				continue;
			ufdNum = (UFDouble) vos[i].getChildrenVO()[j].getAttributeValue("naccreplenishnum");
			if (ufdNum != null && ufdNum.doubleValue() > 0){
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000061")/*@res "请删除相关补货订单，再进行弃审操作"*/);
			}
		}
	}
	return true;
}

/**
 *  功能：查询到货单表体(退货补货)
 */
public ArriveorderItemVO[] queryBodyAllDataRc2Po(String key) throws SQLException {
	if (key == null)
		return null;
	if (key.trim().equals(""))
		return null;
	ArriveorderItemVO[] arriveorderItems = null;
	Vector v = new Vector(), vRowid = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	Hashtable table = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		//Select 列表
		StringBuffer sql = new StringBuffer(" ");
		sql.append("select po_arriveorder_b.carriveorder_bid, po_arriveorder_b.carriveorderid, po_arriveorder_b.pk_corp, po_arriveorder_b.corder_bid, po_arriveorder_b.corderid, po_arriveorder_b.cmangid, po_arriveorder_b.cassistunit,");
		sql.append("po_arriveorder_b.narrvnum,po_arriveorder_b.nassistnum,po_arriveorder_b.naccreplenishnum,po_arriveorder_b.nwastnum, po_arriveorder_b.nwastassistnum,");
		sql.append("po_arriveorder_b.npresentnum, po_arriveorder_b.npresentassistnum,po_arriveorder_b.vproducenum, po_arriveorder_b.ccurrencytypeid,");
		sql.append("po_arriveorder_b.noriginalcurprice, po_arriveorder_b.noriginalcurmny,po_arriveorder_b.nexchangeotobrate, po_arriveorder_b.nprice,po_arriveorder_b.nmoney,");
		sql.append("po_arriveorder_b.nexchangeotoarate, po_arriveorder_b.nassistcurprice,po_arriveorder_b.nassistcurmny, po_arriveorder_b.dproducedate, po_arriveorder_b.ivalidday, po_arriveorder_b.dvaliddate, po_arriveorder_b.nelignum, po_arriveorder_b.nnotelignum, po_arriveorder_b.naccumchecknum, po_arriveorder_b.naccumwarehousenum, po_arriveorder_b.cwarehouseid, po_arriveorder_b.cstoreid, po_arriveorder_b.cupsourcebilltype, po_arriveorder_b.cupsourcebillid, po_arriveorder_b.cupsourcebillrowid, po_arriveorder_b.vmemo, po_arriveorder_b.vdef1, po_arriveorder_b.vdef2, po_arriveorder_b.vdef3, po_arriveorder_b.vdef4, po_arriveorder_b.vdef5, po_arriveorder_b.vdef6,");
		sql.append("po_arriveorder_b.vdef7, po_arriveorder_b.vdef8, po_arriveorder_b.vdef9, po_arriveorder_b.vdef10, po_arriveorder_b.vdef11, po_arriveorder_b.vdef12, po_arriveorder_b.vdef13, po_arriveorder_b.vdef14, po_arriveorder_b.vdef15, po_arriveorder_b.vdef16, po_arriveorder_b.vdef17, po_arriveorder_b.vdef18, po_arriveorder_b.vdef19, po_arriveorder_b.vdef20,po_arriveorder_b.vfree1, po_arriveorder_b.vfree2, po_arriveorder_b.vfree3, po_arriveorder_b.vfree4, po_arriveorder_b.vfree5, po_arriveorder_b.cbaseid, po_arriveorder_b.csourcebilltype, po_arriveorder_b.csourcebillid, po_arriveorder_b.csourcebillrowid, po_arriveorder_b.ts,po_arriveorder_b.cprojectid,po_arriveorder_b.cprojectphaseid, po_arriveorder_b.crowno,po_arriveorder_b.vbackreasonb,po_arriveorder_b.corder_bb1id " +
				",po_arriveorder_b.pk_reqcorp,po_arriveorder_b.pk_reqstoorg,po_arriveorder_b.pk_creqwareid,po_arriveorder_b.pk_invoicecorp ");
		sql.append("from po_arriveorder_b ");
		sql.append("inner join bd_invmandoc on bd_invmandoc.pk_invmandoc = po_arriveorder_b.cmangid ");
		//Where 条件
		sql.append("where po_arriveorder_b.carriveorderid = ? and isnull(po_arriveorder_b.naccreplenishnum,0) + po_arriveorder_b.narrvnum < 0 and isnull(bd_invmandoc.iscanpurchased,'Y') = 'Y' ");
		sql.append("and isnull(po_arriveorder_b.blargess,'N') = 'N' and po_arriveorder_b.dr = 0 ");
		//
		stmt = con.prepareStatement(sql.toString());
		stmt.setString(1, key);
		rs = stmt.executeQuery();
		//处理辅数量及金额的准备工作
		//哈希表结构：table = {到货单行ID = 换算率}
		table = new Hashtable();
		String sRowId = null;
		UFDouble ufdArr = null, ufdAss = null, ufdRate = null;
		while (rs.next()) {
			ArriveorderItemVO arriveorderItem = new ArriveorderItemVO();
			int index = 1;
			//
			String carriveorder_bid = rs.getString(index++);
			arriveorderItem.setCarriveorder_bid(carriveorder_bid == null ? null : carriveorder_bid.trim());
			sRowId = arriveorderItem.getCarriveorder_bid();
			if (!vRowid.contains(sRowId))
				vRowid.add(sRowId);
			//
			String carriveorderid = rs.getString(index++);
			arriveorderItem.setCarriveorderid(carriveorderid == null ? null : carriveorderid.trim());
			//
			String pk_corp = rs.getString(index++);
			arriveorderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			//
			String corder_bid = rs.getString(index++);
			arriveorderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
			//
			String corderid = rs.getString(index++);
			arriveorderItem.setCorderid(corderid == null ? null : corderid.trim());
			//
			String cmangid = rs.getString(index++);
			arriveorderItem.setCmangid(cmangid == null ? null : cmangid.trim());
			//
			String cassistunit = rs.getString(index++);
			arriveorderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
			//到货数量
			Object narrvnum = rs.getObject(index++);
			arriveorderItem.setNarrvnum(
				(narrvnum == null || narrvnum.toString().trim().equals("")) ? null : new UFDouble(narrvnum.toString().trim()));
			ufdArr = arriveorderItem.getNarrvnum();
			//
			Object nassistnum = rs.getObject(index++);
			arriveorderItem.setNassistnum(
				(nassistnum == null || nassistnum.toString().trim().equals("")) ? null : new UFDouble(nassistnum.toString().trim()));
			ufdAss = arriveorderItem.getNassistnum();
			//
			Object naccreplenishnum = rs.getObject(index++);
			arriveorderItem.setNaccreplenishnum(
				(naccreplenishnum == null || naccreplenishnum.toString().trim().equals(""))
					? null
					: new UFDouble(naccreplenishnum.toString().trim()));
			//
			Object nwastnum = rs.getObject(index++);
			arriveorderItem.setNwastnum(
				(nwastnum == null || nwastnum.toString().trim().equals("")) ? null : new UFDouble(nwastnum.toString().trim()));
			//
			Object nwastassistnum = rs.getObject(index++);
			arriveorderItem.setNwastassistnum(
				(nwastassistnum == null || nwastassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(nwastassistnum.toString().trim()));
			//
			Object npresentnum = rs.getObject(index++);
			arriveorderItem.setNpresentnum(
				(npresentnum == null || npresentnum.toString().trim().equals("")) ? null : new UFDouble(npresentnum.toString().trim()));
			//
			Object npresentassistnum = rs.getObject(index++);
			arriveorderItem.setNpresentassistnum(
				(npresentassistnum == null || npresentassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(npresentassistnum.toString().trim()));
			//
			String vproducenum = rs.getString(index++);
			arriveorderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());
			//
			String ccurrencytypeid = rs.getString(index++);
			arriveorderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
			//
			Object noriginalcurprice = rs.getObject(index++);
			arriveorderItem.setNoriginalcurprice(
				(noriginalcurprice == null || noriginalcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurprice.toString().trim()));
			//
			Object noriginalcurmny = rs.getObject(index++);
			arriveorderItem.setNoriginalcurmny(
				(noriginalcurmny == null || noriginalcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurmny.toString().trim()));
			//
			Object nexchangeotobrate = rs.getObject(index++);
			arriveorderItem.setNexchangeotobrate(
				(nexchangeotobrate == null || nexchangeotobrate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotobrate.toString().trim()));
			//
			Object nprice = rs.getObject(index++);
			arriveorderItem.setNprice(
				(nprice == null || nprice.toString().trim().equals("")) ? null : new UFDouble(nprice.toString().trim()));
			//
			Object nmoney = rs.getObject(index++);
			arriveorderItem.setNmoney(
				(nmoney == null || nmoney.toString().trim().equals("")) ? null : new UFDouble(nmoney.toString().trim()));
			//
			Object nexchangeotoarate = rs.getObject(index++);
			arriveorderItem.setNexchangeotoarate(
				(nexchangeotoarate == null || nexchangeotoarate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotoarate.toString().trim()));
			//
			Object nassistcurprice = rs.getObject(index++);
			arriveorderItem.setNassistcurprice(
				(nassistcurprice == null || nassistcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurprice.toString().trim()));
			//
			Object nassistcurmny = rs.getObject(index++);
			arriveorderItem.setNassistcurmny(
				(nassistcurmny == null || nassistcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurmny.toString().trim()));
			//
			String dproducedate = rs.getString(index++);
			arriveorderItem.setDproducedate(dproducedate == null ? null : new UFDate(dproducedate.trim(),false));
			//
			Integer ivalidday = (Integer) rs.getObject(index++);
			arriveorderItem.setIvalidday(ivalidday == null ? null : ivalidday);
			//
			String dvaliddate = rs.getString(index++);
			arriveorderItem.setDvaliddate(dvaliddate == null ? null : new UFDate(dvaliddate.trim(),false));
			//
			Object nelignum = rs.getObject(index++);
			arriveorderItem.setNelignum(
				(nelignum == null || nelignum.toString().trim().equals("")) ? null : new UFDouble(nelignum.toString().trim()));
			//
			Object nnotelignum = rs.getObject(index++);
			arriveorderItem.setNnotelignum(
				(nnotelignum == null || nnotelignum.toString().trim().equals("")) ? null : new UFDouble(nnotelignum.toString().trim()));
			//
			Object naccumchecknum = rs.getObject(index++);
			arriveorderItem.setNaccumchecknum(
				(naccumchecknum == null || naccumchecknum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumchecknum.toString().trim()));
			//
			Object naccumwarehousenum = rs.getObject(index++);
			arriveorderItem.setNaccumwarehousenum(
				(naccumwarehousenum == null || naccumwarehousenum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumwarehousenum.toString().trim()));
			//
			String cwarehouseid = rs.getString(index++);
			arriveorderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
			//
			String cstoreid = rs.getString(index++);
			arriveorderItem.setCstoreid(cstoreid == null ? null : cstoreid.trim());
			//
			String cupsourcebilltype = rs.getString(index++);
			arriveorderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
			//
			String cupsourcebillid = rs.getString(index++);
			arriveorderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
			//
			String cupsourcebillrowid = rs.getString(index++);
			arriveorderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
			//
			String vmemo = rs.getString(index++);
			arriveorderItem.setVmemo(vmemo == null ? null : vmemo.trim());
			//
			String vdef1 = rs.getString(index++);
			arriveorderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
			//
			String vdef2 = rs.getString(index++);
			arriveorderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
			//
			String vdef3 = rs.getString(index++);
			arriveorderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
			//
			String vdef4 = rs.getString(index++);
			arriveorderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
			//
			String vdef5 = rs.getString(index++);
			arriveorderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
			//
			String vdef6 = rs.getString(index++);
			arriveorderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(index++);
			arriveorderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8
			String vdef8 = rs.getString(index++);
			arriveorderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(index++);
			arriveorderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(index++);
			arriveorderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(index++);
			arriveorderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(index++);
			arriveorderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(index++);
			arriveorderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(index++);
			arriveorderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(index++);
			arriveorderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(index++);
			arriveorderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(index++);
			arriveorderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(index++);
			arriveorderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(index++);
			arriveorderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(index++);
			arriveorderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
			//
			String vfree1 = rs.getString(index++);
			arriveorderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
			//
			String vfree2 = rs.getString(index++);
			arriveorderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
			//
			String vfree3 = rs.getString(index++);
			arriveorderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
			//
			String vfree4 = rs.getString(index++);
			arriveorderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
			//
			String vfree5 = rs.getString(index++);
			arriveorderItem.setVfree5(vfree5 == null ? null : vfree5.trim());

			//存货基本档案主键
			String cbaseid = rs.getString(index++);
			arriveorderItem.setCbaseid(cbaseid == null ? null : cbaseid);

			// csourcebilltype :
			String csourcebilltype = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebilltype", csourcebilltype == null ? null : csourcebilltype.trim());
			// csourcebillid :
			String csourcebillid = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebillid", csourcebillid == null ? null : csourcebillid.trim());
			// csourcebillrowid :
			String csourcebillrowid = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebillrowid", csourcebillrowid == null ? null : csourcebillrowid.trim());
			// ts
			String ts = rs.getString(index++);
			arriveorderItem.setTs(ts);
			// cprojectid
			String cprojectid = rs.getString(index++);
			arriveorderItem.setAttributeValue("cprojectid", cprojectid == null ? null : cprojectid.trim());
			// cprojectphaseid
			String cprojectphaseid = rs.getString(index++);
			arriveorderItem.setAttributeValue("cprojectphaseid", cprojectphaseid == null ? null : cprojectphaseid.trim());
			// crowno
			String crowno = rs.getString(index++);
			arriveorderItem.setAttributeValue("crowno", crowno == null ? null : crowno.trim());
			// vbackreasonb
			String vbackreasonb = rs.getString(index++);
			arriveorderItem.setAttributeValue("vbackreasonb", vbackreasonb);
			//corder_bb1id
			String corder_bb1id = rs.getString(index++);
			arriveorderItem.setCorder_bb1id(corder_bb1id == null ? null : corder_bb1id.trim());
			//V5 New:
			arriveorderItem.setPk_reqcorp(rs.getString(index++));
			arriveorderItem.setPk_reqstoorg(rs.getString(index++));
			arriveorderItem.setPk_creqwareid(rs.getString(index++));
			arriveorderItem.setPk_invoicecorp(rs.getString(index++));
			
			//向订单传入可补货数量:到货数量+累计补货数量
			arriveorderItem.setNarrvnum(
				arriveorderItem.getNaccreplenishnum() != null
					? arriveorderItem.getNarrvnum().add(arriveorderItem.getNaccreplenishnum()).multiply(-1.0)
					: arriveorderItem.getNarrvnum().multiply(-1.0));
			//
			v.addElement(arriveorderItem);

			//换算率哈希表处理
			if (!(ufdAss == null)) {
				ufdRate = ufdArr.div(ufdAss);
			} else {
				ufdRate = new UFDouble(0);
			}
			table.put(sRowId, ufdRate);
		}
		//关闭结果集
		rs.close();
		//
		if (v.size() > 0) {
			arriveorderItems = new ArriveorderItemVO[v.size()];
			v.copyInto(arriveorderItems);
		}
		//处理辅数量及金额
		ufdRate = null;
		if (arriveorderItems != null && arriveorderItems.length > 0) {
			for (int i = 0; i < arriveorderItems.length; i++) {
				//换算率
				arriveorderItems[i].setConvertrate((UFDouble) table.get(arriveorderItems[i].getCarriveorder_bid()));
				//辅数量=数量/换算率
				ufdRate = (UFDouble) table.get(arriveorderItems[i].getCarriveorder_bid());
				arriveorderItems[i].setNassistnum(ufdRate.doubleValue() == 0 ? null : arriveorderItems[i].getNarrvnum().div(ufdRate));
				//金额=数量*单价
				arriveorderItems[i].setNmoney(
					(arriveorderItems[i].getNprice() == null || arriveorderItems[i].getNarrvnum() == null)
						? null
						: arriveorderItems[i].getNprice().multiply(arriveorderItems[i].getNarrvnum()));
			}
		}
		//处理自由项
		arriveorderItems = (ArriveorderItemVO[]) nc.bs.pu.pub.PubDMO.getBodysWithFree(arriveorderItems, "cmangid", "vfree0");
	} catch (SQLException e) {
		throw e;
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	//
	return arriveorderItems;
}

/**
 * 功能描述: 查询表头ID[]的所有表体
 */
public ArriveorderItemVO[] queryBodyByHidsHts(String[] saHId, String[] saHTs)
	throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"queryBodyByHids",
		new Object[] { saHId, saHTs });
	/*************************************************************/
	if (saHId == null || saHId.length < 0)
		return null;
	if (saHTs == null || saHTs.length < 0)
		return null;
	if (saHId.length != saHTs.length)
		return null;
	//eric 
	StringBuffer sb = new StringBuffer("");
	sb.append("select b.carriveorder_bid, b.carriveorderid, b.pk_corp, b.corder_bid, b.corderid, b.cmangid, b.cassistunit, b.narrvnum, b.nassistnum, b.nwastnum, b.nwastassistnum, b.npresentnum, b.npresentassistnum, b.vproducenum, b.ccurrencytypeid, b.noriginalcurprice, b.noriginalcurmny, b.nexchangeotobrate, b.nprice, b.nmoney, b.nexchangeotoarate, b.nassistcurprice, b.nassistcurmny, b.dproducedate, b.ivalidday, b.dvaliddate, b.nelignum, b.nnotelignum, b.naccumchecknum, b.naccumwarehousenum, b.cwarehouseid, b.cstoreid, b.cupsourcebilltype, b.cupsourcebillid, b.cupsourcebillrowid, b.vmemo, b.vdef1, b.vdef2, b.vdef3, b.vdef4, b.vdef5, b.vdef6,");
	sb.append("b.vdef7, b.vdef8, b.vdef9, b.vdef10, b.vdef11, b.vdef12, b.vdef13, b.vdef14, b.vdef15, b.vdef16, b.vdef17, b.vdef18, b.vdef19, b.vdef20,b.vfree1, b.vfree2, b.vfree3, b.vfree4, b.vfree5, b.cbaseid, b.csourcebilltype, b.csourcebillid, b.csourcebillrowid, b.ts, b.cprojectid, b.cprojectphaseid, b.crowno,b.vbackreasonb,naccreplenishnum,b.corder_bb1id,b.blargess,b.blargessuprow " +
			",b.pk_reqcorp,b.pk_reqstoorg,b.pk_creqwareid,b.pk_invoicecorp ,jyjg,glnum ");
	sb.append("from po_arriveorder_b b inner join po_arriveorder h on h.carriveorderid = b.carriveorderid where ");
	sb.append("h.dr =0 and b.dr=0 ");
	sb.append("and (");
	for (int i = 0; i < saHId.length; i++) {
		if (i==0)
			sb.append("(h.carriveorderid='");
		else
			sb.append("or (h.carriveorderid='");
		sb.append(saHId[i] + "' ");
		sb.append("and h.ts='");
		sb.append(saHTs[i] + "') ");
	}
	sb.append(") ");
	String sql = sb.toString();
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	Vector vRslt = new Vector();
	ArriveorderItemVO arriveorderItem = null;
	ArriveorderItemVO[] items = null;
	int index = 0;
	String sTmp = null;
	Object oTmp = null;
	Integer iTmp = null;
	try {
		con = getConnection();
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();
		//
		while (rs.next()) {
			//
			index = 0;
			//
			arriveorderItem = new ArriveorderItemVO();
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCarriveorder_bid(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCarriveorderid(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setPk_corp(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCorder_bid(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCorderid(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCmangid(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCassistunit(sTmp == null ? null : sTmp.trim());
			//
			Object narrvnum = rs.getObject(++index);
			arriveorderItem.setNarrvnum(
				(narrvnum == null || narrvnum.toString().trim().equals(""))
					? null
					: new UFDouble(narrvnum.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNassistnum(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNwastnum(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNwastassistnum(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNpresentnum(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNpresentassistnum(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString()));
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVproducenum(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCcurrencytypeid(sTmp == null ? null : sTmp.trim());
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNoriginalcurprice(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNoriginalcurmny(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNexchangeotobrate(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNprice(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNmoney(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNexchangeotoarate(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNassistcurprice(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNassistcurmny(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setDproducedate(sTmp == null ? null : new UFDate(sTmp.trim(),false));
			//
			iTmp = (Integer) rs.getObject(++index);
			arriveorderItem.setIvalidday(iTmp == null ? null : iTmp);
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setDvaliddate(sTmp == null ? null : new UFDate(sTmp.trim(),false));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNelignum(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNnotelignum(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNaccumchecknum(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));
			//
			oTmp = rs.getObject(++index);
			arriveorderItem.setNaccumwarehousenum(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString().trim()));

			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCwarehouseid(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCstoreid(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCupsourcebilltype(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCupsourcebillid(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setCupsourcebillrowid(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVmemo(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVdef1(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVdef2(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVdef3(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVdef4(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVdef5(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVdef6(sTmp == null ? null : sTmp.trim());
			// vdef7 :
			String vdef7 = rs.getString(++index);
			arriveorderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8
			String vdef8 = rs.getString(++index);
			arriveorderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(++index);
			arriveorderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(++index);
			arriveorderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(++index);
			arriveorderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(++index);
			arriveorderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(++index);
			arriveorderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(++index);
			arriveorderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(++index);
			arriveorderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(++index);
			arriveorderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(++index);
			arriveorderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(++index);
			arriveorderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(++index);
			arriveorderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(++index);
			arriveorderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVfree1(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVfree2(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVfree3(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVfree4(sTmp == null ? null : sTmp.trim());
			//
			sTmp = rs.getString(++index);
			arriveorderItem.setVfree5(sTmp == null ? null : sTmp.trim());

			//存货基本档案主键
			sTmp = rs.getString(++index);
			arriveorderItem.setCbaseid(sTmp == null ? null : sTmp);

			// csourcebilltype :
			sTmp = rs.getString(++index);
			arriveorderItem.setAttributeValue("csourcebilltype", sTmp == null ? null : sTmp.trim());
			// csourcebillid :
			sTmp = rs.getString(++index);
			arriveorderItem.setAttributeValue("csourcebillid", sTmp == null ? null : sTmp.trim());
			// csourcebillrowid :
			sTmp = rs.getString(++index);
			arriveorderItem.setAttributeValue("csourcebillrowid", sTmp == null ? null : sTmp.trim());
			// ts
			sTmp = rs.getString(++index);
			arriveorderItem.setTs(sTmp == null ? null : sTmp.trim());
			// iispresent
			//sTmp = rs.getString(++index);
			//arriveorderItem.setIispresent(sTmp == null ? null : new UFBoolean(sTmp.trim()));
			// cprojectid
			sTmp = rs.getString(++index);
			arriveorderItem.setAttributeValue("cprojectid", sTmp == null ? null : sTmp.trim());
			// cprojectphaseid
			sTmp = rs.getString(++index);
			arriveorderItem.setAttributeValue("cprojectphaseid", sTmp == null ? null : sTmp.trim());
			// crowno
			sTmp = rs.getString(++index);
			arriveorderItem.setAttributeValue("crowno", sTmp == null ? null : sTmp.trim());
			//vbackreasonb
			sTmp = rs.getString(++index);
			arriveorderItem.setAttributeValue("vbackreasonb", sTmp);
			//naccreplenishnum
			oTmp = rs.getObject(++index);
			arriveorderItem.setNaccreplenishnum(
				(oTmp == null || oTmp.toString().trim().equals(""))
					? null
					: new UFDouble(oTmp.toString()));
			//
			//corder_bb1id
			String corder_bb1id = rs.getString(++index);
			arriveorderItem.setCorder_bb1id(corder_bb1id == null ? null : corder_bb1id.trim());
			//blargess
			String blargess = rs.getString(++index);
			arriveorderItem.setAttributeValue("blargess", blargess == null ? null : new UFBoolean(blargess.trim()));
			//blargessuprow
			String blargessuprow = rs.getString(++index);
			arriveorderItem.setAttributeValue("blargessuprow", blargessuprow == null ? null : new UFBoolean(blargessuprow.trim()));
			
			//V5 New:
			arriveorderItem.setPk_reqcorp(rs.getString(++index));
			arriveorderItem.setPk_reqstoorg(rs.getString(++index));
			arriveorderItem.setPk_creqwareid(rs.getString(++index));
			arriveorderItem.setPk_invoicecorp(rs.getString(++index));
			
			  //eric 
		      arriveorderItem.setJyjg(rs.getString(++index));
		      arriveorderItem.setGlnum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
			
			vRslt.addElement(arriveorderItem);
		}
		if (vRslt.size() > 0) {
			items = new ArriveorderItemVO[vRslt.size()];
			vRslt.copyInto(items);
		}
	} catch (Exception e) {
		reportException(e);
		throw new SQLException(e.getMessage());
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"queryBodyByHids",
		new Object[] { saHId, saHTs });
	/*************************************************************/

	return items;
}

/**
 * @功能：退货补货查询到货单表头
 * @作者：晁志平
 * 创建日期：(2003-9-13 14:26:48)
 */
public ArriveorderHeaderVO[] queryHeadAllDataForRc2Po(String strBusiType, String whereString) throws SQLException {
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"queryHeadAllDataForRc2Po",
		new Object[] { strBusiType, whereString });
	/*************************************************************/
	Vector v = new Vector();
	ArriveorderHeaderVO[] arriveorderHeaders = null;
	ArriveorderHeaderVO arriveorderHeader = null;
	Connection con = null;
	PreparedStatement stmt = null;
	String strCorpId = null;
	StringBuffer sql = null;
	ResultSet rs = null;
	try {
		sql = new StringBuffer(" ");
		if (whereString != null && !whereString.trim().equals("")) {
			//处理供应商分类编码
			whereString = setCustClassCode(strCorpId, "bd_areacl.areaclcode", whereString);
			//处理存货分类编码
			whereString = setInvClassCode("bd_invcl.invclasscode", whereString);
			sql.append("select distinct po_arriveorder.pk_corp, po_arriveorder.varrordercode, po_arriveorder.dreceivedate, po_arriveorder.cvendormangid, po_arriveorder.cbiztype, po_arriveorder.ctransmodeid, po_arriveorder.cstoreorganization, po_arriveorder.creceivepsn, po_arriveorder.cdeptid, po_arriveorder.cemployeeid, po_arriveorder.caccountyear, po_arriveorder.ibillstatus, po_arriveorder.coperator, po_arriveorder.cbilltype, po_arriveorder.vmemo, po_arriveorder.vdef1, po_arriveorder.vdef2, po_arriveorder.vdef3, po_arriveorder.vdef4, po_arriveorder.vdef5, po_arriveorder.vdef6, po_arriveorder.vdef7, po_arriveorder.vdef8, po_arriveorder.vdef9, po_arriveorder.vdef10,");
			sql.append("po_arriveorder.vdef11, po_arriveorder.vdef12, po_arriveorder.vdef13, po_arriveorder.vdef14, po_arriveorder.vdef15, po_arriveorder.vdef16, po_arriveorder.vdef17, po_arriveorder.vdef18, po_arriveorder.vdef19, po_arriveorder.vdef20,po_arriveorder.cvendorbaseid, po_arriveorder.cfreecustid, po_arriveorder.dauditdate, po_arriveorder.cauditpsn, po_arriveorder.carriveorderid ,po_arriveorder.ts,po_arriveorder.bisback,po_arriveorder.vbackreasonh ");
			sql.append(",pk_purcorp,tmaketime,taudittime,tlastmaketime from po_arriveorder ");
			//子表
			sql.append("inner join po_arriveorder_b on po_arriveorder.carriveorderid = po_arriveorder_b.carriveorderid ");
			//供应商
			sql.append("inner join bd_cubasdoc on po_arriveorder.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
			//地区分类
			sql.append("inner join bd_areacl on bd_areacl.pk_areacl = bd_cubasdoc.pk_areacl ");
			//存货及存货分类
			sql.append("inner join bd_invbasdoc on po_arriveorder_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
			sql.append("inner join bd_invmandoc on po_arriveorder_b.cmangid = bd_invmandoc.pk_invmandoc ");
			sql.append("inner join bd_invcl on bd_invbasdoc.pk_invcl = bd_invcl.pk_invcl ");
			//部门
			sql.append("inner join bd_deptdoc on po_arriveorder.cdeptid = bd_deptdoc.pk_deptdoc ");
			//库存组织
			sql.append("inner join bd_calbody on po_arriveorder.cstoreorganization = bd_calbody.pk_calbody ");
			//仓库
			sql.append("LEFT OUTER JOIN bd_stordoc ON po_arriveorder_b.cwarehouseid = bd_stordoc.pk_stordoc ");
			//业务员
			sql.append("inner join bd_psndoc ON po_arriveorder.cemployeeid = bd_psndoc.pk_psndoc ");
			//操作员(制单人)
			sql.append("inner join sm_user ON po_arriveorder.coperator = sm_user.cuserid ");
			//操作员(审批人)
			sql.append("LEFT OUTER JOIN sm_user sm_user1 ON po_arriveorder.cauditpsn = sm_user1.cuserid ");
			//项目
			sql.append("LEFT OUTER JOIN bd_jobmngfil ON po_arriveorder_b.cprojectid = bd_jobmngfil.pk_jobmngfil ");
			sql.append("LEFT OUTER JOIN bd_jobbasfil ON bd_jobmngfil.pk_jobbasfil = bd_jobbasfil.pk_jobbasfil ");
			//项目阶段
			sql.append("LEFT OUTER JOIN bd_jobobjpha ON po_arriveorder_b.cprojectphaseid = bd_jobobjpha.pk_jobobjpha ");
			sql.append("LEFT OUTER JOIN bd_jobphase ON bd_jobphase.pk_jobphase = bd_jobobjpha.pk_jobphase ");
			//发运方式
			sql.append("LEFT OUTER JOIN bd_sendtype ON bd_sendtype.pk_sendtype = po_arriveorder.ctransmodeid ");
			//常用条件
			sql.append("where coalesce(po_arriveorder_b.blargess,'N') = 'N' ");
			//对审批流的特殊处理
			String key = "carriveorderid";
			if (whereString != null && !whereString.trim().equals("") && whereString.indexOf(key) >= 0) {
				String mid = whereString;
				whereString = "";
				int iIndexCarriveorderid = mid.indexOf(key);
				whereString = mid.substring(0, iIndexCarriveorderid) + " ";
				whereString += " po_arriveorder." + key + " ";
				whereString += mid.substring(iIndexCarriveorderid + key.length(), mid.length()) + " ";
			}
			sql.append("and " + whereString + " ");
			sql.append("and po_arriveorder.dr = 0 and po_arriveorder_b.dr = 0 ");
			//针对退货补货
			sql.append("and upper(po_arriveorder.bisback) = 'Y' and isnull(naccreplenishnum,0) + narrvnum < 0 ");
		}
		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		rs = stmt.executeQuery();
		//
		int index = 0;
		while (rs.next()) {
			//
			index = 0;
			//
			arriveorderHeader = new ArriveorderHeaderVO();
			// pk_corp :
			String pk_corp = rs.getString(++index);
			arriveorderHeader.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// varrordercode :
			String varrordercode = rs.getString(++index);
			arriveorderHeader.setVarrordercode(varrordercode == null ? null : varrordercode.trim());
			// dreceivedate :
			String dreceivedate = rs.getString(++index);
			arriveorderHeader.setDreceivedate(dreceivedate == null ? null : new UFDate(dreceivedate.trim(), false));
			// cvendormangid :
			String cvendormangid = rs.getString(++index);
			arriveorderHeader.setCvendormangid(cvendormangid == null ? null : cvendormangid.trim());
			// cbiztypeid :
			String cbiztype = rs.getString(++index);
			arriveorderHeader.setCbiztype(cbiztype == null ? null : cbiztype.trim());
			// ctransmodeid :
			String ctransmodeid = rs.getString(++index);
			arriveorderHeader.setCtransmodeid(ctransmodeid == null ? null : ctransmodeid.trim());
			// cstoreorganization :
			String cstoreorganization = rs.getString(++index);
			arriveorderHeader.setCstoreorganization(cstoreorganization == null ? null : cstoreorganization.trim());
			// creceivepsn :
			String creceivepsn = rs.getString(++index);
			arriveorderHeader.setCreceivepsn(creceivepsn == null ? null : creceivepsn.trim());
			// cdeptid :
			String cdeptid = rs.getString(++index);
			arriveorderHeader.setCdeptid(cdeptid == null ? null : cdeptid.trim());
			// cemployeeid :
			String cemployeeid = rs.getString(++index);
			arriveorderHeader.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
			// caccountyear :
			String caccountyear = rs.getString(++index);
			arriveorderHeader.setCaccountyear(caccountyear == null ? null : caccountyear.trim());
			// ibillstatus :
			Integer ibillstatus = (Integer) rs.getObject(++index);
			arriveorderHeader.setIbillstatus(ibillstatus == null ? null : ibillstatus);
			// coperator :
			String coperator = rs.getString(++index);
			arriveorderHeader.setCoperator(coperator == null ? null : coperator.trim());
			// cbilltype :
			String cbilltype = rs.getString(++index);
			arriveorderHeader.setCbilltype(cbilltype == null ? null : cbilltype.trim());
			// vmemo :
			String vmemo = rs.getString(++index);
			arriveorderHeader.setVmemo(vmemo == null ? null : vmemo.trim());
			// vdef1 :
			String vdef1 = rs.getString(++index);
			arriveorderHeader.setVdef1(vdef1 == null ? null : vdef1.trim());
			// vdef2 :
			String vdef2 = rs.getString(++index);
			arriveorderHeader.setVdef2(vdef2 == null ? null : vdef2.trim());
			// vdef3 :
			String vdef3 = rs.getString(++index);
			arriveorderHeader.setVdef3(vdef3 == null ? null : vdef3.trim());
			// vdef4 :
			String vdef4 = rs.getString(++index);
			arriveorderHeader.setVdef4(vdef4 == null ? null : vdef4.trim());
			// vdef5 :
			String vdef5 = rs.getString(++index);
			arriveorderHeader.setVdef5(vdef5 == null ? null : vdef5.trim());
			// vdef6 :
			String vdef6 = rs.getString(++index);
			arriveorderHeader.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(++index);
			arriveorderHeader.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8 :
			String vdef8 = rs.getString(++index);
			arriveorderHeader.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(++index);
			arriveorderHeader.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(++index);
			arriveorderHeader.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(++index);
			arriveorderHeader.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(++index);
			arriveorderHeader.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(++index);
			arriveorderHeader.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(++index);
			arriveorderHeader.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(++index);
			arriveorderHeader.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(++index);
			arriveorderHeader.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(++index);
			arriveorderHeader.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(++index);
			arriveorderHeader.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(++index);
			arriveorderHeader.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(++index);
			arriveorderHeader.setVdef20(vdef20 == null ? null : vdef20.trim());
			// cvendorbaseid :
			String cvendorbaseid = rs.getString(++index);
			arriveorderHeader.setCvendorbaseid(cvendorbaseid == null ? null : cvendorbaseid.trim());
			// cfreecustid :
			String cfreecustid = rs.getString(++index);
			arriveorderHeader.setCfreecustid(cfreecustid == null ? null : cfreecustid.trim());
			//dauditdate
			String dauditdate = rs.getString(++index);
			arriveorderHeader.setAttributeValue("dauditdate", dauditdate == null ? null : new UFDate(dauditdate, false));
			//cauditpsn
			String cauditpsn = rs.getString(++index);
			arriveorderHeader.setAttributeValue("cauditpsn", cauditpsn == null ? null : cauditpsn.trim());
			//po_arriveorder.carriveorderid
			String carriveorderid = rs.getString(++index);
			arriveorderHeader.setAttributeValue("carriveorderid", carriveorderid == null ? null : carriveorderid.trim());
			//ts
			String ts = rs.getString(++index);
			arriveorderHeader.setTs(ts);
			//bisback
			String bisback = rs.getString(++index);
			if (bisback == null || bisback.trim().equals("")) {
				arriveorderHeader.setBisback(new UFBoolean(false));
			} else {
				arriveorderHeader.setBisback(new UFBoolean(bisback.trim()));
			}
			//vbackreasonh
			String vbackreasonh = rs.getString(++index);
			arriveorderHeader.setVbackreasonh(vbackreasonh);
			//,pk_purcorp
			String strTmp = rs.getString(++index);
			arriveorderHeader.setPk_purcorp(strTmp);
			//,tmaketime
			strTmp = rs.getString(++index);
			arriveorderHeader.setTmaketime(PuPubVO.getUFDateTime(strTmp));
			//,taudittime
			strTmp = rs.getString(++index);
			arriveorderHeader.setTaudittime(PuPubVO.getUFDateTime(strTmp));
			//,tlastmaketime
			strTmp = rs.getString(++index);
			arriveorderHeader.setTlastmaketime(PuPubVO.getUFDateTime(strTmp));
			//
			v.addElement(arriveorderHeader);
		}
		if (rs != null)
			rs.close();
	} catch (SQLException e) {
		throw e;
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	if (v.size() > 0) {
		arriveorderHeaders = new ArriveorderHeaderVO[v.size()];
		v.copyInto(arriveorderHeaders);
	}
	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod(
		"nc.bs.rc.receive.ArriveorderDMO",
		"queryHeadAllDataForRc2Po",
		new Object[] { strBusiType, whereString });
	/*************************************************************/
	return arriveorderHeaders;
}

/**
 * 作者：汪维敏
 * 功能：查询所有采购订单子子表
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2004-3-30 13:08:24)
 */
public HashMap queryOrdbb1() throws SQLException{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "queryOrdbb1", new Object[]{});
	/*************************************************************/
	HashMap hRet = new HashMap();
	String sql = "SELECT corder_bb1id,dplanarrvdate FROM po_order_bb1 WHERE dr = 0";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();

		while (rs.next()) {
			String sCorder_bb1Id = rs.getString("corder_bb1id");
			String sArriveDate = rs.getString("dplanarrvdate");

			hRet.put(sCorder_bb1Id,sArriveDate);
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "queryOrdbb1", new Object[]{});
	/*************************************************************/

	return hRet ;
}

/**
 * 更新累计补货数量 (批处理)
 */
public void rewriteNaccReplenishNum(nc.vo.scm.pu.ParaVO21WriteNumTo23 paraVo) throws Exception {
	//参数合法性检查
	if (paraVo == null) {
		SCMEnv.out("针对退货补货回写接口参数方法不正确");
		return;
	}
	if (paraVo.getRowId() == null || paraVo.getRowId().length <= 0) {
		SCMEnv.out("针对退货补货回写接口参数方法不正确");
		return;
	}
	if (paraVo.getNumAdded() == null || paraVo.getNumAdded().length <= 0) {
		SCMEnv.out("针对退货补货回写接口参数方法不正确");
		return;
	}
	if (paraVo.getRowId().length != paraVo.getNumAdded().length) {
		SCMEnv.out("针对退货补货回写接口参数方法不正确");
		return;
	}
	//
	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		//
		con = getConnection();
		//回写
		String sql = "update po_arriveorder_b set naccreplenishnum = isnull(naccreplenishnum,0) + (?) ";
		sql += "where carriveorder_bid = ? ";
		stmt = prepareStatement(con, sql);
		String[] saRowId = paraVo.getRowId();
		UFDouble[] uaNum = paraVo.getNumAdded();
		int iLen = saRowId.length;
		for (int i = 0; i < iLen; i++) {
			if (saRowId[i] == null || uaNum[i] == null)
				continue;
			stmt.setDouble(1, uaNum[i].doubleValue());
			stmt.setString(2, saRowId[i]);
			executeUpdate(stmt);
		}
		executeBatch(stmt);
		//检查
		sql = "select count(carriveorder_bid) from po_arriveorder_b where isnull(naccreplenishnum,0) + narrvnum > 0 and carriveorder_bid in ";
		//for (int i = 0; i < iLen; i++) {
			//if (i==0)
				//sql += "carriveorder_bid ='";
			//else
				//sql += "or carriveorder_bid ='";
			//sql += saRowId[i];
			//sql += "' ";
		//}
		//sql += ") ";

		String strIdsSet = "";
		nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet =
			tmpTblDmo.insertTempTable(saRowId,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC011,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
		sql += strIdsSet + " ";

		stmt = prepareStatement(con, sql);
		rs = stmt.executeQuery();
		if (rs != null && rs.next()) {
			int iTmp = rs.getInt(1);
			if (iTmp > 0) {
				throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000073")/*@res "本次补货数量存在超出退货单可补货数量范围"*/);
			}
		}
	} catch (Exception e) {
		reportException(e);
		throw e;
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {

		}
	}
}
/**
 * 回写到货单子表累计入库数量
 * @param saBid
 * @param daDiffNum
 * @return
 * @throws SQLException
 */
private int[] rewriteNaccB(String[] saBid,UFDouble[] daDiffNum) throws SQLException{
	int[] iaRet = null;

	int iLen = saBid == null ? 0 : saBid.length;
	if(iLen == 0){
		return null;
	}

	Connection con = null;
	PreparedStatement stmt = null;
	String sql = "update po_arriveorder_b set naccumwarehousenum = coalesce(naccumwarehousenum,0) + (?) where carriveorder_bid = ? ";

	try {
		con = getConnection();
		stmt = prepareStatement(con, sql);
		for(int i=0; i< iLen; i++){
			stmt.setDouble(1, daDiffNum[i].doubleValue());
			stmt.setString(2, saBid[i]);
			executeUpdate(stmt);
		}
		iaRet = executeBatch(stmt);
	}finally{
		try {
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {

		}
	}
	
	return iaRet;
}

/**
 * 回写到货单子子表累计入库数量
 * @param saBid
 * @param saMangid
 * @param saCheckid
 * @param uaDiffNum
 * @return
 * @throws SQLException
 */
private int[] rewriteNaccBB(String[] saBid, String[] saMangid, String[] saCheckid, UFDouble[] uaDiffNum) throws SQLException{
	int[] iaRet = null;

	int iLen = saBid == null ? 0 : saBid.length;
	if(iLen == 0){
		return null;
	}

	Connection con = null;
	PreparedStatement stmt = null;
	String sql = "update po_arriveorder_bb set naccumnum = coalesce(naccumnum,0) + (?) where carriveorder_bid = ? and cqualitylevelid = ? and cmangid = ? ";
	try {
		con = getConnection();

		//更新子表存货ID到子子表(弥补设计不足，处理未改判时冗余到货单行存货ID到子子表)
		updateBBFromB(saBid,con);
		//
		stmt = prepareStatement(con, sql);
		for(int i=0; i< iLen; i++){
			stmt.setDouble(1, uaDiffNum[i].doubleValue());
			stmt.setString(2, saBid[i]);
			stmt.setString(3, saCheckid[i]);
			stmt.setString(4, saMangid[i]);
			executeUpdate(stmt);
		}
		iaRet = executeBatch(stmt);
	}finally{
		try {
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {

		}
	}
	
	return iaRet;
}

/**
 * 回写到货单子子表累计入库数量
 * @param saRowid
 * @param saMangid
 * @param saCheckid
 * @param daDiffNum
 * @param ufdCtrlRate  容差比率(正常值范围是[0,1])
 * @param bUser		是否要用户确认
 * @return
 * @throws BusinessException
 */
private void checkNaccBB(String[] saRowid, 
		String[] saMangid, 
		String[] saCheckid, 
		UFDouble ufdCtrlRate,
		boolean bUser) throws BusinessException{

	int iLen = saRowid == null ? 0 : saRowid.length;
	if(iLen == 0){
		return ;
	}

	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	String strSQL = null;
	try {
		//创建临时表，三表{A:公司ID；B：库存组织ID；C：存货基本ID}
		java.util.ArrayList listBBid = new java.util.ArrayList();
		java.util.ArrayList listMangid = new java.util.ArrayList();
		java.util.ArrayList listCheckid = new java.util.ArrayList();
		java.util.ArrayList listTmp = null;
		for (int i = 0; i < iLen; i++) {
			listTmp = new java.util.ArrayList();
			listTmp.add(new Integer(i));
			listTmp.add(saRowid[i]);
			listBBid.add(listTmp);
			listTmp = new java.util.ArrayList();
			listTmp.add(new Integer(i));
			listTmp.add(saMangid[i]);
			listMangid.add(listTmp);
			listTmp = new java.util.ArrayList();
			listTmp.add(new Integer(i));
			listTmp.add(saCheckid[i]);
			listCheckid.add(listTmp);
		}
		TempTableDMO dmo = new TempTableDMO();
		String strTblBBid =
			dmo.getTempStringTable(
				TempTableVO.TEMPTABLE_3_A,
				new String[] { TempTableVO.TEMPPKFIELD_PU,TempTableVO.TEMPBUSINESSID_PU},
				new String[] { "int", "char(20)" },
				TempTableVO.TEMPPKFIELD_PU,
				listBBid);
		String strTblMangid =
			dmo.getTempStringTable(
				TempTableVO.TEMPTABLE_3_B,
				new String[] { TempTableVO.TEMPPKFIELD_PU,TempTableVO.TEMPBUSINESSID_PU},
				new String[] { "int", "char(20)" },
				TempTableVO.TEMPPKFIELD_PU,
				listMangid);
		String strTblCheckid =
			dmo.getTempStringTable(
				TempTableVO.TEMPTABLE_3_C,
				new String[] { TempTableVO.TEMPPKFIELD_PU,TempTableVO.TEMPBUSINESSID_PU},
				new String[] { "int", "char(20)" },
				TempTableVO.TEMPPKFIELD_PU,
				listCheckid);
		String strSql = "select carriveorder_bid from po_arriveorder_bb,";
		strSql += strTblBBid + ",";
		strSql += strTblMangid + ",";
		strSql += strTblCheckid + " ";
		strSql += "where ";
		strSql += "carriveorder_bid = " + strTblBBid + "."+ TempTableVO.TEMPBUSINESSID_PU + " ";
		strSql += "and cmangid = " + strTblMangid + "."+ TempTableVO.TEMPBUSINESSID_PU + " ";
		strSql += "and cqualitylevelid = " + strTblCheckid + "."+ TempTableVO.TEMPBUSINESSID_PU + " ";
		strSql += "and " + strTblBBid + "."+TempTableVO.TEMPPKFIELD_PU;
		strSql += "=" + strTblMangid + "."+TempTableVO.TEMPPKFIELD_PU + " ";
		strSql += "and " + strTblMangid + "."+TempTableVO.TEMPPKFIELD_PU;
		strSql += "=" + strTblCheckid + "."+TempTableVO.TEMPPKFIELD_PU + " ";
		strSql += "and naccumnum > nnum * (1+"+ ufdCtrlRate.doubleValue() +") ";
		con = getConnection();
		stmt = prepareStatement(con,strSql);
		rs = stmt.executeQuery();
		if(rs.next()){
			if(bUser){
				throw new RwtIcToPoException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000285")/*@res "存在部分数据超出数量容差范围,是否继续?"*/);
			}
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000286")/*@res "存在部分数据超出数量容差范围"*/);
		}
		
	}catch(Exception e){
		SCMEnv.out(e);
		PubDMO.throwBusinessException(e);
	}finally{
		try {
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {

		}
	}
}
/**
 * 检查到货单子表数量关系是否正确
 * @param saRowId
 * @param ufdCtrlRate
 * @param bUser		是否要用户确认
 * @throws BusinessException
 */
private void checkNaccB(String[] saRowId, 
		UFDouble ufdCtrlRate,
		boolean bUser) throws BusinessException{

	int iLen = saRowId == null ? 0 : saRowId.length;
	if(iLen == 0){
		return ;
	}

	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	String strSQL = null;
	String strIdsSet = null;
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet =
			tmpTblDmo.insertTempTable(saRowId,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC007,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
		//
		String strSql = "select carriveorder_bid from po_arriveorder_b where carriveorder_bid in " + strIdsSet + " ";
		
		strSql += "and naccumwarehousenum > narrvnum * (1+"+ ufdCtrlRate.doubleValue() +") ";
		con = getConnection();
		stmt = prepareStatement(con,strSql);
		rs = stmt.executeQuery();
		if(rs.next()){
			if(bUser){
				throw new RwtIcToPoException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000285")/*@res "存在部分数据超出数量容差范围,是否继续?"*/);
			}
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000286")/*@res "存在部分数据超出数量容差范围"*/);
		}
	
	}catch(Exception e){
		SCMEnv.out(e);
		PubDMO.throwBusinessException(e);
	}finally{
		try {
			if (stmt != null) {
				stmt.close();
			}
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
	
		}
	}
}
/**
 *@V5重构:弥补设计不足，处理未改判时冗余到货单行存货ID到子子表	
 *
 * @param sRowId 到货单子表ID
 * @author czp
 * @注意：Connection 由调用者来关闭
 */
private void updateBBFromB(String[] sRowId,Connection con) throws SQLException {

	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet =
			tmpTblDmo.insertTempTable(sRowId,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC007,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	//
	String strSql = "update po_arriveorder_bb " +
			"set po_arriveorder_bb.cbaseid = po_arriveorder_b.cbaseid," +
			"po_arriveorder_bb.cmangid = po_arriveorder_b.cmangid," +
			"po_arriveorder_bb.cassistunit = po_arriveorder_b.cassistunit," +
			"po_arriveorder_bb.bchange = 'N' " +
			"from po_arriveorder_bb , po_arriveorder_b " +
			"where po_arriveorder_bb.carriveorder_bid = po_arriveorder_b.carriveorder_bid and po_arriveorder_bb.carriveorder_bid in " +
			strIdsSet + " " +
			"and coalesce(po_arriveorder_bb.bchange,'N') = 'N' ";
	
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		stmt = con.prepareStatement(strSql);
		stmt.executeUpdate();
		
	} finally {
		if (rs != null) {
			rs.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
}
/**
 * 更新累计入库数量 (批处理)
 * 
 * @V5重构说明： 由原来的先检查数据正确性调整为：“先回写后校验的标准处理模式”，同时降低原方法的处理复杂度
 * 
 * @author czp
 * @date 2006-07-31
 */
public void rewriteNaccWareNumArray(
	boolean bUserConfirm,
	String[] saBid,
	UFDouble[] uaDiffNum,
	String[] saCheckid,
	String sCorpId,
	String[] saMangId)
	throws SQLException, BusinessException {
	
	//Step 1: 参数数据正确性检查-----------------------------------------------
	if (saBid == null || saBid.length <= 0)
		return;
	if (uaDiffNum == null || uaDiffNum.length <= 0)
		return;
	if (saBid.length != uaDiffNum.length)
		return;
	int iLen = saBid.length;

	//质量管理启用时，确定回写到货单子子表行数据
	boolean isQCEnable = getIsQCEnable(sCorpId);
	ArrayList listToBBIndx = new ArrayList();
	//分两部分回写
	if(isQCEnable){
		//
		boolean bStoreByChecked = false;
		Hashtable hTmp = getStoreByChkHash(saBid);
		for(int i=0 ; i<iLen ; i++){
			bStoreByChecked = ((UFBoolean)hTmp.get(saBid[i])).booleanValue();
			//回写子子表确认条件：存货根据质检结果入库,且传入检验状态ID非空
			if(bStoreByChecked && saCheckid[i] != null){
				listToBBIndx.add(new Integer(i));
			}
		}
	}
	
	//Step 2: 回写{子子表、子表}----------------------------------------------
	
	//回写子子表
	String[] saBBid = null;
	String[] saBBMangid = null;
	String[] saBBCheckid = null;
	UFDouble[] uaBBDiffNum = null;
	int iSize = listToBBIndx.size();
	if(iSize > 0){
		saBBid = new String[iSize];
		saBBMangid = new String[iSize];
		saBBCheckid = new String[iSize];
		uaBBDiffNum = new UFDouble[iSize];
		int iBBPos = 0; 
		for(int i=0;i<iSize;i++){
			iBBPos = ((Integer)listToBBIndx.get(i)).intValue();
			saBBid[i] = saBid[iBBPos];
			saBBMangid[i] = saMangId[iBBPos];
			saBBCheckid[i] = saCheckid[iBBPos];
			uaBBDiffNum[i] = uaDiffNum[iBBPos];
		}
		int[] iaRet = rewriteNaccBB(saBBid,saBBMangid,saBBCheckid,uaBBDiffNum);
//		if(iaRet == null || iaRet.length < iSize){
//			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000074")/*@res "入库单的自由项存在不匹配的质量等级设置"*/);
//		}
	}
	//回写子表(无论质量管理是否启用)
	rewriteNaccB(saBid,uaDiffNum);
	
	//Step 3: 检查数据合法性检查{子子表、子表}---------------------------------------
	
	//读取参数
	String strCtrl = getCtrlStringArr(sCorpId);
	boolean bICtrlNoSave = "不保存".equalsIgnoreCase(strCtrl);
	boolean bICtrlHint = "提示".equalsIgnoreCase(strCtrl);
	//“不控制”，直接返回
	if(!bICtrlHint && !bICtrlNoSave){
		return;
	}
	//“提示”+用户确认过，直接返回
	if(bICtrlHint && bUserConfirm){
		return;
	}
	UFDouble ufdCtrlRate = getCtrlRateArr(sCorpId);
	if (ufdCtrlRate == null) ufdCtrlRate = new UFDouble(0.0);
	ufdCtrlRate = ufdCtrlRate.div(100.0);
	//检查子子表
	if(iSize > 0){
		checkNaccBB(saBBid,saBBMangid,saBBCheckid,ufdCtrlRate,bICtrlHint);
	}
	//检查子表
	checkNaccB(saBid,ufdCtrlRate,bICtrlHint);
}
/**
 * 更新累计入库数量 (批处理)
 */
public void rewriteNaccWareNumArray_bak(
	boolean bUserConfirm,
	String[] carriveorder_bids,
	UFDouble[] newnums,
	String[] ccheckids,
	String pk_corp,
	String[] saMangId)
	throws SQLException, BusinessException {
	//
	if (carriveorder_bids == null || carriveorder_bids.length <= 0)
		return;
	if (newnums == null || newnums.length <= 0)
		return;
	if (carriveorder_bids.length != newnums.length)
		return;
	Connection con = null;
	PreparedStatement stmt = null;
	PreparedStatement stmt0 = null;
	PreparedStatement stmt1 = null;
	PreparedStatement stmt2 = null;
	boolean isQCEnable = false;
	boolean isStockByCheck = false, isChkFree = false;
	try {
		//容差控制处理
		String strCtrl = getCtrlStringArr(pk_corp);
		boolean bICtrlNoSave = "不保存".equalsIgnoreCase(strCtrl);
		boolean bICtrlHint = "提示".equalsIgnoreCase(strCtrl);
		UFDouble ufdCtrlRate = null;
		if (bICtrlNoSave   ||  bICtrlHint) {
			ufdCtrlRate = getCtrlRateArr(pk_corp);
		}
		if (ufdCtrlRate == null) ufdCtrlRate = new UFDouble(0.0);
		//V5:用1+容差/100
		ufdCtrlRate = ufdCtrlRate.div(100.0);
		//
		con = getConnection();
		//
		String sql0 = "update po_arriveorder_b set naccumwarehousenum = ? ";
		sql0 += "where carriveorder_bid = ? ";
		stmt0 = prepareStatement(con, sql0);
		String sql1 = "update po_arriveorder_bb set naccumnum = ? ";
		sql1 += "where carriveorder_bid = ? and cqualitylevelid = ? and cmangid = ? ";
		stmt1 = prepareStatement(con, sql1);
		String sql2 = "update po_arriveorder_b set naccumwarehousenum = ? ";
		sql2 += "where carriveorder_bid = ? ";
		stmt2 = prepareStatement(con, sql2);
		//质量管理是否启用
		isQCEnable = getIsQCEnable(pk_corp);
		//存货是否根据质检结果入库
		Hashtable hTmp = getStoreByChkHash(carriveorder_bids);
		//旧数量
		Hashtable hOldNum = getNumFromSubTab(carriveorder_bids);
		//到货单子子表信息
		HashMap hArrBBInfo = queryArr_bbData(carriveorder_bids);

		String carriveorder_bid = null;
		UFDouble newnum = null;
		String ccheckid = null;
		Hashtable hNaccNum = new Hashtable(); //记录累计入库数量，质检启用时用
		for (int i = 0; i < carriveorder_bids.length; i++) {
			//
			carriveorder_bid = carriveorder_bids[i];
			newnum = newnums[i];
			ccheckid = ccheckids[i];
			//存货是否根据质检结果入库
			isStockByCheck = ((UFBoolean) hTmp.get(carriveorder_bid)).booleanValue();
			//到货单表体对应子子表信息
			ArrayList arrArrBBInfo = (ArrayList)hArrBBInfo.get(carriveorder_bid + ccheckid+saMangId[i]);

			if (ccheckid != null && !ccheckid.trim().equals("")) {
				//如果免检，则直接忽略质检ID
				if (isChkFree) {
					ccheckid = null;
				} else {
					//sql = "select carriveorder_bid from po_arriveorder_bb ";
					//sql += "where carriveorder_bid = ? and cqualitylevelid = ? ";
					//stmt = con.prepareStatement(sql);
					//stmt.setString(1, carriveorder_bid);
					//stmt.setString(2, ccheckid);
					//rs = stmt.executeQuery();
					//if (!rs.next()) {
					if(arrArrBBInfo == null || arrArrBBInfo.size() == 0) {
						//无子子表记录且要通过质检结果入库时抛异常
						if (isStockByCheck) {
							throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000074")/*@res "入库单的自由项存在不匹配的质量等级设置"*/);
						} else {
							//无子子表记录，且不必通过子子表入库时不回写子子表，下面的回写全法性校验也不用子子表
							ccheckid = null;
						}
					}
					//rs.close();
					//stmt.close();
				}
			}
			//回写到货单数据
			UFDouble ling = new UFDouble(0);
			UFDouble oldelgnum_b = ling;
			UFDouble oldarrnum_b = ling;
			UFDouble oldaccnum_b = ling;
			UFDouble oldarrnum_bb = ling;
			UFDouble oldaccnum_bb = ling;
			UFDouble maxnum_b = ling;
			UFDouble maxnum_bb = ling;
			UFDouble newnum_b = ling;
			UFDouble newnum_bb = ling;
			//如果质量等级不为空
			if (ccheckid != null && !ccheckid.trim().equals("")) {
				//子表数量
				if (hOldNum == null) {
					oldaccnum_b = new UFDouble(0);
					oldarrnum_b = new UFDouble(0);
				} else {
						UFDouble[] saNum = (UFDouble[]) hOldNum.get(carriveorder_bid);
						if (saNum == null) {
							oldaccnum_b = new UFDouble(0);
							oldarrnum_b = new UFDouble(0);
						} else {
							if (hNaccNum.get(carriveorder_bid) == null){
								oldaccnum_b = saNum[0];
							}else{
								oldaccnum_b = (UFDouble)hNaccNum.get(carriveorder_bid);
							}
							oldarrnum_b = saNum[2];
						}
				}
				SCMEnv.out("##CZP OUT:  累计入库："    +oldaccnum_b);
				SCMEnv.out("##CZP OUT:  到货数量："  +oldarrnum_b);
				//新子子表数量
				//sql = "select isnull(naccumnum,0), isnull(nnum,0) from po_arriveorder_bb ";
				//sql += "where carriveorder_bid = ? and cqualitylevelid = ? ";
				//stmt = con.prepareStatement(sql);
				//stmt.setString(1, carriveorder_bid);
				//stmt.setString(2, ccheckid);
				//rs = stmt.executeQuery();
				//if (rs.next()) {
				if(arrArrBBInfo != null && arrArrBBInfo.size() > 2) {
					//Object bnaccold_bb = rs.getObject(1);
					Object bnaccold_bb = arrArrBBInfo.get(1);
					oldaccnum_bb =
						((bnaccold_bb == null || bnaccold_bb.toString().trim().equals(""))
							? new UFDouble(0)
							: new UFDouble(bnaccold_bb.toString().trim()));
					//Object boldarrnum_bb = rs.getObject(2);
					Object boldarrnum_bb = arrArrBBInfo.get(2);
					oldarrnum_bb =
						((boldarrnum_bb == null || boldarrnum_bb.toString().trim().equals(""))
							? new UFDouble(0)
							: new UFDouble(boldarrnum_bb.toString().trim()));
				} else {
					oldaccnum_bb = new UFDouble(0);
					oldarrnum_bb = new UFDouble(0);
				}
				//到货单子子表行数量即为最大到货数量
				maxnum_bb = oldarrnum_bb;
				//考虑容差:最大数量＝最大数量＊（1＋容差值/100）
				maxnum_bb = maxnum_bb.multiply(ufdCtrlRate.add(1.0));
				//rs.close();
				//stmt.close();
				//更新到货单子表
				newnum_b = newnum.add(oldaccnum_b);
				//记录到货单子表累计入库数量
				hNaccNum.put(carriveorder_bid,newnum_b);
				//
				stmt0.setDouble(1, newnum_b.doubleValue());
				stmt0.setString(2, carriveorder_bid);
				//更新到货单子子表SQL语句
				newnum_bb = newnum.add(oldaccnum_bb);
				stmt1.setDouble(1, newnum_bb.doubleValue());
				stmt1.setString(2, carriveorder_bid);
				stmt1.setString(3, ccheckid);
				stmt1.setString(4, saMangId[i]);
				//到货数量大于等于零
				if (maxnum_bb.compareTo(new UFDouble(0)) >= 0) {
					if (newnum_bb.doubleValue() >= 0 && maxnum_bb.compareTo(newnum_bb) >= 0) {
						executeUpdate(stmt1);
						executeUpdate(stmt0);
					} else {
						String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
						if(bICtrlNoSave){
							throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000201",null,value)/*@res "存在部分数据超出数量容差范围,请检查"*/);
						}else if(bICtrlHint){
							if(bUserConfirm){
								executeUpdate(stmt1);
								executeUpdate(stmt0);
							}else{
								throw new RwtIcToPoException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000285",null,value)/*@res "存在部分数据超出数量容差范围,是否继续"*/);
							}
						}
					}
				}
				//到货数量小于零
				else {
					if (maxnum_bb.compareTo(newnum_bb) <= 0) {
						executeUpdate(stmt1);
						executeUpdate(stmt0);
					} else {
						String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
						if(bICtrlNoSave){
							throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000201",null,value)/*@res "存在部分数据超出数量容差范围,请检查"*/);
						}else if("提示".equalsIgnoreCase(strCtrl)){
							if(bUserConfirm){
								executeUpdate(stmt1);
								executeUpdate(stmt0);
							}else{
								throw new RwtIcToPoException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000285",null,value)/*@res "存在部分数据超出数量容差范围,是否继续"*/);
							}
						}
					}
				}
			}
			//如果质量等级为空
			else {
				//默认可入库下限
				UFDouble ufdLowest = null;
				if (hOldNum == null) {
					oldaccnum_b = new UFDouble(0);
					oldelgnum_b = new UFDouble(0);
					oldarrnum_b = new UFDouble(0);
				} else {
					UFDouble[] saNum = (UFDouble[]) hOldNum.get(carriveorder_bid);
					if (saNum == null) {
						oldaccnum_b = new UFDouble(0);
						oldelgnum_b = new UFDouble(0);
						oldarrnum_b = new UFDouble(0);
					} else {
						oldaccnum_b = saNum[0];
						oldelgnum_b = saNum[1];
						oldarrnum_b = saNum[2];
					}
				}
				//默认最大可入库数量
				maxnum_b = oldelgnum_b;
				//质检启用且不根据质检结果入库时，最大可入库数量即合法性校验时用“到货数量”
				if (isQCEnable && !isStockByCheck) {
					maxnum_b = oldarrnum_b;
				}
				//考虑容差:最大数量＝最大数量＊（1＋容差值/100）
				maxnum_b = maxnum_b.multiply(ufdCtrlRate.add(1.0));
				//
				newnum_b = newnum.add(oldaccnum_b);
				stmt2.setDouble(1, newnum_b.doubleValue());
				stmt2.setString(2, carriveorder_bid);
				//累计入库下限
				ufdLowest = oldaccnum_b;
				if (ufdLowest == null)
					ufdLowest = new UFDouble(0);
				//求反
				ufdLowest = ufdLowest.multiply(-1);
				//到货数量大于等于零
				if (maxnum_b.compareTo(new UFDouble(0)) >= 0) {
					//要求最后的累计入库数量为非负
					if (newnum_b != null && newnum_b.doubleValue() < 0) {
						String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
						if(bICtrlNoSave){
							throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000201",null,value)/*@res "存在部分数据超出数量容差范围,请检查"*/);
						}else if("提示".equalsIgnoreCase(strCtrl) && !bUserConfirm){
							throw new RwtIcToPoException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000285",null,value)/*@res "存在部分数据超出数量容差范围,是否继续"*/);
						}
					}
					//要求“最大可入库数量>=本次入库量”
					if ((!bICtrlNoSave && !bICtrlHint) || (maxnum_b.compareTo(newnum_b) >= 0 && (bICtrlNoSave || bICtrlHint))) {
						executeUpdate(stmt2);
					} else {
						String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
						if(bICtrlNoSave){
							throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000201",null,value)/*@res "存在部分数据超出数量容差范围,请检查"*/);
						}else if("提示".equalsIgnoreCase(strCtrl)){
							if(bUserConfirm){
								executeUpdate(stmt2);
							}else{
								throw new RwtIcToPoException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000285",null,value)/*@res "存在部分数据超出数量容差范围,是否继续"*/);
							}
						}
					}
				}
				//到货数量小于零
				else {
					//要求最后的累计入库数量为非正
					if (newnum_b != null && newnum_b.doubleValue() > 0) {
						String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
						if(bICtrlNoSave){
							throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000201",null,value)/*@res "存在部分数据超出数量容差范围,请检查"*/);
						}else if("提示".equalsIgnoreCase(strCtrl) && !bUserConfirm){
							throw new RwtIcToPoException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000285",null,value)/*@res "存在部分数据超出数量容差范围,是否继续"*/);
						}
					}
					//要求“最大可入库数量<=本次入库量”
					//if (maxnum_b.compareTo(newnum_b) <= 0) {
					if ((!bICtrlNoSave && !bICtrlHint) || (maxnum_b.compareTo(newnum_b) <= 0 && (bICtrlNoSave || bICtrlHint))) {
						executeUpdate(stmt2);
					} else {
						String[] value = new String[]{String.valueOf(oldarrnum_bb),String.valueOf(oldaccnum_bb),String.valueOf(maxnum_bb.sub(oldaccnum_bb)),String.valueOf(newnum)};
						if(bICtrlNoSave){
							throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000201",null,value)/*@res "存在部分数据超出数量容差范围,请检查"*/);
						}else if("提示".equalsIgnoreCase(strCtrl)){
							if(bUserConfirm){
								executeUpdate(stmt2);
							}else{
								throw new RwtIcToPoException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000285",null,value)/*@res "存在部分数据超出数量容差范围,是否继续"*/);
							}
						}
					}
				}
			}
		}
		if (stmt0 != null)
			executeBatch(stmt0);
		if (stmt1 != null)
			executeBatch(stmt1);
		if (stmt2 != null)
			executeBatch(stmt2);
	} catch (BusinessException b) {
		throw b;
	} catch (Exception e) {
		reportException(e);
		throw new SQLException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000056")/*@res "采购入库单回写累计入库数量时出错"*/);
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
			if (stmt0 != null) {
				stmt0.close();
			}
			if (stmt1 != null) {
				stmt1.close();
			}
			if (stmt2 != null) {
				stmt2.close();
			}
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {

		}
	}
}

/**
 * 处理供应商分类为子查询
 * 创建日期：(2003-07-05 16:39:26)
 */
private String setCustClassCode(
	String pk_corp,
	String strClassKey,
	String whereString)
	throws SQLException {
	if (whereString == null || whereString.trim().equals(""))
		return null;
	if (isAllClassCodeDealed(strClassKey, whereString)) {
		//递归出口
		return " " + whereString + " ";
	} else {
		//处理为子查询
		int iBgn = whereString.indexOf(strClassKey);
		String strSubRight = whereString.substring(iBgn + strClassKey.length()).trim();
		//操作符
		String strOpr = strSubRight.substring(0, strSubRight.indexOf("'")).trim();
		//值
		String strSubVal = strSubRight.substring(strSubRight.indexOf("'") + 1);
		String strVal = strSubVal.substring(0, strSubVal.indexOf("'"));
		strSubRight = strSubVal.substring(strSubVal.indexOf("'") + 1);
		//编码集合
		String strCodeSet = getAreaClassCodeSet(strVal, pk_corp, strOpr);
		//替换为子查询
		String strTmp = whereString.substring(0, iBgn);
		strTmp += strClassKey;
		strTmp += " in ";
		strTmp += strCodeSet;
		strTmp += " ";
		strTmp += strSubRight;
		whereString = strTmp;
		//递归处理
		return setCustClassCode(pk_corp, strClassKey, whereString);
	}
}

/**
 * 处理存货分类为子查询 (递归)
 * 创建日期：(2003-07-05 16:10:26)
 */
private String setInvClassCode(String strClassKey, String whereString)
	throws SQLException {
	if (whereString == null || whereString.trim().equals(""))
		return null;
	if (isAllClassCodeDealed(strClassKey, whereString)) {
		//递归出口
		return " " + whereString + " ";
	} else {
		//处理为子查询
		int iBgn = whereString.indexOf(strClassKey);
		String strSubRight = whereString.substring(iBgn + strClassKey.length()).trim();
		//操作符
		String strOpr = strSubRight.substring(0, strSubRight.indexOf("'")).trim();
		//值
		String strSubVal = strSubRight.substring(strSubRight.indexOf("'") + 1);
		String strVal = strSubVal.substring(0, strSubVal.indexOf("'"));
		strSubRight = strSubVal.substring(strSubVal.indexOf("'") + 1);

		//编码集合
		String strCodeSet = null;
		try {
			strCodeSet = getInvClassCodeSet(strVal, strOpr);
		} catch (Exception e) {
			//不影响业务，不需要抛出
			reportException(e);
		}

		//替换为子查询
		String strTmp = whereString.substring(0, iBgn);
		strTmp += strClassKey;
		strTmp += " in ";
		strTmp += strCodeSet;
		strTmp += " ";
		strTmp += strSubRight;
		whereString = strTmp;
		//递归处理
		return setInvClassCode(strClassKey, whereString);
	}
}

/**
 * 作者：晁志平
 * 过滤负到货单
 */
private ArriveorderVO[] splitVOForIC_filterNeg(ArriveorderVO[] vos) throws BusinessException {
	SCMEnv.out("过滤负到货单...");
	if (vos == null || vos.length <= 0) {
		SCMEnv.out("到货单为空，返回NULL");
		return null;
	}
	Vector vItem = new Vector();
	ArriveorderItemVO[] items = null;
	Vector vRslt = new Vector();
	int iLenHead = vos.length, iLenBody = 0;
	for (int i = 0; i < iLenHead; i++) {
		vItem = new Vector();
		if (vos[i] != null && vos[i].getChildrenVO() != null && vos[i].getChildrenVO().length > 0) {
			iLenBody = vos[i].getChildrenVO().length;
			for (int j = 0; j < iLenBody; j++) {
				if (vos[i].getChildrenVO()[j] == null)
					continue;
				if (vos[i].getChildrenVO()[j].getAttributeValue("narrvnum") == null)
					continue;
				if (((ArriveorderItemVO) vos[i].getChildrenVO()[j]).getNarrvnum().doubleValue() > 0) {
					vItem.addElement(vos[i].getChildrenVO()[j]);
				}
			}
		}
		if (vItem.size() > 0) {
			items = new ArriveorderItemVO[vItem.size()];
			vItem.copyInto(items);
			vos[i].setChildrenVO(items);
			vRslt.addElement(vos[i]);
		}
	}
	ArriveorderVO[] resultVOs = null;
	if (vRslt.size() > 0) {
		resultVOs = new ArriveorderVO[vRslt.size()];
		vRslt.copyInto(resultVOs);
		SCMEnv.out("过滤处理完毕，返回" + vRslt.size() + "张到货单");
	} else {
		SCMEnv.out("过滤处理完毕，到货单全为负，返回NULL");
	}
	return resultVOs;
}

/**
 * 批修改子表数据
 * czp 2003-06-27 效率优化
 */
public void updateItemArray(ArriveorderItemVO[] arriveorderItems) throws java.sql.SQLException {

	if (arriveorderItems == null || arriveorderItems.length <= 0)
		return;
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "updateItemArray", new Object[] { arriveorderItems });
	/*************************************************************/
//eric 
	String sql =
		"update po_arriveorder_b set carriveorderid = ?, pk_corp = ?, corder_bid = ?, corderid = ?, cmangid = ?, cassistunit = ?, narrvnum = ?, nassistnum = ?, nwastnum = ?, nwastassistnum = ?, npresentnum = ?, npresentassistnum = ?, vproducenum = ?, ccurrencytypeid = ?, noriginalcurprice = ?, noriginalcurmny = ?, nexchangeotobrate = ?, nprice = ?, nmoney = ?, nexchangeotoarate = ?, nassistcurprice = ?, nassistcurmny = ?, dproducedate = ?, ivalidday = ?, dvaliddate = ?, nelignum = ?, nnotelignum = ?, naccumchecknum = ?, naccumwarehousenum = ?, cwarehouseid = ?, cstoreid = ?, cupsourcebilltype = ?, cupsourcebillid = ?, cupsourcebillrowid = ?, vmemo = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, ";
	sql += "vdef7 = ?, vdef8 = ?, vdef9 = ?, vdef10 = ?,vdef11 = ?, vdef12 = ?, vdef13 = ?, vdef14 = ?, vdef15 = ?, vdef16 = ?, vdef17 = ?, vdef18 = ?, vdef19 = ?, vdef20 = ?, pk_defdoc1 = ?, pk_defdoc2 = ?, pk_defdoc3 = ?, pk_defdoc4 = ?, pk_defdoc5 = ?, pk_defdoc6 = ?, pk_defdoc7 = ?, pk_defdoc8 = ?, pk_defdoc9 = ?, pk_defdoc10 = ?,pk_defdoc11 = ?, pk_defdoc12 = ?, pk_defdoc13 = ?, pk_defdoc14 = ?, pk_defdoc15 = ?, pk_defdoc16 = ?, pk_defdoc17 = ?, pk_defdoc18 = ?, pk_defdoc19 = ?, pk_defdoc20 = ?,vfree1 = ?, vfree2 = ?, vfree3 = ?, vfree4 = ?, vfree5 = ?, cbaseid = ?, csourcebilltype = ?, csourcebillid = ?, csourcebillrowid = ?, cprojectid = ?, cprojectphaseid = ?, crowno = ?, vbackreasonb = ?,naccreplenishnum = ?,corder_bb1id = ?,blargess = ?,blargessuprow = ? " +
			", pk_reqcorp = ?,pk_reqstoorg = ?,pk_creqwareid = ?,pk_invoicecorp = ?, jyjg=?, glnum = ?  where carriveorder_bid = ?";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con = getConnection();
		stmt = prepareStatement(con,sql);
		ArriveorderItemVO arriveorderItem = null;
		for (int i = 0; i < arriveorderItems.length; i++) {
			//VO为空不作处理
			arriveorderItem = arriveorderItems[i];
			if (arriveorderItem == null)
				continue;
			// update non PK fields:
			if (arriveorderItem.getCarriveorderid() == null) {
				stmt.setNull(1, Types.CHAR);
			} else {
				stmt.setString(1, arriveorderItem.getCarriveorderid());
			}
			if (arriveorderItem.getPk_corp() == null) {
				stmt.setNull(2, Types.CHAR);
			} else {
				stmt.setString(2, arriveorderItem.getPk_corp());
			}
			if (arriveorderItem.getCorder_bid() == null) {
				stmt.setNull(3, Types.CHAR);
			} else {
				stmt.setString(3, arriveorderItem.getCorder_bid());
			}
			if (arriveorderItem.getCorderid() == null) {
				stmt.setNull(4, Types.CHAR);
			} else {
				stmt.setString(4, arriveorderItem.getCorderid());
			}
			if (arriveorderItem.getCmangid() == null) {
				stmt.setNull(5, Types.CHAR);
			} else {
				stmt.setString(5, arriveorderItem.getCmangid());
			}
			if (arriveorderItem.getCassistunit() == null) {
				stmt.setNull(6, Types.CHAR);
			} else {
				stmt.setString(6, arriveorderItem.getCassistunit());
			}
			if (arriveorderItem.getNarrvnum() == null) {
				stmt.setNull(7, Types.INTEGER);
			} else {
				stmt.setBigDecimal(7, arriveorderItem.getNarrvnum()
						.toBigDecimal());
			}
			if (arriveorderItem.getNassistnum() == null) {
				stmt.setNull(8, Types.INTEGER);
			} else {
				stmt.setBigDecimal(8, arriveorderItem.getNassistnum()
						.toBigDecimal());
			}
			if (arriveorderItem.getNwastnum() == null) {
				stmt.setNull(9, Types.INTEGER);
			} else {
				stmt.setBigDecimal(9, arriveorderItem.getNwastnum()
						.toBigDecimal());
			}
			if (arriveorderItem.getNwastassistnum() == null) {
				stmt.setNull(10, Types.INTEGER);
			} else {
				stmt.setBigDecimal(10, arriveorderItem.getNwastassistnum()
						.toBigDecimal());
			}
			if (arriveorderItem.getNpresentnum() == null) {
				stmt.setNull(11, Types.INTEGER);
			} else {
				stmt.setBigDecimal(11, arriveorderItem.getNpresentnum()
						.toBigDecimal());
			}
			if (arriveorderItem.getNpresentassistnum() == null) {
				stmt.setNull(12, Types.INTEGER);
			} else {
				stmt.setBigDecimal(12, arriveorderItem
						.getNpresentassistnum().toBigDecimal());
			}
			if (arriveorderItem.getVproducenum() == null) {
				stmt.setNull(13, Types.CHAR);
			} else {
				stmt.setString(13, arriveorderItem.getVproducenum());
			}
			if (arriveorderItem.getCcurrencytypeid() == null) {
				stmt.setNull(14, Types.CHAR);
			} else {
				stmt.setString(14, arriveorderItem.getCcurrencytypeid());
			}
			if (arriveorderItem.getNoriginalcurprice() == null) {
				stmt.setNull(15, Types.INTEGER);
			} else {
				stmt.setBigDecimal(15, arriveorderItem
						.getNoriginalcurprice().toBigDecimal());
			}
			if (arriveorderItem.getNoriginalcurmny() == null) {
				stmt.setNull(16, Types.INTEGER);
			} else {
				stmt.setBigDecimal(16, arriveorderItem.getNoriginalcurmny()
						.toBigDecimal());
			}
			if (arriveorderItem.getNexchangeotobrate() == null) {
				stmt.setNull(17, Types.INTEGER);
			} else {
				stmt.setBigDecimal(17, arriveorderItem
						.getNexchangeotobrate().toBigDecimal());
			}
			if (arriveorderItem.getNprice() == null) {
				stmt.setNull(18, Types.INTEGER);
			} else {
				stmt.setBigDecimal(18, arriveorderItem.getNprice()
						.toBigDecimal());
			}
			if (arriveorderItem.getNmoney() == null) {
				stmt.setNull(19, Types.INTEGER);
			} else {
				stmt.setBigDecimal(19, arriveorderItem.getNmoney()
						.toBigDecimal());
			}
			if (arriveorderItem.getNexchangeotoarate() == null) {
				stmt.setNull(20, Types.INTEGER);
			} else {
				stmt.setBigDecimal(20, arriveorderItem
						.getNexchangeotoarate().toBigDecimal());
			}
			if (arriveorderItem.getNassistcurprice() == null) {
				stmt.setNull(21, Types.INTEGER);
			} else {
				stmt.setBigDecimal(21, arriveorderItem.getNassistcurprice()
						.toBigDecimal());
			}
			if (arriveorderItem.getNassistcurmny() == null) {
				stmt.setNull(22, Types.INTEGER);
			} else {
				stmt.setBigDecimal(22, arriveorderItem.getNassistcurmny()
						.toBigDecimal());
			}
			if (arriveorderItem.getDproducedate() == null) {
				stmt.setNull(23, Types.CHAR);
			} else {
				stmt.setString(23, arriveorderItem.getDproducedate()
						.toString());
			}
			if (arriveorderItem.getIvalidday() == null) {
				stmt.setNull(24, Types.INTEGER);
			} else {
				stmt.setInt(24, arriveorderItem.getIvalidday().intValue());
			}
			if (arriveorderItem.getDvaliddate() == null) {
				stmt.setNull(25, Types.CHAR);
			} else {
				stmt.setString(25, arriveorderItem.getDvaliddate()
						.toString());
			}
			if (arriveorderItem.getNelignum() == null) {
				stmt.setNull(26, Types.INTEGER);
			} else {
				stmt.setBigDecimal(26, arriveorderItem.getNelignum()
						.toBigDecimal());
			}
			if (arriveorderItem.getNnotelignum() == null) {
				stmt.setNull(27, Types.INTEGER);
			} else {
				stmt.setBigDecimal(27, arriveorderItem.getNnotelignum()
						.toBigDecimal());
			}
			if (arriveorderItem.getNaccumchecknum() == null) {
				stmt.setNull(28, Types.INTEGER);
			} else {
				stmt.setBigDecimal(28, arriveorderItem.getNaccumchecknum()
						.toBigDecimal());
			}
			if (arriveorderItem.getNaccumwarehousenum() == null) {
				stmt.setNull(29, Types.INTEGER);
			} else {
				stmt.setBigDecimal(29, arriveorderItem
						.getNaccumwarehousenum().toBigDecimal());
			}
			if (arriveorderItem.getCwarehouseid() == null) {
				stmt.setNull(30, Types.CHAR);
			} else {
				stmt.setString(30, arriveorderItem.getCwarehouseid());
			}
			if (arriveorderItem.getCstoreid() == null) {
				stmt.setNull(31, Types.CHAR);
			} else {
				stmt.setString(31, arriveorderItem.getCstoreid());
			}
			if (arriveorderItem.getCupsourcebilltype() == null) {
				stmt.setNull(32, Types.CHAR);
			} else {
				stmt.setString(32, arriveorderItem.getCupsourcebilltype());
			}
			if (arriveorderItem.getCupsourcebillid() == null) {
				stmt.setNull(33, Types.CHAR);
			} else {
				stmt.setString(33, arriveorderItem.getCupsourcebillid());
			}
			if (arriveorderItem.getCupsourcebillrowid() == null) {
				stmt.setNull(34, Types.CHAR);
			} else {
				stmt.setString(34, arriveorderItem.getCupsourcebillrowid());
			}
			if (arriveorderItem.getVmemo() == null) {
				stmt.setNull(35, Types.CHAR);
			} else {
				stmt.setString(35, arriveorderItem.getVmemo());
			}
			if (arriveorderItem.getVdef1() == null) {
				stmt.setNull(36, Types.CHAR);
			} else {
				stmt.setString(36, arriveorderItem.getVdef1());
			}
			if (arriveorderItem.getVdef2() == null) {
				stmt.setNull(37, Types.CHAR);
			} else {
				stmt.setString(37, arriveorderItem.getVdef2());
			}
			if (arriveorderItem.getVdef3() == null) {
				stmt.setNull(38, Types.CHAR);
			} else {
				stmt.setString(38, arriveorderItem.getVdef3());
			}
			if (arriveorderItem.getVdef4() == null) {
				stmt.setNull(39, Types.CHAR);
			} else {
				stmt.setString(39, arriveorderItem.getVdef4());
			}
			if (arriveorderItem.getVdef5() == null) {
				stmt.setNull(40, Types.CHAR);
			} else {
				stmt.setString(40, arriveorderItem.getVdef5());
			}
			if (arriveorderItem.getVdef6() == null) {
				stmt.setNull(41, Types.CHAR);
			} else {
				stmt.setString(41, arriveorderItem.getVdef6());
			}
			if (arriveorderItem.getVdef7() == null) {
				stmt.setNull(42, Types.CHAR);
			} else {
				stmt.setString(42, arriveorderItem.getVdef7());
			}
			if (arriveorderItem.getVdef8() == null) {
				stmt.setNull(43, Types.CHAR);
			} else {
				stmt.setString(43, arriveorderItem.getVdef8());
			}
			if (arriveorderItem.getVdef9() == null) {
				stmt.setNull(44, Types.CHAR);
			} else {
				stmt.setString(44, arriveorderItem.getVdef9());
			}
			if (arriveorderItem.getVdef10() == null) {
				stmt.setNull(45, Types.CHAR);
			} else {
				stmt.setString(45, arriveorderItem.getVdef10());
			}
			if (arriveorderItem.getVdef11() == null) {
				stmt.setNull(46, Types.CHAR);
			} else {
				stmt.setString(46, arriveorderItem.getVdef11());
			}
			if (arriveorderItem.getVdef12() == null) {
				stmt.setNull(47, Types.CHAR);
			} else {
				stmt.setString(47, arriveorderItem.getVdef12());
			}
			if (arriveorderItem.getVdef13() == null) {
				stmt.setNull(48, Types.CHAR);
			} else {
				stmt.setString(48, arriveorderItem.getVdef13());
			}
			if (arriveorderItem.getVdef14() == null) {
				stmt.setNull(49, Types.CHAR);
			} else {
				stmt.setString(49, arriveorderItem.getVdef14());
			}
			if (arriveorderItem.getVdef15() == null) {
				stmt.setNull(50, Types.CHAR);
			} else {
				stmt.setString(50, arriveorderItem.getVdef15());
			}
			if (arriveorderItem.getVdef16() == null) {
				stmt.setNull(51, Types.CHAR);
			} else {
				stmt.setString(51, arriveorderItem.getVdef16());
			}
			if (arriveorderItem.getVdef17() == null) {
				stmt.setNull(52, Types.CHAR);
			} else {
				stmt.setString(52, arriveorderItem.getVdef17());
			}
			if (arriveorderItem.getVdef18() == null) {
				stmt.setNull(53, Types.CHAR);
			} else {
				stmt.setString(53, arriveorderItem.getVdef18());
			}
			if (arriveorderItem.getVdef19() == null) {
				stmt.setNull(54, Types.CHAR);
			} else {
				stmt.setString(54, arriveorderItem.getVdef19());
			}
			if (arriveorderItem.getVdef20() == null) {
				stmt.setNull(55, Types.CHAR);
			} else {
				stmt.setString(55, arriveorderItem.getVdef20());
			}
			if (arriveorderItem.getPKDefDoc1() == null) {
				stmt.setNull(56, Types.CHAR);
			} else {
				stmt.setString(56, arriveorderItem.getPKDefDoc1());
			}
			if (arriveorderItem.getPKDefDoc2() == null) {
				stmt.setNull(57, Types.CHAR);
			} else {
				stmt.setString(57, arriveorderItem.getPKDefDoc2());
			}
			if (arriveorderItem.getPKDefDoc3() == null) {
				stmt.setNull(58, Types.CHAR);
			} else {
				stmt.setString(58, arriveorderItem.getPKDefDoc3());
			}
			if (arriveorderItem.getPKDefDoc4() == null) {
				stmt.setNull(59, Types.CHAR);
			} else {
				stmt.setString(59, arriveorderItem.getPKDefDoc4());
			}
			if (arriveorderItem.getPKDefDoc5() == null) {
				stmt.setNull(60, Types.CHAR);
			} else {
				stmt.setString(60, arriveorderItem.getPKDefDoc5());
			}
			if (arriveorderItem.getPKDefDoc6() == null) {
				stmt.setNull(61, Types.CHAR);
			} else {
				stmt.setString(61, arriveorderItem.getPKDefDoc6());
			}
			if (arriveorderItem.getPKDefDoc7() == null) {
				stmt.setNull(62, Types.CHAR);
			} else {
				stmt.setString(62, arriveorderItem.getPKDefDoc7());
			}
			if (arriveorderItem.getPKDefDoc8() == null) {
				stmt.setNull(63, Types.CHAR);
			} else {
				stmt.setString(63, arriveorderItem.getPKDefDoc8());
			}
			if (arriveorderItem.getPKDefDoc9() == null) {
				stmt.setNull(64, Types.CHAR);
			} else {
				stmt.setString(64, arriveorderItem.getPKDefDoc9());
			}
			if (arriveorderItem.getPKDefDoc10() == null) {
				stmt.setNull(65, Types.CHAR);
			} else {
				stmt.setString(65, arriveorderItem.getPKDefDoc10());
			}
			if (arriveorderItem.getPKDefDoc11() == null) {
				stmt.setNull(66, Types.CHAR);
			} else {
				stmt.setString(66, arriveorderItem.getPKDefDoc11());
			}
			if (arriveorderItem.getPKDefDoc12() == null) {
				stmt.setNull(67, Types.CHAR);
			} else {
				stmt.setString(67, arriveorderItem.getPKDefDoc12());
			}
			if (arriveorderItem.getPKDefDoc13() == null) {
				stmt.setNull(68, Types.CHAR);
			} else {
				stmt.setString(68, arriveorderItem.getPKDefDoc13());
			}
			if (arriveorderItem.getPKDefDoc14() == null) {
				stmt.setNull(69, Types.CHAR);
			} else {
				stmt.setString(69, arriveorderItem.getPKDefDoc14());
			}
			if (arriveorderItem.getPKDefDoc15() == null) {
				stmt.setNull(70, Types.CHAR);
			} else {
				stmt.setString(70, arriveorderItem.getPKDefDoc15());
			}
			if (arriveorderItem.getPKDefDoc16() == null) {
				stmt.setNull(71, Types.CHAR);
			} else {
				stmt.setString(71, arriveorderItem.getPKDefDoc16());
			}
			if (arriveorderItem.getPKDefDoc17() == null) {
				stmt.setNull(72, Types.CHAR);
			} else {
				stmt.setString(72, arriveorderItem.getPKDefDoc17());
			}
			if (arriveorderItem.getPKDefDoc18() == null) {
				stmt.setNull(73, Types.CHAR);
			} else {
				stmt.setString(73, arriveorderItem.getPKDefDoc18());
			}
			if (arriveorderItem.getPKDefDoc19() == null) {
				stmt.setNull(74, Types.CHAR);
			} else {
				stmt.setString(74, arriveorderItem.getPKDefDoc19());
			}
			if (arriveorderItem.getPKDefDoc20() == null) {
				stmt.setNull(75, Types.CHAR);
			} else {
				stmt.setString(75, arriveorderItem.getPKDefDoc20());
			}
			if (arriveorderItem.getVfree1() == null) {
				stmt.setNull(76, Types.CHAR);
			} else {
				stmt.setString(76, arriveorderItem.getVfree1());
			}
			if (arriveorderItem.getVfree2() == null) {
				stmt.setNull(77, Types.CHAR);
			} else {
				stmt.setString(77, arriveorderItem.getVfree2());
			}
			if (arriveorderItem.getVfree3() == null) {
				stmt.setNull(78, Types.CHAR);
			} else {
				stmt.setString(78, arriveorderItem.getVfree3());
			}
			if (arriveorderItem.getVfree4() == null) {
				stmt.setNull(79, Types.CHAR);
			} else {
				stmt.setString(79, arriveorderItem.getVfree4());
			}
			if (arriveorderItem.getVfree5() == null) {
				stmt.setNull(80, Types.CHAR);
			} else {
				stmt.setString(80, arriveorderItem.getVfree5());
			}
			if (arriveorderItem.getCbaseid() == null) {
				stmt.setNull(81, Types.CHAR);
			} else {
				stmt.setString(81, arriveorderItem.getCbaseid());
			}

			if (arriveorderItem.getAttributeValue("csourcebilltype") == null) {
				stmt.setNull(82, Types.CHAR);
			} else {
				stmt.setString(82, (String) arriveorderItem
						.getAttributeValue("csourcebilltype"));
			}
			if (arriveorderItem.getAttributeValue("csourcebillid") == null) {
				stmt.setNull(83, Types.CHAR);
			} else {
				stmt.setString(83, (String) arriveorderItem
						.getAttributeValue("csourcebillid"));
			}
			if (arriveorderItem.getAttributeValue("csourcebillrowid") == null) {
				stmt.setNull(84, Types.CHAR);
			} else {
				stmt.setString(84, (String) arriveorderItem
						.getAttributeValue("csourcebillrowid"));
			}
			//是否赠品
			//if (arriveorderItem.getAttributeValue("iispresent") == null)
			// {
			//stmt.setNull(51, Types.CHAR);
			//} else {
			//stmt.setString(51,
			// arriveorderItem.getAttributeValue("iispresent").toString().trim());
			//}
			//项目
			if (arriveorderItem.getAttributeValue("cprojectid") == null) {
				stmt.setNull(85, Types.CHAR);
			} else {
				stmt.setString(85, (String) arriveorderItem
						.getAttributeValue("cprojectid"));
			}
			//项目阶段
			if (arriveorderItem.getAttributeValue("cprojectphaseid") == null) {
				stmt.setNull(86, Types.CHAR);
			} else {
				stmt.setString(86, (String) arriveorderItem
						.getAttributeValue("cprojectphaseid"));
			}
			//单据行号
			if (arriveorderItem.getAttributeValue("crowno") == null) {
				stmt.setNull(87, Types.CHAR);
			} else {
				stmt.setString(87, (String) arriveorderItem
						.getAttributeValue("crowno"));
			}
			//退货理由
			if (arriveorderItem.getAttributeValue("vbackreasonb") == null) {
				stmt.setNull(88, Types.CHAR);
			} else {
				stmt.setString(88, (String) arriveorderItem
						.getAttributeValue("vbackreasonb"));
			}
			//补货数量
			if (arriveorderItem.getNaccreplenishnum() == null) {
				stmt.setNull(89, Types.INTEGER);
			} else {
				stmt.setBigDecimal(89, arriveorderItem
						.getNaccreplenishnum().toBigDecimal());
			}
			//corder_bb1id
			if (arriveorderItem.getAttributeValue("corder_bb1id") == null) {
				stmt.setNull(90, Types.CHAR);
			} else {
				stmt.setString(90, (String) arriveorderItem
						.getAttributeValue("corder_bb1id"));
			}
			//是否赠品
			if (arriveorderItem.getAttributeValue("blargess") == null) {
				stmt.setNull(91, Types.CHAR);
			} else {
				stmt.setString(91, arriveorderItem.getAttributeValue(
						"blargess").toString());
			}
			//来源订单行是否赠品行
			if (arriveorderItem.getAttributeValue("blargessuprow") == null) {
				stmt.setNull(92, Types.CHAR);
			} else {
				stmt.setString(92, arriveorderItem.getAttributeValue(
						"blargessuprow").toString());
			}
			//V5 New : 
			if (arriveorderItem.getAttributeValue("pk_reqcorp") == null) {
				stmt.setNull(93, Types.CHAR);
			} else {
				stmt.setString(93, (String) arriveorderItem
						.getAttributeValue("pk_reqcorp"));
			}
			//
			if (arriveorderItem.getAttributeValue("pk_reqstoorg") == null) {
				stmt.setNull(94, Types.CHAR);
			} else {
				stmt.setString(94, (String) arriveorderItem
						.getAttributeValue("pk_reqstoorg"));
			}
			//
			if (arriveorderItem.getAttributeValue("pk_creqwareid") == null) {
				stmt.setNull(95, Types.CHAR);
			} else {
				stmt.setString(95, (String) arriveorderItem
						.getAttributeValue("pk_creqwareid"));
			}
			//
			if (arriveorderItem.getAttributeValue("pk_invoicecorp") == null) {
				stmt.setNull(96, Types.CHAR);
			} else {
				stmt.setString(96, (String) arriveorderItem
						.getAttributeValue("pk_invoicecorp"));
			}
			//eric
			if(arriveorderItem.getAttributeValue("jyjg") == null){
				stmt.setNull(97, Types.CHAR);
			}else{
				stmt.setString(97, (String) arriveorderItem
						.getAttributeValue("jyjg"));
			}
			if(arriveorderItem.getAttributeValue("glnum") == null){
				stmt.setNull(98, Types.DOUBLE);
			}else{
				stmt.setBigDecimal(98, arriveorderItem.getGlnum().toBigDecimal());
			}
			// find record by PK fields:
			stmt.setString(99, arriveorderItem.getCarriveorder_bid());

			
			executeUpdate(stmt);
		}
		executeBatch(stmt);
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "updateItemArray", new Object[] { arriveorderItems });
	/*************************************************************/
}

/**
 * 作者：汪维敏
 * 功能：
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2004-7-7 14:09:40)
 * 修改日期，修改人，修改原因，注释标志：
 *
 * @param sRowId java.lang.String[]
 */
private HashMap queryArr_bbData(String[] sRowId) throws SQLException {
	HashMap hRet = new HashMap();

	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet =
			tmpTblDmo.insertTempTable(sRowId,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC007,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	//弥补设计不足，处理未改判时冗余到货单行存货ID到子子表	
	String sql0 = "update po_arriveorder_bb " +
			"set po_arriveorder_bb.cbaseid = po_arriveorder_b.cbaseid," +
			"po_arriveorder_bb.cmangid = po_arriveorder_b.cmangid," +
			"po_arriveorder_bb.cassistunit = po_arriveorder_b.cassistunit," +
			"po_arriveorder_bb.bchange = 'N' " +
			"from po_arriveorder_bb , po_arriveorder_b " +
			"where po_arriveorder_bb.carriveorder_bid = po_arriveorder_b.carriveorder_bid and po_arriveorder_bb.carriveorder_bid in " +
			strIdsSet + " " +
			"and coalesce(po_arriveorder_bb.bchange,'N') = 'N' ";
	
	String sql = "select carriveorder_bid,isnull(naccumnum,0.0), isnull(nnum,0.0),cqualitylevelid,cmangid,bchange " +
			"from po_arriveorder_bb " +
			"where carriveorder_bid in " +
			strIdsSet + " ";

	Connection con = null;
	PreparedStatement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		
		stmt = con.prepareStatement(sql0);
		stmt.executeUpdate();
		
		stmt = con.prepareStatement(sql);
		rs = stmt.executeQuery();

		String sArrOrder_bid = null;
		UFDouble ufNaccumnum = null;
		UFDouble ufNnum = null;
		String sQualityLevelId = null;
		String sMangeid = null;
		String sChged = null;
		ArrayList arr = null;
		while (rs.next()) {
			arr = new ArrayList();
			//carriveorder_bid
			sArrOrder_bid = rs.getString(1);
			//累计入库数量
			ufNaccumnum = new UFDouble(rs.getObject(2).toString());
			//报捡数量
			ufNnum = new UFDouble(rs.getObject(3).toString());
			//质量等级ID
			sQualityLevelId = rs.getString(4);
			//存货管理档案ID
			sMangeid = rs.getString(5);
			//是否改判
			sChged = rs.getString(6);

			arr.add(sArrOrder_bid);
			arr.add(ufNaccumnum);
			arr.add(ufNnum);
			arr.add(sMangeid);
			arr.add(sChged);

			if (sArrOrder_bid != null && sQualityLevelId != null)
				hRet.put(sArrOrder_bid + sQualityLevelId + sMangeid, arr);
		}
	} finally {
		if (rs != null) {
			rs.close();
		}
		if (con != null) {
			con.close();
		}
		if (stmt != null) {
			stmt.close();
		}
	}
	return hRet;
}

/**查询可入库的到货单表体
 *
 * 参数结构
 *	ArrayList
 *		|-String,公司主键
 *		|-String,头ID
 *		|-String,头TS
 *		|-String[],体ID[]
 *		|-String[],体TS[]
 *		|-UFBoolean[],体是否根据检验结果入库[]
 *		|-UFBoolean,质量管理是否启用
 *      |-UFDouble,可入库数量
 *
 * 创建日期：2004-04-22
 * 创 建 者：晁志平
 */
public ArriveorderItemVO[] queryBodysForIc(ArrayList listPara) throws BusinessException {
	
	if (listPara == null || listPara.size() < 7) {
		SCMEnv.out("程序BUG：传入参数不正确，直接返回NULL!");
		return null;
	}
	String strPkCorp = (String) listPara.get(0);
	String strHid = (String) listPara.get(1);
	String strHts = (String) listPara.get(2);
	final String[] saBid = (String[]) listPara.get(3);
	String[] saBts = (String[]) listPara.get(4);
	UFBoolean[] uaBext = (UFBoolean[]) listPara.get(5);
	UFBoolean ufbQcEnabled = (UFBoolean) listPara.get(6);
	if (strPkCorp == null
		|| strHid == null
		|| strHts == null
		|| saBid == null
		|| saBid.length == 0
		|| saBts == null
		|| saBts.length == 0
		|| ufbQcEnabled == null) {
		SCMEnv.out("程序BUG：传入参数不正确，公司主键、头ID、头TS、体ID[]、体TS[]、质量管理是否启用存在空值，直接返回NULL!");
		return null;
	}
	boolean isQCEnable = ufbQcEnabled.booleanValue();
	ArriveorderItemVO[] arriveorderItems = null;
	Vector v = new Vector(), vRowid = new Vector();
	Connection con = null;
	PreparedStatement stmt = null;
	Hashtable table = null, 
	hAccNum = new Hashtable(),
	hCanStoreMaxArrNum = new Hashtable();
	ResultSet rs = null;
	String strCheckSqlHead = "select carriveorderid from po_arriveorder where carriveorderid = ? and ts = ? ";
	//用临时表构造Sql
	java.util.ArrayList listTblData = new java.util.ArrayList();
	java.util.ArrayList listTmp = null;
	int iLen = saBts.length;
	for (int i = 0; i < iLen; i++) {
		listTmp = new java.util.ArrayList();
		listTmp.add(new Integer(i));
		listTmp.add(saBid[i]);
		listTmp.add(saBts[i]);
		listTblData.add(listTmp);
	}
	String strTblName = null;
	try {
		nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
		strTblName = dmo.getTempStringTable(
				nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC013,
				new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU, "arrivebid", "bts" },
				new String[] { "int", "char(20)", "char(20)" },
				nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU,
				listTblData);
	} catch (Exception e) {
		nc.bs.pu.pub.PubDMO.throwBusinessException("nc.bs.rc.receive.ArriveorderDMO.queryBodysForIc(ArrayList)",e);
	}
	//拼接SQL
	String strCheckSqlBody = "select count(carriveorder_bid) from po_arriveorder_b as arr, "
			+ strTblName
			+ " as inv "
			+ "where arr.carriveorder_bid = inv.arrivebid and arr.ts = inv.bts ";
	try {
		con = getConnection();
		//检查表头并发
		stmt = con.prepareStatement(strCheckSqlHead);
		stmt.setString(1, strHid);
		stmt.setString(2, strHts);
		rs = stmt.executeQuery();
		if (!rs.next()) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000075")/*@res "表头数据有并发操作，请点击“查询”按钮刷新界面后再操作!"*/);
		}
		rs.close();
		stmt.close();
		//检查表体并发
		stmt = con.prepareStatement(strCheckSqlBody);
		rs = stmt.executeQuery();
		if (rs.next()) {
			Integer iObj = (Integer) rs.getObject(1);
			iLen = iObj.intValue();
			if (iLen != saBid.length) {
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000076")/*@res "表体数据有并发操作，请点击“查询”按钮刷新界面后再操作!"*/);
			}
		} else {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000076")/*@res "表体数据有并发操作，请点击“查询”按钮刷新界面后再操作!"*/);
		}
		rs.close();
		stmt.close();
		//质量管理启用时：是否根据检验结果入库属性
		Hashtable hStoreByChk = new Hashtable();
		if (isQCEnable) {
			for (int i = 0; i < iLen; i++) {
				hStoreByChk.put(saBid[i], uaBext[i]);
			}
		}
		StringBuffer sql = new StringBuffer(" ");
		sql.append("select distinct ");
		for(int i=1; i<=20;i++){
			sql.append("po_arriveorder_b.pk_defdoc"+ i +", ");
		}
		sql.append("po_arriveorder_b.carriveorder_bid,");
		//质量管理启用
		if (isQCEnable) {
			sql.append("po_arriveorder_bb.cqualitylevelid,");
			sql.append("po_arriveorder_bb.cmangid,");
			sql.append("po_arriveorder_bb.cbaseid,");
			sql.append("qc_checkstate_b.ccheckstatename,");
			sql.append("po_arriveorder_bb.nnum,");
			sql.append("po_arriveorder_bb.naccumnum,");
			sql.append("po_arriveorder_bb.cdealid,");
			sql.append("qc_defectprocess.cdefectprocessname,");
			sql.append("po_arriveorder_bb.bcheckin,");
			sql.append("po_arriveorder_bb.cassistunit,");
		}
		sql.append("po_arriveorder_b.carriveorderid, po_arriveorder_b.pk_corp, po_arriveorder_b.corder_bid, po_arriveorder_b.corderid, po_arriveorder_b.cmangid, po_arriveorder_b.cassistunit, ");
		sql.append("po_arriveorder_b.narrvnum, ");
		sql.append("po_arriveorder_b.nassistnum, ");
		sql.append("po_arriveorder_b.nwastnum, po_arriveorder_b.nwastassistnum, po_arriveorder_b.npresentnum, po_arriveorder_b.npresentassistnum, po_arriveorder_b.vproducenum, po_arriveorder_b.ccurrencytypeid, po_arriveorder_b.noriginalcurprice, po_arriveorder_b.noriginalcurmny, po_arriveorder_b.nexchangeotobrate, po_arriveorder_b.nprice, ");
		sql.append("po_arriveorder_b.nmoney, ");
		sql.append("po_arriveorder_b.nexchangeotoarate, po_arriveorder_b.nassistcurprice, po_arriveorder_b.nassistcurmny, po_arriveorder_b.dproducedate, po_arriveorder_b.ivalidday, po_arriveorder_b.dvaliddate, po_arriveorder_b.nelignum, po_arriveorder_b.nnotelignum, po_arriveorder_b.naccumchecknum, po_arriveorder_b.naccumwarehousenum, po_arriveorder_b.cwarehouseid, po_arriveorder_b.cstoreid, po_arriveorder_b.cupsourcebilltype, po_arriveorder_b.cupsourcebillid, po_arriveorder_b.cupsourcebillrowid, po_arriveorder_b.vmemo, po_arriveorder_b.vdef1, po_arriveorder_b.vdef2, po_arriveorder_b.vdef3, po_arriveorder_b.vdef4, po_arriveorder_b.vdef5, po_arriveorder_b.vdef6,");
		sql.append("po_arriveorder_b.vdef7, po_arriveorder_b.vdef8, po_arriveorder_b.vdef9, po_arriveorder_b.vdef10, po_arriveorder_b.vdef11, po_arriveorder_b.vdef12, po_arriveorder_b.vdef13, po_arriveorder_b.vdef14, po_arriveorder_b.vdef15, po_arriveorder_b.vdef16, po_arriveorder_b.vdef17, po_arriveorder_b.vdef18, po_arriveorder_b.vdef19, po_arriveorder_b.vdef20,po_arriveorder_b.vfree1, po_arriveorder_b.vfree2, po_arriveorder_b.vfree3, po_arriveorder_b.vfree4, po_arriveorder_b.vfree5, po_arriveorder_b.cbaseid, po_arriveorder_b.csourcebilltype, po_arriveorder_b.csourcebillid, po_arriveorder_b.csourcebillrowid, po_arriveorder_b.ts,po_arriveorder_b.cprojectid,po_arriveorder_b.cprojectphaseid, po_arriveorder_b.crowno,po_arriveorder_b.vbackreasonb," +
				"po_arriveorder_b.corder_bb1id, po_arriveorder_b.blargess, po_arriveorder_b.blargessuprow " +
				",po_arriveorder_b.pk_reqcorp,po_arriveorder_b.pk_reqstoorg,po_arriveorder_b.pk_creqwareid,po_arriveorder_b.pk_invoicecorp ,po_arriveorder_b.jyjg,po_arriveorder_b.glnum ");//eric
		sql.append("from po_arriveorder_b ");
		//质量管理启用
		if (isQCEnable) {
			sql.append("left outer join po_arriveorder_bb on po_arriveorder_b.carriveorder_bid = po_arriveorder_bb.carriveorder_bid ");
			sql.append("left outer join qc_checkstate_b on qc_checkstate_b.ccheckstate_bid = po_arriveorder_bb.cqualitylevelid ");
			sql.append("left outer join qc_defectprocess on qc_defectprocess.cdefectprocessid = po_arriveorder_bb.cdealid ");
		}
		//Where 条件:临时表
		nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
		//(distinct saId).length <= _MINNUM_CRT_TMP_TBL_ 时不用临时表
		//tmpTblDmo.MINNUM = nc.vo.pu.pub.PuPubVO._MINNUM_CRT_TMP_TBL_;
		ArrayList listIds = new ArrayList();
		for (int i = 0; i < iLen; i++) {
			if (!listIds.contains(saBid[i])) {
				listIds.add(saBid[i]);
			}
		}
		String strIdSet =
			tmpTblDmo.insertTempTable(listIds, nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU5, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdSet == null || strIdSet.trim().length() == 0) {
			SCMEnv.out("创建临时表时未返回主键串集合或子查询串，直接返加NULL!");
			return null;
		}
		sql.append("where po_arriveorder_b.carriveorder_bid in " + strIdSet + " ");
		sql.append("order by po_arriveorder_b.crowno ");
		//
		stmt = con.prepareStatement(sql.toString());
		rs = stmt.executeQuery();
		//处理辅数量及金额的准备工作
		//哈希表结构：table = {到货单行ID = 换算率}
		table = new Hashtable(0);
		String sRowId = null;
		UFDouble ufdCanStoreMaxArrNum = null,ufdArr = null, ufdAss = null, ufdRate = null, ufdAcc = null;
		//
		Object nnum = null, naccumnum = null;
		UFBoolean ufbStoreByChk = null;
//		UFDouble nChgAssistNum = null;
//		UFDouble nChgConvertRate = null; 
		String cChgBaseId = null, cChgMangId = null, cChgAssistUnit = null;
		while (rs.next()) {
		    
		    cChgMangId = null;		    
			cChgBaseId = null;
			ufbStoreByChk = null;
			cChgAssistUnit = null;
			nnum = null;
			naccumnum = null;
			
			ArriveorderItemVO arriveorderItem = new ArriveorderItemVO();
			int index = 1;
			//
			for(int i=1; i<=20;i++){
				arriveorderItem.setAttributeValue("pk_defdoc"+i , rs.getString(index++));
			}
			//到货单行ID
			String carriveorder_bid = rs.getString(index++);
			arriveorderItem.setCarriveorder_bid(carriveorder_bid == null ? null : carriveorder_bid.trim());
			sRowId = arriveorderItem.getCarriveorder_bid();
			if (!vRowid.contains(sRowId))
				vRowid.add(sRowId);
			//质量管理启用
			if (isQCEnable) {
				//是否根据检验结果入库
				ufbStoreByChk = (UFBoolean) hStoreByChk.get(sRowId);
				//根据检验结果入库时才做拆分
				if (ufbStoreByChk != null && ufbStoreByChk.booleanValue()){					
					//质量等级ID
					String cqualitylevelid = rs.getString(index++);
					arriveorderItem.setsQualityLevel(cqualitylevelid == null ? null : cqualitylevelid.trim());
					//改判后存货管理Id
					cChgMangId = rs.getString(index++);
	//				arriveorderItem.setCmangid(sMangId);
					//改判后存货基础ID
					cChgBaseId = rs.getString(index++);
	//				arriveorderItem.setCbaseid(sBaseId);
					//质量等级名称
					String cqualitylevelname = rs.getString(index++);
					arriveorderItem.setsQualitylevelName(cqualitylevelname);
					//质量等级对应数量
					nnum = rs.getObject(index++);
					//质量等级对应累计入库数量
					naccumnum = rs.getObject(index++);
					//建议处理意见ID
					String cdealid = rs.getString(index++);
					arriveorderItem.setCdeal(cdealid == null ? null : cdealid.trim());
					//建议处理意见名称
					String cdealname = rs.getString(index++);
					arriveorderItem.setCdealname(cdealname == null ? null : cdealname.trim());
					//到货单行是否可入库
					String strCheckin = rs.getString(index++);
					arriveorderItem.setBcheckin(strCheckin == null ? new UFBoolean(true) : new UFBoolean(strCheckin.trim()));
	
					cChgAssistUnit = rs.getString(index++);
					
					//根据检验结果入库，但质量检验回写不可入库标志则本行不入库
					if (ufbStoreByChk != null && ufbStoreByChk.booleanValue() && !arriveorderItem.getBcheckin().booleanValue())
						continue;
				}else{
				    index += 10;
				}
			}
			//
			String carriveorderid = rs.getString(index++);
			arriveorderItem.setCarriveorderid(carriveorderid == null ? null : carriveorderid.trim());
			//
			String pk_corp = rs.getString(index++);
			arriveorderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			//
			String corder_bid = rs.getString(index++);
			arriveorderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
			//
			String corderid = rs.getString(index++);
			arriveorderItem.setCorderid(corderid == null ? null : corderid.trim());
			//
			if(cChgBaseId != null){
				arriveorderItem.setCmangid(cChgMangId);
				index++;
			}
			else{
				String cmangid = rs.getString(index++);
				if(arriveorderItem.getCmangid() == null || arriveorderItem.getCmangid().length() == 0)
					arriveorderItem.setCmangid(cmangid == null ? null : cmangid.trim());
			}
			//
			if(cChgBaseId != null){
				arriveorderItem.setCassistunit(cChgAssistUnit);
				index++;
			}
			else{
				String cassistunit = rs.getString(index++);
				arriveorderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
			}
			//到货数量(默认未质检)
			Object narrvnum = rs.getObject(index++);
			arriveorderItem.setNarrvnum(
				(narrvnum == null || narrvnum.toString().trim().equals("")) ? null : new UFDouble(narrvnum.toString().trim()));
			//
			ufdArr = arriveorderItem.getNarrvnum();
			//
			Object nassistnum = rs.getObject(index++);
			arriveorderItem.setNassistnum(
				(nassistnum == null || nassistnum.toString().trim().equals("")) ? null : new UFDouble(nassistnum.toString().trim()));

			ufdAss = arriveorderItem.getNassistnum();
			//
			Object nwastnum = rs.getObject(index++);
			arriveorderItem.setNwastnum(
				(nwastnum == null || nwastnum.toString().trim().equals("")) ? null : new UFDouble(nwastnum.toString().trim()));
			//
			Object nwastassistnum = rs.getObject(index++);
			arriveorderItem.setNwastassistnum(
				(nwastassistnum == null || nwastassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(nwastassistnum.toString().trim()));
			//
			Object npresentnum = rs.getObject(index++);
			arriveorderItem.setNpresentnum(
				(npresentnum == null || npresentnum.toString().trim().equals("")) ? null : new UFDouble(npresentnum.toString().trim()));
			//
			Object npresentassistnum = rs.getObject(index++);
			arriveorderItem.setNpresentassistnum(
				(npresentassistnum == null || npresentassistnum.toString().trim().equals(""))
					? null
					: new UFDouble(npresentassistnum.toString().trim()));
			//
			String vproducenum = rs.getString(index++);
			arriveorderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());
			//
			String ccurrencytypeid = rs.getString(index++);
			arriveorderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
			//
			Object noriginalcurprice = rs.getObject(index++);
			arriveorderItem.setNoriginalcurprice(
				(noriginalcurprice == null || noriginalcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurprice.toString().trim()));
			//
			Object noriginalcurmny = rs.getObject(index++);
			arriveorderItem.setNoriginalcurmny(
				(noriginalcurmny == null || noriginalcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(noriginalcurmny.toString().trim()));
			//
			Object nexchangeotobrate = rs.getObject(index++);
			arriveorderItem.setNexchangeotobrate(
				(nexchangeotobrate == null || nexchangeotobrate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotobrate.toString().trim()));
			//
			Object nprice = rs.getObject(index++);
			arriveorderItem.setNprice(
				(nprice == null || nprice.toString().trim().equals("")) ? null : new UFDouble(nprice.toString().trim()));
			//
			Object nmoney = rs.getObject(index++);
			arriveorderItem.setNmoney(
				(nmoney == null || nmoney.toString().trim().equals("")) ? null : new UFDouble(nmoney.toString().trim()));
			//
			Object nexchangeotoarate = rs.getObject(index++);
			arriveorderItem.setNexchangeotoarate(
				(nexchangeotoarate == null || nexchangeotoarate.toString().trim().equals(""))
					? null
					: new UFDouble(nexchangeotoarate.toString().trim()));
			//
			Object nassistcurprice = rs.getObject(index++);
			arriveorderItem.setNassistcurprice(
				(nassistcurprice == null || nassistcurprice.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurprice.toString().trim()));
			//
			Object nassistcurmny = rs.getObject(index++);
			arriveorderItem.setNassistcurmny(
				(nassistcurmny == null || nassistcurmny.toString().trim().equals(""))
					? null
					: new UFDouble(nassistcurmny.toString().trim()));
			//
			String dproducedate = rs.getString(index++);
			arriveorderItem.setDproducedate(dproducedate == null ? null : new UFDate(dproducedate.trim(), false));
			//
			String ivalidday =  rs.getString(index++);
			if(ivalidday != null){
				arriveorderItem.setIvalidday(new Integer(ivalidday));
			}
			//
			String dvaliddate = rs.getString(index++);
			arriveorderItem.setDvaliddate(dvaliddate == null ? null : new UFDate(dvaliddate.trim(), false));
			//
			Object nelignum = rs.getObject(index++);
			arriveorderItem.setNelignum(
				(nelignum == null || nelignum.toString().trim().equals("")) ? null : new UFDouble(nelignum.toString().trim()));
			//
			Object nnotelignum = rs.getObject(index++);
			arriveorderItem.setNnotelignum(
				(nnotelignum == null || nnotelignum.toString().trim().equals("")) ? null : new UFDouble(nnotelignum.toString().trim()));
			//
			Object naccumchecknum = rs.getObject(index++);
			arriveorderItem.setNaccumchecknum(
				(naccumchecknum == null || naccumchecknum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumchecknum.toString().trim()));
			//
			Object naccumwarehousenum = rs.getObject(index++);
			arriveorderItem.setNaccumwarehousenum(
				(naccumwarehousenum == null || naccumwarehousenum.toString().trim().equals(""))
					? null
					: new UFDouble(naccumwarehousenum.toString().trim()));
			//
			//累计入库数量
			ufdAcc = arriveorderItem.getNaccumwarehousenum();
			//
			String cwarehouseid = rs.getString(index++);
			arriveorderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
			//
			String cstoreid = rs.getString(index++);
			arriveorderItem.setCstoreid(cstoreid == null ? null : cstoreid.trim());
			//
			String cupsourcebilltype = rs.getString(index++);
			arriveorderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
			//
			String cupsourcebillid = rs.getString(index++);
			arriveorderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
			//
			String cupsourcebillrowid = rs.getString(index++);
			arriveorderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
			//
			String vmemo = rs.getString(index++);
			arriveorderItem.setVmemo(vmemo == null ? null : vmemo.trim());
			//
			String vdef1 = rs.getString(index++);
			arriveorderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
			//
			String vdef2 = rs.getString(index++);
			arriveorderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
			//
			String vdef3 = rs.getString(index++);
			arriveorderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
			//
			String vdef4 = rs.getString(index++);
			arriveorderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
			//
			String vdef5 = rs.getString(index++);
			arriveorderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
			//
			String vdef6 = rs.getString(index++);
			arriveorderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
			// vdef7 :
			String vdef7 = rs.getString(index++);
			arriveorderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
			// vdef8
			String vdef8 = rs.getString(index++);
			arriveorderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
			// vdef9 :
			String vdef9 = rs.getString(index++);
			arriveorderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
			// vdef10 :
			String vdef10 = rs.getString(index++);
			arriveorderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
			// vdef11 :
			String vdef11 = rs.getString(index++);
			arriveorderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
			// vdef12 :
			String vdef12 = rs.getString(index++);
			arriveorderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
			// vdef13 :
			String vdef13 = rs.getString(index++);
			arriveorderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
			// vdef14 :
			String vdef14 = rs.getString(index++);
			arriveorderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
			// vdef15 :
			String vdef15 = rs.getString(index++);
			arriveorderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
			// vdef16 :
			String vdef16 = rs.getString(index++);
			arriveorderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
			// vdef17 :
			String vdef17 = rs.getString(index++);
			arriveorderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
			// vdef18 :
			String vdef18 = rs.getString(index++);
			arriveorderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
			// vdef19 :
			String vdef19 = rs.getString(index++);
			arriveorderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
			// vdef20 :
			String vdef20 = rs.getString(index++);
			arriveorderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
			//
			String vfree1 = rs.getString(index++);
			arriveorderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
			//
			String vfree2 = rs.getString(index++);
			arriveorderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
			//
			String vfree3 = rs.getString(index++);
			arriveorderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
			//
			String vfree4 = rs.getString(index++);
			arriveorderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
			//
			String vfree5 = rs.getString(index++);
			arriveorderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
			//存货基本档案主键
			if(cChgBaseId != null){
				arriveorderItem.setCbaseid(cChgBaseId);
				index++;
			}
			else{
				String cbaseid = rs.getString(index++);
				if(arriveorderItem.getCbaseid() == null || arriveorderItem.getCbaseid().length() == 0)
					arriveorderItem.setCbaseid(cbaseid == null ? null : cbaseid);
			}
			// csourcebilltype :
			String csourcebilltype = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebilltype", csourcebilltype == null ? null : csourcebilltype.trim());
			// csourcebillid :
			String csourcebillid = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebillid", csourcebillid == null ? null : csourcebillid.trim());
			// csourcebillrowid :
			String csourcebillrowid = rs.getString(index++);
			arriveorderItem.setAttributeValue("csourcebillrowid", csourcebillrowid == null ? null : csourcebillrowid.trim());
			// ts
			String ts = rs.getString(index++);
			arriveorderItem.setTs(ts);
			// cprojectid
			String cprojectid = rs.getString(index++);
			arriveorderItem.setAttributeValue("cprojectid", cprojectid == null ? null : cprojectid.trim());
			// cprojectphaseid
			String cprojectphaseid = rs.getString(index++);
			arriveorderItem.setAttributeValue("cprojectphaseid", cprojectphaseid == null ? null : cprojectphaseid.trim());
			// crowno
			String crowno = rs.getString(index++);
			arriveorderItem.setAttributeValue("crowno", crowno == null ? null : crowno.trim());
			// vbackreasonb
			String vbackreasonb = rs.getString(index++);
			arriveorderItem.setAttributeValue("vbackreasonb", vbackreasonb);
			//corder_bb1id
			String corder_bb1id = rs.getString(index++);
			arriveorderItem.setCorder_bb1id(corder_bb1id == null ? null : corder_bb1id.trim());
			//blargess
			String blargess = rs.getString(index++);
			arriveorderItem.setBlargess(blargess == null ? null : new UFBoolean(blargess.trim()));
			//blargessuprow
			String blargessuprow = rs.getString(index++);
			arriveorderItem.setBlargessuprow(blargessuprow == null ? null : new UFBoolean(blargessuprow.trim()));
			//V5 New:
			arriveorderItem.setPk_reqcorp(rs.getString(index++));
			arriveorderItem.setPk_reqstoorg(rs.getString(index++));
			arriveorderItem.setPk_creqwareid(rs.getString(index++));
			arriveorderItem.setPk_invoicecorp(rs.getString(index++));
			//eric
			arriveorderItem.setJyjg(rs.getString(index++));
			arriveorderItem.setGlnum(PuPubVO.getUFDouble_ValueAsValue(rs.getObject(++index)));
			//质检启用时，按质量等级拆分到货数量-累计入库数量
			
			/*注：此处未考虑“是否根据检验结果入库”参数，统统处理成按质量检验结果拆行。
			 * 
			 *如果“是否根据检验结果入库”参数为否，即不做质量检验拆行入库而按到货单行入库时，由后续代码处理
			 *
			 *参见：代码段{合并不根据质检结果入库的行}
			 */
			
			//处理1 ：设置到货数量、累计入库数量
			if (isQCEnable) {
				arriveorderItem.setNarrvnum(
				    (PuPubVO.getUFDouble_ZeroAsNull(nnum) == null) 
				        ? arriveorderItem.getNarrvnum() 
				        : PuPubVO.getUFDouble_ValueAsValue(nnum));
				arriveorderItem.setNaccumwarehousenum(
					(PuPubVO.getUFDouble_ZeroAsNull(naccumnum) == null && PuPubVO.getUFDouble_ZeroAsNull(nnum) == null)
						? arriveorderItem.getNaccumwarehousenum()
						: PuPubVO.getUFDouble_ValueAsValue(naccumnum));
			}else {//质检未启用时处理，到货数量<<--合格数量,质量信息为 NULL				
				arriveorderItem.setNarrvnum(arriveorderItem.getNelignum());//注意：getNelignum() != null 由查询条件保证
				arriveorderItem.setsQualityLevel(null);
				arriveorderItem.setsQualitylevelName(null);
				arriveorderItem.setCdeal(null);
				arriveorderItem.setCdealname(null);
			}
			
			//缓存可入库数量(合并算法用到：比如，质检模块启用但存货不根据检验结果入库)
			ufdCanStoreMaxArrNum = arriveorderItem.getNarrvnum();
			hCanStoreMaxArrNum.put(carriveorder_bid, ufdCanStoreMaxArrNum);
			
			//处理2 ：可入库数量:到货数量(质量检验未启用时为“合格数量”)-累计入库数量
			arriveorderItem.setNarrvnum(
			        PuPubVO.getUFDouble_NullAsZero(arriveorderItem.getNarrvnum()).sub(PuPubVO.getUFDouble_NullAsZero(arriveorderItem.getNaccumwarehousenum())));
			//设置nwillstorenum，方便对照处理
			arriveorderItem.setNwillstorenum(arriveorderItem.getNarrvnum());
			//换算率哈希表处理
			if (!(ufdAss == null)) {
				ufdRate = ufdArr.div(ufdAss);
			} else {
				ufdRate = new UFDouble(0);
			}
			table.put(sRowId, ufdRate);
			//累计入库数量缓存
			if (ufdAcc != null)
				hAccNum.put(carriveorder_bid, ufdAcc);
			//
			if (arriveorderItem.getNarrvnum() == null || arriveorderItem.getNarrvnum().doubleValue() == 0.0)
				continue;
			v.addElement(arriveorderItem);

		}
		//关闭结果集
		rs.close();
		//
		if (v.size() == 0) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000076")/*@res "表体数据有并发操作，请点击“查询”按钮刷新界面后再操作!"*/);
		}
		arriveorderItems = new ArriveorderItemVO[v.size()];
		v.copyInto(arriveorderItems);
		//合并不根据质检结果入库的行

		Vector vRslt = new Vector();
		Vector vNoCheck = new Vector();
		UFBoolean isByChk = null;
		//是否根据检验结果入库哈希表{子表行ID=是否根据检验结果入库}
		Hashtable hTmp = getStoreByChkHash(saBid);
		//区分不需要质检即入库的行
		for (int i = 0; i < arriveorderItems.length; i++) {
			isByChk = (UFBoolean) hTmp.get(arriveorderItems[i].getCarriveorder_bid());
			if (!isByChk.booleanValue()) {
				//不需质检即可入库的行质检ID置空
				arriveorderItems[i].setsQualityLevel(null);
				arriveorderItems[i].setsQualitylevelName(null);
				arriveorderItems[i].setCdeal(null);
				arriveorderItems[i].setCdealname(null);
				vNoCheck.addElement(arriveorderItems[i]);
			} else {
				vRslt.addElement(arriveorderItems[i]);
			}
		}
		//按表行合并
		Hashtable hNoCheck = new Hashtable();
		Vector vTmp = null;
		if (vNoCheck.size() > 0) {
			for (int i = 0; i < vNoCheck.size(); i++) {
				if (!hNoCheck.containsKey(((ArriveorderItemVO) vNoCheck.elementAt(i)).getCarriveorder_bid())) {
					vTmp = new Vector();
				} else {
					vTmp = (Vector) hNoCheck.get(((ArriveorderItemVO) vNoCheck.elementAt(i)).getCarriveorder_bid());
				}
				vTmp.addElement(vNoCheck.elementAt(i));
				hNoCheck.put(((ArriveorderItemVO) vNoCheck.elementAt(i)).getCarriveorder_bid(), vTmp);
			}
		}
		if (hNoCheck.size() > 0) {
			Enumeration keys = hNoCheck.keys();
			ArriveorderItemVO arriveorderItem = null;
			sRowId = null;
			while (keys.hasMoreElements()) {
				sRowId = (String) keys.nextElement();
				vTmp = (Vector) hNoCheck.get(sRowId);
				//合并“不根据质检入库”的到货单行
				arriveorderItem = (ArriveorderItemVO) vTmp.elementAt(0);
				//重置到货数量
				arriveorderItem.setNarrvnum((UFDouble) hCanStoreMaxArrNum.get(sRowId));
				//重置累计入库数量
				arriveorderItem.setNaccumwarehousenum((UFDouble) hAccNum.get(sRowId));
				//置库存可入库数量
				arriveorderItem.setNarrvnum(
					!(arriveorderItem.getNaccumwarehousenum() == null || arriveorderItem.getNaccumwarehousenum().toString().trim().equals(""))
						? arriveorderItem.getNarrvnum().sub(arriveorderItem.getNaccumwarehousenum())
						: arriveorderItem.getNarrvnum());
				vRslt.addElement(arriveorderItem);
			}
		}
		arriveorderItems = new ArriveorderItemVO[vRslt.size()];
		vRslt.copyInto(arriveorderItems);

		//处理辅数量及金额
		ufdRate = null;
		if (arriveorderItems != null && arriveorderItems.length > 0) {
			for (int i = 0; i < arriveorderItems.length; i++) {
				//换算率
				arriveorderItems[i].setConvertrate((UFDouble) table.get(arriveorderItems[i].getCarriveorder_bid()));
				//辅数量=数量/换算率
				ufdRate = (UFDouble) table.get(arriveorderItems[i].getCarriveorder_bid());
				arriveorderItems[i].setNassistnum(ufdRate.doubleValue() == 0 ? null : arriveorderItems[i].getNarrvnum().div(ufdRate));
				//金额=数量*单价
				arriveorderItems[i].setNmoney(
					(arriveorderItems[i].getNprice() == null || arriveorderItems[i].getNarrvnum() == null) ? null : arriveorderItems[i].getNprice().multiply(arriveorderItems[i].getNarrvnum()));
			}
		}
		//处理自由项
		arriveorderItems = (ArriveorderItemVO[]) nc.bs.pu.pub.PubDMO.getBodysWithFree(arriveorderItems, "cmangid", "vfree0");
	} catch (Exception e) {
		/*调用采购公用方法抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	} finally {
		try {
			if (rs != null) {
				rs.close();
			}
		} catch (Exception e) {
		}
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return arriveorderItems;
}

/**
 * 作者：汪维敏
 * 功能：
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2004-5-13 13:25:19)
 * 修改日期，修改人，修改原因，注释标志：
 *
 * @return java.util.ArrayList
 * 
 * 2006-05-18, Czp, V5修改，支持制单时间、审批时间、最后修改时间的刷新
 */
public ArrayList queryForSaveAudit(String key) throws SQLException{
	/*************************************************************/
	// 保留的系统管理接口：
	beforeCallMethod("nc.bs.rc.receive.ArriveorderDMO", "queryForSaveAudit", new Object[]{});
	/*************************************************************/
	ArrayList arr = new ArrayList();
	String sql = "SELECT dauditdate,cauditpsn,ibillstatus,ts,tmaketime,taudittime,tlastmaketime FROM po_arriveorder WHERE carriveorderid='";
	sql += key + "'";

	Connection con = null;
	PreparedStatement stmt = null;
	try {
		con=getConnection();
		stmt = con.prepareStatement(sql);
		ResultSet rs = stmt.executeQuery();
		String strTmp = null;
		while (rs.next()) {
			strTmp = rs.getString("dauditdate");
			UFDate dDate = strTmp == null ? null : new UFDate(strTmp);
			String sAuditPsn = rs.getString("cauditpsn");
			Integer iBillStatus = new Integer(rs.getInt("ibillstatus"));
			String ts = rs.getString("ts");

			arr.add(dDate);
			arr.add(sAuditPsn);
			arr.add(iBillStatus);
			arr.add(ts);
			arr.add(PuPubVO.getUFDateTime(rs.getString("tmaketime")));
			arr.add(PuPubVO.getUFDateTime(rs.getString("taudittime")));
			arr.add(PuPubVO.getUFDateTime(rs.getString("tlastmaketime")));
		}

		//关闭结果集,即时释放资源
		rs.close();
	}
	finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		}catch (Exception e) {}
		try {
			if (con != null) {
				con.close();
			}
		}catch (Exception e) {}
	}

	/*************************************************************/
	// 保留的系统管理接口：
	afterCallMethod("nc.bs.rc.receive.ArriveorderDMO", "queryForSaveAudit", new Object[]{});
	/*************************************************************/

	return arr;
}

/**查询可入库的到货单表头
 *
 * 参数结构
 *	ArrayList
 *		|-String,公司主键
 *		|-String,业务类型
 *		|-String,查询条件串
 *		|-UFBoolean,质量管理是否启用
 *
 * 创建日期：2004-04-22
 * 创 建 者：晁志平
 */
public ArriveorderHeaderVO[] queryHeadsForIc(ArrayList listPara) throws BusinessException {
	
	if (listPara == null || listPara.size() < 3) {
		SCMEnv.out("程序BUG：传入参数不正确，直接返回NULL!");
		return null;
	}
	String strPkCorp = (String) listPara.get(0);
	String strWherePart = (String) listPara.get(1);
	UFBoolean ufbQcEnabled = (UFBoolean) listPara.get(2);
  String sOprId = (String) listPara.get(3);
  
	if (strPkCorp == null || strWherePart == null || ufbQcEnabled == null) {
		SCMEnv.out("程序BUG：传入参数不正确，公司主键、查询条件串、质量管理是否启用存在空值，直接返回NULL!");
		return null;
	}
	boolean isQCEnable = ufbQcEnabled.booleanValue();
	Vector vHeaderVos = new Vector();
	Vector vAllRowId = new Vector();
	ArriveorderHeaderVO[] arriveorderHeaders = null;
	ArriveorderHeaderVO arriveorderHeader = null;
	Connection con = null;
	PreparedStatement stmt = null;
	StringBuffer sql = null;
	ResultSet rs = null;	
	Hashtable hArrLargess = new Hashtable();//是否是本环节确定的赠品
	ArrayList listOrderBidPo = new ArrayList();
	ArrayList listOrderBidSc = new ArrayList();
	try {
		sql = new StringBuffer(" ");
		//处理供应商分类编码
		strWherePart = setCustClassCode(strPkCorp, "bd_areacl.areaclcode", strWherePart);
		//处理存货分类编码
		strWherePart = setInvClassCode("bd_invcl.invclasscode", strWherePart);
		sql.append("select distinct ");
		for(int i=1; i<=20;i++){
			sql.append("po_arriveorder.pk_defdoc"+ i +", ");
		}
		sql.append("po_arriveorder.pk_corp, po_arriveorder.varrordercode, po_arriveorder.dreceivedate, po_arriveorder.cvendormangid, po_arriveorder.cbiztype, po_arriveorder.ctransmodeid, po_arriveorder.cstoreorganization, po_arriveorder.creceivepsn, po_arriveorder.cdeptid, po_arriveorder.cemployeeid, po_arriveorder.caccountyear, po_arriveorder.ibillstatus, po_arriveorder.coperator, po_arriveorder.cbilltype, po_arriveorder.vmemo, po_arriveorder.vdef1, po_arriveorder.vdef2, po_arriveorder.vdef3, po_arriveorder.vdef4, po_arriveorder.vdef5, po_arriveorder.vdef6, po_arriveorder.vdef7, po_arriveorder.vdef8, po_arriveorder.vdef9, po_arriveorder.vdef10,");
		sql.append("po_arriveorder.vdef11, po_arriveorder.vdef12, po_arriveorder.vdef13, po_arriveorder.vdef14, po_arriveorder.vdef15, po_arriveorder.vdef16, po_arriveorder.vdef17, po_arriveorder.vdef18, po_arriveorder.vdef19, po_arriveorder.vdef20,po_arriveorder.cvendorbaseid, po_arriveorder.cfreecustid, po_arriveorder.dauditdate, po_arriveorder.cauditpsn, po_arriveorder.carriveorderid ,po_arriveorder.ts,po_arriveorder.bisback,po_arriveorder.vbackreasonh ");
		//效率优化：无论质量管理启用于否均查询表体ID及表体时间戳
		sql.append(",po_arriveorder_b.carriveorder_bid,po_arriveorder_b.ts,po_arriveorder_b.cupsourcebillrowid,po_arriveorder_b.cupsourcebilltype ");
		//质检启用时要查询表体相关控制信息，用于过滤
		if (isQCEnable) {
			sql.append(",po_arriveorder_b.nelignum,po_arriveorder_b.nnotelignum,po_arriveorder_bb.nnum,po_arriveorder_bb.naccumnum,po_arriveorder_bb.bcheckin ");
		}
		sql.append(",po_arriveorder_b.narrvnum,po_arriveorder_b.naccumwarehousenum,po_arriveorder_b.blargess,po_arriveorder_b.blargessuprow ");
		sql.append(",pk_purcorp,tmaketime,taudittime,tlastmaketime,po_arriveorder_b.cwarehouseid,po_arriveorder_b.cbaseid,po_arriveorder_b.cmangid from po_arriveorder ");
		//子表
		sql.append("inner join po_arriveorder_b on po_arriveorder.carriveorderid = po_arriveorder_b.carriveorderid ");
		//子子表
		if (isQCEnable) {
			sql.append("left outer join po_arriveorder_bb on po_arriveorder_b.carriveorder_bid = po_arriveorder_bb.carriveorder_bid ");
		}
		//供应商
		if (strWherePart.indexOf("bd_cubasdoc.custcode") >= 0 || strWherePart.indexOf("bd_cubasdoc.custname") >= 0) {
			sql.append("inner join bd_cubasdoc on po_arriveorder.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
		}
		//地区分类
		if (strWherePart.indexOf("bd_areacl.areaclcode") >= 0) {
			if (!(strWherePart.indexOf("bd_cubasdoc.custcode") >= 0 || strWherePart.indexOf("bd_cubasdoc.custname") >= 0)) {
				sql.append("inner join bd_cubasdoc on po_arriveorder.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
			}
			sql.append("inner join bd_areacl on bd_areacl.pk_areacl = bd_cubasdoc.pk_areacl ");
		}
		//存货
		if (strWherePart.indexOf("bd_invbasdoc.invcode") >= 0 || strWherePart.indexOf("bd_invbasdoc.invname") >= 0) {
			sql.append("inner join bd_invbasdoc on po_arriveorder_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
		}
		//存货分类
		if (strWherePart.indexOf("bd_invcl.invclasscode") >= 0) {
			if (!(strWherePart.indexOf("bd_invbasdoc.invcode") >= 0 || strWherePart.indexOf("bd_invbasdoc.invcode") >= 0)) {
				sql.append("inner join bd_invbasdoc on po_arriveorder_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
			}
			sql.append("inner join bd_invcl on bd_invbasdoc.pk_invcl = bd_invcl.pk_invcl ");
		}
		//部门
		if (strWherePart.indexOf("bd_deptdoc.deptname") >= 0) {
			sql.append("inner join bd_deptdoc on po_arriveorder.cdeptid = bd_deptdoc.pk_deptdoc ");
		}
		//库存组织
		if (strWherePart.indexOf("bd_calbody.bodyname") >= 0) {
			sql.append("inner join bd_calbody on po_arriveorder.cstoreorganization = bd_calbody.pk_calbody ");
		}
		//物料生产档案
		sql.append("left outer join bd_produce prod1 on prod1.pk_invbasdoc = po_arriveorder_b.cbaseid ");
		//sql.append("left outer join bd_produce prod2 on prod2.pk_calbody = po_arriveorder.cstoreorganization ");
		//仓库
		if (strWherePart.indexOf("bd_stordoc.storname") >= 0) {
			sql.append("LEFT OUTER JOIN bd_stordoc ON po_arriveorder_b.cwarehouseid = bd_stordoc.pk_stordoc ");
		}
		//业务员
		if (strWherePart.indexOf("bd_psndoc.psnname") >= 0) {
			sql.append("inner join bd_psndoc ON po_arriveorder.cemployeeid = bd_psndoc.pk_psndoc ");
		}
		//操作员(制单人)
		if (strWherePart.indexOf("sm_user.user_name") >= 0) {
			sql.append("inner join sm_user ON po_arriveorder.coperator = sm_user.cuserid ");
		}
		//操作员(审批人)
		if (strWherePart.indexOf("sm_user1.user_name") >= 0) {
			sql.append("LEFT OUTER JOIN sm_user sm_user1 ON po_arriveorder.cauditpsn = sm_user1.cuserid ");
		}
		//项目 bd_jobbasfil.jobname
		if (strWherePart.indexOf("bd_jobbasfil.jobname") >= 0) {
			sql.append("LEFT OUTER JOIN bd_jobmngfil ON po_arriveorder_b.cprojectid = bd_jobmngfil.pk_jobmngfil ");
			sql.append("LEFT OUTER JOIN bd_jobbasfil ON bd_jobmngfil.pk_jobbasfil = bd_jobbasfil.pk_jobbasfil ");
		}
		//项目阶段
		if (strWherePart.indexOf("bd_jobphase.jobphasename") >= 0) {
			sql.append("LEFT OUTER JOIN bd_jobobjpha ON po_arriveorder_b.cprojectphaseid = bd_jobobjpha.pk_jobobjpha ");
			sql.append("LEFT OUTER JOIN bd_jobphase ON bd_jobphase.pk_jobphase = bd_jobobjpha.pk_jobphase ");
		}
		//发运方式
		if (strWherePart.indexOf("bd_sendtype.sendname") >= 0) {
			sql.append("LEFT OUTER JOIN bd_sendtype ON bd_sendtype.pk_sendtype = po_arriveorder.ctransmodeid ");
		}
		//常用条件
		sql.append("where prod1.pk_calbody = po_arriveorder.cstoreorganization ");
		//对审批流的特殊处理
		String key = "carriveorderid";
		if (strWherePart != null && !strWherePart.trim().equals("") && strWherePart.indexOf(key) >= 0) {
			String mid = strWherePart;
			strWherePart = "";
			int iIndexCarriveorderid = mid.indexOf(key);
			strWherePart = mid.substring(0, iIndexCarriveorderid) + " ";
			strWherePart += " po_arriveorder." + key + " ";
			strWherePart += mid.substring(iIndexCarriveorderid + key.length(), mid.length()) + " ";
		}
		sql.append("and " + strWherePart + " ");
		sql.append("and po_arriveorder.dr = 0 and po_arriveorder_b.dr = 0 ");
		//正到货才可入库 czp&xy/03/09/08
		sql.append("and isnull(po_arriveorder_b.narrvnum,0) > 0 ");
		//累计入库小于到货(注意：暂未考虑容差czp&xy/03/09/08)
		sql.append("and isnull(po_arriveorder_b.narrvnum,0) - isnull(po_arriveorder_b.naccumwarehousenum,0) > 0 ");
		//质检未启用 : 过滤掉累计合格为零或累计合格数量-累计入库数量为零的行
		if (!isQCEnable) {
			sql.append("and not isnull(po_arriveorder_b.nelignum,0) = 0 ");
			sql.append("and not isnull(po_arriveorder_b.nelignum,0) - isnull(po_arriveorder_b.naccumwarehousenum,0) = 0 ");
		}
		//物料生产档案
		sql.append("and isnull(prod1.isused,'N') = 'Y' ");
		//
		sql.append("order by po_arriveorder.carriveorderid ");
		//
		con = getConnection();
		stmt = con.prepareStatement(sql.toString());
		rs = stmt.executeQuery();
		//
		int index = 0;
		//
    ArriveorderItemVO itemLight = null;
    //
		while (rs.next()) {
			//
			index = 0;
			//
			arriveorderHeader = new ArriveorderHeaderVO();
			// pk_defdoc1-20
			for(int i=1; i<=20;i++){
				arriveorderHeader.setAttributeValue("pk_defdoc"+i , rs.getString(++index));
			}
			// pk_corp :
			String pk_corp = rs.getString(++index);
			arriveorderHeader.setPk_corp(pk_corp == null ? null : pk_corp.trim());
			// varrordercode :
			String varrordercode = rs.getString(++index);
			arriveorderHeader.setVarrordercode(varrordercode == null ? null : varrordercode.trim());
			// dreceivedate :
			String dreceivedate = rs.getString(++index);
			arriveorderHeader.setDreceivedate(dreceivedate == null ? null : new UFDate(dreceivedate.trim(), false));
			// cvendormangid :
			String cvendormangid = rs.getString(++index);
			arriveorderHeader.setCvendormangid(cvendormangid == null ? null : cvendormangid.trim());
			// cbiztypeid :
			String cbiztype = rs.getString(++index);
			arriveorderHeader.setCbiztype(cbiztype == null ? null : cbiztype.trim());
			// ctransmodeid :
			String ctransmodeid = rs.getString(++index);
			arriveorderHeader.setCtransmodeid(ctransmodeid == null ? null : ctransmodeid.trim());
			// cstoreorganization :
			String cstoreorganization = rs.getString(++index);
			arriveorderHeader.setCstoreorganization(cstoreorganization == null ? null : cstoreorganization.trim());
			// creceivepsn :
			String creceivepsn = rs.getString(++index);
			arriveorderHeader.setCreceivepsn(creceivepsn == null ? null : creceivepsn.trim());
			// cdeptid :
			String cdeptid = rs.getString(++index);
			arriveorderHeader.setCdeptid(cdeptid == null ? null : cdeptid.trim());
			// cemployeeid :
			String cemployeeid = rs.getString(++index);
			arriveorderHeader.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
			// caccountyear :
			String caccountyear = rs.getString(++index);
			arriveorderHeader.setCaccountyear(caccountyear == null ? null : caccountyear.trim());
			// ibillstatus :
			Integer ibillstatus = (Integer) rs.getObject(++index);
			arriveorderHeader.setIbillstatus(ibillstatus == null ? null : ibillstatus);
			// coperator :
			String coperator = rs.getString(++index);
			arriveorderHeader.setCoperator(coperator == null ? null : coperator.trim());
			// cbilltype :
			String cbilltype = rs.getString(++index);
			arriveorderHeader.setCbilltype(cbilltype == null ? null : cbilltype.trim());
			// vmemo :
			String vmemo = rs.getString(++index);
			arriveorderHeader.setVmemo(vmemo == null ? null : vmemo.trim());
      // vdef1-20
      for(int j=1; j<=20; j++){
        arriveorderHeader.setAttributeValue("vdef"+j, rs.getString(++index));
      }
			// cvendorbaseid :
			String cvendorbaseid = rs.getString(++index);
			arriveorderHeader.setCvendorbaseid(cvendorbaseid == null ? null : cvendorbaseid.trim());
			// cfreecustid :
			String cfreecustid = rs.getString(++index);
			arriveorderHeader.setCfreecustid(cfreecustid == null ? null : cfreecustid.trim());
			//dauditdate
			String dauditdate = rs.getString(++index);
			arriveorderHeader.setAttributeValue("dauditdate", dauditdate == null ? null : new UFDate(dauditdate, false));
			//cauditpsn
			String cauditpsn = rs.getString(++index);
			arriveorderHeader.setAttributeValue("cauditpsn", cauditpsn == null ? null : cauditpsn.trim());
			//po_arriveorder.carriveorderid
			String carriveorderid = rs.getString(++index);
			arriveorderHeader.setAttributeValue("carriveorderid", carriveorderid == null ? null : carriveorderid.trim());
			//ts
			String ts = rs.getString(++index);
			arriveorderHeader.setTs(ts);
			//bisback
			String bisback = rs.getString(++index);
			if (bisback == null || bisback.trim().equals("")) {
				arriveorderHeader.setBisback(new UFBoolean(false));
			} else {
				arriveorderHeader.setBisback(new UFBoolean(bisback.trim()));
			}
			//vbackreasonh
			String vbackreasonh = rs.getString(++index);
			arriveorderHeader.setVbackreasonh(vbackreasonh);
			//子表ID
			String rowid = rs.getString(++index);
			arriveorderHeader.setCarriveorderrowid(rowid);
			//子表TS
			String rowts = rs.getString(++index);
			arriveorderHeader.setCarriveorderrowts(rowts);
			if (!vAllRowId.contains(rowid)) {
				vAllRowId.add(rowid);
			}
			//子表来源单据行ID
			arriveorderHeader.setUpsourceRowId(rs.getString(++index));
			//子表来源单据类型
			arriveorderHeader.setUpsourceBillType(rs.getString(++index));
			
			/**质检启用时要查询生产制造页控制信息及表体相关信息，用于过滤*/
			if (isQCEnable) {
				/**累计合格数量*/
				Object objElg = rs.getObject(++index);
				if (objElg == null || objElg.toString().trim().equals(""))
					arriveorderHeader.setElg(null);
				else
					arriveorderHeader.setElg(new UFDouble(objElg.toString().trim()));
				/**累计不合格数量*/
				Object objElgNot = rs.getObject(++index);
				if (objElgNot == null || objElgNot.toString().trim().equals(""))
					arriveorderHeader.setElgNot(null);
				else
					arriveorderHeader.setElgNot(new UFDouble(objElgNot.toString().trim()));
				/*子子表数量*/
				arriveorderHeader.setBBNum(PuPubVO.getUFDouble_NullAsZero(rs.getString(++index)));
				/*子子表累计入库数量*/
				arriveorderHeader.setBBNaccumnum(PuPubVO.getUFDouble_NullAsZero(rs.getString(++index)));
				//到货单表头是否可入库
				String strCheckin = rs.getString(++index);
				arriveorderHeader.setBcheckin(strCheckin == null ? new UFBoolean(true) : new UFBoolean(strCheckin.trim()));
			}
			//到货数量
			Object oTemp = rs.getObject(++index);
			UFDouble ufdArrvNum = new UFDouble(0);
			if(oTemp != null) ufdArrvNum = new UFDouble(oTemp.toString());
			/**累计入库数量*/
			Object objAccWar = rs.getObject(++index);
			if (objAccWar == null || objAccWar.toString().trim().equals(""))
				arriveorderHeader.setAccWar(null);
			else
				arriveorderHeader.setAccWar(new UFDouble(objAccWar.toString().trim()));			
			//*****
			//赠品标志
			String blargess = rs.getString(++index);
			//上游赠品标志
			String blargessuprow = rs.getString(++index);
			//hArrLargess={到货单行ID=是否到货单确定的赠品}
			if(arriveorderHeader.getCarriveorderrowid() != null){
				hArrLargess.put(arriveorderHeader.getCarriveorderrowid(),new UFBoolean(
						PuPubVO.getUFBoolean_NullAs(blargess,UFBoolean.FALSE).booleanValue()
						&& !PuPubVO.getUFBoolean_NullAs(blargessuprow,UFBoolean.FALSE).booleanValue()));					
			}
			//,pk_purcorp
			String strTmp = rs.getString(++index);
			arriveorderHeader.setPk_purcorp(strTmp);
			//,tmaketime
			strTmp = rs.getString(++index);
			arriveorderHeader.setTmaketime(PuPubVO.getUFDateTime(strTmp));
			//,taudittime
			strTmp = rs.getString(++index);
			arriveorderHeader.setTaudittime(PuPubVO.getUFDateTime(strTmp));
			//,tlastmaketime
			strTmp = rs.getString(++index);
			arriveorderHeader.setTlastmaketime(PuPubVO.getUFDateTime(strTmp));

      //since v51, 轻量行VO，用于按库管员过滤到货单行
      itemLight = new ArriveorderItemVO();
      //,po_arriveorder_b.cwarehouseid
      itemLight.setCwarehouseid(rs.getString(++index));
      //,po_arriveorder_b.cbaseid
      itemLight.setCbaseid(rs.getString(++index));
      //,po_arriveorder_b.cmangid
      itemLight.setCmangid(rs.getString(++index));
      //
      arriveorderHeader.setBodyVo(itemLight);
      //
			vHeaderVos.addElement(arriveorderHeader);
		}
		if (rs != null)
			rs.close();
	} catch (Exception e) {
		/*调用采购公用方法抛出异常*/
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	} finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	/**以下为返回前处理*/
	
  //按库管员权限处理
  if(vHeaderVos.size() == 0){
    return null;
  }
  int iOrgLen = vHeaderVos.size();
  ArriveorderHeaderVO[] headerVos = new ArriveorderHeaderVO[iOrgLen];
  vHeaderVos.copyInto(headerVos);
  ArriveorderVO[] voaSrc = new ArriveorderVO[iOrgLen];
  for(int i=0; i<iOrgLen; i++){
    voaSrc[i] = new ArriveorderVO();
    voaSrc[i].setParentVO(headerVos[i]);
    voaSrc[i].setChildrenVO(new ArriveorderItemVO[]{headerVos[i].getBodyVo()});
  }
  try{
    voaSrc = (ArriveorderVO[]) new OrderDMO().filterVosForIc(voaSrc, strPkCorp, sOprId, ScmConst.PO_Arrive);
  }catch(NamingException e){
    SCMEnv.out(e);
    throw new BusinessException(e.getMessage());
  }catch(SystemException e){
    SCMEnv.out(e);
    throw new BusinessException(e.getMessage());
  }
  if(voaSrc == null){
    return null;
  }
  //为查询到货区是否有货做准备
  int iLenAfterIcFilter = voaSrc.length;
  String sUpSourceRowId = null;
  String sUpSourceBillType = null;
  vHeaderVos = new Vector();
  for(int i=0; i<iLenAfterIcFilter; i++){    
    vHeaderVos.add(voaSrc[i].getHeadVO());
    sUpSourceBillType = voaSrc[i].getHeadVO().getUpsourceBillType();
    sUpSourceRowId = voaSrc[i].getHeadVO().getUpsourceRowId();
    if(BillTypeConst.PO_ORDER.equalsIgnoreCase(sUpSourceBillType)){
        if(!listOrderBidPo.contains(sUpSourceRowId)){
            listOrderBidPo.add(sUpSourceRowId);
        }
    }else if(BillTypeConst.SC_ORDER.equalsIgnoreCase(sUpSourceBillType)){
        if(!listOrderBidSc.contains(sUpSourceRowId)){
          listOrderBidSc.add(sUpSourceRowId);
      }
    }
  }
	//到货区无货哈希表：采购订单
	HashMap hPoBid = null;
	if(listOrderBidPo.size() > 0){
		try{
		    hPoBid = getNoArrNumBidPo((String[])listOrderBidPo.toArray(new String[listOrderBidPo.size()]));
		} catch (Exception e) {
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
	}	
	//到货区无货哈希表：委外订单
	HashMap hScBid = null;
	if(listOrderBidSc.size() > 0){
		try{
		    hScBid = getNoArrNumBidSc((String[])listOrderBidSc.toArray(new String[listOrderBidSc.size()]));
		} catch (Exception e) {
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
	}
	//到货区无货处理：
	String strUpBid = null; 
	String strUpBilltype = null; 
	if(hPoBid != null && hPoBid.size() > 0
	        || hScBid != null && hScBid.size() > 0){
		Vector vTemp = new Vector();

		String strArrRowId = null;
	    for (int i = 0; i < iLenAfterIcFilter; i++) {
	        arriveorderHeader = voaSrc[i].getHeadVO();
	        strUpBid = arriveorderHeader.getUpsourceRowId();
	        strArrRowId = arriveorderHeader.getCarriveorderrowid();
	        strUpBilltype = arriveorderHeader.getUpsourceBillType();
	        if(BillTypeConst.PO_ORDER.equalsIgnoreCase(strUpBilltype)){
	        	//未执行退货 或 本环节赠品 
	        	if(!hPoBid.containsKey(strUpBid) 
	        			|| hArrLargess.get(strArrRowId) != null && ((UFBoolean)hArrLargess.get(strArrRowId)).booleanValue()){
	                vTemp.addElement(arriveorderHeader);
	        	}
	        }else if(BillTypeConst.SC_ORDER.equalsIgnoreCase(strUpBilltype)){
	        	//未执行退货 或 本环节赠品
	            if(!hScBid.containsKey(strUpBid) 
	            		|| hArrLargess.get(strArrRowId) != null && ((UFBoolean)hArrLargess.get(strArrRowId)).booleanValue()){
	            	vTemp.addElement(arriveorderHeader);
	            }
	        }
        }	    
	    
		if(vTemp.size() > 0){
			vHeaderVos = new Vector();
			for(int i = 0; i < vTemp.size(); i++) {
        vHeaderVos.addElement(vTemp.elementAt(i));
      }
		}else{
			vHeaderVos = null;
		}
	}
	
	if(vHeaderVos == null || vHeaderVos.size() == 0){
	    SCMEnv.out("发生退货业务，此时到货区已经无存货可入库，没有符合条件的数据!");
	    return null;
	}	
	Vector vRslt = new Vector(),vTmp = new Vector();
	Hashtable hTmp = new Hashtable();
	String sHid = null;
	if (vHeaderVos.size() == 0) {
		SCMEnv.out("给入库单查询可入库的到货单，没有符合条件的数据!");
		return null;
	}
	/**分组(按表头)*/
	for (int i = 0; i < vHeaderVos.size(); i++) {
		sHid = ((ArriveorderHeaderVO) vHeaderVos.elementAt(i)).getCarriveorderid();
		if (hTmp.containsKey(sHid)) {
			vTmp = (Vector) hTmp.get(sHid);
			vTmp.add(vHeaderVos.elementAt(i));
		} else {
			vTmp = new Vector();
			vTmp.add(vHeaderVos.elementAt(i));
			hTmp.put(sHid, vTmp);
		}
	}
	Enumeration keyset = hTmp.keys();
	ArriveorderHeaderVO headTmp = null;
	String[] saRowid = null;
	String[] saRowts = null;
	String[] sUpsourceRowIds = null;
	UFBoolean[] ufbRowExts = null;
	int iSize = 0;
	/**质检启用时:获取符合业务要求的表头并设置其相应表体ID数组[依据表体及子子表是否可入库]*/
	if (isQCEnable) {
		Hashtable hStoreByChk = new Hashtable();
		/**取是否通过质检结果入库*/
		saRowid = new String[vAllRowId.size()];
		vAllRowId.copyInto(saRowid);
		hStoreByChk = getStoreByChkHash(saRowid);
		UFBoolean isByChk = null;
		UFDouble ufdElg = null, ufdElgNot = null, ufdAccWar = null;
		int iDelCnt = 0;
		Vector vValidRowId = null;
		Vector vValidRowTs = null;
		Vector vValidUpsourceRowId = null;
		Vector vStoreByChk = null;
		UFDouble ufdBBNum = null;
		UFDouble ufdBBNaccumnum = null;
		while (keyset.hasMoreElements()) {
			sHid = (String) keyset.nextElement();
			vTmp = (Vector) hTmp.get(sHid);
			if (vTmp == null || vTmp.size() == 0) {
				continue;
			}
			iSize = vTmp.size();
			iDelCnt = 0;
			vValidRowId = new Vector();
			vValidRowTs = new Vector();
			vValidUpsourceRowId = new Vector();
			vStoreByChk = new Vector();
			for (int i = 0; i < iSize; i++) {
				headTmp = (ArriveorderHeaderVO) vTmp.elementAt(i);
				isByChk = (UFBoolean) hStoreByChk.get(headTmp.getCarriveorderrowid());
				ufdElg = headTmp.getElg();
				ufdElgNot = headTmp.getElgNot();
				ufdAccWar = headTmp.getAccWar();
				ufdBBNum = headTmp.getBBNum();
				ufdBBNaccumnum = headTmp.getBBNaccumnum();
				/** 除去不合法表行
				 *  除去:“根据质检结果入库”且“合格和不合格均为零”
				 *  除去:“根据质检结果入库”且“合格+不合格-累计入库=零”
				 *  除去:“根据质检结果入库”且“不可入库”"
				 *  除去:“根据质检结果入库”且 “nnum - naccumnum <= 0 
				*/
				boolean bcheckin = headTmp.getBcheckin().booleanValue();
				if (isByChk.booleanValue()
					&& (((ufdElg == null || ufdElg.compareTo(new UFDouble(0)) == 0)
						&& (ufdElgNot == null || ufdElgNot.compareTo(new UFDouble(0)) == 0))
						|| (ufdAccWar != null
							&& ufdAccWar.equals((ufdElg == null ? new UFDouble(0) : ufdElg).add(ufdElgNot == null ? new UFDouble(0) : ufdElgNot)))
						|| !bcheckin
						|| ufdBBNum.sub(ufdBBNaccumnum).doubleValue() <= 0)) {
					iDelCnt += 1;
				} else {
					if (!vValidRowId.contains(headTmp.getCarriveorderrowid())) {
						vValidRowId.addElement(headTmp.getCarriveorderrowid());
						vValidRowTs.addElement(headTmp.getCarriveorderrowts());
						vValidUpsourceRowId.addElement(headTmp.getUpsourceRowId());
						vStoreByChk.addElement(isByChk);
					}
				}
			} /**返回存在合法行的表头(表头含相应的表体ID[]及相应表体TS[])*/
			if (iDelCnt < vTmp.size()) {
				saRowid = new String[vValidRowId.size()];
				vValidRowId.copyInto(saRowid);
				saRowts = new String[vValidRowId.size()];
				vValidRowTs.copyInto(saRowts);
				sUpsourceRowIds = new String[vValidUpsourceRowId.size()];
				vValidUpsourceRowId.copyInto(sUpsourceRowIds);
				ufbRowExts = new UFBoolean[vValidRowId.size()];
				vStoreByChk.copyInto(ufbRowExts);
				headTmp.setRowIds(saRowid);
				headTmp.setRowTss(saRowts);
				headTmp.setUpsourceRowIds(sUpsourceRowIds);
				headTmp.setRowExt(ufbRowExts);
				vRslt.addElement(headTmp);
			}
		}
	} /**质检未启用时:表头含相应的表体ID[]及相应表体TS[]*/
	else {
		while (keyset.hasMoreElements()) {
			sHid = (String) keyset.nextElement();
			vTmp = (Vector) hTmp.get(sHid);
			if (vTmp == null || vTmp.size() == 0) {
				continue;
			}
			iSize = vTmp.size();
			saRowid = new String[iSize];
			saRowts = new String[iSize];
			sUpsourceRowIds = new String[iSize];
			for (int i = 0; i < iSize; i++) {
				headTmp = (ArriveorderHeaderVO) vTmp.elementAt(i);
				saRowid[i] = headTmp.getCarriveorderrowid();
				saRowts[i] = headTmp.getCarriveorderrowts();
				sUpsourceRowIds[i] = headTmp.getUpsourceRowId();
			}
			headTmp.setRowIds(saRowid);
			headTmp.setRowTss(saRowts);
			headTmp.setUpsourceRowIds(sUpsourceRowIds);
			vRslt.addElement(headTmp);
		}
	}
	
	if(vRslt.size() == 0) return null;
		
	arriveorderHeaders = new ArriveorderHeaderVO[vRslt.size()];
	vRslt.copyInto(arriveorderHeaders);
	
	return arriveorderHeaders;
	
	
}
/**
 * 用库存库管员过滤到货单。
 * <p>
 * <b>examples:</b>
 * <p>
 * 使用示例
 * <p>
 * <b>参数说明</b>
 * @param voaHeaderSrc      待处理到货单表头(含表体VO)
 * @param sLoginCorp        登录公司
 * @param sOprId            操作员
 * @return                  处理后的到货单表头
 * @throws BusinessException
 * <p>
 * @author czp
 * @time 2007-4-4 下午05:17:00
 */
private ArriveorderHeaderVO[] filterVosForIc(
    ArriveorderHeaderVO[] voaHeaderSrc, 
    String sLoginCorp, 
    String sOprId) throws BusinessException{
  if(voaHeaderSrc == null){
    return null;
  }
  //组织到货单VO[]
  int iLen = voaHeaderSrc.length;
  ArriveorderVO[] voaSrc = new ArriveorderVO[iLen];
  for(int i=0; i<iLen; i++){
    voaSrc[i] = new ArriveorderVO();
    voaSrc[i].setParentVO(voaHeaderSrc[i]);
    voaSrc[i].setChildrenVO(new ArriveorderItemVO[]{voaHeaderSrc[i].getBodyVo()});
  }
  //用库管员权限过滤
  try{
    voaSrc = (ArriveorderVO[]) new OrderDMO().filterVosForIc(voaSrc, sLoginCorp, sOprId, ScmConst.PO_Arrive);
  }catch(NamingException e){
    SCMEnv.out(e);
    throw new BusinessException(e.getMessage());
  }catch(SystemException e){
    SCMEnv.out(e);
    throw new BusinessException(e.getMessage());
  }
  if(voaSrc == null){
    return null;
  }
  iLen = voaSrc.length;
  ArriveorderHeaderVO[] voaHeaderDst = new ArriveorderHeaderVO[iLen];
  for(int i=0; i<iLen; i++){
    voaHeaderDst[i] = voaSrc[i].getHeadVO();
  }
  //
  return voaHeaderDst;
}
/**
 * 作者：汪维敏
 * 功能：判断一个单据中的存货是否在指定的库存组织中
 * 参数：StringsOrderId		订单ID
 *		 String		sCalBodyId		库存组织ID
 * 返回:boolean
 		 true:在指定的库存组织中;false不在
 * 例外：SQLException
 * 日期：(2004-10-26 18:16:20)
 * 修改日期，修改人，修改原因，注释标志：
 */
protected boolean isBillInvInCalBody(String sBillId, String sStoreOrgId) throws java.sql.SQLException {

	StringBuffer sbSql = new StringBuffer();
	sbSql.append("select carriveorder_bid from po_arriveorder_b where carriveorderid='");
	sbSql.append(sBillId);
	sbSql.append("' and ");
	sbSql.append("cbaseid not in(SELECT pk_invbasdoc FROM bd_produce WHERE pk_calbody='");
	sbSql.append(sStoreOrgId);
	sbSql.append("') and po_arriveorder_b.dr=0 ");

	boolean bRet = true;
	Connection con = null;
	Statement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.createStatement();
		rs = stmt.executeQuery(sbSql.toString());

		if (rs.next()) {
			bRet = false;
		}
	} finally {
		//关闭结果集，即时释放资源
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (Exception e) {
		}
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {
		}
	}

	return bRet;
}
/**
 * 作者：汪维敏
 * 功能：过滤掉来源订单表体累计数量―退货数量＝累计入库数量的到货单表体对应的表头（所有表体都符合等式表头才被过滤）
 * 参数：String[]	 订单体Id数字
 * 返回: HashMap  可入库数量＝累计到货数量―退货数量－累计入库数量
 * 例外：SQLException
 * 日期：(2004-12-06 18:16:20)
 * 修改日期，修改人，修改原因，注释标志：
 */
public HashMap filterArrHeadsFrmOrder(String[] sCorder_bids) throws java.sql.SQLException {

	String sql = "select ISNULL(naccumarrvnum, 0) - ISNULL(nbackarrvnum, 0) - ISNULL(naccumstorenum, 0) as willstorenum ,corder_bid from po_order_b where corder_bid in ";
	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sCorder_bids,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC014,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql += strIdsSet + " ";

	HashMap hRet = new HashMap();
	Connection con = null;
	Statement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.createStatement();
		rs = stmt.executeQuery(sql);
		while (rs.next()) {
			Object ob = rs.getObject(1);
			//可入库数量
			UFDouble nWillStoreNum = (ob == null ? new UFDouble(0.0) : new UFDouble(ob.toString()));
			//订单表体ID
			String sOrder_bid = rs.getString(2);
			if(!hRet.containsKey(sOrder_bid))
				hRet.put(sOrder_bid,nWillStoreNum);
		}
	} finally {
		//关闭结果集，即时释放资源
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (Exception e) {
		}
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {
		}
	}

	return hRet;
}
/**
 * 作者：汪维敏
 * 功能：过滤掉来源订单表体累计数量―退货数量＝累计入库数量的到货单表体对应的表头（所有表体都符合等式表头才被过滤）
 * 参数：String[]	 订单体Id数字
 * 返回: HashMap  可入库数量＝累计到货数量―退货数量－累计入库数量
 * 例外：SQLException
 * 日期：(2004-12-06 18:16:20)
 * 修改日期，修改人，修改原因，注释标志：
 */
public HashMap filterArrHeadsFrmSC(String[] sCorder_bids) throws java.sql.SQLException {

	String sql = "select ISNULL(naccumarrvnum, 0) - ISNULL(nbackarrvnum, 0) - ISNULL(naccumstorenum, 0) as willstorenum ,corder_bid from sc_order_b where corder_bid in ";
	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sCorder_bids,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC015,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql += strIdsSet + " ";

	HashMap hRet = new HashMap();
	Connection con = null;
	Statement stmt = null;
	ResultSet rs = null;
	try {
		con = getConnection();
		stmt = con.createStatement();
		rs = stmt.executeQuery(sql);
		while (rs.next()) {
			Object ob = rs.getObject(1);
			//可入库数量
			UFDouble nWillStoreNum = (ob == null ? new UFDouble(0.0) : new UFDouble(ob.toString()));
			//订单表体ID
			String sOrder_bid = rs.getString(2);
			if(!hRet.containsKey(sOrder_bid))
				hRet.put(sOrder_bid,nWillStoreNum);
		}
	} finally {
		//关闭结果集，即时释放资源
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (Exception e) {
		}
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {
		}
	}

	return hRet;
}
/**
 * <p>作者：晁志平
 * <p>功能：取得哈希表描述这样的采购订单行{订单表体累计数量―退货数量 <= 累计入库数量 and 退货数量>0}
 * <p>参数：String[] 采购订单体Id数字
 * <p>返回: HashMap  {采购订单行ID=""}[行ID满足：累计到货数量―退货数量 <= 累计入库数量 and 退货数量>0]
 * <p>例外：SQLException
 * <p>日期：(2005-06-13 13:19:20)
 * <p>修改日期，修改人，修改原因，注释标志：
 * <p>2006-02-16,Czp,V31SP1错误,只满足“订单表体累计数量―退货数量 <= 累计入库数量”不足以说明到货区无货，比如，到货环节确定的赠品行(错误路径：订单非赠品15；到货行1、2分别为15非赠品+2赠品；入库到货行1；到货赠品行2不能继续入库)
 */
public HashMap getNoArrNumBidPo(String[] sCorder_bids) throws java.sql.SQLException {

	HashMap hRet = new HashMap();
	
	String sql = "select distinct corder_bid from po_order_b where abs(isnull(naccumarrvnum,0)) > 0 and coalesce(naccumarrvnum, 0) - coalesce(nbackarrvnum, 0) - coalesce(naccumstorenum, 0) <= 0 and coalesce(nbackarrvnum, 0) > 0 and corder_bid in ";
	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sCorder_bids,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC014,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql += strIdsSet + " ";
	
	Connection con = null;
	Statement stmt = null;
	ResultSet rs = null;
	
	try {
		con = getConnection();
		stmt = con.createStatement();
		rs = stmt.executeQuery(sql);
		String strBid = null;
		while (rs.next()) {
		    strBid = rs.getString(1);
		    if(strBid == null)
		        continue;
			hRet.put(strBid,"");
		}
	} finally {
		//关闭结果集，即时释放资源
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (Exception e) {
		}
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {
		}
	}

	return hRet;
}

/**
 * <p>作者：晁志平
 * <p>功能：取得哈希表描述这样的委外订单行{订单表体累计数量―退货数量 <= 累计入库数量 and 退货数量>0}
 * <p>参数：String[] 委外订单体Id数字
 * <p>返回: HashMap  {委外订单行ID=""}[行ID满足：累计到货数量―退货数量 <= 累计入库数量 and 退货数量>0]
 * <p>例外：SQLException
 * <p>日期：(2005-06-13 13:19:20)
 * <p>修改日期，修改人，修改原因，注释标志：
 * <p>2006-02-16,Czp,V31SP1错误,只满足“订单表体累计数量―退货数量 <= 累计入库数量”不足以说明到货区无货，比如，到货环节确定的赠品行(错误路径：订单非赠品15；到货行1、2分别为15非赠品+2赠品；入库到货行1；到货赠品行2不能继续入库)
 */
public HashMap getNoArrNumBidSc(String[] sCorder_bids) throws java.sql.SQLException {

	HashMap hRet = new HashMap();
	
	String sql = "select distinct corder_bid from sc_order_b where abs(isnull(naccumarrvnum,0)) > 0 and coalesce(naccumarrvnum, 0) - coalesce(nbackarrvnum, 0) - coalesce(naccumstorenum, 0) <= 0 and coalesce(nbackarrvnum, 0) > 0 and corder_bid in ";
	
	String strIdsSet = "";
	try {
		nc.bs.scm.pub.TempTableDMO tmpTblDmo  = new nc.bs.scm.pub.TempTableDMO();
		strIdsSet = tmpTblDmo.insertTempTable(sCorder_bids,nc.vo.scm.pub.TempTableVO.TEMPTABLE_PU_RC014,nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
		if (strIdsSet == null || strIdsSet.trim().length() == 0)
			strIdsSet = "('TempTableDMOError')";
	} catch (Exception e) {
		throw new SQLException(e.getMessage());
	}
	sql += strIdsSet + " ";
	
	Connection con = null;
	Statement stmt = null;
	ResultSet rs = null;
	
	try {
		con = getConnection();
		stmt = con.createStatement();
		rs = stmt.executeQuery(sql);
		String strBid = null;
		while (rs.next()) {
		    strBid = rs.getString(1);
		    if(strBid == null)
		        continue;
			hRet.put(strBid,"");
		}
	} finally {
		//关闭结果集，即时释放资源
		try {
			if (rs != null)
				rs.close();
		} catch (Exception e) {
		}
		try {
			if (stmt != null)
				stmt.close();
		} catch (Exception e) {
		}
		try {
			if (con != null)
				con.close();
		} catch (Exception e) {
		}
	}

	return hRet;
}
/**
 * @功能：给订单提供的接口方法：更新到货单行的收票公司
 * @作者：晁志平
 * @date：(2006-3-20 16:20:10)
 * @exception:BusinessException
 * @since: V50
 * @param saBid  到货单行ID数组
 * @param saCorpId 收票公司ID数组
 */
public int[] updateInvoiceCorpId(String[] saBid, String[] saCorpId) throws BusinessException {
	if(saBid == null || saBid.length ==0){
		return null;
	}
	int[] iaRet = null;
	Connection con = null;
	PreparedStatement stmt = null;
	try {
		String sql ="update po_arriveorder_b set pk_invoicecorp = ? where corder_bid = ? ";
		con = getConnection();
		stmt = prepareStatement(con,sql);
		for(int i=0 ;i<saBid.length;i++){
			if(saBid[i] == null){
				continue;
			}
			if (saCorpId[i] == null) {
				stmt.setNull(1, Types.CHAR);
			} else {
				stmt.setString(1, saCorpId[i]);
			}
			stmt.setString(2, saBid[i]);
			//
			executeUpdate(stmt);
		}
		iaRet = executeBatch(stmt);
	} catch(Exception e){
		PubDMO.throwBusinessException(e);
	}finally {
		try {
			if (stmt != null) {
				stmt.close();
			}
		} catch (Exception e) {
		}
		try {
			if (con != null) {
				con.close();
			}
		} catch (Exception e) {
		}
	}
	return iaRet;
}
}