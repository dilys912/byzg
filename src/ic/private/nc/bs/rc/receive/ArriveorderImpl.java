/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.bs.rc.receive;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

import javax.ejb.RemoveException;
import javax.naming.NamingException;

import nc.bs.framework.common.NCLocator;
import nc.bs.logging.Log;
import nc.bs.po.OrderImpl;
import nc.bs.po.OrderPubDMO;
import nc.bs.pu.pub.BatchCodeDMO;
import nc.bs.pu.pub.BsPuTool;
import nc.bs.pu.pub.GetSysBillCode;
import nc.bs.pu.pub.PubDMO;
import nc.itf.ic.service.IICPub_InvATPDMO;
import nc.itf.pu.pub.fw.LockTool;
import nc.itf.qc.log.IPlatformlog;
import nc.itf.rc.receive.IArriveorder;
import nc.itf.sc.inter.IScToPu_InterfaceDMO;
import nc.itf.sc.inter.IScToPu_OrderDMO;
import nc.itf.scm.cenpur.service.TempTableUtil;
import nc.itf.scm.pub.bill.IScm;
import nc.itf.uap.pf.IPFConfig;
import nc.itf.uap.sf.ICreateCorpQueryService;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.ProductCode;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.query.ConditionVO;
import nc.vo.rc.receive.ArrivePubVO;
import nc.vo.rc.receive.ArriveorderHeaderVO;
import nc.vo.rc.receive.ArriveorderItemVO;
import nc.vo.rc.receive.ArriveorderVO;
import nc.vo.rc.receive.CheckRsltItemVO;
import nc.vo.rc.receive.IArriveorderStatus;
import nc.vo.sc.order.OrderHeaderVO;
import nc.vo.sc.order.OrderItemVO;
import nc.vo.sc.order.OrderVO;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.ic.ATPVO;
import nc.vo.scm.merge.DefaultVOMerger;
import nc.vo.scm.pu.BillTypeConst;
import nc.vo.scm.pu.PuPubVO;
import nc.vo.scm.pu.Timer;
import nc.vo.scm.pu.VariableConst;
import nc.vo.scm.pub.SCMEnv;

/**
 * Arriveorder的BO类
 *
 * 创建日期：(2001-6-8)
 * @author：晁志平
 */
public class ArriveorderImpl implements IArriveorder{

	private UFBoolean discountflag;
	/**
	 * ArriveorderBO 构造子注解。
	 */
	public ArriveorderImpl() {
		super();
	}
	/**
	 * EJB规范中要求的方法。
	 *
	 * 创建日期：(2001-6-8)
	 */
	public void ejbCreate() {
	}
/**
 * 通过主键获得VO对象。
 *
 * 创建日期：(2001-6-8)
 * @return nc.vo.rc.receive.ArriveorderVO
 * @param key String
 * @exception BusinessException 异常说明。
 */
public ArriveorderVO findByPrimaryKey_RC(String key)
	throws BusinessException {

	ArriveorderVO arriveorder = null;
	try {
		ArriveorderDMO dmo = new ArriveorderDMO();
		arriveorder = dmo.findByPrimaryKey(key);
		ArriveorderItemVO[] items =
			(ArriveorderItemVO[]) nc.bs.pu.pub.PubDMO.getBodysWithFree(
				arriveorder.getChildrenVO(),
				"cmangid",
				"vfree0");
		arriveorder.setChildrenVO(items);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBean::findByPrimaryKey(ArriveorderPK) Exception!",e);
	}
	return arriveorder;
}
	/**
 * 用VO对象的属性值更新数据库。
 *
 * 创建日期：(2001-6-8)
 * @param arriveorder nc.vo.rc.receive.ArriveorderVO
 * @exception BusinessException 异常说明。
 */
private void update(ArriveorderVO arriveorder) throws BusinessException {

    nc.vo.ic.pub.bill.Timer timer = new nc.vo.ic.pub.bill.Timer();
	timer.start("到货单修改update(ArriveorderVO)");
	try {
		ArriveorderDMO dmo = new ArriveorderDMO();
		dmo.update(arriveorder);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBO::update(ArriveorderVO arriveorder) Exception!",e);
	}
	timer.stopAndShow("到货单修改update(ArriveorderVO)");
}



/**
 * 到货单反检
 * 2004-02-19	WYF		修改bean.remove()的处理
 */
public void doChkCancel(ArrayList aryPara) throws BusinessException {
	boolean bCanOper = false;
//	nc.bs.pub.lock.LockBOAccess m_boLock = null ;
	try {
		if (aryPara == null || aryPara.size() != 3) {
			SCMEnv.out("反检传入的参数不正确:参数为空或个数不正确");
			return;
		}
		String coperatorid = (String) aryPara.get(2);
		if (coperatorid == null || coperatorid.trim().equals(""))
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("SCMCOMMON","UPPSCMCommon-000389")/*@res "数据非法!没有操作员。"*/);
		//加锁
//		m_boLock = new nc.bs.pub.lock.LockBOAccess();
		String[] saAllId = (String[]) aryPara.get(0);
		if (saAllId == null || saAllId.length <= 0) {
			SCMEnv.out("反检传入的参数不正确:反检到货单表行ID无数据");
			return;
		}
		//是否可操作
//		bCanOper = m_boLock.lockPKArray(saAllId, coperatorid, "");
		bCanOper = LockTool.setLockForPks(saAllId, coperatorid);
		if (bCanOper) {
			try {
				String[] saBts = (String[]) aryPara.get(1);
				nc.bs.pu.pub.PubDMO dmo = new nc.bs.pu.pub.PubDMO();
				dmo.checkTsNoChanged(ScmConst.PO_Arrive, null, null, saAllId, saBts, null, null);
				ArriveorderDMO dmo1 = new ArriveorderDMO();
				//清空相应行的累计报检数量、累计合格数量、累计不合格数量
				dmo1.doChkCancel(saAllId);
			} catch (Exception t) {
				throw t;
			} finally {
				//解锁
				if (bCanOper)
//					m_boLock.freePKArrayByUser(saAllId, coperatorid, "");
					LockTool.releaseLockForPks(saAllId, coperatorid);
			}
		} else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("SCMCOMMON","UPPSCMCommon-000316")/*@res "正在进行相关操作，请稍后再试"*/);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000008")/*@res "报检失败"*/,e);
	}
}

	/**
	 * 返回累计到货数量{订单行ID=累计到货数量}
	 * 创建日期：(2001-10-15 8:43:32)
	 * @return java.util.Hashtable
	 * @param v java.util.Vector
	 * @param arrvo nc.vo.rc.receive.ArriveorderVO
	 */
	private Hashtable getAccArrNum(ArriveorderVO arrvo) throws BusinessException {

		Hashtable h_arrNum = new Hashtable();
		String oldKey = null;
		Vector vSrc = new Vector();
		UFDouble m_arrNum = new UFDouble(0);
		UFDouble m_arrMid = new UFDouble(0);
		ArriveorderItemVO[] items = (ArriveorderItemVO[]) arrvo.getChildrenVO();
		//获取表体数据
		if (items != null) {
			for (int i = 0; i < items.length; i++) {
				vSrc.addElement(items[i]);
			}
			//只扩充一个Hashtable
			while (vSrc.size() > 0) {
				oldKey = (String) ((ArriveorderItemVO) vSrc.elementAt(0)).getCorder_bid();
				m_arrNum = new UFDouble(0);
				m_arrMid = new UFDouble(0);
				if (PuPubVO.getUFDouble_ZeroAsNull(((ArriveorderItemVO) vSrc.elementAt(0)).getNarrvnum()) != null) {
					m_arrNum = (UFDouble) ((ArriveorderItemVO) vSrc.elementAt(0)).getNarrvnum();
				}
				if (h_arrNum.containsKey(oldKey)) {
					m_arrMid = (UFDouble) h_arrNum.get(oldKey);
				}
				UFBoolean bLargess = ((ArriveorderItemVO) vSrc.elementAt(0)).getBlargess();
				if(bLargess == null){
					bLargess = UFBoolean.FALSE; 
				}
				UFBoolean bLargessUpRow = ((ArriveorderItemVO) vSrc.elementAt(0)).getBlargessuprow();
				if(bLargessUpRow == null){
					bLargessUpRow = UFBoolean.FALSE; 
				}
				//采购订单赠品行回写，其他赠品行不回写
				if(bLargessUpRow.booleanValue() || !bLargess.booleanValue())
					m_arrMid = m_arrMid.add(m_arrNum);
				h_arrNum.put(oldKey, m_arrMid);
				vSrc.removeElementAt(0);
			}
		}
		return h_arrNum;
	}



	/**
	 * 返回累计赠品数量{订单行ID=累计赠品数量}
	 * 创建日期：(2001-10-15 8:43:32)
	 * @return java.util.Hashtable
	 * @param v java.util.Vector
	 * @param givvo nc.vo.rc.receive.ArriveorderVO
	 */
	private Hashtable getAccGivNum(ArriveorderVO givvo) throws BusinessException {

		Hashtable h_givNum = new Hashtable();
		String oldKey = null;
		Vector vSrc = new Vector();
		UFDouble m_givNum = new UFDouble(0);
		UFDouble m_givMid = new UFDouble(0);
		ArriveorderItemVO[] items = (ArriveorderItemVO[]) givvo.getChildrenVO();
		//获取表体数据
		if (items != null) {
			for (int i = 0; i < items.length; i++) {
				vSrc.addElement(items[i]);
			}
			//只扩充一个Hashtable
			while (vSrc.size() > 0) {
				oldKey = (String) ((ArriveorderItemVO) vSrc.elementAt(0)).getCorder_bid();
				m_givNum = new UFDouble(0);
				m_givMid = new UFDouble(0);
				if ((UFDouble) ((ArriveorderItemVO) vSrc.elementAt(0)).getNpresentnum() != null
					&& !((ArriveorderItemVO) vSrc.elementAt(0)).getNpresentnum().toString().equals(
						"")) {
					m_givNum = (UFDouble) ((ArriveorderItemVO) vSrc.elementAt(0)).getNpresentnum();
				}
				if (h_givNum.containsKey(oldKey)) {
					m_givMid = (UFDouble) h_givNum.get(oldKey);
				}
				m_givMid = m_givMid.add(m_givNum);
				h_givNum.put(oldKey, m_givMid);
				vSrc.removeElementAt(0);
			}
		}
		return h_givNum;
	}

	/**
	 * 返回累计途耗数量{订单行ID=累计途耗}
	 * 创建日期：(2001-10-15 8:43:32)
	 * @return java.util.Hashtable
	 * @param v java.util.Vector
	 * @param arrvo nc.vo.rc.receive.ArriveorderVO
	 */
	private Hashtable getAccWasNum(ArriveorderVO arrvo) throws BusinessException {

		Hashtable h_wasNum = new Hashtable();
		String oldKey = null;
		Vector vSrc = new Vector();
		UFDouble m_wasNum = new UFDouble(0);
		UFDouble m_wasMid = new UFDouble(0);
		ArriveorderItemVO[] items = (ArriveorderItemVO[]) arrvo.getChildrenVO();
		//获取表体数据
		if (items != null) {
			for (int i = 0; i < items.length; i++) {
				vSrc.addElement(items[i]);
			}
			//只扩充一个Hashtable
			while (vSrc.size() > 0) {
				oldKey = (String) ((ArriveorderItemVO) vSrc.elementAt(0)).getCorder_bid();
				m_wasNum = new UFDouble(0);
				m_wasMid = new UFDouble(0);
				if ((UFDouble) ((ArriveorderItemVO) vSrc.elementAt(0)).getNwastnum() != null
					&& !((ArriveorderItemVO) vSrc.elementAt(0)).getNwastnum().toString().equals("")) {
					m_wasNum = (UFDouble) ((ArriveorderItemVO) vSrc.elementAt(0)).getNwastnum();
				}
				if (h_wasNum.containsKey(oldKey)) {
					m_wasMid = (UFDouble) h_wasNum.get(oldKey);
				}
				m_wasMid = m_wasMid.add(m_wasNum);
				h_wasNum.put(oldKey, m_wasMid);
				vSrc.removeElementAt(0);
			}
		}
		return h_wasNum;
	}





	/**
	 * @功能：根据公司主键取本位币精度
	 * @作者：晁志平
	 * 创建日期：(2001-9-14 10:59:44)
	 * @param:<|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.Integer
	 * @param pk_corp java.lang.String
	 */
	public Integer getCurrDecimal(String pk_corp) throws BusinessException {
		if (pk_corp == null)
			return null;
		Integer IRetDecimal = null;
		try {
			ArriveorderDMO dmo = new ArriveorderDMO();
			IRetDecimal = dmo.getCurrDecimal(pk_corp);
		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000012")/*@res "取本位币精度时出错"*/, e);
		}
		return IRetDecimal;
	}

	/**
	 * @功能：公司主键+币种 -> 币种精度
	 * @作者：晁志平
	 * 创建日期：(2001-9-14 10:59:44)
	 * @param:<|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.Integer
	 * @param pk_corp java.lang.String
	 */
	public Integer getCurrDecimal(String pk_corp, String currTypeId)
		throws BusinessException {
		if (pk_corp == null || pk_corp.trim().equals(""))
			return null;
		if (currTypeId == null || currTypeId.trim().equals(""))
			return null;
		Integer IRetDecimal = null;
		try {
			ArriveorderDMO dmo = new ArriveorderDMO();
			IRetDecimal = dmo.getCurrDecimal(pk_corp, currTypeId);
		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000013")/*@res "取币种精度时出错"*/, e);
		}
		return IRetDecimal;
	}

	/**
	 * @功能：公司主键+币种 -> 币种精度 -- 批量
	 * @作者：晁志平
	 * 创建日期：(2001-9-14 10:59:44)
	 * @param:<|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.Integer
	 * @param pk_corp java.lang.String
	 */
	public int[] getCurrDecimals(String pk_corp, String[] currTypeIds)
		throws BusinessException {
		if (pk_corp == null || pk_corp.trim().equals(""))
			return null;
		if (currTypeIds == null || currTypeIds.length <= 0)
			return null;
		int[] iRetDecimals = null;
		try {
			ArriveorderDMO dmo = new ArriveorderDMO();
			iRetDecimals = dmo.getCurrDecimals(pk_corp, currTypeIds);
		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000013")/*@res "取币种精度时出错"*/, e);
		}
		return iRetDecimals;
	}

/**
 * 获取存货数相关属性：是否劳务、是否折扣
 * 创建日期：(2001-10-18 13:25:51)
 * @return ary              ArrayList [ary0=UFBoolean[2],ary1=UFBoolean[2],...]
 * @param arrPk_InvBasDocs  String[]
 */
private ArrayList getFlagsByInvBasIDsPo(String[] arrPk_InvBasDocs) throws BusinessException {
	ArrayList ary = new ArrayList();
	try {
		ArriveorderDMO dmo = new ArriveorderDMO();
		ary = dmo.getFlagsByInvBasIDsPo(arrPk_InvBasDocs);
	} catch (Exception e) {		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return ary;
}





	/**
	 * 取得存货的控制信息哈希表(到货维护)
	   {cbaseid = [是否辅计量管理],...}
	 * 创建日期：(2001-11-17 8:56:11)
	 * @return java.util.Hashtable
	 * @param v_cbaseid java.util.Vector
	 */
	public ArrayList getInvFlagsAry(String[] pk_invbasdocs)
		throws BusinessException {
		ArrayList ary = null;
		if (pk_invbasdocs == null)
			return null;
		if (pk_invbasdocs.length <= 0)
			return null;
		try {
			ArriveorderDMO dmo = new ArriveorderDMO();
			ary = dmo.getInvFlagsAry(pk_invbasdocs);
		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
		return ary;
	}
	/**
	 * @功能：根据人员主键获取该人员所在部门主键
	 * @作者：晁志平
	 * 创建日期：(2001-9-14 10:59:44)
	 * @param:<|>
	 * @return:
	 * @exception:
	 * @see;
	 * @since:
	 *
	 * @return java.lang.String
	 * @param psnid java.lang.String
	 */
	public String getPkDeptByPkPsn(String pk_psndoc) throws BusinessException {
		String pk_deptdoc = null;
		try {
			ArriveorderDMO dmo = new ArriveorderDMO();
			pk_deptdoc = dmo.getPkDeptByPkPsn(pk_psndoc);
		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
		return pk_deptdoc;
	}

	/**
	 * @功能：根据操作员主键获取该操作员所对应的人员档案主键
	 * @作者：晁志平
	 * 创建日期：(2001-10-08 10:59:44)
	 * @return java.lang.String
	 * @param psnid java.lang.String
	 */
	public String getPkPsnByPkOper(String userid) throws BusinessException {
		String pk_psndoc = null;
		try {
			ArriveorderDMO dmo = new ArriveorderDMO();
			pk_psndoc = dmo.getPkPsnByPkOper(pk_psndoc);
		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
		return pk_psndoc;
	}





	/**
	 * 获取到货检验查询条件:质量管理未启用
	 */
	private String getSQLForCheckMy(
		ConditionVO[] conds,
		String pk_corp,
		boolean isQCEnable,
		String strQCStartDate)
		throws BusinessException {
		String strSQL = " ";
		StringBuffer from = new StringBuffer(" from ");
		from.append("po_arriveorder_b ");
		StringBuffer where = new StringBuffer(" where ( 1 > 0 ");
		Vector vTableName = new Vector();
		from.append(
			"LEFT OUTER JOIN po_arriveorder ON po_arriveorder_b.carriveorderid = po_arriveorder.carriveorderid ");
		vTableName.addElement("po_arriveorder");
		from.append(
			"LEFT OUTER JOIN bd_cubasdoc ON po_arriveorder.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
		vTableName.addElement("bd_cubasdoc");
		if (conds != null) {
			ArrayList ary = null;
			for (int i = 0; i < conds.length; i++) {
				ary = new ArrayList();
				ary = getSQLForFromOfArriveorder(conds[i], from.toString(), vTableName);
				//先处理关联
				from.append((String) ary.get(0));
				vTableName = (Vector) ary.get(1);

				//再处理具体条件
				where.append(getSQLForWhereOfArriveorder(conds[i], where.toString(),pk_corp));
			}
		}
		where.append(" )");
		//公司约束
		if (pk_corp != null && pk_corp.trim().length() > 0) {
			where.append(" and po_arriveorder.pk_corp = '");
			where.append(pk_corp + "' ");
		}
		//状态约束
		where.append("and po_arriveorder.dr = 0 ");
		where.append("and po_arriveorder_b.dr = 0 ");
		/**存货免检在到货单上数量体现*/
		where.append( "and ( not ( isnull ( po_arriveorder_b.naccumchecknum , 0 ) = 0 and isnull ( po_arriveorder_b.nelignum , 0 ) > 0 ) ) ");
		//非“退货”
		where.append("and isnull ( narrvnum , 0 ) > 0 ");
		//非“完全入库”
		where.append( "and not (isnull ( narrvnum , 0 ) = isnull (naccumwarehousenum,0)) ");
		//非“报检完成部分入库”
		where.append( "and not (isnull ( narrvnum , 0 ) = isnull (naccumchecknum,0) and isnull (naccumwarehousenum,0) > 0 ) ");
		strSQL += from;
		strSQL += where;
		return strSQL;
	}

	/**
	 * 获取到货检验查询条件：质量管理启用
	 */
	private String getSQLForCheckMy(
		ConditionVO[] conds,
		String pk_corp,
		boolean isAgainCheck,
		String strQCStartDate,
		int checkstate)
		throws BusinessException {
		String strSQL = " ";
		StringBuffer from = new StringBuffer(" from ");
		from.append("po_arriveorder_b ");
		StringBuffer where = new StringBuffer(" where ( 1 > 0 ");
		Vector vTableName = new Vector();
		from.append(
			"LEFT OUTER JOIN po_arriveorder ON po_arriveorder_b.carriveorderid = po_arriveorder.carriveorderid ");
		vTableName.addElement("po_arriveorder");
		from.append(
			"LEFT OUTER JOIN bd_cubasdoc ON po_arriveorder.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
		vTableName.addElement("bd_cubasdoc");
		if (conds != null) {
			ArrayList ary = null;
			for (int i = 0; i < conds.length; i++) {
				ary = new ArrayList();
				ary = getSQLForFromOfArriveorder(conds[i], from.toString(), vTableName);
				//先处理关联
				from.append((String) ary.get(0));
				vTableName = (Vector) ary.get(1);

				//再处理具体条件
				where.append(getSQLForWhereOfArriveorder(conds[i], where.toString(),pk_corp));
			}
		}
		where.append(" )");
		//公司约束
		if (pk_corp != null && pk_corp.trim().length() > 0) {
			where.append(" and po_arriveorder.pk_corp = '");
			where.append(pk_corp + "' ");
		}
		//状态约束
		where.append("and po_arriveorder.dr = 0 ");
		where.append("and po_arriveorder_b.dr = 0 ");
		/**存货免检在到货单上数量体现*/
		where.append(
			"and ( not ( isnull ( po_arriveorder_b.naccumchecknum , 0 ) = 0 and isnull ( po_arriveorder_b.nelignum , 0 ) > 0 ) ) ");
		//
		where.append("and isnull ( narrvnum , 0 ) > 0 ");
		//检验完成(复检的要求)
		if (isAgainCheck) {
			where.append(
				"and  not (isnull(po_arriveorder_b.nelignum,0)=0 and isnull(po_arriveorder_b.nnotelignum,0) = 0) ");
			where.append("and isnull ( po_arriveorder_b.naccumchecknum , 0 ) > 0 ");
			if (strQCStartDate != null && !strQCStartDate.trim().equals(""))
				where.append("and po_arriveorder.dreceivedate >= '" + strQCStartDate + "' ");
		}
		//未报检
		else if (checkstate == 0) {
			where.append(
				"and isnull ( po_arriveorder_b.naccumchecknum , 0 ) < isnull ( narrvnum , 0 ) ");
		}
		//已报检未返回结果
		else if (checkstate == 1) {
			where.append(
				"and isnull(po_arriveorder_b.nelignum,0)=0 and isnull(po_arriveorder_b.nnotelignum,0) = 0 ");
			where.append("and isnull ( po_arriveorder_b.naccumchecknum , 0 ) > 0 ");
			if (strQCStartDate != null && !strQCStartDate.trim().equals(""))
				where.append("and po_arriveorder.dreceivedate >= '" + strQCStartDate + "' ");

		}
		strSQL += from;
		strSQL += where;
		return strSQL;
	}

/**
 * 获取指定条件到货单VO的关联关系(SQL语句中的 "from ...")
 * 注意：此方法的前提条件是表头表体关联都存在!!
 * 创建日期：(2001-10-23 9:21:33)
 * @return java.lang.String
 * @param cond nc.vo.pub.query.ConditionVO
 * @param from java.lang.String
 * @param vTableName Vector
 */
private ArrayList getSQLForFromOfArriveorder(
	ConditionVO cond,
	String from,
	Vector vTableName)
	throws BusinessException {
	ArrayList ary = new ArrayList();
	StringBuffer fromNew = new StringBuffer(" ");
	try {
		///////////////////////////////  处理关联开始  ////////////////////////////////////////////////////////////
		//供应商编码或名称
		if (cond.getFieldCode().equals("bd_cubasdoc.custcode")
			|| cond.getFieldCode().equals("bd_cubasdoc.custname")) {
			if (!vTableName.contains("bd_cubasdoc")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_cubasdoc ON po_arriveorder.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
				vTableName.addElement("bd_cubasdoc");
			}
		}
		//供应商地区分类编码
		if (cond.getFieldCode().equals("bd_areacl.areaclcode")) {
			if (!vTableName.contains("bd_cubasdoc")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_cubasdoc ON po_arriveorder.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
				vTableName.addElement("bd_cubasdoc");
			}
			if (!vTableName.contains("bd_areacl")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_areacl ON bd_areacl.pk_areacl = bd_cubasdoc.pk_areacl ");
				vTableName.addElement("bd_areacl");
			}
		}
		//存货编码或存货名称
		else if (
			cond.getFieldCode().equals("bd_invbasdoc.invcode")
				|| cond.getFieldCode().equals("bd_invbasdoc.invname")) {
			if (!vTableName.contains("bd_invbasdoc")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_invbasdoc ON po_arriveorder_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
				vTableName.addElement("bd_invbasdoc");
			}
		}
		//业务类型编码或名称
		else if (
			cond.getFieldCode().equals("bd_busitype.businame")
				|| cond.getFieldCode().equals("bd_busitype.busicode")) {
			if (!vTableName.contains("bd_busitype")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_busitype ON po_arriveorder.cbiztype = bd_busitype.pk_busitype ");
				vTableName.addElement("bd_busitype");
			}
		}
		//业务员编码或名称
		else if (
			cond.getFieldCode().equals("bd_psndoc.psnname")
				|| cond.getFieldCode().equals("bd_psndoc.psncode")) {
			if (!vTableName.contains("bd_psndoc")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_psndoc ON po_arriveorder.cemployeeid = bd_psndoc.pk_psndoc ");
				vTableName.addElement("bd_psndoc");
			}
		}
		//收货仓库编码或名称
		else if (
			cond.getFieldCode().equals("bd_stordoc.storname")
				|| cond.getFieldCode().equals("bd_stordoc.storcode")) {
			if (!vTableName.contains("bd_stordoc")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_stordoc ON po_arriveorder_b.cwarehouseid = bd_stordoc.pk_stordoc ");
				vTableName.addElement("bd_stordoc");
			}
		}
		//部门编码或名称
		else if (
			cond.getFieldCode().equals("bd_deptdoc.deptname")
				|| cond.getFieldCode().equals("bd_deptdoc.deptcode")) {
			if (!vTableName.contains("bd_deptdoc")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_deptdoc ON po_arriveorder.cdeptid = bd_deptdoc.pk_deptdoc ");
				vTableName.addElement("bd_deptdoc");
			}
		}
		//发运方式编码或名称
		else if (
			cond.getFieldCode().equals("bd_sendtype.sendname")
				|| cond.getFieldCode().equals("bd_sendtype.sendcode")) {
			if (!vTableName.contains("bd_sendtype")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_sendtype ON po_arriveorder.ctransmodeid = bd_sendtype.pk_sendtype ");
				vTableName.addElement("bd_sendtype");
			}
		}
		//库存组织编码或名称
		else if (
			cond.getFieldCode().equals("bd_calbody.bodyname")
				|| cond.getFieldCode().equals("bd_calbody.bodycode")) {
			if (!vTableName.contains("bd_calbody")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_calbody ON po_arriveorder.cstoreorganization = bd_calbody.pk_calbody ");
				vTableName.addElement("bd_calbody");
			}
		}
		//制单人编码或名称
		else if (
			cond.getFieldCode().equals("sm_user.user_name")
				|| cond.getFieldCode().equals("sm_user.user_code")) {
			if (!vTableName.contains("sm_user")) {
				fromNew.append(
					"LEFT OUTER JOIN sm_user ON po_arriveorder.coperator = sm_user.cuserid ");
				vTableName.addElement("sm_user");
			}
		}
		//审批人编码或名称
		else if (
			cond.getFieldCode().equals("sm_user1.user_name")
				|| cond.getFieldCode().equals("sm_user1.user_code")) {
			if (!vTableName.contains("sm_user1")) {
				fromNew.append(
					"LEFT OUTER JOIN sm_user as sm_user1 ON po_arriveorder.cauditpsn = sm_user1.cuserid ");
				vTableName.addElement("sm_user1");
			}
		}
		//存货分类编码
		else if (cond.getFieldCode().equals("bd_invcl.invclasscode")) {
			if (!vTableName.contains("bd_invbasdoc")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_invbasdoc ON po_arriveorder_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
				vTableName.addElement("bd_invbasdoc");
			}
			if (!vTableName.contains("bd_invcl")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_invcl ON bd_invbasdoc.pk_invcl = bd_invcl.pk_invcl ");
				vTableName.addElement("bd_invcl");
			}
		}
		//采购订单为来源单据日期或来源单据号
		else if (
			cond.getFieldCode().equals("po_order.vordercode")
				|| cond.getFieldCode().equals("po_order.dorderdate")) {
			if (!vTableName.contains("po_order")) {
				fromNew.append(
					"LEFT OUTER JOIN po_order ON po_arriveorder_b.cupsourcebillid = po_order.corderid ");
				vTableName.addElement("po_order");
			}
		}
		//委外订单为来源单据日期或来源单据号
		else if (
			cond.getFieldCode().equals("sc_order.vordercode")
				|| cond.getFieldCode().equals("sc_order.dorderdate")) {
			if (!vTableName.contains("sc_order")) {
				fromNew.append(
					"LEFT OUTER JOIN sc_order ON po_arriveorder_b.cupsourcebillid = sc_order.corderid ");
				vTableName.addElement("sc_order");
			}
		}
		//项目编码或名称
		else if (
			cond.getFieldCode().equals("bd_jobbasfil.jobname")
				|| cond.getFieldCode().equals("bd_jobbasfil.jobcode")) {
			if (!vTableName.contains("bd_jobmngfil")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_jobmngfil ON po_arriveorder_b.cprojectid = bd_jobmngfil.pk_jobmngfil ");
				vTableName.addElement("bd_jobmngfil");
			}
			if (!vTableName.contains("bd_jobbasfil")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_jobbasfil ON bd_jobmngfil.pk_jobbasfil = bd_jobbasfil.pk_jobbasfil ");
				vTableName.addElement("bd_jobbasfil");
			}
		}
		//项目阶段编码或名称
		else if (
			cond.getFieldCode().equals("bd_jobphase.jobphasename")
				|| cond.getFieldCode().equals("bd_jobphase.jobphasecode")) {
			if (!vTableName.contains("bd_jobobjpha")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_jobobjpha ON po_arriveorder_b.cprojectphaseid = bd_jobobjpha.pk_jobobjpha ");
				vTableName.addElement("bd_jobobjpha");
			}
			if (!vTableName.contains("bd_jobphase")) {
				fromNew.append(
					"LEFT OUTER JOIN bd_jobphase ON bd_jobphase.pk_jobphase = bd_jobobjpha.pk_jobphase ");
				vTableName.addElement("bd_jobphase");
			}
		}
		///////////////////////////////  处理关联结束  ////////////////////////////////////////////////////////////
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000018")/*@res "获取指定条件到货单VO的关联关系时出错(ArriveorderBO.getSQLForFromOfArriveoder()"*/,e);
	}
	ary.add(fromNew.toString());
	ary.add(vTableName);

	return ary;
}









	/**
	 * @功能：获取是否根据检验结果入库
	 * 返回的 ArrayList 与到货单行ID对应
	 */
	public ArrayList getStoreByChkArray(String[] saRowId) throws BusinessException {
		ArriveorderDMO dmo = null;
		ArrayList aryRslt = null;
		try {
			dmo = new ArriveorderDMO();
			Hashtable h = dmo.getStoreByChkHash(saRowId);
			if (h != null && h.size() > 0) {
				aryRslt = new ArrayList();
				for (int i = 0; i < saRowId.length; i++) {
					aryRslt.add(h.get(saRowId[i]));
				}
			}
		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000019")/*@res "获取是否根据检验结果入库时服务器捕获的异常信息："*/,e);
		}
		return aryRslt;
	}

	/**
	 * 功能：取系统启用日期
	 * 返回：
	 * 例外：
	 * 日期：(2002-5-17 15:19:15)
	 * 修改日期，修改人，修改原因，注释标志：
	 *
	 * @return java.lang.String
	 * @param strProductCode java.lang.String
	 */
	private String getSysStartDate(String strCorpId, String strProductCode)
		throws Exception {
		String strRet = null;
		String[] s = null;
		ICreateCorpQueryService myService = null;
		try {
			myService = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());

			s = myService.queryEnabledPeriod(strCorpId, strProductCode);

			if (s == null || s.length <= 0)
				//throw new Exception("获取系统启用日期时出错");
				return null;

			if (s[3] == null || s[3].trim().equals(""))
				//throw new Exception("获取系统启用日期时出错");
				return null;

			strRet = s[3].trim();

		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
		return strRet;
	}

	/**
	 * @功能：获取存货管理档案保质期天数
	 * @作者：晁志平
	 * 创建日期：(2001-10-08 10:59:44)
	 * @return ArrayList
	 * @param psnid java.lang.String[]
	 */
	public ArrayList getValiddays(String[] pk_invmandocs) throws BusinessException {
		ArrayList ary = null;
		try {
			ArriveorderDMO dmo = new ArriveorderDMO();
			ary = dmo.getValiddays(pk_invmandocs);
		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException(e);
		}
		return ary;
	}





	/**
 * 保存前对到货单的处理：免检属性
 * 1.辅数量 = 主数量 / 换算率
 * 2.累计报检数量(前提：报检的到货单行不能维护)
 * 是否免检算法：供应商存货关系定义了免检或存货生产档案中定义了免检 都为免检
 *   如果免检则
  		累计报检 = 到货数量
  		    合格 = 到货数量
  		  不合格 = 零
  	 如果非免检则
  	    累计报检 = 合格 + 不合格
 * 3.累计合格数量、累计不合格数量
   4.取是否启用供应商模块出错或取供应商存货关系是否免检时出错抛出异常
 * 创建日期：(2001-10-17 19:44:46)
 * @return nc.vo.rc.receive.ArriveorderVO
 * @param beforVO nc.vo.rc.receive.ArriveorderVO
 * czp(yaoht/xy),2003-10-16,负到货单不入库调整：合格数量=NULL、不合格数量=NULL
 */
private ArriveorderVO getVOForFreeChk(ArriveorderVO beforeVO) throws BusinessException {
	ArriveorderVO afterVO = beforeVO;
	ArriveorderItemVO[] items = (ArriveorderItemVO[]) afterVO.getChildrenVO();
	UFDouble convertrate = null;
	UFDouble narrvnum = null;
	UFDouble nwastnum = null;
	//UFDouble nwastassistnum = null;
	UFDouble npresentnum = null;
	//UFDouble npresentassistnum = null;
	//UFDouble nassistnum = null;
	String cvendormangid = ((ArriveorderHeaderVO) afterVO.getParentVO()).getCvendormangid();
	String pk_corp = ((ArriveorderHeaderVO) afterVO.getParentVO()).getPk_corp();
	String pk_calbody = ((ArriveorderHeaderVO) afterVO.getParentVO()).getCstoreorganization();
	//String cmangid = null;
	UFBoolean ischeck = null;
	UFDouble nelignum = null;
	UFDouble nnotelignum = null;
	UFDouble naccumchecknum = null;
	UFDouble ling = new UFDouble(0);
	ArriveorderDMO dmo1 = null;
	try {
		dmo1 = new ArriveorderDMO();
		//
		String[] cmangids = new String[items.length];
		for (int j = 0; j < items.length; j++) {
			cmangids[j]= items[j].getCmangid();
		}
		//
		UFBoolean[] isChecks = dmo1.getIsChecksMy(cvendormangid, cmangids, pk_corp, pk_calbody);
		//
		for (int i = 0; i < items.length; i++) {
			if (items[i].getNarrvnum() == null)
				continue;
			//辅数量
			convertrate = new UFDouble(0);
			if (items[i].getConvertrate() != null && items[i].getConvertrate().toString().trim().length() > 0 && items[i].getConvertrate().compareTo(new UFDouble(0)) != 0) {
				convertrate = items[i].getConvertrate();
			}
			narrvnum = new UFDouble(0);
			//nassistnum = new UFDouble(0);
			nwastnum = new UFDouble(0);
			//nwastassistnum = new UFDouble(0);
			npresentnum = new UFDouble(0);
			//npresentassistnum = new UFDouble(0);

			if (!(items[i].getNarrvnum() == null || items[i].getNarrvnum().toString().trim().equals(""))) {
				narrvnum = items[i].getNarrvnum();
			}
//			if (!(items[i].getNassistnum() == null || items[i].getNassistnum().toString().trim().equals(""))) {
//				nassistnum = items[i].getNassistnum();
//			}
			if (!(items[i].getNwastnum() == null || items[i].getNwastnum().toString().trim().equals(""))) {
				nwastnum = items[i].getNwastnum();
			}
//			if (!(items[i].getNwastassistnum() == null || items[i].getNwastassistnum().toString().trim().equals(""))) {
//				nwastassistnum = items[i].getNwastassistnum();
//			}
			if (!(items[i].getNpresentnum() == null || items[i].getNpresentnum().toString().trim().equals(""))) {
				npresentnum = items[i].getNpresentnum();
			}
//			if (!(items[i].getNpresentassistnum() == null || items[i].getNpresentassistnum().toString().trim().equals(""))) {
//				npresentassistnum = items[i].getNpresentassistnum();
//			}
			items[i].setNarrvnum(narrvnum);
			//items[i].setNassistnum(convertrate.equals(ling) ? null : narrvnum.div(convertrate));
			items[i].setNwastnum(nwastnum);
			items[i].setNwastassistnum(convertrate.equals(ling) ? null : nwastnum.div(convertrate));
			items[i].setNpresentnum(npresentnum);
			items[i].setNpresentassistnum(convertrate.equals(ling) ? null : npresentnum.div(convertrate));

			/*累计报检、合格、不合格的关系*/

			//负行不作免检处理(退货和到货调整时，也要将免捡存货表体行的合格数量置为负到货数量)
			//if (items[i].getNarrvnum().doubleValue() <= 0)
				//continue;
			//免检属性
			//cmangid = items[i].getCmangid();
			items[i].setIscheck(isChecks[i]);
			naccumchecknum = new UFDouble(0);
			nelignum = new UFDouble(0);
			nnotelignum = new UFDouble(0);
			if (!(items[i].getNaccumchecknum() == null || items[i].getNaccumchecknum().toString().trim().equals(""))) {
				naccumchecknum = items[i].getNaccumchecknum();
			}
			if (!(items[i].getNelignum() == null || items[i].getNelignum().toString().trim().equals(""))) {
				nelignum = items[i].getNelignum();
			}
			if (!(items[i].getNnotelignum() == null || items[i].getNnotelignum().toString().trim().equals(""))) {
				nnotelignum = items[i].getNnotelignum();
			}
			//如果免检
			ischeck = items[i].getIscheck();
			if (ischeck != null && ischeck.booleanValue()) {
			   /*如果是免检，则不写累计报检数量，
				*naccumchecknum = narrvnum;
				*这样做可以解决免检生不可维护的问题 Czp 0628
				*/
				nelignum = narrvnum;
				nnotelignum = new UFDouble(0);
			} else {
				naccumchecknum = nelignum.add(nnotelignum);
			}
			items[i].setNaccumchecknum(naccumchecknum);
			items[i].setNelignum(nelignum);
			items[i].setNnotelignum(nnotelignum);
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000020")/*@res "保存前处理VO时出错(获取供应商存货关系)，请稍后再试"*/,e);
	}
	return afterVO;
}

/**
	 * 到货单整单处理赠品标志:逐行处理，如果该行是赠品则打上赠品标志
	 * @return nc.vo.rc.receive.ArriveorderVO
	 * @param beforVO ArriveorderVO
	 */
	private ArriveorderVO getVOWithIsPresent(ArriveorderVO vo)
		throws BusinessException {
		if (vo == null || vo.getChildrenVO() == null || vo.getChildrenVO().length <= 0)
			return vo;
		ArriveorderItemVO[] items = (ArriveorderItemVO[]) vo.getChildrenVO();
		UFDouble ufdGiv = null;
		for (int i = 0; i < items.length; i++) {
			ufdGiv = items[i].getNpresentnum();
			//是赠品
			if (!(ufdGiv == null
				|| ufdGiv.toString().trim().equals("")
				|| ufdGiv.compareTo(new UFDouble(0)) == 0)) {
				items[i].setIispresent(new UFBoolean(true));
			} else {
				//不是赠品
				items[i].setIispresent(new UFBoolean(false));
			}
		}
		return vo;
	}

/**
 * @功能：根据某一条件VO返回指定全名字段的条件串
 * @作者：晁志平
 * 创建日期：(2001-9-6 20:33:04)
 * @return java.lang.String
 * @param field java.lang.String : 字段的全名 即 "表名.字段名"
 * @param vo nc.vo.pub.query.ConditionVO
 */
private String getWhereByFieldCondVOMy(
	String field,
	ConditionVO vo,
	boolean isNum)
	throws BusinessException {
	StringBuffer where = new StringBuffer(" ");
	where.append((vo.getLogic()) ? "and " : "or ");
	where.append((vo.getNoLeft()) ? "" : "( ");
	where.append(field + " ");
	if (vo.getOperaCode().trim().equalsIgnoreCase("like")) {
		where.append(" ");
		if (isNum) {
			//数值型把"like"解释成"<="
			where.append("<= ");
			where.append(vo.getValue());
		} else {
			where.append("like ");
			where.append("'%");
			where.append(vo.getValue());
			where.append("%' ");
		}
	} else if (vo.getOperaCode().trim().equalsIgnoreCase("in")) {
		where.append(vo.getOperaCode());
		where.append(vo.getValue());
	} else {
		where.append(vo.getOperaCode());
		if (!isNum) {
			where.append("'");
		}
		where.append(vo.getValue());
		if (!isNum) {
			where.append("'");
		}
	}
	where.append((vo.getNoRight()) ? " " : " ) ");

	return where.toString();
}










	/**
	 * 此处插入方法说明。
	 * 功能：
	 * 参数：
	 * 返回：
	 * 例外：
	 * 日期：(2002-10-11 9:28:16)
	 * 修改日期，修改人，修改原因，注释标志：
	 * @return nc.vo.rc.receive.CheckRsltItemVO[]
	 * @param id java.lang.String
	 */
	public CheckRsltItemVO[] queryAllChkInfo(String sCarriveorder_bid) throws BusinessException {
		CheckRsltItemVO[] items = null;
		try {
			ArriveorderDMO dmo = new ArriveorderDMO();
			items = dmo.queryAllChkInfo(sCarriveorder_bid);
		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000021")/*@res "查询质检结果出错！"*/,e);
		}
		return items;
	}



	/**
	 * 查询所有表体并组装成一个到货单VO

	 *  ////////////////////////////////////////////

	 *	//业务约束

	 *	//到货数量 > 零
	 *	//where += "and narrvnum > 0 ";
	 *	//到货数量 > 累计报检数量
	 *	//where += "and narrvnum > naccumchecknum ";
	 *  ////////////////////////////////////////////

	 * 创建日期：(2001-6-8)
	 * @return nc.vo.rc.receive.ArriveorderVO
	 * @param conds   ConditionVO[]
	 * @param pk_corp String
	 * @exception BusinessException 异常说明。
	 */
	public ArriveorderVO queryForCheckMy(
		ConditionVO[] conds,
		String pk_corp,
		UFBoolean isAgainCheck,
		int checkstatus)
		throws BusinessException {

	    Timer timer = new Timer();
		timer.start("查询到货单(报检操作)");

		ArriveorderVO arriveorder = null;
		ArriveorderHeaderVO header = null;
		ArriveorderItemVO[] items = null;
		ArriveorderItemVO currItem = null;
		int currItemIndex = 0;
		String strQCStartDate = null;
		try {

			if (isAgainCheck.booleanValue()) {
				strQCStartDate = getSysStartDate(pk_corp, "QC");
			}
			String strSQL = null;
			if (checkstatus < 0) {
				strSQL =
					getSQLForCheckMy(conds, pk_corp, isAgainCheck.booleanValue(), strQCStartDate);
			} else {
				strSQL =
					getSQLForCheckMy(
						conds,
						pk_corp,
						isAgainCheck.booleanValue(),
						strQCStartDate,
						checkstatus);
			}
			
			ArriveorderDMO dmo = new ArriveorderDMO();
			items = (ArriveorderItemVO[]) dmo.findItemsForCheck(strSQL);
			//
			Vector vSrc = new Vector();
			if (items != null && items.length > 0) {

				UFDouble narrvnum = new UFDouble(0);
				UFDouble naccumchecknum = new UFDouble(0);

				for (int i = 0; i < items.length; i++) {
					if (items[i].getArrcode() != null) {
						items[i].setArrcode(items[i].getArrcode().trim());
					}
					vSrc.addElement(items[i]);
				}
				//处理前的数量为：
				if (items != null)
					SCMEnv.out("Before Count：" + items.length);
				//业务过滤
				UFDouble ling = new UFDouble(0);
				for (int i = 0; i < items.length; i++) {
					currItem = items[i];

					//"质检未启用"时或"质检启用但要查询未质检过的到货单"时的处理
					if (!isAgainCheck.booleanValue() && checkstatus == 0) {
						//过滤掉已经检验完成(包括免检)的到货单
						currItemIndex = vSrc.indexOf(currItem);
						if (currItem.getNarrvnum() != null
							&& !currItem.getNarrvnum().toString().trim().equals("")) {
							narrvnum = currItem.getNarrvnum();
						}
						if (narrvnum.compareTo(ling) < 0) {
							vSrc.removeElementAt(currItemIndex);
							continue;
						}
						if (currItem.getNaccumchecknum() != null
							&& !currItem.getNaccumchecknum().toString().trim().equals("")) {
							naccumchecknum = currItem.getNaccumchecknum();
						}
						if (narrvnum.compareTo(naccumchecknum) <= 0) {
							vSrc.removeElementAt(currItemIndex);
							continue;
						}
					}
					//给items的各项用于显示的字段赋值

					//累计报检数量
					currItem.setAudittednum(currItem.getNaccumchecknum());

					//到货数量
					currItem.setArrvnum(currItem.getNarrvnum());

					//本次报检 = 到货数量-累计报检数量
					currItem.setWillauditnum(narrvnum.sub(naccumchecknum));

					//本次合格(默认) = 本次报检
					currItem.setElignum(currItem.getWillauditnum());
					//不合格 = 零
					currItem.setNotelignum(ling);

				}
				if (items != null)
					SCMEnv.out("After Count ：" + items.length);
				if (vSrc.size() > 0) {
					arriveorder = new ArriveorderVO();
					header = new ArriveorderHeaderVO();
					items = new ArriveorderItemVO[vSrc.size()];
					vSrc.copyInto(items);
					arriveorder.setParentVO(header);
					arriveorder.setChildrenVO(items);
				}
			}
		} catch (Exception e) {
			
			nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBean::queryForCheckMy(ConditionVO[] conds, String pk_corp) Exception!",e);
		}
		timer.stopAndShow("查询到货单(报检操作)");

		return arriveorder;
	}



/**
 * 到货统计查询
 */
public ArriveorderItemVO[] queryForStatMy(ConditionVO[] conds, String pk_corp) throws BusinessException {

    nc.vo.ic.pub.bill.Timer timer = new nc.vo.ic.pub.bill.Timer();
	timer.start("到货统计查询");

	ArriveorderItemVO[] items = null;
	HashMap hOrderbb1id = null;
	try {
		ICreateCorpQueryService myService = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
		boolean bScEnabled = myService.isEnabled(pk_corp, "SC");
		
		String strSQL = getSQLForQueryMy(conds, pk_corp, bScEnabled);
		
		ArriveorderDMO dmo = new ArriveorderDMO();
		items = (ArriveorderItemVO[]) dmo.findItemsForStat(strSQL , bScEnabled);
		if (items == null || items.length == 0){
			return null;
		}else {
			hOrderbb1id = dmo.queryOrdbb1();
			for(int i = 0;i < items.length;i++){
				String sOrderbb1id = items[i].getCorder_bb1id();
				if(sOrderbb1id != null && sOrderbb1id.trim().length() > 0){
					UFDate planDate = new UFDate((String)hOrderbb1id.get(sOrderbb1id));
					items[i].setPlandate(planDate);
				}
				//赠品数量处理
				if(items[i].getBlargess() != null && items[i].getBlargess().booleanValue()){
					items[i].setNpresentnum(items[i].getNarrvnum());
				}
			}
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBean::queryForStatMy(ConditionVO[] conds, String pk_corp) Exception!",e);
	}
	timer.stopAndShow("到货统计查询");

	return items;
}



/**
 * 查询委外订单
 * 创建日期：(2001-11-17)
 * @return nc.vo.sc.order.OrderVO[]
 * @param strSQL 查询条件
 * @exception BusinessException 异常说明。
 */
public nc.vo.sc.order.OrderVO[] queryOrderVOsScMy(String strSQL) throws BusinessException {

    nc.vo.ic.pub.bill.Timer timer = new nc.vo.ic.pub.bill.Timer();
	timer.start("查询委外订单");

	nc.vo.sc.order.OrderVO[] orders = null;
	nc.vo.sc.order.OrderVO order = null;
	nc.vo.sc.order.OrderHeaderVO[] headers = null;
	nc.vo.sc.order.OrderItemVO[] items = null;
	Vector v = new Vector();
	try {
		//nc.bs.sc.order.OrderDMO dmo = new nc.bs.sc.order.OrderDMO();
		//headers = (nc.vo.sc.order.OrderHeaderVO[]) dmo.queryAllHeadData(strSQL);
//		Object oInstance = new InterServBO().getInterInstance(ProductCode.PROD_SC,InterRegister.SC0061) ;
		IScToPu_OrderDMO oInstance = (IScToPu_OrderDMO) NCLocator.getInstance().lookup(IScToPu_OrderDMO.class.getName());
		headers = (nc.vo.sc.order.OrderHeaderVO[])oInstance.queryAllHeadData(strSQL);
		if (headers != null && headers.length > 0) {
			String corderid = null;
			for (int i = 0; i < headers.length; i++) {
				order = new nc.vo.sc.order.OrderVO();
				corderid = headers[i].getCorderid();
        
        //与SC的约定，用查询条件过滤表体,since v501
        String strSqlAll = corderid;
        if(strSQL != null && strSQL.trim().length() > 0){
            strSqlAll += strSQL;
        }
        
        items = (nc.vo.sc.order.OrderItemVO[]) ((IScToPu_OrderDMO)oInstance).queryAllBodyData(strSqlAll);

				order.setParentVO(headers[i]);
				order.setChildrenVO(items);
				v.addElement(order);
			}
		}

		if (v.size() > 0) {
			orders = new nc.vo.sc.order.OrderVO[v.size()];
			v.copyInto(orders);
			//根据库存组织+存货基础ID从物料生产档案获取仓库（如果订单体仓库为空）
			orders = (OrderVO[])((IScToPu_OrderDMO)oInstance).getWarehouseFromProduce(orders);
			//委外订单->可到货处理
			orders = getValidOrdersSc(orders);
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBean::queryOrderVOsScMy(String) Exception!",e);
	}
	timer.stopAndShow("查询委外订单");

	return orders;
}

/**
 * 到货维护(作废)时回写订单的累计到货数量(PO)
 * 创建日期：(2001-10-12 9:21:17)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 * 2004-02-19	WYF		修改bean.remove()的处理
 */
private void rewriteAccArrNumToOrdDeletePoMy(ArriveorderVO vo) throws BusinessException, Exception {
	/**此处到货数量已经为去除赠品后的实际到货数量(见流程作废回写方法 rewriteOrdOnDiscardArray() 或 rewriteOrdOnDiscard())*/
	//Hashtable h_arrNumOld = getAccArrNum(vo);
	Hashtable h_arrNumOld = getAccArrNumBB1(vo);
	UFDouble m_arrNumOld = new UFDouble(0);
	String oldKey = "";

	OrderImpl myService = null;

	Vector vOrderbid = new Vector();
	String[] saOrderbid = null;

	//采购订单子子表1ID
	Vector vBB1ID = new Vector();
	String[] saOrderbb1id = null;

	Vector vArrNumNew = new Vector();
	UFDouble[] daNew = null;
	Vector vArrNumOld = new Vector();
	UFDouble[] daOld = null;
	try {
		Enumeration keysset = h_arrNumOld.keys();
		while (keysset.hasMoreElements()) {
			oldKey = (String) keysset.nextElement();
			// 主键长度是20
			String corder_bid = oldKey.substring(0, 20);
			String corder_bb1id = oldKey.substring(20, oldKey.length());
			vOrderbid.addElement(corder_bid);
			if(corder_bb1id != null && corder_bb1id.trim().length() > 4)
				vBB1ID.addElement(corder_bb1id);
			else
				vBB1ID.addElement(null);
			//作废时新增数量为零
			vArrNumNew.addElement(nc.vo.scm.pu.VariableConst.ZERO);
			m_arrNumOld = (UFDouble) h_arrNumOld.get(oldKey);
			vArrNumOld.addElement(m_arrNumOld);
		}
		if (vOrderbid != null && vOrderbid.size() > 0) {
			saOrderbid = new String[vOrderbid.size()];
			saOrderbb1id = new String[vBB1ID.size()];
			daNew = new UFDouble[vOrderbid.size()];
			daOld = new UFDouble[vOrderbid.size()];
			vOrderbid.copyInto(saOrderbid);
			vBB1ID.copyInto(saOrderbb1id);
			vArrNumNew.copyInto(daNew);
			vArrNumOld.copyInto(daOld);
			//调用订单容差控制方法(不含并发控制)
			//OrderHome myHome = null;
			//myHome = (OrderHome) getBeanHome(OrderHome.class, "nc.bs.po.OrderImpl");
			//myService = (Order) myHome.create();
			myService = new OrderImpl();
			if (isBack(vo)) {
				//退货
				nc.vo.po.rewrite.ParaBackRcToPoRewriteVO para = new nc.vo.po.rewrite.ParaBackRcToPoRewriteVO();
				para.setCBodyIdArray(saOrderbid);
				para.setDNumArray(daNew);
				para.setDOldNumArray(daOld);
				para.setPk_corp((String) vo.getParentVO().getAttributeValue("pk_purcorp"));
				para.setCBB1IdArray(saOrderbb1id);
				//作废时回写不必检查
				para.setUserConfirm(true);

				myService.rewriteBackRcNum(para);
			} else {
				String sBusiType = (String) vo.getParentVO().getAttributeValue("cbiztype");
				//到货
				nc.vo.po.rewrite.ParaRcToPoRewriteVO voPara = new nc.vo.po.rewrite.ParaRcToPoRewriteVO();
				voPara.setPk_corp((String) vo.getParentVO().getAttributeValue("pk_purcorp"));
				voPara.setCbiztype(sBusiType);
				voPara.setCBodyIdArray(saOrderbid);
				voPara.setDOldNumArray(daOld);
				voPara.setDNumArray(daNew);
				voPara.setCBB1IdArray(saOrderbb1id);
				//作废时回写不必检查
				voPara.setUserConfirm(true);

				myService.rewriteRcNum(voPara);
			}
			//myService.remove();
			/* czp deleted 2003-10-17
			 * dmo.writeBackAccumNum("ARRIVE", saOrderbid, daOld, daNew);
			 */
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 到货维护(作废)时回写订单的累计到货数量(SC)
 * 创建日期：(2001-10-12 9:21:17)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 * 调用委外订单回写接口类：nc.bs.pu.sc.InterfaceDMO
 */
private void rewriteAccArrNumToOrdDeleteScMy(ArriveorderVO vo) throws BusinessException,Exception {
	/**此处到货数量已经为去除赠品后的实际到货数量(见流程作废回写方法 rewriteOrdOnDiscardArray() 或 rewriteOrdOnDiscard())*/
	Hashtable h_arrNumOld = getAccArrNum(vo);
	UFDouble m_arrNumOld = new UFDouble(0);
	UFDouble m_arrNumNew = new UFDouble(0);
	//是否退货
	UFBoolean ufbIsBack = new UFBoolean(false);
	if (vo.getParentVO() != null && vo.getParentVO().getAttributeValue("bisback") != null){
		ufbIsBack = (UFBoolean) vo.getParentVO().getAttributeValue("bisback");
	}
	String oldKey = "";
	try {
		//组织数据
		String strPkCorp = null;
		if (vo.getParentVO() != null) {
			strPkCorp = (String) vo.getParentVO().getAttributeValue("pk_corp");
		}
		if (strPkCorp == null && vo.getChildrenVO() != null && vo.getChildrenVO().length > 0) {
			strPkCorp = (String) vo.getChildrenVO()[0].getAttributeValue("pk_corp");
		}
		ICreateCorpQueryService srv = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
		if(!srv.isEnabled(strPkCorp,ProductCode.PROD_SC)){//SC启用才调用SC的接口
			return;
		}
		Enumeration keysset = h_arrNumOld.keys();
		Vector vKey = new Vector();
		Vector vNum = new Vector();
		while (keysset.hasMoreElements()) {
			oldKey = (String) keysset.nextElement();
			//作废时新数量为零
			m_arrNumNew = new UFDouble(0);
			m_arrNumOld = (UFDouble) h_arrNumOld.get(oldKey);
			m_arrNumNew = m_arrNumNew.sub(m_arrNumOld);
			vKey.addElement(oldKey);
			vNum.addElement(m_arrNumNew);
		}
		//回写
		if (vKey.size() > 0) {
			String[] saKey = new String[vKey.size()];
			vKey.copyInto(saKey);
			UFDouble[] uaNum = new UFDouble[vNum.size()];
			vNum.copyInto(uaNum);
			//nc.bs.pu.sc.InterfaceDMO dmo = new nc.bs.pu.sc.InterfaceDMO();
//			Object oInstance = new InterServBO().getInterInstance(ProductCode.PROD_SC,InterRegister.SC0060) ;
			IScToPu_InterfaceDMO dmo = (IScToPu_InterfaceDMO) NCLocator.getInstance().lookup(IScToPu_InterfaceDMO.class.getName());
			UFBoolean bConfirmed = new UFBoolean(vo.isUserConfirm());
			if (ufbIsBack.booleanValue()){
				for (int i = 0; i < uaNum.length; i++){
					uaNum[i] = uaNum[i].multiply(-1.0);
				}
				dmo.updateScOrderForArrBatch(saKey, uaNum, "nbackarrvnum", strPkCorp,new UFBoolean(true),bConfirmed); 
			}else{
				dmo.updateScOrderForArrBatch(saKey, uaNum, "naccumarrvnum", strPkCorp,null,bConfirmed);
			}
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}



/**
 * 新增(订单转入)时回写订单的累计到货数量(SC)
 * 创建日期：(2001-10-12 9:21:17)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
private void rewriteAccArrNumToOrdInsertScMy(ArriveorderVO vo) throws BusinessException, Exception {
	
	Hashtable h_arrNumNew = getAccArrNum(vo);
	UFDouble m_arrNumNew = new UFDouble(0);
	UFDouble m_arrNumOld = new UFDouble(0);
	//是否退货
	UFBoolean ufbIsBack = new UFBoolean(false);
	if (vo.getParentVO() != null && vo.getParentVO().getAttributeValue("bisback") != null){
		ufbIsBack = (UFBoolean) vo.getParentVO().getAttributeValue("bisback");
	}
	String oldKey = "";
	try {
		//组织数据
		String strPkCorp = null;
		if (vo.getParentVO() != null) {
			strPkCorp = (String) vo.getParentVO().getAttributeValue("pk_corp");
		}
		if (strPkCorp == null && vo.getChildrenVO() != null && vo.getChildrenVO().length > 0) {
			strPkCorp = (String) vo.getChildrenVO()[0].getAttributeValue("pk_corp");
		}
		ICreateCorpQueryService srv = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
		if(!srv.isEnabled(strPkCorp,ProductCode.PROD_SC)){//SC启用才调用SC的接口
			return;
		}
		Vector vKey = new Vector();
		Vector vNum = new Vector();
		Enumeration keysset = h_arrNumNew.keys();
		while (keysset.hasMoreElements()) {
			oldKey = (String) keysset.nextElement();
			//转入时旧数量为零
			m_arrNumNew = (UFDouble) h_arrNumNew.get(oldKey);
			m_arrNumNew = m_arrNumNew.add(m_arrNumOld);
			vKey.addElement(oldKey);
			vNum.addElement(m_arrNumNew);
		}
		//回写
		if (vKey.size() > 0) {
			String[] saKey = new String[vKey.size()];
			vKey.copyInto(saKey);
			UFDouble[] uaNum = new UFDouble[vNum.size()];
			vNum.copyInto(uaNum);
			//nc.bs.pu.sc.InterfaceDMO dmo = new nc.bs.pu.sc.InterfaceDMO();
//			Object oInstance = new InterServBO().getInterInstance(ProductCode.PROD_SC,InterRegister.SC0060) ;
			IScToPu_InterfaceDMO oInstance = (IScToPu_InterfaceDMO) NCLocator.getInstance().lookup(IScToPu_InterfaceDMO.class.getName());
			UFBoolean bConfirmed = new UFBoolean(vo.isUserConfirm());
			if (ufbIsBack.booleanValue()){
				for (int i = 0; i < uaNum.length; i++){
					uaNum[i] = uaNum[i].multiply(-1.0);
				}
				oInstance.updateScOrderForArrBatch(saKey, uaNum, "nbackarrvnum", strPkCorp,new UFBoolean(true),bConfirmed);
			}else{
				oInstance.updateScOrderForArrBatch(saKey, uaNum, "naccumarrvnum", strPkCorp,null,bConfirmed);
			}
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}



/**
 * 到货维护(浏览修改)时回写订单的累计到货数量(SC)
 * 创建日期：(2001-10-12 9:21:17)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
private void rewriteAccArrNumToOrdUpdateScMy(ArriveorderVO vo) throws BusinessException, Exception {

	Hashtable h_arrNumOld = vo.getH_arrNumOld();
	Hashtable h_arrNumNew = vo.getH_arrNumNew();
	UFDouble m_arrNumOld = new UFDouble(0.0);
	UFDouble m_arrNumNew = new UFDouble(0.0);
	//是否退货
	UFBoolean ufbIsBack = new UFBoolean(false);
	if (vo.getParentVO() != null && vo.getParentVO().getAttributeValue("bisback") != null){
		ufbIsBack = (UFBoolean) vo.getParentVO().getAttributeValue("bisback");
	}
	String oldKey = "";
	try {
		//组织数据
		String strPkCorp = null;
		if (vo.getParentVO() != null) {
			strPkCorp = (String) vo.getParentVO().getAttributeValue("pk_corp");
		}
		if (strPkCorp == null && vo.getChildrenVO() != null && vo.getChildrenVO().length > 0) {
			strPkCorp = (String) vo.getChildrenVO()[0].getAttributeValue("pk_corp");
		}
		ICreateCorpQueryService srv = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
		if(!srv.isEnabled(strPkCorp,ProductCode.PROD_SC)){//SC启用才调用SC的接口
			return;
		}
		Vector vKey = new Vector();
		Vector vNum = new Vector();
		Enumeration keysset = h_arrNumOld.keys();
		while (keysset.hasMoreElements()) {
			oldKey = (String) keysset.nextElement();
			//修改时新旧数量都可能不为零
			m_arrNumOld = (UFDouble) h_arrNumOld.get(oldKey);
			m_arrNumNew = (UFDouble) h_arrNumNew.get(oldKey);
			if (m_arrNumNew == null) {
				m_arrNumNew = m_arrNumOld.multiply(-1);
			} else {
				m_arrNumNew = m_arrNumNew.sub(m_arrNumOld);
			}
			vKey.addElement(oldKey);
			vNum.addElement(m_arrNumNew);
		}
		//回写
		if (vKey.size() > 0) {
			String[] saKey = new String[vKey.size()];
			vKey.copyInto(saKey);
			UFDouble[] uaNum = new UFDouble[vNum.size()];
			vNum.copyInto(uaNum);
			//nc.bs.pu.sc.InterfaceDMO dmo = new nc.bs.pu.sc.InterfaceDMO();
//			Object oInstance = new InterServBO().getInterInstance(ProductCode.PROD_SC,InterRegister.SC0060) ;
			IScToPu_InterfaceDMO dmo = (IScToPu_InterfaceDMO) NCLocator.getInstance().lookup(IScToPu_InterfaceDMO.class.getName());
			UFBoolean bConfirmed = new UFBoolean(vo.isUserConfirm());
			if (ufbIsBack.booleanValue()){
				for (int i = 0; i < uaNum.length; i++){
					uaNum[i] = uaNum[i].multiply(-1.0);
				}
				dmo.updateScOrderForArrBatch(saKey, uaNum, "nbackarrvnum", strPkCorp,new UFBoolean(true),bConfirmed);
			}else{
				dmo.updateScOrderForArrBatch(saKey, uaNum, "naccumarrvnum", strPkCorp,null,bConfirmed);
			}
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 到货维护(作废)时回写订单的累计途耗数量(PO)
 * 创建日期：(2001-10-12 9:21:17)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
private void rewriteAccWasNumToOrdDeletePoMy(ArriveorderVO vo) throws BusinessException, Exception {

	//Hashtable h_wasNumOld = getAccWasNum(vo);
	Hashtable h_wasNumOld = getAccWasNumBB1(vo);
	UFDouble m_wasNumOld = new UFDouble(0);
	String oldKey = "";

	Vector vOrderbid = new Vector();
	String[] saOrderbid = null;
	//采购订单子子表1ID
	Vector vBB1ID = new Vector();
	String[] saOrderbb1id = null;

	Vector vWasNumNew = new Vector();
	UFDouble[] daNew = null;
	Vector vWasNumOld = new Vector();
	UFDouble[] daOld = null;

	OrderImpl beanOrder = null;
	try {
		Enumeration keysset = h_wasNumOld.keys();
		while (keysset.hasMoreElements()) {
			oldKey = (String) keysset.nextElement();
			// 主键长度是20
			String corder_bid = oldKey.substring(0, 20);
			String corder_bb1id = oldKey.substring(20, oldKey.length());
			vOrderbid.addElement(corder_bid);
			if(corder_bb1id != null && corder_bb1id.trim().length() > 4)
				vBB1ID.addElement(corder_bb1id);
			else
				vBB1ID.addElement(null);
			//作废时新数量为零
			vWasNumNew.addElement(nc.vo.scm.pu.VariableConst.ZERO);
			m_wasNumOld = (UFDouble) h_wasNumOld.get(oldKey);
			vWasNumOld.addElement(m_wasNumOld);
		}
		if (vOrderbid != null && vOrderbid.size() > 0) {
			saOrderbid = new String[vOrderbid.size()];
			saOrderbb1id = new String[vBB1ID.size()];
			daNew = new UFDouble[vOrderbid.size()];
			daOld = new UFDouble[vOrderbid.size()];
			vOrderbid.copyInto(saOrderbid);
			vBB1ID.copyInto(saOrderbb1id);
			vWasNumNew.copyInto(daNew);
			vWasNumOld.copyInto(daOld);

			//回写VO
			nc.vo.po.rewrite.ParaRcWasteToPoRewriteVO voPara = new nc.vo.po.rewrite.ParaRcWasteToPoRewriteVO();
			//V5：按采购公司回写
			voPara.setPk_corp(((ArriveorderHeaderVO) vo.getParentVO()).getPk_purcorp());
			voPara.setCBodyIdArray(saOrderbid);
			voPara.setDOldNumArray(daOld);
			voPara.setDNumArray(daNew);
			voPara.setCBB1IdArray(saOrderbb1id);
			beanOrder = new OrderImpl();
			beanOrder.rewriteWasteNum(voPara);
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 到货维护(作废)时回写订单的累计途耗数量(SC)
 * 创建日期：(2001-10-12 9:21:17)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
private void rewriteAccWasNumToOrdDeleteScMy(ArriveorderVO vo) throws BusinessException ,Exception {

	Hashtable h_wasNumOld = getAccWasNum(vo);
	UFDouble m_wasNumOld = new UFDouble(0);
	String oldKey = "";
	try {
		//组织数据
		String strPkCorp = null;
		if (vo.getParentVO() != null) {
			strPkCorp = (String) vo.getParentVO().getAttributeValue("pk_corp");
		}
		if (strPkCorp == null && vo.getChildrenVO() != null && vo.getChildrenVO().length > 0) {
			strPkCorp = (String) vo.getChildrenVO()[0].getAttributeValue("pk_corp");
		}
		ICreateCorpQueryService srv = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
		if(!srv.isEnabled(strPkCorp,ProductCode.PROD_SC)){//SC启用才调用SC的接口
			return;
		}
		Vector vKey = new Vector();
		Vector vNum = new Vector();
		Enumeration keysset = h_wasNumOld.keys();
		while (keysset.hasMoreElements()) {
			oldKey = (String) keysset.nextElement();
			//作废时新数量为零
			m_wasNumOld = (UFDouble) h_wasNumOld.get(oldKey);
			m_wasNumOld = m_wasNumOld.multiply(-1);
			vKey.addElement(oldKey);
			vNum.addElement(m_wasNumOld);
		}
		//回写
		if (vKey.size() > 0) {
			String[] saKey = new String[vKey.size()];
			vKey.copyInto(saKey);
			UFDouble[] uaNum = new UFDouble[vNum.size()];
			vNum.copyInto(uaNum);
			//nc.bs.pu.sc.InterfaceDMO dmo = new nc.bs.pu.sc.InterfaceDMO();
//			Object oInstance = new InterServBO().getInterInstance(ProductCode.PROD_SC,InterRegister.SC0060) ;
			IScToPu_InterfaceDMO dmo = (IScToPu_InterfaceDMO) NCLocator.getInstance().lookup(IScToPu_InterfaceDMO.class.getName());
			UFBoolean bConfirmed = new UFBoolean(vo.isUserConfirm());
			dmo.updateScOrderForArrBatch(saKey, uaNum, "naccumwastnum", strPkCorp,null,bConfirmed);
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 新增(订单转入)时回写订单的累计途耗数量(PO)
 * 创建日期：(2001-10-12 9:21:17)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
private void rewriteAccWasNumToOrdInsertPoMy(ArriveorderVO vo) throws BusinessException, Exception {

	//Hashtable h_wasNumNew = getAccWasNum(vo);
	Hashtable h_wasNumNew = getAccWasNumBB1(vo);

	UFDouble m_wasNumNew = new UFDouble(0);
	String oldKey = "";

	Vector vOrderbid = new Vector();
	String[] saOrderbid = null;

	//采购订单子子表1ID
	Vector vBB1ID = new Vector();
	String[] saOrderbb1id = null;

	Vector vWasNumNew = new Vector();
	UFDouble[] daNew = null;
	Vector vWasNumOld = new Vector();
	UFDouble[] daOld = null;

	OrderImpl beanOrder = null;
	try {
		Enumeration keysset = h_wasNumNew.keys();
		while (keysset.hasMoreElements()) {
			oldKey = (String) keysset.nextElement();
			// 主键长度是20
			String corder_bid = oldKey.substring(0, 20);
			String corder_bb1id = oldKey.substring(20, oldKey.length());
			vOrderbid.addElement(corder_bid);
			if(corder_bb1id != null && corder_bb1id.trim().length() > 4)
				vBB1ID.addElement(corder_bb1id);
			else
				vBB1ID.addElement(null);
			//转入时旧数量为零
			vWasNumOld.addElement(nc.vo.scm.pu.VariableConst.ZERO);
			m_wasNumNew = (UFDouble) h_wasNumNew.get(oldKey);
			vWasNumNew.addElement(m_wasNumNew);
		}
		if (vOrderbid != null && vOrderbid.size() > 0) {
			saOrderbid = new String[vOrderbid.size()];
			saOrderbb1id = new String[vBB1ID.size()];
			daNew = new UFDouble[vOrderbid.size()];
			daOld = new UFDouble[vOrderbid.size()];
			vOrderbid.copyInto(saOrderbid);
			vBB1ID.copyInto(saOrderbb1id);
			vWasNumNew.copyInto(daNew);
			vWasNumOld.copyInto(daOld);

			//回写VO
			nc.vo.po.rewrite.ParaRcWasteToPoRewriteVO voPara = new nc.vo.po.rewrite.ParaRcWasteToPoRewriteVO();
//			V5：按采购公司回写
//			voPara.setPk_corp(((ArriveorderHeaderVO) vo.getParentVO()).getPk_corp());
			voPara.setPk_corp(((ArriveorderHeaderVO) vo.getParentVO()).getPk_purcorp());
			voPara.setCBodyIdArray(saOrderbid);
			voPara.setDOldNumArray(daOld);
			voPara.setDNumArray(daNew);
			voPara.setCBB1IdArray(saOrderbb1id);

			beanOrder = new OrderImpl();
			beanOrder.rewriteWasteNum(voPara);
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 新增(订单转入)时回写订单的累计途耗数量(SC)
 * 创建日期：(2001-10-12 9:21:17)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
private void rewriteAccWasNumToOrdInsertScMy(ArriveorderVO vo) throws BusinessException, Exception {

	Hashtable h_wasNumNew = getAccWasNum(vo);
	UFDouble m_wasNumNew = new UFDouble(0);
	UFDouble m_wasNumOld = new UFDouble(0);
//	if (vo.getParentVO() != null && vo.getParentVO().getAttributeValue("bisback") != null){
//		ufbIsBack = (UFBoolean) vo.getParentVO().getAttributeValue("bisback");
//	}
	String oldKey = "";
	try {
		//组织数据
		String strPkCorp = null;
		if (vo.getParentVO() != null) {
			strPkCorp = (String) vo.getParentVO().getAttributeValue("pk_corp");
		}
		if (strPkCorp == null && vo.getChildrenVO() != null && vo.getChildrenVO().length > 0) {
			strPkCorp = (String) vo.getChildrenVO()[0].getAttributeValue("pk_corp");
		}
		ICreateCorpQueryService srv = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
		if(!srv.isEnabled(strPkCorp,ProductCode.PROD_SC)){//SC启用才调用SC的接口
			return;
		}
		Vector vKey = new Vector();
		Vector vNum = new Vector();
		Enumeration keysset = h_wasNumNew.keys();
		while (keysset.hasMoreElements()) {
			oldKey = (String) keysset.nextElement();
			//转入时旧数量为零
			m_wasNumNew = (UFDouble) h_wasNumNew.get(oldKey);
			m_wasNumNew = m_wasNumNew.add(m_wasNumOld);
			vKey.addElement(oldKey);
			vNum.addElement(m_wasNumNew);
		}
		//回写
		if (vKey.size() > 0) {
			String[] saKey = new String[vKey.size()];
			vKey.copyInto(saKey);
			UFDouble[] uaNum = new UFDouble[vNum.size()];
			vNum.copyInto(uaNum);
			//nc.bs.pu.sc.InterfaceDMO dmo = new nc.bs.pu.sc.InterfaceDMO();
//			Object oInstance = new InterServBO().getInterInstance(ProductCode.PROD_SC,InterRegister.SC0060) ;
			IScToPu_InterfaceDMO dmo = (IScToPu_InterfaceDMO) NCLocator.getInstance().lookup(IScToPu_InterfaceDMO.class.getName());
			UFBoolean bConfirmed = new UFBoolean(vo.isUserConfirm());
			dmo.updateScOrderForArrBatch(saKey, uaNum, "naccumwastnum", strPkCorp,null,bConfirmed);
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 到货维护(浏览修改)时回写订单的累计途耗数量(PO)
 * 创建日期：(2001-10-12 9:21:17)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
private void rewriteAccWasNumToOrdUpdatePoMy(ArriveorderVO vo) throws BusinessException, Exception {

	Hashtable h_wasNumOld = vo.getH_wasNumOld();
	//Hashtable h_wasNumOld = getAccWasNumBB1(oldVo);
	Hashtable h_wasNumNew = vo.getH_wasNumNew();
	//Hashtable h_wasNumNew = getAccWasNumBB1(vo);

	UFDouble m_wasNumOld = new UFDouble(0);
	UFDouble m_wasNumNew = new UFDouble(0);
	String oldKey = "";

	Vector vOrderbid = new Vector();
	String[] saOrderbid = null;

	//采购订单子子表1ID
	Vector vBB1ID = new Vector();
	String[] saOrderbb1id = null;

	Vector vWasNumNew = new Vector();
	UFDouble[] daNew = null;
	Vector vWasNumOld = new Vector();
	UFDouble[] daOld = null;

	OrderImpl beanOrder = null;
	try {
		Enumeration keysset = h_wasNumNew.keys();
		while (keysset.hasMoreElements()) {
			oldKey = (String) keysset.nextElement();
			// 主键长度是20
			String corder_bid = oldKey.substring(0, 20);
			String corder_bb1id = oldKey.substring(20, oldKey.length());
			vOrderbid.addElement(corder_bid);
			if(corder_bb1id != null && corder_bb1id.trim().length() > 4)
				vBB1ID.addElement(corder_bb1id);
			else
				vBB1ID.addElement(null);
			//修改时新旧数量都可能不为零
			m_wasNumOld = (UFDouble) h_wasNumOld.get(oldKey);
			vWasNumOld.addElement(m_wasNumOld);
			m_wasNumNew = (UFDouble) h_wasNumNew.get(oldKey);
			vWasNumNew.addElement(m_wasNumNew);
		}
		if (vOrderbid != null && vOrderbid.size() > 0) {
			saOrderbid = new String[vOrderbid.size()];
			saOrderbb1id = new String[vBB1ID.size()];
			daNew = new UFDouble[vOrderbid.size()];
			daOld = new UFDouble[vOrderbid.size()];
			vOrderbid.copyInto(saOrderbid);
			vBB1ID.copyInto(saOrderbb1id);
			vWasNumNew.copyInto(daNew);
			vWasNumOld.copyInto(daOld);

			//回写VO
			nc.vo.po.rewrite.ParaRcWasteToPoRewriteVO voPara = new nc.vo.po.rewrite.ParaRcWasteToPoRewriteVO();
			//V5：按采购公司回写
//			voPara.setPk_corp(((ArriveorderHeaderVO) vo.getParentVO()).getPk_corp());
			voPara.setPk_corp(((ArriveorderHeaderVO) vo.getParentVO()).getPk_purcorp());
			voPara.setCBodyIdArray(saOrderbid);
			voPara.setDOldNumArray(daOld);
			voPara.setDNumArray(daNew);
			voPara.setCBB1IdArray(saOrderbb1id);

			beanOrder = new OrderImpl();
			beanOrder.rewriteWasteNum(voPara);
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}

}

/**
 * 到货维护(浏览修改)时回写订单的累计途耗数量(SC)
 * 创建日期：(2001-10-12 9:21:17)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
private void rewriteAccWasNumToOrdUpdateScMy(ArriveorderVO vo) throws BusinessException, Exception {

	Hashtable h_wasNumOld = vo.getH_wasNumOld();
	Hashtable h_wasNumNew = vo.getH_wasNumNew();
	UFDouble m_wasNumOld = new UFDouble(0);
	UFDouble m_wasNumNew = new UFDouble(0);
	String oldKey = "";
	try {
		//组织数据
		String strPkCorp = null;
		if (vo.getParentVO() != null) {
			strPkCorp = (String) vo.getParentVO().getAttributeValue("pk_corp");
		}
		if (strPkCorp == null && vo.getChildrenVO() != null && vo.getChildrenVO().length > 0) {
			strPkCorp = (String) vo.getChildrenVO()[0].getAttributeValue("pk_corp");
		}
		ICreateCorpQueryService srv = (ICreateCorpQueryService) NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
		if(!srv.isEnabled(strPkCorp,ProductCode.PROD_SC)){//SC启用才调用SC的接口
			return;
		}
		Vector vKey = new Vector();
		Vector vNum = new Vector();
		Enumeration keysset = h_wasNumNew.keys();
		while (keysset.hasMoreElements()) {
			oldKey = (String) keysset.nextElement();
			//修改时新旧数量都可能不为零
			m_wasNumOld = (UFDouble) h_wasNumOld.get(oldKey);
			m_wasNumNew = (UFDouble) h_wasNumNew.get(oldKey);
			m_wasNumNew = m_wasNumNew.sub(m_wasNumOld);
			vKey.addElement(oldKey);
			vNum.addElement(m_wasNumNew);
		}
		//回写
		if (vKey.size() > 0) {
			String[] saKey = new String[vKey.size()];
			vKey.copyInto(saKey);
			UFDouble[] uaNum = new UFDouble[vNum.size()];
			vNum.copyInto(uaNum);
			//nc.bs.pu.sc.InterfaceDMO dmo = new nc.bs.pu.sc.InterfaceDMO();
//			Object oInstance = new InterServBO().getInterInstance(ProductCode.PROD_SC,InterRegister.SC0060) ;
			IScToPu_InterfaceDMO dmo = (IScToPu_InterfaceDMO) NCLocator.getInstance().lookup(IScToPu_InterfaceDMO.class.getName());
			UFBoolean bConfirmed = new UFBoolean(vo.isUserConfirm());
			dmo.updateScOrderForArrBatch(saKey, uaNum, "naccumwastnum", strPkCorp,null,bConfirmed);
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
}

/**
 * 分情况(质检系统是否启用)回写到货检验时的累计报检数量、累计合格数量、累计不合格数量
 * 0529改动：不合格品不入库，所以质检未启用时不回写子子表
 * 创建日期：(2001-10-23 19:35:10)
 */
public void rewriteNaccumchecknumMy(
	String pk_corp,
	UFBoolean isCheck,
	String[] carriveorder_bids,
	String[] carriveorderids,
	ArrayList aryNums,
	String coperatorid,
	String[] saBts,
	String[] saHts,
	UFBoolean isAgainCheck,
	UFBoolean isTsChanged)
	throws BusinessException {

	boolean bCanOper = false;
	//
	if (coperatorid == null || coperatorid.trim().equals("")){
		throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("SCMCOMMON","UPPSCMCommon-000389")/*@res "数据非法!没有操作员。"*/);
	}
	//加锁
	Vector vAllId = new Vector();
	String[] saAllId = null;
	if (carriveorderids != null && carriveorderids.length > 0) {
		for (int i = 0; i < carriveorderids.length; i++) {
			if (!vAllId.contains(carriveorderids))
				vAllId.addElement(carriveorderids[i]);
		}
	}
	if (carriveorder_bids != null && carriveorder_bids.length > 0)
		for (int i = 0; i < carriveorder_bids.length; i++) {
			if (!vAllId.contains(carriveorder_bids[i]))
				vAllId.addElement(carriveorder_bids[i]);
		}
	if (vAllId.size() <= 0) {
		SCMEnv.out("没有可检验的数据");
		return;
	}
	//是否可操作
	saAllId = new String[vAllId.size()];
	vAllId.copyInto(saAllId);
	try {
		bCanOper = LockTool.setLockForPks(saAllId, coperatorid);
		if (bCanOper) {
			try {
				if (!isTsChanged.booleanValue()) {
					nc.bs.pu.pub.PubDMO dmo = new nc.bs.pu.pub.PubDMO();
					dmo.checkTsNoChanged(
            ScmConst.PO_Arrive,
						carriveorderids,
						saHts,
						carriveorder_bids,
						saBts,
						null,
						null);
				}
				ArriveorderDMO dmo1 = new ArriveorderDMO();
				//质检未启动时，回写累计报检数量、累计合格数量、累计不合格数量
				if (!isCheck.booleanValue()) {
					dmo1.rewriteNaccumchecknumMy(carriveorder_bids, aryNums, pk_corp);
				}
				//质检启动时，只回写累计报检数量
				else {
					dmo1.rewriteNaccumchecknumMyQc(carriveorder_bids, aryNums);
				}
			} catch (Exception t) {
				throw t;
			}
		} else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("SCMCOMMON","UPPSCMCommon-000316")/*@res "正在进行相关操作，请稍后再试"*/);
	} catch (Exception e) {
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	} finally {
		//解锁
		if (bCanOper){
			LockTool.releaseLockForPks(saAllId, coperatorid);
		}
	}

}

/**
 * 流程动作组件(单张单据，多张单据共用的方法)
 * @功能：作废到货单时回写组件
   @处理：
   1。回写订单
   2。回写委外订单
 * @作者：晁志平
 * 创建日期：(2001-11-17 22:26:46)
   nc.bs.pu.sc.InterfaceDMO.updateScOrderByArr(String, UFDouble)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 * 2004-02-19	WYF		修改bean.remove()的处理
 */
public void rewriteOrdOnDiscardArray(ArriveorderVO[] vos) throws BusinessException {
	long lbegin = System.currentTimeMillis();
	//订单行ID = 订单累计到货数量
	//Hashtable h_accNum = null;
	//订单行ID = 订货数量
	//Hashtable h_ordNum = null;
	//本次到货数量(维护前)
	Hashtable h_arrNumOld = null;
	//本次到货数量(维护后)
	//Hashtable h_arrNumNew = null;
	//途耗数量(维护前)
	Hashtable h_wasNumOld = null;
	//途耗数量(维护后)
	//Hashtable h_wasNumNew = null;

	OrderImpl myService = null;
	try {
		for (int i = 0; i < vos.length; i++) {
			ArriveorderVO vo = vos[i];
			if (vo == null || vo.getChildrenVO() == null || vo.getChildrenVO().length <= 0)
				continue;
			//要回写的订单数量
			//h_arrNumOld = getAccArrNum(vo);
			h_arrNumOld = getAccArrNumBB1(vo);
			//h_wasNumOld = getAccWasNum(vo);
			h_wasNumOld = getAccWasNumBB1(vo);

			vo.setH_arrNumOld(h_arrNumOld);
			vo.setH_wasNumOld(h_wasNumOld);

			String strUpBillType = ((ArriveorderItemVO) vo.getChildrenVO()[0]).getCupsourcebilltype();
			if (strUpBillType == null || strUpBillType.trim().equals(""))
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000022")/*@res "数据错误：到货单的来源单据不存在"*/);
			if (!(strUpBillType.trim().equals(nc.vo.scm.constant.ScmConst.PO_Order) || strUpBillType.trim().equals(nc.vo.scm.constant.ScmConst.SC_Order)))
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000023")/*@res "数据错误：到货单的来源单据不是订单或委外订单"*/);
			if (strUpBillType.trim().equals(nc.vo.scm.constant.ScmConst.PO_Order)) {
				/*累计途耗*/
				rewriteAccWasNumToOrdDeletePoMy(vo);
				/*累计到货*/
				if (isBack(vo)) {
					//表体ID、旧数量、新数量
					Vector vOrder_bid = new Vector();
					String[] saOrder_bid = null;

					//采购订单子子表1ID
					Vector vBB1ID = new Vector();
					String[] saOrder_bb1id = null;

					Vector vOldNum = new Vector();
					Vector vCurNum = new Vector();

					UFDouble[] daOldNum = null;
					UFDouble[] daNewNum = null;

					/**旧到货单表体哈希表{订单行ID = 累计(旧到货数量-旧赠品数量)}*/
					Hashtable hOldNum = h_arrNumOld;
					Enumeration keys = hOldNum.keys();
					String corder_bid = null;
					String corder_bb1id = null;
					String strKey = null;
					//vOrder_bid = new Vector();
					//vOldNum = new Vector();
					//vCurNum = new Vector();
					while (keys.hasMoreElements()) {
						strKey = (String) keys.nextElement();
						// 主键长度是20
						corder_bid = strKey.substring(0, 20);
						corder_bb1id = strKey.substring(20, strKey.length());
						vOrder_bid.addElement(corder_bid);
						if(corder_bb1id != null && corder_bb1id.trim().length() > 4)
							vBB1ID.addElement(corder_bb1id);
						else
							vBB1ID.addElement(null);
						vOldNum.addElement(hOldNum.get(strKey));
						vCurNum.addElement(new UFDouble(0.0));
					}
					if (vOldNum.size() > 0) {
						saOrder_bid = new String[vOrder_bid.size()];
						vOrder_bid.copyInto(saOrder_bid);

						saOrder_bb1id = new String[vBB1ID.size()];
						vBB1ID.copyInto(saOrder_bb1id);

						daOldNum = new UFDouble[vOldNum.size()];
						vOldNum.copyInto(daOldNum);
						daNewNum = new UFDouble[vCurNum.size()];
						vCurNum.copyInto(daNewNum);

						//回写VO
						nc.vo.po.rewrite.ParaBackRcToPoRewriteVO para = new nc.vo.po.rewrite.ParaBackRcToPoRewriteVO();
						para.setPk_corp((String) vo.getParentVO().getAttributeValue("pk_purcorp"));
						para.setCBodyIdArray(saOrder_bid);
						para.setDNumArray(daNewNum);
						para.setDOldNumArray(daOldNum);
						para.setCBB1IdArray(saOrder_bb1id);

						/**界面显示到货单表体哈希表{订单行ID = 累计(新到货数量-新赠品数量)}*/
						//OrderHome myHome = (OrderHome) getBeanHome(OrderHome.class, "nc.bs.po.OrderImpl");
						//myService = (Order) myHome.create();
						myService = new OrderImpl();
						myService.rewriteBackRcNum(para);
					}
				} else {
					rewriteAccArrNumToOrdDeletePoMy(vo);
				}
			} else if (strUpBillType.trim().equals(ScmConst.SC_Order)) {
				rewriteAccArrNumToOrdDeleteScMy(vo);
				rewriteAccWasNumToOrdDeleteScMy(vo);
			}
		}
	} catch (BusinessException e) {
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000024")/*@res "作废到货单时回写错误"*/, e);
	} catch (Exception e) {
		
		//throw new BusinessException("流程配置保存单据时回写订单数据失败", new BusinessException("作废到货单时回写错误"));
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	long lend = System.currentTimeMillis();
	SCMEnv.out("************************************************");
	SCMEnv.out("作废到货单时回写订单时间是：" + (lend - lbegin) + " ms");

}
/**
 * 流程动作组件(单张单据，多张单据共用的方法)
 * @功能：保存到货单时回写组件
   @处理：
   1。回写订单
   2。回写委外订单
 * @作者：晁志平
 * 创建日期：(2001-11-17 22:26:46)
   nc.bs.pu.sc.InterfaceDMO.updateScOrderByArr(String, UFDouble)
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
public void rewriteOrdOnSaveMy(ArriveorderVO oldVo, ArrayList aryRetFromPrevMethod) throws BusinessException {

    nc.vo.ic.pub.bill.Timer timer = new nc.vo.ic.pub.bill.Timer();
	timer.start("保存到货单时回写组件(单张单据，多张单据共用的方法)");

	try {
		if (aryRetFromPrevMethod == null)
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000025")/*@res "保存方法返回值错误，请检查保存动作执行配置是否正确"*/);
		/**解析出上个方法传递过来的VO参数*/
		ArriveorderVO vo = (ArriveorderVO) aryRetFromPrevMethod.get(1);
		if (vo == null || vo.getChildrenVO() == null || vo.getChildrenVO().length <= 0)
			return;
		switch (vo.getOprType()) {
			/**自己组织回写数据*/
			case VOStatus.NEW :
				{
					if (vo.getUpBillType().equals(nc.vo.scm.constant.ScmConst.PO_Order)) {
						//rewriteAccArrNumToOrdInsertPoMy(vo);
						rewriteAccWasNumToOrdInsertPoMy(vo);
					} else if (vo.getUpBillType().equals(nc.vo.scm.constant.ScmConst.SC_Order)) {
						rewriteAccArrNumToOrdInsertScMy(vo);
						rewriteAccWasNumToOrdInsertScMy(vo);
					}
					break;
				}
			case VOStatus.UPDATED :
				/**可直接利用上个方法传递的VO哈希表数据*/
				{
					if (vo.getUpBillType().equals(nc.vo.scm.constant.ScmConst.PO_Order)) {
						//rewriteAccArrNumToOrdUpdatePoMy(vo);
						rewriteAccWasNumToOrdUpdatePoMy(vo);
					} else if (vo.getUpBillType().equals(nc.vo.scm.constant.ScmConst.SC_Order)) {
						rewriteAccArrNumToOrdUpdateScMy(vo);
						rewriteAccWasNumToOrdUpdateScMy(vo);
					}
					break;
				}
			default :
				{
					return;
				}
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	timer.stopAndShow("保存到货单时回写组件(单张单据，多张单据共用的方法)");
}

/**
 * 流程动作组件(单张单据，多张单据共用的方法)
 * @功能：保存到货单(新增和修改)
 * @作者：晁志平
 * 创建日期：(2001-9-13 20:26:46)
 * 修改日期：(2002-4-15 13:57:07)
 * 注意：
 * 1) 回写订单、委外订单由流程里配置保存的下一个动作组件来实现
 * 2) 并发控制：调用公用方法
 * 3) 加锁操作：调用公用方法
 * 4) 容差调用订单提供公用方法 OrderImpl.writeBackRcNum()
 * 2004-02-19	WYF		修改bean.remove()的处理
 */
public ArrayList saveArrBillMy(ArriveorderVO vo, Object objPara)
	throws BusinessException, BusinessException, NamingException, java.sql.SQLException, RemoveException {

	Timer timer = new Timer();
	timer.start("到货单保存操作saveArrBillMy开始");

  //检查自定义项
  IScm srv = (IScm) NCLocator.getInstance().lookup(IScm.class.getName());    
  srv.checkDefDataType(vo);
  timer.start("到货单保存前自定义项检查");
  
	SCMEnv.out("单据行数：" + vo.getChildrenVO().length);
	
	boolean bUserConfirm = vo.isUserConfirm();
	
	ArrayList aryRetParas = new ArrayList();
	String key = null;
	ArriveorderVO newvo = null;
	try {
		//参数
		ArrayList aryPara = (ArrayList) objPara;
		ArrayList aryPara0 = (ArrayList) aryPara.get(0);
		//oldvo:UI缓存VO,用于回写及给下一个回写动作传回写参数
		ArriveorderVO oldvo = (ArriveorderVO) aryPara0.get(1);
		//newvo:UI单据模板VO,用于回写及给下一个回写动作传回写参数
		newvo = (ArriveorderVO) aryPara0.get(3);

		//组织订单回写参数数据

		//业务类型
		String sBusiType = null;
		sBusiType = (String) vo.getParentVO().getAttributeValue("cbiztype");
		if (sBusiType == null || sBusiType.trim().equals("")) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000026")/*@res "数据错误：未获取业务类型，保存到货单失败"*/);
		}
		//表体ID、旧数量、新数量及行号数组
		Vector vOrder_bid = new Vector();
		//采购订单子子表1ID
		Vector vBB1ID = new Vector();

		Vector vOldNum = new Vector();
		Vector vCurNum = new Vector();
		String sBillId = null;
		boolean bIsNewBill = (vo.getParentVO().getPrimaryKey() == null || vo.getParentVO().getPrimaryKey().trim().equals(""));
		//保存前免检存货累计合格数量及累计不合格数量的处理
		vo = getVOForFreeChk(vo);
		ArriveorderItemVO[] items = (ArriveorderItemVO[]) vo.getChildrenVO();
		ArriveorderDMO dmo = new ArriveorderDMO();
		UFDouble ufdTmp = null;

		//数据组织：新增单据
		UFDateTime ut = new UFDateTime(System.currentTimeMillis());
		if (bIsNewBill) {
			if (items == null || items.length <= 0)
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000027")/*@res "数据错误：新增的单据表体为空, 保存到货单失败"*/);
			for (int i = 0; i < items.length; i++) {
				vOrder_bid.addElement(items[i].getAttributeValue("cupsourcebillrowid"));
				//采购订单子子表1ID
				vBB1ID.addElement(items[i].getAttributeValue("corder_bb1id"));
				vOldNum.add(nc.vo.scm.pu.VariableConst.ZERO);
				//**用于回写的到货数量要去除赠品数量*/
				ufdTmp = (UFDouble) items[i].getAttributeValue("narrvnum");
				if(items[i].getBlargess() != null 
						&& items[i].getBlargess().booleanValue() 
						&& (items[i].getBlargessuprow() == null || !items[i].getBlargessuprow().booleanValue())){
					vCurNum.addElement(null);
				}else{
					vCurNum.add(ufdTmp);
				}
			}
			//制单时间
			vo.getHeadVO().setTmaketime(ut);
			//最后修改时间
			vo.getHeadVO().setTlastmaketime(ut);
		}
		//数据组织：修改单据
		else {
			//如果只有表头改动，则直接刷新返回
			if (items == null || items.length <= 0) {
				sBillId = vo.getParentVO().getPrimaryKey();
				if (sBillId == null || sBillId.trim().equals(""))
					throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000028")/*@res "数据错误：修改的单据未得到主键,到货单保存失败"*/);

				//since v50, 支持修改单据号功能
				new GetSysBillCode().setBillNoWhenModify(vo, vo.getOldVO(), "varrordercode");
				
				//更新数据
				update(vo);
				
				//刷新返回
				String cuserid = (String) vo.getParentVO().getAttributeValue("cuserid");
				vo = dmo.findByPrimaryKey(sBillId);
				vo.getParentVO().setAttributeValue("cuserid", cuserid);
				aryRetParas.add(0, vo.getParentVO().getPrimaryKey());
				aryRetParas.add(1, vo);
				return aryRetParas;
			}
			//最后修改时间
			vo.getHeadVO().setTlastmaketime(ut);
			
			/**旧到货单表体哈希表{订单行ID = 累计(旧到货数量-旧赠品数量)}*/
			//Hashtable hOldNum = getAccArrNum(oldvo);
			Hashtable hOldNum = getAccArrNumBB1(oldvo);
			Enumeration keys = hOldNum.keys();
			String corder_bid = null;
			String corder_bb1id = null;
			vOrder_bid = new Vector();
			//采购订单子子表1ID
			String strKey = null;
			vBB1ID = new Vector();
			vOldNum = new Vector();
			vCurNum = new Vector();
			while (keys.hasMoreElements()) {
				strKey = (String) keys.nextElement();
				// 主键长度是20
				corder_bid = strKey.substring(0, 20);
				corder_bb1id = strKey.substring(20, strKey.length());
				vOrder_bid.addElement(corder_bid);
				if (corder_bb1id != null && corder_bb1id.trim().length() > 4)
					vBB1ID.addElement(corder_bb1id);
				else
					vBB1ID.addElement(null);
				vOldNum.addElement(hOldNum.get(strKey));
			}
			/**界面显示到货单表体哈希表{订单行ID = 累计(新到货数量-新赠品数量)}*/
			//Hashtable hNewNum = getAccArrNum(newvo);
			Hashtable hNewNum = getAccArrNumBB1(newvo);
			vCurNum = new Vector();
			/**到货单的来源行ID即订单行ID不会变*/
			for (int i = 0; i < vOrder_bid.size(); i++) {
				String sTemp = null;
				if (vBB1ID.elementAt(i) == null || vBB1ID.elementAt(i).toString().trim().length() == 0)
					sTemp = "NULL";
				else
					sTemp = vBB1ID.elementAt(i).toString();
				String sKey = vOrder_bid.elementAt(i).toString() + sTemp;
				vCurNum.addElement((UFDouble) hNewNum.get(sKey));
			}
		}

		timer.addExecutePhase("保存和回写前处理");

		/**采购订单做容差校验及回写累计到货数量(已经去除赠品数量)*/
		/**注意此处不回写累计途耗数量，累计途耗数量由流程下一个动作来完成*/

		//产生批次号		
		//主键关系(since v51)：存货管理ID=批次号
		ArriveorderVO voBatchOrder = null; 
		ArriveorderItemVO[] voaCheckItem =  null;
		ArriveorderItemVO[] voaBatchItem =  null;
    HashMap<String, String> mapExistFlag = new HashMap<String, String>();
		if (vo!=null && !vo.isReturn()) {
		    voaCheckItem = (ArriveorderItemVO[]) vo.getChildrenVO();
			int iCheckItemLen = voaCheckItem == null ? 0 : voaCheckItem.length ;
			Vector<ArriveorderItemVO> vTemp = new Vector<ArriveorderItemVO>();
			for (int i = 0; i < iCheckItemLen; i++){
			  if(PuPubVO.getString_TrimZeroLenAsNull(voaCheckItem[i].getVproducenum()) != null){
			      continue;
			  }
        if(mapExistFlag.containsKey(voaCheckItem[i].getCmangid())){
          continue;
        }
				vTemp.addElement(voaCheckItem[i]);
        mapExistFlag.put(voaCheckItem[i].getCmangid(),"");
			}
			if(vTemp.size() > 0){
				voBatchOrder = new	ArriveorderVO() ;
				voBatchOrder.setParentVO(vo.getParentVO()) ;
				voaBatchItem = new ArriveorderItemVO[vTemp.size()];
		  	vTemp.copyInto(voaBatchItem);
				voBatchOrder.setChildrenVO(voaBatchItem) ;
			}
		}
		if (voBatchOrder != null) {
			HashMap	hmapCode = new BatchCodeDMO().getBatchCode(voBatchOrder);      
			if (hmapCode != null) {
				for (int i = 0; i < voaCheckItem.length; i++) {
			    if(PuPubVO.getString_TrimZeroLenAsNull(voaCheckItem[i].getVproducenum()) != null){
			        continue;
			    }
					voaCheckItem[i].setVproducenum( (String)hmapCode.get(voaCheckItem[i].getCmangid()) );
					//可能与前台的批次号不同，前台认为非更新的行，在取批次号后已为更新行
					if (voaCheckItem[i].getStatus() == VOStatus.UNCHANGED) {
						voaCheckItem[i].setStatus(VOStatus.UPDATED);
					}
				}
			}
		}
		timer.addExecutePhase("批次号处理");

		//打赠品标志
		vo = getVOWithIsPresent(vo);

		timer.addExecutePhase("打赠品标志");

		//数据库操作
		ArriveorderVO vots = null;
		switch (vo.getOprType()) {
			case VOStatus.NEW :
				{ //获取单据号
					String billCode = null;
					nc.bs.pu.pub.GetSysBillCode getDmo = new nc.bs.pu.pub.GetSysBillCode();
					if(vo.isNeedCreateNewBillCode()){
						billCode = getDmo.getSysBillNO(vo);
					}else{
						billCode = vo.getHeadVO().getVarrordercode();
					}
					vo.getParentVO().setAttributeValue("varrordercode", billCode);

//					key = insert(vo);
					//*****
					key = dmo.insertHeaderMy((ArriveorderHeaderVO)vo.getParentVO());
					for(int i = 0; i < items.length; i++) items[i].setCarriveorderid(key);
					String keys[] = dmo.insertItemBatch(items);
					if(keys != null && keys.length > 0){
						for(int i = 0; i < items.length; i++) items[i].setCarriveorder_bid(keys[i]);						
					}
					//*****

					timer.addExecutePhase("insert操作");

					//刷新TS
					vots = dmo.findByPrimaryKey(key);
					//refreshTs(vots);

					timer.addExecutePhase("刷新TS操作");

					//处理自由项
					for (int i = 0; i < items.length; i++) {
						if (items[i].getVfree0() != null && items[i].getVfree0().trim().length() > 0) {
							String sBodyId = ((ArriveorderItemVO) items[i]).getCarriveorder_bid();
							for (int j = 0; j < vots.getChildrenVO().length; j++) {
								String sBodyId1 = ((ArriveorderItemVO[]) vots.getChildrenVO())[j].getCarriveorder_bid();
								if (sBodyId.equals(sBodyId1))
									 ((ArriveorderItemVO[]) vots.getChildrenVO())[j].setVfree0(items[i].getVfree0());

							}
						}
					}
					vots.setOprType(VOStatus.NEW);
					vots.setUserConfirm(bUserConfirm);
					vots.setUpBillType(vo.getUpBillType());
					vots.setCoperatorid(vo.getCoperatorid());

					aryRetParas.add(key);
					aryRetParas.add(1, vots);
					break;
				}
			case VOStatus.UPDATED :
				{
					//更新数据
//					update(vo);
					//*****
					Vector vIns = new Vector();
					Vector vUpd = new Vector();
					Vector vDel = new Vector();
					for ( int i = 0; i < items.length; i++ ) {
						switch (items[i].getStatus()) {
							case VOStatus.NEW :
								vIns.addElement(items[i]);
								break;
							case VOStatus.UPDATED :
								vUpd.addElement(items[i]);
								break;
							case VOStatus.DELETED :
								vDel.addElement(items[i]);
								break;
						}
					}
					//批处理
					ArriveorderItemVO[] bvos = null;
					//
					if (vIns.size() >0){
						bvos = new ArriveorderItemVO[vIns.size()];
						vIns.copyInto(bvos);
						String keys[] = dmo.insertItemBatch(bvos);
						if(keys != null && keys.length > 0){
							for(int i = 0; i < bvos.length; i++) bvos[i].setCarriveorder_bid(keys[i]);
						}
					}
					//
					if (vUpd.size() >0){
						bvos = new ArriveorderItemVO[vUpd.size()];
						vUpd.copyInto(bvos);
						dmo.updateItemArray(bvos);
					}
					//
					if (vDel.size() >0){
						bvos = new ArriveorderItemVO[vDel.size()];
						vDel.copyInto(bvos);
						dmo.deleBodyByItems(bvos);
					}
					//since v50, 支持修改单据号功能
					new GetSysBillCode().setBillNoWhenModify(vo, vo.getOldVO(), "varrordercode");
					//
					dmo.updateHeaderMy((ArriveorderHeaderVO) vo.getParentVO());
					//*****

					timer.addExecutePhase("update操作");

					//刷新TS
					vots = dmo.findByPrimaryKey(vo.getParentVO().getPrimaryKey());

					//修改时，给下一个回写动作准备数据，新增时回写方法自己获取下列数据
					vots.setH_arrNumNew(getAccArrNum(newvo));
					vots.setH_arrNumOld(getAccArrNum(oldvo));
					vots.setH_wasNumNew(getAccWasNum(newvo));
					vots.setH_wasNumOld(getAccWasNum(oldvo));
					vots.setH_givNumNew(getAccGivNum(newvo));
					vots.setH_givNumOld(getAccGivNum(oldvo));

					timer.addExecutePhase("刷新TS操作");

					//处理自由项
					for (int i = 0; i < items.length; i++) {
						if (items[i].getVfree0() != null && items[i].getVfree0().trim().length() > 0) {
							String sBodyId = ((ArriveorderItemVO) items[i]).getCarriveorder_bid();
							for (int j = 0; j < vots.getChildrenVO().length; j++) {
								String sBodyId1 = ((ArriveorderItemVO[]) vots.getChildrenVO())[j].getCarriveorder_bid();
								if (sBodyId.equals(sBodyId1))
									 ((ArriveorderItemVO[]) vots.getChildrenVO())[j].setVfree0(items[i].getVfree0());
							}
						}
					}

					vots.setOprType(VOStatus.UPDATED);
					vots.setUserConfirm(bUserConfirm);
					vots.setUpBillType(vo.getUpBillType());
					vots.setCoperatorid(vo.getCoperatorid());

					aryRetParas.add(vo.getParentVO().getPrimaryKey());
					aryRetParas.add(1, vots);
					break;
				}
		}
		ArriveorderHeaderVO head = (ArriveorderHeaderVO)vots.getParentVO();
		if(!dmo.isBillInvInCalBody(head.getCarriveorderid(),head.getCstoreorganization())){
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000029")/*@res "存在存货与库存组织不匹配，请检查！"*/);
		}

	} catch (Exception e) {
		
		PubDMO.throwBusinessException(e);
	}

	timer.showAllExecutePhase("到货单保存操作saveArrBillMy结束");

	return aryRetParas;
}

/**
 * 作者：汪维敏
 * 功能：获取累计到货数量哈希表
 * 参数：ArriveorderVO
 * 返回：
 * 例外：
 * 日期：(2004-3-4 11:24:49)
 * @return java.util.HashMap
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
private Hashtable getAccArrNumBB1(ArriveorderVO vo) throws BusinessException{
	Hashtable hNum = new Hashtable();
	UFDouble m_arrNum = null;
	UFDouble m_arrMid = null;
	String key = null;
	//采购订单行ID及采购订单子子表1ID
	String corder_bid = null,corder_bb1id = null;
	ArriveorderItemVO[] items = (ArriveorderItemVO[])vo.getChildrenVO();
	int size = items.length;
	//按到货单逐行处理
	boolean bLargessUp = false;
	boolean bLargessThis = false;
	for(int i = 0;i < size;i++){
		corder_bid = items[i].getCorder_bid();
		corder_bb1id = items[i].getCorder_bb1id();
		if(corder_bb1id == null || corder_bb1id.trim().length() == 0)
			corder_bb1id = "NULL";
		key = corder_bid + corder_bb1id;
		m_arrNum = new UFDouble(0.0);
		m_arrMid = new UFDouble(0.0);
		if ((UFDouble)items[i].getNarrvnum() != null
				&& items[i].getNarrvnum().toString().trim().length() != 0) {
			m_arrNum = (UFDouble)items[i].getNarrvnum();
			//减去赠品
			//if (items[i].getNpresentnum() != null
					//&& items[i].getNpresentnum().toString().trim().length() != 0) {
				//m_arrNum = m_arrNum.sub(items[i].getNpresentnum());
			//}
		}
		//采购订单行ID及采购订单子子表1ID及到货数量获取
		if(null != key){
			if (hNum.containsKey(key)) {
				m_arrMid = (UFDouble)hNum.get(key);
			}
			bLargessThis = items[i].getBlargess() != null && items[i].getBlargess().booleanValue();
			bLargessUp = items[i].getBlargessuprow() != null && items[i].getBlargessuprow().booleanValue();
			
			//回写二条件：订单非赠品及到货非赠品 || 采购订单赠品执行
			if(!(bLargessUp || bLargessThis) || bLargessUp && bLargessThis){
				m_arrMid = m_arrMid.add(m_arrNum);
			}
			//注意哈希表键不能为空，且顺序不能颠倒
			hNum.put(key,m_arrMid);
		}
	}
	return hNum;
}

/**
 * 作者：汪维敏
 * 功能：获取到货途耗数量哈希表
 * 参数：ArriveorderVO
 * 返回：
 * 例外：
 * 日期：(2004-3-4 11:24:49)
 * @return java.util.HashMap
 * @param vo nc.vo.rc.receive.ArriveorderVO
 */
private Hashtable getAccWasNumBB1(ArriveorderVO vo) throws BusinessException {
	Hashtable hNum = new Hashtable();
	UFDouble m_wasNum = null;
	UFDouble m_wasMid = null;
	String key = null;
	//采购订单行ID及采购订单子子表1ID
	String corder_bid = null, corder_bb1id = null;
	ArriveorderItemVO[] items = (ArriveorderItemVO[]) vo.getChildrenVO();
	int size = items.length;
	//按到货单逐行处理
	for (int i = 0; i < size; i++) {
		corder_bid = items[i].getCorder_bid();
		corder_bb1id = items[i].getCorder_bb1id();
		if (corder_bb1id == null || corder_bb1id.trim().length() == 0)
			corder_bb1id = "NULL";
		key = corder_bid + corder_bb1id;
		m_wasNum = new UFDouble(0);
		m_wasMid = new UFDouble(0);
		if ((UFDouble) items[i].getNwastnum() != null && items[i].getNwastnum().toString().trim().length() != 0) {
			m_wasNum = (UFDouble) items[i].getNwastnum();
		}
		//采购订单行ID及采购订单子子表1ID及到货数量获取
		if (null != key) {
			if (hNum.containsKey(key)) {
				m_wasMid = (UFDouble) hNum.get(key);
			}
			m_wasMid = m_wasMid.add(m_wasNum);
			//注意哈希表键不能为空，且顺序不能颠倒
			hNum.put(key, m_wasMid);
		}
	}
	return hNum;
}
/**
 * 获取供应商地区分类编码串集合: "('abc','bcd',...)"
 */
private String getAreaClassCodeSet(ConditionVO cond, String pk_corp) throws BusinessException {
	String strAreaClassCodeSet = "(";
	/*加入本级分类*/
	strAreaClassCodeSet += "'" + cond.getValue() + "'";
	try {
		/*调用公用方法获取所有子分类编码*/
		nc.bs.pu.pub.PubDMO pubdmo = new nc.bs.pu.pub.PubDMO();
		String[] saAreaClassCode = pubdmo.getVendorCodeByAreaClassCode(pk_corp, cond.getValue(), cond.getOperaCode());
		if (saAreaClassCode != null && saAreaClassCode.length > 0) {
			for (int i = 0; i < saAreaClassCode.length; i++) {
				if (saAreaClassCode[i] == null || saAreaClassCode[i].trim().equals(""))
					continue;
				strAreaClassCodeSet += ",";
				strAreaClassCodeSet += "'";
				strAreaClassCodeSet += saAreaClassCode[i].trim();
				strAreaClassCodeSet += "'";
			}
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000030")/*@res "获取供应商分类编码查询条件时出错,可能导致查询数据不正确"*/,e);
	}
	strAreaClassCodeSet += ") ";
	return strAreaClassCodeSet;
}
/**
 * 获取存货分类编码串集合: "('abc','bcd',...)"
 */
private String getInvClassCodeSet(ConditionVO cond, String pk_corp) throws BusinessException {
	String strInvClassCodeSet = "(";
	try {
		/*调用公用方法获取所有子分类编码*/
		nc.bs.ps.cost.CostanalyseDMO ddmo = new nc.bs.ps.cost.CostanalyseDMO();
		String saInvClassCode[] =
			ddmo.getSubInvClassCode(cond.getValue(), cond.getOperaCode());
		if (saInvClassCode != null && saInvClassCode.length > 0) {
			for (int i = 0; i < saInvClassCode.length; i++) {
				if (saInvClassCode[i] == null || saInvClassCode[i].trim().equals(""))
					continue;
				if (i > 0) {
					strInvClassCodeSet += ",";
				}
				strInvClassCodeSet += "'";
				strInvClassCodeSet += saInvClassCode[i].trim();
				strInvClassCodeSet += "'";
			}
		}
		/*处理公用方法异常情况*/
		else {
			strInvClassCodeSet += "'";
			strInvClassCodeSet += cond.getValue();
			strInvClassCodeSet += "'";
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000031")/*@res "获取存货分类编码查询条件时出错,可能导致查询数据不正确"*/,e);
		strInvClassCodeSet += "'";
		strInvClassCodeSet += cond.getValue();
		strInvClassCodeSet += "'";
	}
	strInvClassCodeSet += ") ";
	return strInvClassCodeSet;
}

/**
 * 获取到货维护查询条件
 * 处理：
    1.过滤掉 "作废 + 非正在审批" 状态
    2.到货维护的查询条件与根据订单收货的业务类型无关( whj 09-17)
 * 创建日期：(2001-09-04)
 * <p>
 * <b>examples:</b>
 * <p>
 * 使用示例
 * <p>
 * <b>参数说明</b>
 * @param condsUserDef  用户自定义查询条件
 * @param condsNormal   常用条件
 * @param pk_corp       当前登录公司
 * @param pk_busitype   业务类型
 * @param strUpSrcInfoSQLPart 上层单据信息条件
 * @param strDataPower  数据权限条件串  
 * @return   查询条件串，格式为：" from ... where ... "
 * @throws BusinessException
 * <p>
 * @author czp
 * @time 2007-3-12 上午10:21:43
 */
private String getSQLForAllArriveMy(
	ConditionVO[] condsUserDef,
	ConditionVO[] condsNormal,
	String pk_corp,
	String pk_busitype,
	String strUpSrcInfoSQLPart,
  String strDataPowerSql)
	throws BusinessException {

	String strSQL = " ";
	StringBuffer from = new StringBuffer(" from ");
	Vector vTableName = new Vector();
	from.append(
		"po_arriveorder inner join po_arriveorder_b ON po_arriveorder.carriveorderid = po_arriveorder_b.carriveorderid ");
	vTableName.addElement("po_arriveorder_b");
	StringBuffer where = new StringBuffer(" where ( 1 > 0 ");
	//
	ArrayList ary = null;
	/*用户自定义条件*/
	if (condsUserDef != null) {
		for (int i = 0; i < condsUserDef.length; i++) {
			if ( condsUserDef[i].getOperaCode().equalsIgnoreCase("in") && ArrivePubVO._Hash_ArriveOrderUI.get(condsUserDef[i].getFieldCode()) != null) {
				//转换操作符为IN且在注册表中注册过的条件
				condsUserDef[i].setFieldCode((String)ArrivePubVO._Hash_ArriveOrderUI.get(condsUserDef[i].getFieldCode()));
			}
			if( condsUserDef[i].getOperaCode().equalsIgnoreCase("in")){
			    if(condsUserDef[i].getFieldCode().equals("po_arriveorder.cvendormangid")
			            || condsUserDef[i].getFieldCode().equals("po_arriveorder_b.cwarehouseid")
			            || condsUserDef[i].getFieldCode().equals("po_arriveorder.cdeptid")
			            || condsUserDef[i].getFieldCode().equals("po_arriveorder.cemployeeid")
			            || condsUserDef[i].getFieldCode().equals("po_arriveorder.cstoreorganization")
						|| condsUserDef[i].getFieldCode().equals("po_arriveorder_b.cprojectid")
						|| condsUserDef[i].getFieldCode().equals("po_arriveorder_b.cprojectphaseid")){
			    	condsUserDef[i].setOperaCode(" is null or "+condsUserDef[i].getFieldCode()+" in ");
			    	condsUserDef[i].setFieldCode("(" + condsUserDef[i].getFieldCode());
			    	condsUserDef[i].setValue(condsUserDef[i].getValue() + ")");
			    	condsUserDef[i].setDataType(1);
			    } 
			}
			  
			ary = new ArrayList();
			ary = getSQLForFromOfArriveorder(condsUserDef[i], from.toString(), vTableName);
			from.append((String) ary.get(0));
			vTableName = (Vector) ary.get(1);
			where.append(
				getSQLForWhereOfArriveorder(condsUserDef[i], where.toString(), pk_corp));
		}
	}
	where.append(" ) ");
	/*常用条件*/
	if (condsNormal != null) {
    where.append("and ( 1<0 ");
		for (int i = 0; i < condsNormal.length; i++) {
			ary = new ArrayList();
			ary = getSQLForFromOfArriveorder(condsNormal[i], from.toString(), vTableName);
			from.append((String) ary.get(0));
			vTableName = (Vector) ary.get(1);
			where.append(
				getSQLForWhereOfArriveorder(condsNormal[i], where.toString(), pk_corp));
		}
    where.append(" ) ");
	}
  
  //权限处理需要拼接基本档案表 : from
  if(strDataPowerSql != null){
    //存货相关----------------------------------------------------------
    boolean bExistsClsDoc = from.indexOf("bd_invcl")>=0;
    boolean bExistsBasDoc = from.indexOf("bd_invbasdoc")>=0;
    boolean bJoinInvClassFlag = strDataPowerSql != null 
      && (strDataPowerSql.indexOf("bd_invcl.invclasscode") >= 0 || strDataPowerSql.indexOf("bd_invcl.invclassname") >= 0);
    bJoinInvClassFlag &= !bExistsClsDoc;
    
    boolean bJoinInvFlag = strDataPowerSql != null 
    && (strDataPowerSql.indexOf("bd_invbasdoc.invcode") >= 0 || strDataPowerSql.indexOf("bd_invbasdoc.invname") >= 0);
    bJoinInvFlag &= !bExistsBasDoc;
    
    if(bJoinInvClassFlag){
      if(! bExistsBasDoc){
        from.append("inner join bd_invbasdoc on po_arriveorder_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
      }
      from.append("inner join bd_invcl on bd_invbasdoc.pk_invcl = bd_invcl.pk_invcl ");
    }else if(bJoinInvFlag){
      from.append("inner join bd_invbasdoc on po_arriveorder_b.cbaseid = bd_invbasdoc.pk_invbasdoc ");
    }
    //客商相关----------------------------------------------------------
    boolean bExistsAreaCl = from.indexOf("bd_areacl")>=0;
    boolean bExistsVendorDoc = from.indexOf("bd_cubasdoc")>=0;
    boolean bJoinAreaClassFlag = strDataPowerSql != null 
      && (strDataPowerSql.indexOf("bd_areacl.areaclcode") >= 0 || strDataPowerSql.indexOf("bd_areacl.areaclname") >= 0);
    bJoinAreaClassFlag &= !bExistsAreaCl;
    boolean bJoinVendorFlag = strDataPowerSql != null 
    && (strDataPowerSql.indexOf("bd_cubasdoc.custcode") >= 0 || strDataPowerSql.indexOf("bd_cubasdoc.custname") >= 0);
    bJoinVendorFlag &= !bExistsVendorDoc;
    if(bJoinAreaClassFlag){
      if(! bExistsVendorDoc){
        from.append("inner join bd_cubasdoc on po_arriveorder.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
      }
      from.append("inner join bd_areacl on bd_cubasdoc.pk_areacl = bd_areacl.pk_areacl ");
    }else if(bJoinVendorFlag){
      from.append("inner join bd_cubasdoc on po_arriveorder.cvendorbaseid = bd_cubasdoc.pk_cubasdoc ");
    }
    //其它----------------------------------------------------------
    if(strDataPowerSql.indexOf("bd_calbody") >= 0 && from.indexOf("bd_calbody") < 0){
      from.append("inner join bd_calbody on bd_calbody.pk_calbody = po_arriveorder.cstoreorganization ");
    }
    if(strDataPowerSql.indexOf("bd_stordoc") >= 0 && from.indexOf("bd_stordoc") < 0){
      from.append("left outer join bd_stordoc on bd_stordoc.pk_stordoc = po_arriveorder_b.cwarehouseid ");
    }
    if(strDataPowerSql.indexOf("bd_jobbasfil") >= 0 && from.indexOf("bd_jobbasfil") < 0){      
      from.append("left outer join bd_jobmngfil on bd_jobmngfil.pk_jobmngfil = po_arriveorder_b.cprojectid ");
      from.append("left outer join bd_jobbasfil on bd_jobbasfil.pk_jobbasfil = bd_jobmngfil.pk_jobbasfil ");
      
    }
    where.append("and ("+ strDataPowerSql +") ");
  }
	/*来源信息条件*/
	if (strUpSrcInfoSQLPart != null && !strUpSrcInfoSQLPart.trim().equals("")) {
		where.append(" and " + strUpSrcInfoSQLPart);
	}
	//公司约束
	if (pk_corp != null && pk_corp.trim().length() > 0) {
		where.append(" and po_arriveorder.pk_corp = '");
		where.append(pk_corp + "' ");
	}
	//状态约束
	where.append("and po_arriveorder.dr = 0 ");
	where.append("and po_arriveorder_b.dr = 0 ");
	strSQL += from.toString();
	strSQL += where.toString();

	return strSQL;
}

/**
 * 获取到货审批查询条件 (过滤掉 作废和审批未通过 状态)加过滤状态功能
 *  whj 2002-01-18 当选取"未审批"时把"正在审批"的连同"未审批"的"一并查询出来
 * 创建日期：(2001-09-04)
 * @return String strSQL 返回格式为：" from ... where ... "
	ConditionVO[] condsUserDef, 用户自定义条件
	ConditionVO[] condsNormal,  常用条件
	String pk_corp,		公司主键
	boolean[] status,	单据状态
 * @exception BusinessException 异常说明。
 */
private String getSQLForAuditMy(
	ConditionVO[] condsUserDef,
	ConditionVO[] condsNormal,
	String pk_corp,
	boolean[] status,
	String strUpSrcInfoSQLPart)
	throws BusinessException {
	String strSQL = " ";
	StringBuffer from = new StringBuffer(" from ");
	Vector vTableName = new Vector();
	from.append(
		"po_arriveorder LEFT OUTER JOIN po_arriveorder_b ON po_arriveorder.carriveorderid = po_arriveorder_b.carriveorderid ");
	vTableName.addElement("po_arriveorder_b");
	StringBuffer where = new StringBuffer(" where ( 1 > 0 ");
	//
	ArrayList ary = null;
	/*用户自定义条件*/
	if (condsUserDef != null) {
		for (int i = 0; i < condsUserDef.length; i++) {
			ary = new ArrayList();
			ary = getSQLForFromOfArriveorder(condsUserDef[i], from.toString(), vTableName);
			from.append((String) ary.get(0));
			vTableName = (Vector) ary.get(1);
			where.append(
				getSQLForWhereOfArriveorder(condsUserDef[i], where.toString(), pk_corp));
		}
	}
	where.append(" ) and ( 1>0 ");
	/*常用条件*/
	if (condsNormal != null) {
		for (int i = 0; i < condsNormal.length; i++) {
			ary = new ArrayList();
			ary = getSQLForFromOfArriveorder(condsNormal[i], from.toString(), vTableName);
			from.append((String) ary.get(0));
			vTableName = (Vector) ary.get(1);
			where.append(
				getSQLForWhereOfArriveorder(condsNormal[i], where.toString(), pk_corp));
		}
	}
	where.append(" ) ");
	/*来源信息条件*/
	if (strUpSrcInfoSQLPart != null && !strUpSrcInfoSQLPart.trim().equals("")) {
		where.append(" and " + strUpSrcInfoSQLPart);
	}
	//公司约束
	if (pk_corp != null && pk_corp.trim().length() > 0) {
		where.append(" and po_arriveorder.pk_corp = '");
		where.append(pk_corp + "' ");
	}
	//状态约束
	where.append("and po_arriveorder.dr = 0 ");
	where.append("and po_arriveorder_b.dr = 0 ");
	where.append(
		"and po_arriveorder.ibillstatus <> " + IArriveorderStatus.NOPASS + " ");
	//状态过滤
	if (status[0]) {
		where.append(
			"and ( po_arriveorder.ibillstatus = "
				+ IArriveorderStatus.FREE
				+ " or po_arriveorder.ibillstatus = "
				+ IArriveorderStatus.CHECKING
				+ " ) ");
	}
	if (status[1]) {
		where.append(
			"and po_arriveorder.ibillstatus = " + IArriveorderStatus.PASS + " ");
	}
	strSQL += from;
	strSQL += where;
	return strSQL;
}



	/**
	 * 获取到货明细查询条件  状态约束：非作废
	 * 创建日期：(2001-09-09)
	 * @return String strSQL 返回格式为：" from ... where ... "
	 * @param conds ConditionVO[]
	 * @param pk_corp String
	 * @exception BusinessException 异常说明。
	 */
	private String getSQLForQueryMy(ConditionVO[] conds, String pk_corp, boolean bScEnabled)
		throws BusinessException {
		String strSQL = " ";
		StringBuffer from = new StringBuffer(" from ");
		from.append("po_arriveorder_b ");
		StringBuffer where = new StringBuffer(" where ( 1 > 0 ");
		Vector vTableName = new Vector();
		from.append(
			"LEFT OUTER JOIN po_arriveorder ON po_arriveorder_b.carriveorderid = po_arriveorder.carriveorderid ");
		vTableName.addElement("po_arriveorder");
		//采购订单
		from.append(
			"LEFT OUTER JOIN po_order ON po_arriveorder_b.corderid = po_order.corderid ");
		vTableName.addElement("po_order");
		from.append(
			"LEFT OUTER JOIN po_order_b ON po_arriveorder_b.corder_bid = po_order_b.corder_bid ");
		vTableName.addElement("po_order_b");
		if (bScEnabled){
			//委外订单
			from.append(
				"LEFT OUTER JOIN sc_order ON po_arriveorder_b.corderid = sc_order.corderid ");
			vTableName.addElement("sc_order");
			from.append(
				"LEFT OUTER JOIN sc_order_b ON po_arriveorder_b.corder_bid = sc_order_b.corder_bid ");
			vTableName.addElement("sc_order_b");
		}
		//左连接项目管理档案表：
		from.append(
			" left outer join bd_jobmngfil on po_arriveorder_b.cprojectid = bd_jobmngfil.pk_jobmngfil ");
		vTableName.addElement("bd_jobmngfil");
		//左连接项目基本档案表：
		from.append(
			" left outer join bd_jobbasfil on bd_jobmngfil.pk_jobbasfil = bd_jobbasfil.pk_jobbasfil ");
		vTableName.addElement("bd_jobbasfil");
		//左连接项目对象阶段表：
		from.append(
			" left outer join bd_jobobjpha on po_arriveorder_b.cprojectphaseid = bd_jobobjpha.pk_jobobjpha ");
		vTableName.addElement("bd_jobobjpha");
		//左连接项目阶段表：
		from.append(
			" left outer join bd_jobphase on bd_jobphase.pk_jobphase = bd_jobobjpha.pk_jobphase ");
		vTableName.addElement("bd_jobphase");
		if (conds != null) {
			ArrayList ary = null;
			for (int i = 0; i < conds.length - 1; i++) {
				ary = new ArrayList();
				ary = getSQLForFromOfArriveorder(conds[i], from.toString(), vTableName);
				//先处理关联
				from.append((String) ary.get(0));
				vTableName = (Vector) ary.get(1);
				//再处理具体条件
				where.append(getSQLForWhereOfArriveorder(conds[i], where.toString(),pk_corp));
			}
		}
		where.append(" )");

		//公司约束
		if (pk_corp != null && pk_corp.trim().length() > 0) {
			where.append(" and po_arriveorder.pk_corp = '");
			where.append(pk_corp + "' ");
		}
		//状态约束
		where.append(" and po_arriveorder.dr = 0 ");
		where.append(" and po_arriveorder_b.dr = 0 ");
		//过滤掉“退货”
		where.append(" and UPPER(isnull(po_arriveorder.bisback,'N')) = 'N' ");
		strSQL += from;
		strSQL += where;
		return strSQL;
	}

/**
 * 获取指定条件到货单VO的查询语句(SQL语句中的 "where ...")
 * 创建日期：(2001-10-23 9:21:33)
 * @return java.lang.String
 * @param cond nc.vo.pub.query.ConditionVO
 * @param from java.lang.String
 * @param vTableName Vector
 */
public String getSQLForWhereOfArriveorder(
	ConditionVO cond,
	String where,
	String pk_corp)
	throws BusinessException {

	StringBuffer whereNew = new StringBuffer(" ");
	try {

		/*特殊处理*/

		/*客商地区分类编码*/
		if (cond.getFieldCode().equals("bd_areacl.areaclcode")
			&& cond.getValue() != null
			&& !cond.getValue().trim().equals("")
			&& !cond.getOperaCode().trim().equalsIgnoreCase("IS")
			&& !cond.getOperaCode().trim().equalsIgnoreCase("IN")) {
			/*刷新条件VO的值*/
			String strAreaclCodeSet = "";
			strAreaclCodeSet = getAreaClassCodeSet(cond, pk_corp);
			cond.setValue(strAreaclCodeSet);
			/*刷新条件VO的操作符*/
			cond.setOperaCode("in");
		}
		/*存货分类编码*/
		if (cond.getFieldCode().equals("bd_invcl.invclasscode")
			&& cond.getValue() != null
			&& !cond.getValue().trim().equals("")
			&& !cond.getOperaCode().trim().equalsIgnoreCase("IS")
			&& !cond.getOperaCode().trim().equalsIgnoreCase("IN")) {
			/*刷新条件VO的值*/
			String strInvClassCodeSet = "";
			strInvClassCodeSet = getInvClassCodeSet(cond, pk_corp);
			cond.setValue(strInvClassCodeSet);
			/*刷新条件VO的操作符*/
			cond.setOperaCode("in");
		}

		/*统一处理*/

		if(cond.getOperaCode().toUpperCase().indexOf("IN") >= 0
				|| cond.getOperaCode().toUpperCase().indexOf("IS") >= 0){//v50， 支持数据权限增加 by chao
			whereNew.append(getWhereByFieldCondVOMy(cond.getFieldCode(), cond, true));
		}else{
			whereNew.append(getWhereByFieldCondVOMy(cond.getFieldCode(), cond, false));
		}

	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000032")/*@res "获取指定条件到货单VO的查询语句时出错,可能导致查询结果不正确"*/,e);
	}
	return whereNew.toString();
}

/**
 * 获取合法的订单VO数组(SC)
 * ////////////////////////////
 * 累计到货>=订货数量 则 不到货
 * 存货是劳务属性     则 不到货
 * 存货是折扣属性     则 不到货
 * 存货是不可采购属性 则 不到货
 * ////////////////////////////
 * 创建日期：(2001-10-11 19:34:28)
 * @return nc.vo.sc.order.OrderVO[]
 * @param orders nc.vo.sc.order.OrderVO[]
 * modify/czp/030912/非正订单不到货
 */
private nc.vo.sc.order.OrderVO[] getValidOrdersSc(nc.vo.sc.order.OrderVO[] orders) throws BusinessException{
	nc.vo.sc.order.OrderVO[] neworders = null;
	nc.vo.sc.order.OrderItemVO[] items = null;
	Vector v_orders = new Vector();
	Vector v_items = new Vector();
	UFDouble accNum = new UFDouble(0);
	UFDouble ordNum = new UFDouble(0);
	nc.vo.sc.order.OrderItemVO item = null;
	UFBoolean discountflag = null;
	UFBoolean laborflag = null;
	if (orders == null || !(orders.length > 0)) {
		return null;
	}
	for (int i = 0; i < orders.length; i++) {
		v_orders.addElement(orders[i]);
	}
	//读取不同存货属性
	Vector vBasId = new Vector(), vManId = new Vector();
	String[] saBasId = null, saManId = null;
	ArrayList aryFlagAll = null;
	ArrayList aryFlag = null;
	nc.vo.sc.order.OrderItemVO voOrdItem = null;
	String cbaseid = null, cmangid = null;
	int iIndexFlags = 0;
	for (int i = 0; i < orders.length; i++) {
		for (int j = 0; j < orders[i].getChildrenVO().length; j++) {
			voOrdItem = (nc.vo.sc.order.OrderItemVO) orders[i].getChildrenVO()[j];
			cbaseid = voOrdItem.getCbaseid();
			if (!vBasId.contains(cbaseid)) {
				vBasId.addElement(cbaseid);
			}
			cmangid = voOrdItem.getCmangid();
			if (!vManId.contains(cmangid)) {
				vManId.addElement(cmangid);
			}
		}
	}
	if (vBasId.size() <= 0 || vManId.size() <= 0)
		return null;
	saBasId = new String[vBasId.size()];
	saManId = new String[vManId.size()];
	vBasId.copyInto(saBasId);
	vManId.copyInto(saManId);
	Hashtable hIsCanPur = new Hashtable();
	try {
		aryFlagAll = getFlagsByInvBasIDsPo(saBasId);
		nc.bs.pu.pub.PubDMO dmo = new nc.bs.pu.pub.PubDMO();
		hIsCanPur = dmo.fetchArrayValue("bd_invmandoc", "iscanpurchased", "pk_invmandoc", saManId);
		if (hIsCanPur == null){
			SCMEnv.out("获取是否可采购属性时出错");
			hIsCanPur = new Hashtable();
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000033")/*@res "获取合法的订单VO时出错 ArrFrmOrdUI.getValidOrders()"*/,e);
	}
	for (int i = 0; i < orders.length; i++) {
		//订单索引(删除或替换表体)
		int orderindex = v_orders.indexOf(orders[i]);
		items = (nc.vo.sc.order.OrderItemVO[]) orders[i].getChildrenVO();
		v_items = new Vector();
		for (int j = 0; j < items.length; j++) {
			v_items.addElement(items[j]);
		}
		//ary = new ArrayList();
		UFDouble ufdBackArr = null;
		UFDouble ufdBackSto = null;
		//订单行可到货检查		
		for (int j = 0; j < items.length; j++) {
			item = items[j];
			int delindex = v_items.indexOf(item);
			ordNum = new UFDouble(0);
			if (item.getNordernum() != null) {
				ordNum = item.getNordernum();
			}
			//订单非正
			if (ordNum.doubleValue() <= 0) {
				v_items.remove(delindex);
				continue;
			}
			//劳务、折扣
			cbaseid = items[j].getCbaseid();
			iIndexFlags = vBasId.indexOf(cbaseid);
			aryFlag = (ArrayList) aryFlagAll.get(iIndexFlags);
			laborflag = (UFBoolean) aryFlag.get(0);
			discountflag = (UFBoolean) aryFlag.get(1);
			if (discountflag.booleanValue() || laborflag.booleanValue()) {
				v_items.remove(delindex);
				continue;
			}
			//可采购
			cmangid = items[j].getCmangid();
			String canpur = (String) hIsCanPur.get(cmangid);
			if (canpur != null && "N".equalsIgnoreCase(canpur.trim())) {
				v_items.remove(delindex);
				continue;
			}
			//到货数量>=订单数量
			accNum = new UFDouble(0);
			ufdBackArr = PuPubVO.getUFDouble_NullAsZero(item.getNbackarrvnum());
			ufdBackSto = PuPubVO.getUFDouble_NullAsZero(item.getNbackstorenum());
			//到货数量>=(订单数量+累计退货数量+累计退库数量)
			if (item.getNaccumarrvnum() != null) {
				accNum = item.getNaccumarrvnum();
			}
			if (ordNum.sub(accNum).add(ufdBackArr).add(ufdBackSto).doubleValue() <= 0) {
				v_items.remove(delindex);
			}
		}
		if (v_items.size() > 0) {
			items = new nc.vo.sc.order.OrderItemVO[v_items.size()];
			v_items.copyInto(items);
			((nc.vo.sc.order.OrderVO) v_orders.elementAt(orderindex)).setChildrenVO(items);
		} else {
			v_orders.remove(orderindex);
		}
	}
	if (v_orders.size() > 0) {
		neworders = new nc.vo.sc.order.OrderVO[v_orders.size()];
		v_orders.copyInto(neworders);
		for (int i = 0; i < neworders.length; i++) {

		}
	}
	return neworders;
}

/**
 * 获取合法的订单VO数组(SC)

 * ************************** 可退货处理 **********************************
 * 业务类型约束：
 	 业务类型有到货环节
 * 数量关系约束：
 *	 基于正订单,未退货数量（累计到货数量-累计入库数量-累计退货数量）> 0；
 *		 即满足,nordernum - naccumarrvnum - nbackstorenum > 0
 *	 基于负订单,未退货数量（订单数量+累计退货数量+累计退库数量）< 0；
 *		 即满足,nordernum + naccumarrvnum + nbackstorenum < 0
 * 存货属性约束:非劳务、非折扣、可采购
 * *************************************************************************

 * 创建日期：(2003-9-10 13:29:28)
 * @return nc.vo.sc.order.OrderVO[]
 * @param  nc.vo.sc.order.OrderVO[]
 */
private nc.vo.sc.order.OrderVO[] getValidOrdersScBack(nc.vo.sc.order.OrderVO[] orders) throws Exception{
	//数据检查
	if (orders == null || !(orders.length > 0)) {
		return null;
	}
	//业务类型处理
	orders = getValidOrdersScBack_Busi(orders);
	if (orders == null || !(orders.length > 0)) {
		return null;
	}
	//数量关系及存货属性
	nc.vo.sc.order.OrderVO[] neworders = null;
	nc.vo.sc.order.OrderItemVO[] items = null;
	Vector v_orders = new Vector();
	Vector v_items = new Vector();
	//nc.vo.sc.order.OrderItemUFBoolean discountflag = null;
	UFBoolean laborflag = null;
	for (int i = 0; i < orders.length; i++) {
		v_orders.addElement(orders[i]);
	}
	//读取不同存货属性
	Vector vBasId = new Vector(), vManId = new Vector();
	String[] saBasId = null, saManId = null;
	ArrayList aryFlagAll = null;
	ArrayList aryFlag = null;
	nc.vo.sc.order.OrderItemVO voOrdItem = null;
	String cbaseid = null, cmangid = null;
	int iIndexFlags = 0;
	for (int i = 0; i < orders.length; i++) {
		for (int j = 0; j < orders[i].getChildrenVO().length; j++) {
			voOrdItem = (nc.vo.sc.order.OrderItemVO) orders[i].getChildrenVO()[j];
			cbaseid = voOrdItem.getCbaseid();
			if (!vBasId.contains(cbaseid)) {
				vBasId.addElement(cbaseid);
			}
			cmangid = voOrdItem.getCmangid();
			if (!vManId.contains(cmangid)) {
				vManId.addElement(cmangid);
			}
		}
	}
	if (vBasId.size() <= 0 || vManId.size() <= 0)
		return null;
	saBasId = new String[vBasId.size()];
	saManId = new String[vManId.size()];
	vBasId.copyInto(saBasId);
	vManId.copyInto(saManId);
	Hashtable hIsCanPur = new Hashtable();
	try {
		aryFlagAll = getFlagsByInvBasIDsPo(saBasId);
		nc.bs.pu.pub.PubDMO dmo = new nc.bs.pu.pub.PubDMO();
		hIsCanPur = dmo.fetchArrayValue("bd_invmandoc", "iscanpurchased", "pk_invmandoc", saManId);
		if (hIsCanPur == null){
			SCMEnv.out("获取是否可采购属性时出错");
			hIsCanPur = new Hashtable();
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000033")/*@res "获取合法的订单VO时出错 ArrFrmOrdUI.getValidOrders()"*/,e);
	}
	//
	UFDouble ufdOrdNum = null, ufdAccArrNum = null, ufdAccStoreNum = null, ufdBackArrNum = null, ufdBackStorNum = null;
	int orderindex = 0; //当前处理单据在向量中位置
	int delindex = 0; //当前处理行在向量中位置
	for (int i = 0; i < orders.length; i++) {
		//订单索引(删除或替换表体)
		orderindex = v_orders.indexOf(orders[i]);
		items = (nc.vo.sc.order.OrderItemVO[]) orders[i].getChildrenVO();
		v_items = new Vector();
		for (int j = 0; j < items.length; j++) {
			v_items.addElement(items[j]);
		}
		//ary = new ArrayList();
		//数量关系
		OrderItemVO item = null ;
		for (int j = 0; j < items.length; j++) {
			item = items[j];
			//cbaaseid();
			iIndexFlags = vBasId.indexOf(cbaseid);
			aryFlag = (ArrayList) aryFlagAll.get(iIndexFlags);
			laborflag = (UFBoolean) aryFlag.get(0);
			discountflag = (UFBoolean) aryFlag.get(1);
			delindex = v_items.indexOf(item);
			//排除劳务、折扣行
			if (discountflag.booleanValue() || laborflag.booleanValue()) {
				v_items.remove(delindex);
				continue;
			}
			//可采购
			cmangid = items[j].getCmangid();
			String canpur = (String) hIsCanPur.get(cmangid);
			if (canpur != null && "N".equalsIgnoreCase(canpur.trim())) {
				v_items.remove(delindex);
				continue;
			}
			
			//排除数量关系不满足行
			ufdOrdNum = (item.getNordernum() != null) ? item.getNordernum() : new UFDouble(0);
			ufdAccArrNum = (item.getNaccumarrvnum() != null) ? item.getNaccumarrvnum() : new UFDouble(0);
			ufdAccStoreNum = (item.getNaccumstorenum() != null) ? item.getNaccumstorenum() : new UFDouble(0);
			ufdBackArrNum = (item.getNbackarrvnum() != null) ? item.getNbackarrvnum() : new UFDouble(0);
			ufdBackStorNum = (item.getNbackstorenum() != null) ? item.getNbackstorenum() : new UFDouble(0);
			if (ufdOrdNum.doubleValue() > 0) {
				if (ufdAccArrNum.sub(ufdBackArrNum).sub(ufdAccStoreNum).doubleValue() <= 0) {
					v_items.remove(delindex);
				}
			} else {
				if (ufdOrdNum.add(ufdBackArrNum).add(ufdBackStorNum).doubleValue() >= 0) {
					v_items.remove(delindex);
				}
			}
		}
		//是否存在可退货的行
		if (v_items.size() > 0) {
			items = new nc.vo.sc.order.OrderItemVO[v_items.size()];
			v_items.copyInto(items);
			((nc.vo.sc.order.OrderVO) v_orders.elementAt(orderindex)).setChildrenVO(items);
		} else {
			v_orders.remove(orderindex);
		}
	}
	if (v_orders.size() > 0) {
		neworders = new nc.vo.sc.order.OrderVO[v_orders.size()];
		v_orders.copyInto(neworders);
		for (int i = 0; i < neworders.length; i++) {

		}
	}
	return neworders;
}

/**
 * 获取合法的订单VO数组(SC)--业务类型约束：业务类型有到货环节
 * 创建日期：(2003-9-19 09:29:28)
 * @return nc.vo.sc.order.OrderVO[]
 * @param  nc.vo.sc.order.OrderVO[]
 */
private nc.vo.sc.order.OrderVO[] getValidOrdersScBack_Busi(nc.vo.sc.order.OrderVO[] orders) throws Exception {
	//数据检查
	if (orders == null || !(orders.length > 0)) {
		return null;
	}
	//单据头ID(DISTINCT)
	Vector vHid = new Vector();
	int iLen = orders.length;
	for (int i = 0; i < iLen; i++) {
		if (orders[i] == null || orders[i].getParentVO() == null || orders[i].getParentVO().getPrimaryKey() == null)
			continue;
		if (vHid.contains(orders[i].getParentVO().getPrimaryKey().trim()))
			continue;
		vHid.addElement(orders[i].getParentVO().getPrimaryKey().trim());
	}
	if (vHid.size() <= 0) {
		SCMEnv.out("所有单据找不到单据主键，不能退货");
		return null;
	}
	//单据相应业务类型是否有到货环节
	ArriveorderDMO dmo = new ArriveorderDMO();
	Hashtable hIsArr = dmo.getIsBusiHaveArrForSc(vHid);
	if (hIsArr == null) {
		SCMEnv.out("无法判断单据是否有到货环节，不能退货");
		return null;
	}
	//过滤
	Vector vRetOrd = new Vector();
	UFBoolean ufbIsArr = null;
	for (int i = 0; i < iLen; i++) {
		if (orders[i] == null || orders[i].getParentVO() == null || orders[i].getParentVO().getPrimaryKey() == null)
			continue;
		ufbIsArr = (UFBoolean) hIsArr.get(orders[i].getParentVO().getPrimaryKey().trim());
		if (ufbIsArr != null && ufbIsArr.booleanValue()) {
			vRetOrd.addElement(orders[i]);
		}
	}
	if (vRetOrd.size() <= 0) {
		SCMEnv.out("所有单据无到货环节，不能退货");
		return null;
	}
	orders = new nc.vo.sc.order.OrderVO[vRetOrd.size()];
	vRetOrd.copyInto(orders);
	return orders;
}

/**
 * 获取合法的订单VO数组(SC)--表体增加累计不合格数量
 * 创建日期：(2003-9-19 09:29:28)
 * @return nc.vo.sc.order.OrderVO[]
 * @param  nc.vo.sc.order.OrderVO[]
 */
private nc.vo.sc.order.OrderVO[] getValidOrdersScBack_NotElg(nc.vo.sc.order.OrderVO[] orders) throws Exception {
	//数据检查
	if (orders == null || !(orders.length > 0)) {
		return null;
	}
	//单据表体ID
	Vector vBid = new Vector();
	int iLen = orders.length,iLenB;
	for (int i = 0; i < iLen; i++) {
		if (orders[i] == null || orders[i].getChildrenVO() == null || orders[i].getChildrenVO().length <= 0)
			continue;
		iLenB = orders[i].getChildrenVO().length;
		for (int j = 0; j < iLenB; j++) {
			vBid.addElement(orders[i].getChildrenVO()[j].getPrimaryKey().trim());
		}
	}
	if (vBid.size() <= 0) {
		SCMEnv.out("所有单据体找不到单据主键,单据体加累计不合格数量失败");
		return orders;
	}
	//查询累计不合格数量
	ArriveorderDMO dmo = new ArriveorderDMO();
	Hashtable hNotElgNum = dmo.getNotElgNumForSc(vBid);
	if (hNotElgNum == null) {
		SCMEnv.out("查询不到累计不合格数量,单据体加累计不合格数量失败");
		return orders;
	}
	//设置
	String strKey = null;
	for (int i = 0; i < iLen; i++) {
		if (orders[i] == null || orders[i].getChildrenVO() == null || orders[i].getChildrenVO().length <= 0)
			continue;
		iLenB = orders[i].getChildrenVO().length;
		for (int j = 0; j < iLenB; j++) {
			strKey = orders[i].getChildrenVO()[j].getPrimaryKey().trim();
			if (strKey == null)
				continue;
			orders[i].getChildrenVO()[j].setAttributeValue("nnotelignum", (UFDouble) hNotElgNum.get(strKey));
		}
	}
	return orders;
}

/**
  * 是否退货
 */
private boolean isBack(ArriveorderVO vo) throws BusinessException {
	if (vo == null)
		return false;
	if (vo.getParentVO() == null)
		return false;
	if (vo.getParentVO().getAttributeValue("bisback") == null)
		return false;
	if ("Y".equalsIgnoreCase(vo.getParentVO().getAttributeValue("bisback").toString().trim())) {
		return true;
	}
	return false;
}

/**
 * 到货维护--查询指定公司的符合条件的到货单
 * 创建日期：(2001-6-8)
 * @param ConditionVO[] condsUserDef 			用户常用条件（待扩展）
 * @param ConditionVO[] condsNormal 			用户自定义条件
 * @param String		unitCode 				公司主键
 * @param String		pk_busitype				业务类型主键(del by whj 09-17)
 * @param String		strUpSrcInfoSQLPart		用户常用条件--单据来源条件
 * @return nc.vo.rc.receive.ArriveorderVO[]
 * @exception BusinessException 异常说明。
 */
public ArriveorderVO[] queryAllArriveMy(
	ConditionVO[] condsUserDef,
	ConditionVO[] condsNormal,
	String unitCode,
	String pk_busitype,
	String strUpSrcInfoSQLPart)
	throws BusinessException {

    nc.vo.ic.pub.bill.Timer timer = new nc.vo.ic.pub.bill.Timer();
	timer.start("到货维护查询");

	ArriveorderVO[] arriveorders = null;
	ArriveorderHeaderVO[] headers = null;
	ArriveorderItemVO[] items = null;
	String strAuditted = null;
	try {

    //将用户定义自下定义条件及数据权限条件区分
    ArrayList listRet = OrderPubDMO.dealCondVosForPower(condsUserDef);
    condsUserDef = (ConditionVO[]) listRet.get(0);
    String strDataPowerSql = (String) listRet.get(1);
    //
		String strCondSQL =
			getSQLForAllArriveMy(
				condsUserDef,
				condsNormal,
				unitCode,
				pk_busitype,
				strUpSrcInfoSQLPart,
        strDataPowerSql);
    //    
		ArriveorderDMO dmo = new ArriveorderDMO();
    String strSql = "carriveorderid in (select po_arriveorder.carriveorderid " + strCondSQL + ") ";
		headers = (ArriveorderHeaderVO[]) dmo.queryHeadersBySql(strSql);
		if (headers != null) {
			String[] saHid = new String[headers.length];
			arriveorders = new ArriveorderVO[headers.length];
			//设置单据表头及单据的审批属性
			for (int i = 0; i < headers.length; i++) {
				saHid[i] = (String) headers[i].getPrimaryKey();
				strAuditted = "未审批";
				if (headers[i].getIbillstatus().equals(new Integer(IArriveorderStatus.PASS))) {
					strAuditted = "已审批";
				} else if (
					headers[i].getIbillstatus().equals(new Integer(IArriveorderStatus.CHECKING))) {
					strAuditted = "正在审批";
				}
				headers[i].setIsauditted(strAuditted);
				arriveorders[i] = new ArriveorderVO();
				arriveorders[i].setParentVO(headers[i]);
			}
			//只查询第一张单据的表体
			items = dmo.findItemsForHids(new String[] { saHid[0] });
			items =
				(ArriveorderItemVO[]) nc.bs.pu.pub.PubDMO.getBodysWithFree(
					items,
					"cmangid",
					"vfree0");
			arriveorders[0].setChildrenVO(items);
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000034")/*@res "异常位置：ArriveorderBO::queryAllArriveMy()"*/,e);
	}
	timer.stopAndShow("到货维护查询");

	return arriveorders;
}

/**
 * 功能描述:查询到货单表体
 * 输入参数: ArrayList(0)	到货单头主键[]
 			 ArrayList(1)	到货单头时间截[]
 * 返回值:ArrayList(0),到货单体[](自由项已处理)
 */
public ArrayList queryAllBodys(ArrayList aryPara)
	throws javax.naming.NamingException, BusinessException, java.sql.SQLException {
	if (aryPara == null || aryPara.size() < 2) {
		SCMEnv.out("传入参数不正确: 参数为空或参数的个数不足");
		return null;
	}
	String[] saHId = (String[]) aryPara.get(0);
	String[] saHTs = (String[]) aryPara.get(1);
	if (saHId == null
		|| saHId.length < 1
		|| saHTs == null
		|| saHTs.length < 1
		|| saHId.length != saHTs.length) {
		SCMEnv.out("传入参数不正确：到货单头ID与到货单头时间截不匹配");
		return null;
	}
	ArriveorderDMO dmo = null;
	ArrayList aryRet = new ArrayList();
	ArriveorderItemVO[] items = null;
	try {
		dmo = new ArriveorderDMO();
		items = dmo.queryBodyByHidsHts(saHId, saHTs);
		//判断是否并发操作
		if (items == null || items.length <= 0) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000035")/*@res "发生并发操作，请刷新界面"*/);
		}
		Hashtable h = nc.bs.pu.pub.PubDMO.getHashBodyByHeadKey(items, "carriveorderid");
		if (h == null || h.size() < 0) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000035")/*@res "发生并发操作，请刷新界面"*/);
		}
		for (int i = 0; i < saHId.length; i++) {
			if (!h.containsKey(saHId[i])
				|| h.get(saHId[i]) == null
				|| ((ArriveorderItemVO[]) h.get(saHId[i])).length < 0) {
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000035")/*@res "发生并发操作，请刷新界面"*/);
			}
		}
		//处理表体自由项
		items =
			(ArriveorderItemVO[]) nc.bs.pu.pub.PubDMO.getBodysWithFree(
				items,
				"cmangid",
				"vfree0");
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000036")/*@res "异常位置：ArriveorderBO::queryAllBodys()!"*/, e);
	}
	aryRet.add(items);
	return aryRet;
}

/**
 * 查询到货单VO[]

 * 参数: 到货单VO[]

 * 返回: 到货单VO[]
 */
public ArrayList queryArrVOsByArrVOs(ArriveorderVO[] vos) throws BusinessException {
	ArrayList list = new ArrayList();
	try {
		if (vos == null || vos.length <= 0)
			return null;
		ArriveorderDMO dmo = new ArriveorderDMO();
		Vector vHids = new Vector();
		for (int i = 0; i < vos.length; i++) {
			if (vos[i].getParentVO() != null && vos[i].getParentVO().getPrimaryKey() != null && !vos[i].getParentVO().getPrimaryKey().trim().equals("") && !vHids.contains(vos[i].getParentVO().getPrimaryKey())) {
				vHids.addElement(vos[i].getParentVO().getPrimaryKey());
			}
		}
		if (vHids.size() == 0)
			return null;
		String strWhere = "carriveorderid in " + new TempTableUtil().getSubSql(vHids);
		/*查询表头*/
		ArriveorderHeaderVO[] headers = dmo.queryHeadersBySql(strWhere);
		/*查询表体*/
		Hashtable hashItem = dmo.findItemsForHeaderMyArray((String[])vHids.toArray(new String[vHids.size()]));
		ArriveorderItemVO[] items = null;
		/*组合到货单VO[]*/
		ArriveorderVO[] newVOs = new ArriveorderVO[headers.length];
		for (int i = 0; i < headers.length; i++) {
			newVOs[i] = new ArriveorderVO();
			newVOs[i].setParentVO(headers[i]);
			items = (ArriveorderItemVO[]) hashItem.get(headers[i].getPrimaryKey());
			items = (ArriveorderItemVO[]) nc.bs.pu.pub.PubDMO.getBodysWithFree(items,"cmangid","vfree0");
			newVOs[i].setChildrenVO(items);
		}
		list.add(newVOs);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000037")/*@res "异常位置：ArriveorderBO::queryArrVOsByArrVOs()"*/,e);
	}
	return list;
}

/**
 * 查询可补货采购到货单
 * 创建日期：(2003-09-13)
 * queryHeadAllDataForRc2Po(businessType, tmpWhere)
 */
public ArriveorderItemVO[] queryBodyAllDataRc2Po(String strHid) throws BusinessException {
	long lbegin = System.currentTimeMillis();

	ArriveorderItemVO[] items = null;
	try {
		ArriveorderDMO dmo = new ArriveorderDMO();
		items = dmo.queryBodyAllDataRc2Po(strHid);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBean::queryHeadAllDataForRc2Po() Exception!",e);
	}

	long lend = System.currentTimeMillis();
	SCMEnv.out("查询可补货到货单时间是：" + (lend - lbegin) + " ms");

	return items;
}

/**查询可入库的到货单表体
 *
 * 参数结构
 *	ArrayList
 *		|-String,头ID
 *		|-String,头TS
 *		|-String[],体ID[]
 *		|-UFBoolean,质量管理是否启用
 *
 * 创建日期：2004-04-22
 * 创 建 者：晁志平
 */
public ArriveorderItemVO[] queryBodysForIc(ArrayList listPara) throws BusinessException {

	long lbegin = System.currentTimeMillis();

	ArriveorderItemVO[] items = null;
	try {
		ArriveorderDMO dmo = new ArriveorderDMO();
		items = dmo.queryBodysForIc(listPara);
	} catch (Exception e) {
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000038")/*@res "查询可入库的到货单表头出现异常!详细信息参见后参日志!"*/,e);
	}
	long lend = System.currentTimeMillis();

	SCMEnv.out("查询可补货到货单时间是：" + (lend - lbegin) + " ms");

	return items;
}

/**
 * @功能：查询到货单(审批操作)
 * 1.过滤状态（自由、审批）
 * 2.用表头主键查询表体
 * 注：全部表体均被删除而表头未被删除的表头已经被过滤掉
 * @作者：晁志平
 * 创建日期：(2001-9-7 10:36:02)
 */
public ArriveorderVO[] queryForAuditMy(
	ConditionVO[] condsUserDef,
	ConditionVO[] condsNormal,
	String pk_corp,
	boolean[] status,
	String strUpSrcInfoSQLPart)
	throws BusinessException {

    Timer timer = new Timer();
	timer.start("查询到货单(审批操作)");

	ArriveorderVO[] arriveorders = null;
	ArriveorderHeaderVO[] headers = null;
	String strAuditted = null;
	try {
		String strSQL =
			getSQLForAuditMy(
				condsUserDef,
				condsNormal,
				pk_corp,
				status,
				strUpSrcInfoSQLPart);
		//排序  
//		String orderby = "order by po_arriveorder.ibillstatus ";   //edit by wbp sql语句执行错误 改正
		String orderby = ")order by po_arriveorder.ibillstatus ";
		strSQL += orderby;
		
		ArriveorderDMO dmo = new ArriveorderDMO();
//    String strSubSql = "carriveorderid in (select po_arriveorder.carriveorderid " + strSQL + ") ";;   //edit by wbp sql语句执行缺失右括号（改正）
    String strSubSql = "carriveorderid in (select po_arriveorder.carriveorderid " + strSQL + "";; 
		headers = (ArriveorderHeaderVO[]) dmo.queryHeadersBySql(strSubSql);

		if (headers != null) {
			arriveorders = new ArriveorderVO[headers.length];
			for (int i = 0; i < headers.length; i++) {
				strAuditted = "未审批";
				arriveorders[i] = new ArriveorderVO();
				arriveorders[i].setParentVO(headers[i]);
				if (((ArriveorderHeaderVO) arriveorders[i].getParentVO())
					.getIbillstatus()
					.equals(new Integer(IArriveorderStatus.PASS))) {
					strAuditted = "已审批";
				} else if (
					((ArriveorderHeaderVO) arriveorders[i].getParentVO()).getIbillstatus().equals(
						new Integer(IArriveorderStatus.CHECKING))) {
					strAuditted = "正在审批";
				}
				((ArriveorderHeaderVO) arriveorders[i].getParentVO())
					.setIsauditted(strAuditted);
			}
			//只返回第一张单据的表体(参数数组长度为一，不必优化)
			ArriveorderVO[] retVos =
				dmo.findItemsForHeaderMyArray(new ArriveorderHeaderVO[] { headers[0] });
			arriveorders[0] = retVos[0];
		}
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBean::queryForAuditMy(ConditionVO[] conds, String pk_corp) Exception!",e);
	}
	timer.stopAndShow("查询到货单(审批操作)");

	return arriveorders;
}

/**
 * 到货明细查询
 */
public ArriveorderItemVO[] queryForDetail(ConditionVO[] conds, String pk_corp) throws BusinessException {

    nc.vo.ic.pub.bill.Timer timer = new nc.vo.ic.pub.bill.Timer();
	timer.start("到货明细查询");

	ArriveorderItemVO[] items = null;
	HashMap hOrderbb1id = null;
	try {
		ICreateCorpQueryService myService = (ICreateCorpQueryService)nc.bs.framework.common.NCLocator.getInstance().lookup(ICreateCorpQueryService.class.getName());
		boolean bScEnabled = myService.isEnabled(pk_corp, "SC");
		String strSQL = getSQLForQueryMy(conds, pk_corp, bScEnabled);
		
		ArriveorderDMO dmo = new ArriveorderDMO();
		items = (ArriveorderItemVO[]) dmo.findItemsDetail(strSQL, bScEnabled);
		if (items == null || items.length == 0)
			return null;
		else {
			hOrderbb1id = dmo.queryOrdbb1();
			for(int i = 0;i < items.length;i++){
				String sOrderbb1id = items[i].getCorder_bb1id();
				if(sOrderbb1id != null && sOrderbb1id.trim().length() > 0){
					UFDate planDate = new UFDate((String)hOrderbb1id.get(sOrderbb1id));
					items[i].setPlandate(planDate);
				}
				//赠品数量处理
				if(items[i].getBlargess() != null && items[i].getBlargess().booleanValue()){
					items[i].setNpresentnum(items[i].getNarrvnum());
				}
			}
		}

	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBean::queryForDetail(ConditionVO[] conds, String pk_corp) Exception!",e);
	}
	timer.stopAndShow("到货明细查询");

	return items;
}

/**
 * 作者：汪维敏
 * 功能：保存及审批操作时，前台需要刷新审批人，审批日期，ts，单据状态
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2004-5-13 13:21:13)
 * 修改日期，修改人，修改原因，注释标志：
 *
 * @param key java.lang.String
 * @exception BusinessException 异常说明。
 * 
 * 2006-05-18, Czp, V5修改，支持制单时间、审批时间、最后修改时间的刷新
 */
public ArrayList queryForSaveAudit_RC(String key) throws BusinessException {
	ArrayList arr = new ArrayList();
	try {
		ArriveorderDMO dmo = new ArriveorderDMO();
		arr = dmo.queryForSaveAudit(key);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return arr;
}

/**
 * 查询可补货采购到货单
 * 创建日期：(2003-09-13)
 * queryHeadAllDataForRc2Po(businessType, tmpWhere)
 */
public ArriveorderHeaderVO[] queryHeadAllDataForRc2Po(String strBusiType, String strSQL) throws BusinessException {

    nc.vo.ic.pub.bill.Timer timer = new nc.vo.ic.pub.bill.Timer();
	timer.start("查询可补货采购到货单");

	ArriveorderHeaderVO[] headers = null;
	try {
		ArriveorderDMO dmo = new ArriveorderDMO();
		headers = dmo.queryHeadAllDataForRc2Po(strBusiType, strSQL);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBean::queryHeadAllDataForRc2Po() Exception!",e);
	}
	timer.stopAndShow("查询可补货采购到货单");

	return headers;
}

/**查询可入库的到货单表头
 *
 * 参数结构
 *	ArrayList
 *		|-String,公司主键
 *		|-String,业务类型
 *		|-String,查询条件串
 *		|-UFBoolean,质量管理是否启用
 *
 * 创建日期：2004-04-22
 * 创 建 者：晁志平
 */
public ArriveorderHeaderVO[] queryHeadsForIc(ArrayList listPara) throws BusinessException {

	long lbegin = System.currentTimeMillis();

	ArriveorderHeaderVO[] heads = null;
	try {
		ArriveorderDMO dmo = new ArriveorderDMO();
		heads = dmo.queryHeadsForIc(listPara);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000038")/*@res "查询可入库的到货单表头出现异常!详细信息参见后参日志!"*/,e);
	}
	long lend = System.currentTimeMillis();

	SCMEnv.out("查询可补货到货单时间是：" + (lend - lbegin) + " ms");

	return heads;
}

/**
 * 作者：汪维敏
 * 功能：此处插入方法说明
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2004-4-1 14:07:59)
 */
public HashMap queryNewTs(String[] sId) throws BusinessException{
	HashMap hTs = new HashMap();
	try {
		nc.bs.pu.pub.PubDMO dmo = new nc.bs.pu.pub.PubDMO();
		hTs = dmo.queryArrayValues("po_order_b","corder_bid",new String[]{"ts"},sId,"dr=0");
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	return hTs;
}

/**
 * 查询委外订单(可退货)
 * 创建日期：(2003-09-10)
 * @return nc.vo.sc.order.OrderVO[]
 * @param strSQL 查询条件
 * @exception BusinessException 异常说明。
 */
public OrderVO[] queryOrderVOsScBack(String strSQL) throws BusinessException {

    nc.vo.ic.pub.bill.Timer timer = new nc.vo.ic.pub.bill.Timer();
	timer.start("查询委外订单(可退货)");

	nc.vo.sc.order.OrderVO[] orders = null;
	nc.vo.sc.order.OrderHeaderVO[] headers = null;
	try {
		//nc.bs.sc.order.OrderDMO dmo = new nc.bs.sc.order.OrderDMO();
//		Object oInstance = new InterServBO().getInterInstance(ProductCode.PROD_SC,InterRegister.SC0061) ;
		IScToPu_OrderDMO dmo = (IScToPu_OrderDMO) NCLocator.getInstance().lookup(IScToPu_InterfaceDMO.class.getName());

		//查询表头
		headers = (OrderHeaderVO[]) dmo.queryAllHeadData(strSQL);
		//查询整个单据
		if (headers != null && headers.length > 0) {
			if(!BsPuTool.isEnabled(headers[0].getPk_corp(),ProductCode.PROD_SC)){//注意：本处理假设所有单据均为一个公司所有，如果委外支持多公司时要调用代码
				return null;
			}
			orders = (OrderVO[]) dmo.findVOsBack(headers);
		}
		//可退货处理
		orders = getValidOrdersScBack(orders);
		//订单表体加入累计不合格数量
		orders = getValidOrdersScBack_NotElg(orders);
		//根据库存组织+存货基础ID从物料生产档案获取仓库（如果订单体仓库为空）
		orders = (OrderVO[])dmo.getWarehouseFromProduce(orders);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBean::queryOrderVOsScMy(String) Exception!",e);
	}
	timer.stopAndShow("查询委外订单(可退货)");

	return orders;
}



/**
 *  针对退货补货时订单回写到货单
 *  czp/2003-09-25/created
 */
public void rewriteNaccReplenishNum(nc.vo.scm.pu.ParaVO21WriteNumTo23 paraVo) throws BusinessException {

	try {
		//参数合法性检查
		if (paraVo == null) {
			SCMEnv.out("针对退货补货回写接口参数方法不正确");
			return;
		}
		if (paraVo.getRowId() == null || paraVo.getRowId().length <= 0) {
			SCMEnv.out("针对退货补货回写接口参数方法不正确");
			return;
		}
		if (paraVo.getNumAdded() == null || paraVo.getNumAdded().length <= 0) {
			SCMEnv.out("针对退货补货回写接口参数方法不正确");
			return;
		}
		if (paraVo.getRowId().length != paraVo.getNumAdded().length) {
			SCMEnv.out("针对退货补货回写接口参数方法不正确");
			return;
		}
		//回写
		ArriveorderDMO dmo = new ArriveorderDMO();
		dmo.rewriteNaccReplenishNum(paraVo);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000039")/*@res "回写到货单失败"*/, e);
	}
}

/**
 * 根据到货单行生成报检单
 * 创建日期：(2002-5-9 12:04:07)
 * @param sTypeId java.lang.String
 * @param items nc.vo.rc.receive.ArriveorderItemVO[]
 * 
 * 2006-05-25,Czp,应质检(YYE)要求，调整到货单数据，第一张到货单只有一行表体
 * 
 */
private ArrayList crtQcBills(String sTypeId, ArriveorderItemVO[] items, String cuserid, UFDateTime dateTime) throws BusinessException {
	ArrayList listRetFromQc = null;
	if (items == null || items.length <= 0){
		SCMEnv.out("CZPOUT FOR QC INTERFACE:传入单据行为NULL，直接返回!");
		return null;
	}
	SCMEnv.out("CZPOUT FOR QC INTERFACE:传入单据行数为："+items.length);
	//组织数据
	Vector vHeadId = new Vector();
	//不同的表头ID
	for (int i = 0; i < items.length; i++) {
		if (!vHeadId.contains(items[i].getCarriveorderid())) {
			vHeadId.addElement(items[i].getCarriveorderid());
		}
	}
	if (vHeadId.size() <= 0)
		return null;
	//哈希表：表头ID = 表头VO
	Hashtable hTmpHead = null;
	ArriveorderDMO dmo = null;
	try {
		dmo = new ArriveorderDMO();
		hTmpHead = dmo.getHeadsByIds(vHeadId);
		if (hTmpHead == null)
			return null;
	} catch (Exception e) {
		SCMEnv.out(e);
		nc.bs.pu.pub.PubDMO.throwBusinessException(e);
	}
	//不同的表头ID
	ArriveorderHeaderVO headVo = null;
	ArriveorderVO[] vos = new ArriveorderVO[items.length];
	for (int i = 0; i < items.length; i++) {
		headVo = (ArriveorderHeaderVO) hTmpHead.get(items[i].getCarriveorderid());
		headVo.setCuserid(cuserid);
		vos[i] = new ArriveorderVO();
		vos[i].setParentVO(headVo);
		vos[i].setChildrenVO(new ArriveorderItemVO[]{items[i]});
	}
	SCMEnv.out("CZPOUT FOR QC INTERFACE:传入单据数(每张单据只有一行)为："+vos.length);
	
	try {
		IPlatformlog log = (IPlatformlog) NCLocator.getInstance().lookup(IPlatformlog.class.getName());
		
		listRetFromQc = log.generateCheckbillDirectly(sTypeId, ScmConst.PO_Arrive, vos,dateTime);
		
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000040")/*@res "生成质检单时出错"*/, e);
	}
	return listRetFromQc;
}
/**
 * @功能：查询主辅计量换算率
 * @para : String pk_inventorys : 存货基本档案主键数组, String pk_measdocs 存货辅计量主键数组
 * @return Object[]  Object[0],换算率 	Object[1],是否固定换算率
 */
public ArrayList getConvertIsfixed(
	String[] pk_inventorys,
	String[] pk_measdocs)
	throws BusinessException {
	ArrayList aryReturn = null;
	try {
		ArriveorderDMO dmo = new ArriveorderDMO();
		aryReturn = dmo.getConvertIsfixed(pk_inventorys, pk_measdocs);
	} catch (Exception e) {
		
		nc.bs.pu.pub.PubDMO.throwBusinessException("ArriveorderBO::getMainmeasRate(String pk_inventory, String pk_measdoc) Exception!",e);
	}
	return aryReturn;
}
/**
 * 流程动作组件(单张单据，多张单据共用的方法)
 * 根据主键在数据库中删除一个VO对象（逻辑删除）
 * 注意：回写由流程配作废的下一个动作组件来完成
 * 创建日期：(2001-6-8)
 * @param key String
 * @exception java.rmi.RemoteException 异常说明。
 */
public void deleteArrayMy(ArriveorderVO[] vos) throws  BusinessException {
	long lbegin = System.currentTimeMillis();
	try {
		ArriveorderDMO dmo = new ArriveorderDMO();
		//删除
		Vector vHeadId = new Vector();
		for (int i = 0; i < vos.length; i++) {
			//dmo.deleteMy(vos[i]);
			if (vos[i].getParentVO() != null && vos[i].getParentVO().getPrimaryKey() != null) {
				if (!vHeadId.contains(vos[i].getParentVO().getPrimaryKey())) {
					vHeadId.addElement(vos[i].getParentVO().getPrimaryKey());
				}
			}
		}
		//批删除
		String[] saHId = null;
		if (vHeadId.size() > 0) {
			saHId = new String[vHeadId.size()];
			vHeadId.copyInto(saHId);
			dmo.deleHeadBodyByHIds(saHId);
		}
	} catch (Exception e) {
		PubDMO.throwBusinessException(e);
	}

	long lend = System.currentTimeMillis();
	SCMEnv.out("************************************************");
	SCMEnv.out("作废到货单时间是：" + (lend - lbegin) + " ms");

}
/**
 * <p>作者：晁志平
 * <p>功能：退货单保存前超到货待检量
 *		<p>该检查在脚本中置于保存、回写上游、更新可用量之后
 *		<p>该方法为脚本配置方法，请不要随意修改参数、返回值、名称
 * <p>参数：voCheck		待保存的到货单VO
 * <p>返回：无
 * <p>例外：BusinessException
 * <p>日期：(2006-02-20 11:39:21)
 * <p>修改日期，修改人，修改原因，注释标志：
 * 
 * <p>2006-05-23：Xy、Ydy、Czp 目前支持公司、库存组织、仓库、到货日期、存货、批次号、自由项1-5
 */
public void validateStockPresent(ArriveorderVO voCheck,ArriveorderVO voOld) throws BusinessException {

//	if(true) return;
	String sMethodName = "nc.bs.rc.receive.ArriveOrderImpl.validateStockPresent(ArriveorderVO,ArriveorderVO)";
	final Log log = Log.getInstance(sMethodName);
	//参数正确性检查
	if (voCheck == null || voCheck.getHeadVO() == null) {
		return;
	}
	//不是第一次保存，不做到货待检量检查
	if(!voCheck.isFirstTimeSP()){
		log.debug("不是第一次保存，不做到货待检量检查");
		return;
	}
	//到货单没有退货标志，不做到货待检量检查
	if(!voCheck.isReturn()){
		log.debug("到货单没有退货标志，不做到货待检量检查");
		return;
	}
	//委外订单不检查
	if(voCheck.isFromSC()){
		log.debug("委外到货单，不做到货待检量检查");
		return;
	}
	//获取来源订单行是否有退货标志
	ArrayList listUpBillId = new ArrayList();
	ArriveorderItemVO[] items = voCheck.getBodyVo();
	int iLen = items.length;
	String strUpBillId = null;
	for (int i = 0; i < iLen; i++) {
		strUpBillId = PuPubVO.getString_TrimZeroLenAsNull(items[i].getCorderid());
		if(strUpBillId == null){
			continue;
		}
		if(listUpBillId.contains(strUpBillId)){
			continue;
		}
		listUpBillId.add(strUpBillId);
	}
	if(listUpBillId.size() == 0){
		log.debug("所有到货单行的来源订单ID为空，直接返回!");
		return;
	}
	try {
		String[] saOrderId = (String[]) listUpBillId.toArray(new String[listUpBillId.size()]);
		HashMap mapOrderIdBack = new PubDMO().queryArrayValues("po_order","corderid",new String[]{"breturn"},saOrderId," po_order.dr = 0 ");
		if(mapOrderIdBack == null){
			mapOrderIdBack = new HashMap();
		}
		//库存组织ID(当前)
		String sStoreOrgId = voCheck.getHeadVO().getCstoreorganization();
		if (PuPubVO.getString_TrimZeroLenAsNull(sStoreOrgId) == null){
			log.debug("库存组织ID(当前)为空，直接返回!");
			return;
		}
		//公司主键
		String sCorpId = voCheck.getHeadVO().getPk_corp();
		//到货日期
		UFDate ufdArrDate = voCheck.getHeadVO().getDreceivedate();
		
		UFBoolean bOrdReturn = null;
		ArrayList listAtp = new ArrayList();
		ATPVO voAtp = null;
		
		//组织可用量VO,2006-05-23：Xy、Ydy、Czp 目前支持公司、库存组织、仓库、到货日期、存货、批次号、自由项1-5
		for (int i = 0; i < iLen; i++) {
			strUpBillId = items[i].getCorderid();
			if(strUpBillId == null){
				continue;
			}
			//来源订单行有退货标志才处理
			bOrdReturn = PuPubVO.getUFBoolean_NullAs(((Object[])mapOrderIdBack.get(strUpBillId))[0],UFBoolean.FALSE);
			if(bOrdReturn == null){
				bOrdReturn = UFBoolean.FALSE;
			}
			if(!bOrdReturn.booleanValue()){
				continue;
			}
			voAtp = new ATPVO();
			voAtp.setPk_corp(sCorpId);
			voAtp.setCcalbodyid(sStoreOrgId);
			voAtp.setCwarehouseid(items[i].getCwarehouseid());
			voAtp.setDplandate(ufdArrDate);
			voAtp.setCinventoryid(items[i].getCmangid());
			voAtp.setVbatchcode(items[i].getVproducenum());
			voAtp.setVfree1(items[i].getVfree1());
			voAtp.setVfree2(items[i].getVfree2());
			voAtp.setVfree3(items[i].getVfree3());
			voAtp.setVfree4(items[i].getVfree4());
			voAtp.setVfree5(items[i].getVfree5());
			//
			listAtp.add(voAtp);
		}
		if(listAtp.size() == 0){
			log.debug("所有行均来自于无退货标志的采购订单，直接返回");
			return;
		}
		//检查现存量，为负则提示给用户
		ATPVO[] vos = (ATPVO[]) listAtp.toArray(new ATPVO[listAtp.size()]);
		//合并
		DefaultVOMerger vom = new DefaultVOMerger();
		vom.setGroupingAttr(new String[] { 
				"cwarehouseid",
				"cinventoryid", "vbatchcode", 
				"vfree1", "vfree2", "vfree3", "vfree4", "vfree5" });
		vom.setSummingAttr(new String[] { "nonreceivenum" });
		vos = (ATPVO[]) vom.mergeByGroup(vos);
		if (vos == null || vos.length <= 0) {
			log.debug("所有行均未超到货待检量，退货单到货待检量检查通过");
			return;
		}
		//IC接口
		IICPub_InvATPDMO invOnRcDMO = (IICPub_InvATPDMO) NCLocator.getInstance().lookup(IICPub_InvATPDMO.class.getName());	
		vos = invOnRcDMO.getReceiveNums(vos);
		if (vos == null || vos.length <= 0) {
			log.debug("所有行均未超到货待检量，退货单到货待检量检查通过");
			return;
		}
		//if(true)throw new BusinessException("测试直接返回!");
		//
		int jLen = vos.length;
		ArrayList listInValidMangid = new ArrayList();
		for(int i=0;i<jLen;i++){
			if(vos[i] == null){
				continue;
			}
			if(vos[i].getNonreceivenum() != null && vos[i].getNonreceivenum().doubleValue() < 0.0){
				listInValidMangid.add(vos[i].getCinventoryid());
			}
		}
		if (listInValidMangid.size() == 0) {
			log.debug("所有行均未超到货待检量，退货单到货待检量检查通过");
			return;
		}
		//查询存货名称
		String[] saMangid = (String[]) listInValidMangid.toArray(new String[listInValidMangid.size()]);
		PubDMO puPubDmo = new PubDMO();
		HashMap hInvName = puPubDmo.queryArrayValues(
				"bd_invbasdoc b,bd_invmandoc m",
				"m.pk_invmandoc",
				new String[] { "b.invname"},
				saMangid,
				"b.pk_invbasdoc = m.pk_invbasdoc and m.dr=0 and b.dr=0");

		String strErrorName = "";
		Object[] o = (Object[])hInvName.get(saMangid[0]);
		if(o != null && o[0] != null){
			strErrorName += o[0];
		}
		for(int i = 1;i < saMangid.length;i++){
			o = (Object[])hInvName.get(saMangid[i]);
			if(o != null && o[0] != null){
				strErrorName += ";";
				strErrorName += o[0];
			}
		}
		String strErrMsg = nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040203","UPP40040203-000025",null,new String[]{strErrorName})/*@res "下列存货超到货待检量： {0} 。"*/ ;
		if(strErrorName.length() > 0 ){
			throw new BusinessException(strErrMsg);
		}
	} catch (Exception e) {
		log.debug(e);
		throw new BusinessException(e.getMessage());
	}
}
/**
 * <p>流程动作组件：回写采购订单累计生成到货(退货数量)
 * <p>@author czp
 * <p>创建日期：(2006-4-13 20:26:46)
 */
public void rewriteNaccNumPo(ArriveorderVO vo, Object objPara)
	throws BusinessException {
	
	if (vo == null || vo.getUpBillType() == null || !vo.getUpBillType().equals(nc.vo.scm.constant.ScmConst.PO_Order)) {
		SCMEnv.out("到货单不是来源于采购订单，回写采购订单累计生成到货(退货数量)方法直接返回!");
		return;
	}
	
	Timer timer = new Timer();
	timer.start("回写采购订单累计生成到货(退货数量)开始");
	SCMEnv.out("单据行数：" + vo.getChildrenVO().length);
	ArriveorderVO newvo = null;
	try {
		//参数
		ArrayList aryPara = (ArrayList) objPara;
		ArrayList aryPara0 = (ArrayList) aryPara.get(0);
		//oldvo:UI缓存VO,用于回写及给下一个回写动作传回写参数
		ArriveorderVO oldvo = (ArriveorderVO) aryPara0.get(1);
		//newvo:UI单据模板VO,用于回写及给下一个回写动作传回写参数
		newvo = (ArriveorderVO) aryPara0.get(3);

		//组织订单回写参数数据

		//业务类型
		String sBusiType = null;
		sBusiType = (String) vo.getParentVO().getAttributeValue("cbiztype");
		if (sBusiType == null || sBusiType.trim().equals("")) {
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000026")/*@res "数据错误：未获取业务类型，保存到货单失败"*/);
		}
		//表体ID、旧数量、新数量及行号数组
		Vector vOrder_bid = new Vector();
		//采购订单子子表1ID
		Vector vBB1ID = new Vector();

		Vector vOldNum = new Vector();
		Vector vCurNum = new Vector();
		String[] saOrder_bid = null;
		String[] saOrder_bb1id = null;
		UFDouble[] daOldNum = null;
		UFDouble[] daNewNum = null;
		//行号暂时传空
		boolean bIsNewBill = (vo.getParentVO().getPrimaryKey() == null || vo.getParentVO().getPrimaryKey().trim().equals(""));
		//保存前免检存货累计合格数量及累计不合格数量的处理
		vo = getVOForFreeChk(vo);
		ArriveorderItemVO[] items = (ArriveorderItemVO[]) vo.getChildrenVO();
		UFDouble ufdTmp = null;

		//数据组织：新增单据

		if (bIsNewBill || oldvo == null) {
			if (items == null || items.length <= 0)
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40040301","UPP40040301-000027")/*@res "数据错误：新增的单据表体为空, 保存到货单失败"*/);
			for (int i = 0; i < items.length; i++) {
				vOrder_bid.addElement(items[i].getAttributeValue("cupsourcebillrowid"));
				//采购订单子子表1ID
				vBB1ID.addElement(items[i].getAttributeValue("corder_bb1id"));
				vOldNum.add(VariableConst.ZERO);
				//**用于回写的到货数量要去除赠品数量*/
				ufdTmp = (UFDouble) items[i].getAttributeValue("narrvnum");
				if(items[i].getBlargess() != null 
						&& items[i].getBlargess().booleanValue() 
						&& (items[i].getBlargessuprow() == null || !items[i].getBlargessuprow().booleanValue())){
					vCurNum.addElement(null);
				}else{
					vCurNum.add(ufdTmp);
				}
			}
		}
		//数据组织：修改单据
		else {
			//如果只有表头改动，则直接返回
			if (items == null || items.length <= 0) {
				return ;
			}
			/**旧到货单表体哈希表{订单行ID = 累计(旧到货数量-旧赠品数量)}*/
			//Hashtable hOldNum = getAccArrNum(oldvo);
			Hashtable hOldNum = new Hashtable();
			if(oldvo != null){
				hOldNum = getAccArrNumBB1(oldvo);
			}
			Enumeration keys = hOldNum.keys();
			String corder_bid = null;
			String corder_bb1id = null;
			vOrder_bid = new Vector();
			//采购订单子子表1ID
			String strKey = null;
			vBB1ID = new Vector();
			vOldNum = new Vector();
			vCurNum = new Vector();
			while (keys.hasMoreElements()) {
				strKey = (String) keys.nextElement();
				// 主键长度是20
				corder_bid = strKey.substring(0, 20);
				corder_bb1id = strKey.substring(20, strKey.length());
				vOrder_bid.addElement(corder_bid);
				if (corder_bb1id != null && corder_bb1id.trim().length() > 4)
					vBB1ID.addElement(corder_bb1id);
				else
					vBB1ID.addElement(null);
				vOldNum.addElement(hOldNum.get(strKey));
			}
			/**界面显示到货单表体哈希表{订单行ID = 累计(新到货数量-新赠品数量)}*/
			//Hashtable hNewNum = getAccArrNum(newvo);
			Hashtable hNewNum = getAccArrNumBB1(newvo);
			vCurNum = new Vector();
			/**到货单的来源行ID即订单行ID不会变*/
			for (int i = 0; i < vOrder_bid.size(); i++) {
				String sTemp = null;
				if (vBB1ID.elementAt(i) == null || vBB1ID.elementAt(i).toString().trim().length() == 0)
					sTemp = "NULL";
				else
					sTemp = vBB1ID.elementAt(i).toString();
				String sKey = vOrder_bid.elementAt(i).toString() + sTemp;
				vCurNum.addElement((UFDouble) hNewNum.get(sKey));
			}
		}

		timer.addExecutePhase("回写前处理");

		/**采购订单做容差校验及回写累计到货数量(已经去除赠品数量)*/
		/**注意此处不回写累计途耗数量，累计途耗数量由流程下一个动作来完成*/

		OrderImpl myService = new OrderImpl();
		//生成调用订单方法参数
		if (vOrder_bid != null && vOrder_bid.size() > 0) {
			saOrder_bid = new String[vOrder_bid.size()];
			vOrder_bid.copyInto(saOrder_bid);
		}
		if (vBB1ID != null && vBB1ID.size() > 0) {
			saOrder_bb1id = new String[vBB1ID.size()];
			vBB1ID.copyInto(saOrder_bb1id);
		}
		if (vOldNum != null && vOldNum.size() > 0) {
			daOldNum = new UFDouble[vOldNum.size()];
			vOldNum.copyInto(daOldNum);
		}
		if (vCurNum != null && vCurNum.size() > 0) {
			daNewNum = new UFDouble[vCurNum.size()];
			vCurNum.copyInto(daNewNum);
		}
		//调用订单容差控制方法(不含并发控制)
		if (isBack(vo)) {
			//退货
			nc.vo.po.rewrite.ParaBackRcToPoRewriteVO para = new nc.vo.po.rewrite.ParaBackRcToPoRewriteVO();
			para.setPk_corp((String) vo.getParentVO().getAttributeValue("pk_purcorp"));
			para.setCBodyIdArray(saOrder_bid);
			para.setDNumArray(daNewNum);
			para.setDOldNumArray(daOldNum);
			para.setCBB1IdArray(saOrder_bb1id);
			para.setUserConfirm(vo.isUserConfirm());
			
			myService.rewriteBackRcNum(para);
		} else {
			//到货

			//回写VO
			nc.vo.po.rewrite.ParaRcToPoRewriteVO voPara = new nc.vo.po.rewrite.ParaRcToPoRewriteVO();
			voPara.setPk_corp((String) vo.getParentVO().getAttributeValue("pk_purcorp"));
			voPara.setCbiztype(sBusiType);

			ArriveorderItemVO bodyVO[] = (ArriveorderItemVO[]) vo.getChildrenVO();
			for(int i = 0; i < bodyVO.length; i++){
				if(bodyVO[i].getBlargess() != null && bodyVO[i].getBlargess().booleanValue()) bodyVO[i].setNpresentnum(bodyVO[i].getNarrvnum());
			}
			Vector v1 = new Vector(), v2 = new Vector(), v3 = new Vector(), v4 = new Vector();
			for(int i = 0; i < saOrder_bid.length; i++){
				v1.addElement(saOrder_bid[i]);
				v2.addElement(daOldNum[i]);
				v3.addElement(daNewNum[i]);
				v4.addElement(saOrder_bb1id[i]);
			}
			if(v1.size() > 0){
				saOrder_bid = new String[v1.size()];
				v1.copyInto(saOrder_bid);
				daOldNum = new UFDouble[v2.size()];
				v2.copyInto(daOldNum);
				daNewNum = new UFDouble[v3.size()];
				v3.copyInto(daNewNum);
				saOrder_bb1id = new String[v4.size()];
				v4.copyInto(saOrder_bb1id);
				voPara.setCBodyIdArray(saOrder_bid);
				voPara.setDOldNumArray(daOldNum);
				voPara.setDNumArray(daNewNum);
				voPara.setCBB1IdArray(saOrder_bb1id);
				voPara.setUserConfirm(vo.isUserConfirm());

				myService.rewriteRcNum(voPara);
			}
		}
		timer.addExecutePhase("回写处理");
	} catch (Exception e) {
		PubDMO.throwBusinessException(e);
	}

	timer.showAllExecutePhase("到货单保存操作 rewriteNaccNumPo 结束");
}

/**
 * V5重构:生成质检单、回写累计检验数量 
 * <p>解决生成质检单、回写累计检验数量不在同一个事务导致的并发错误
 * @auther czp
 * @date 2006-04-06
 **/
	public String crtQcAndRewriteNum(ArrayList listPara) throws BusinessException{
		String strError = null;
		String[] saErrorId = null;
		if(listPara == null){
			return null;
		}
		/* 解析参数：
		 * 
		 * 0-----质检是否启用
		 * 1..4--生成质检单参数：ArriveorderBO_Client.crtQcBills
		 * 5-----是否回写累计质检数量
		 * 6..15-回写累计质检数量参数：ArriveorderBO_Client.rewriteNaccumchecknumMy
		 */
		
		//生成质检单
		UFBoolean ufbEnableQC = (UFBoolean) listPara.get(0);
		if(ufbEnableQC.booleanValue()){
			String sTypeId = (String) listPara.get(1);
			ArriveorderItemVO[] items = (ArriveorderItemVO[]) listPara.get(2);
			String cuserid = (String) listPara.get(3);
			UFDateTime dateTime = (UFDateTime) listPara.get(4);
			ArrayList listRetFromQc = crtQcBills(sTypeId,items,cuserid,dateTime);
			if(listRetFromQc != null && listRetFromQc.size() > 0){
				strError = (String) listRetFromQc.get(0);
				saErrorId = (String[]) listRetFromQc.get(1);
			}
		}
		//回写累计质检数量
		UFBoolean ufbRewrite = (UFBoolean) listPara.get(5);
		if(ufbRewrite.booleanValue()){
			String pk_corp = (String) listPara.get(6);
			UFBoolean isCheck = (UFBoolean) listPara.get(7);
			String[] carriveorder_bids = (String[]) listPara.get(8);
			String[] carriveorderids = (String[]) listPara.get(9);
			ArrayList aryNums = (ArrayList) listPara.get(10);
			String coperatorid = (String) listPara.get(11);
			String[] saBts = (String[]) listPara.get(12);
			String[] saHts = (String[]) listPara.get(13);
			UFBoolean isAgainCheck = (UFBoolean) listPara.get(14);
			UFBoolean isTsChanged = UFBoolean.TRUE;
			
			//根据质检回写失败的到货单行ID,过滤要回写累计质检数量的到货单行
			HashMap<String, String> mapNoWrite = new HashMap<String, String>();
			if(saErrorId != null && saErrorId.length > 0){
				//全部进入质检日志情况，不必调用回写接口，直接返回报错信息
				if(saErrorId.length == carriveorder_bids.length){
					return strError;
				}
				for(int i=0; i<saErrorId.length; i++){
					if(saErrorId[i] == null){
						continue;
					}
					mapNoWrite.put(saErrorId[i], "");
				}
			}
			ArrayList<String> listBid = new ArrayList<String>();
			ArrayList<String> listHid = new ArrayList<String>();
			ArrayList<String> listBts = new ArrayList<String>();
			ArrayList<String> listHts = new ArrayList<String>();
//			ArrayList<UFDouble[]> listNum = new ArrayList<UFDouble[]>(); eric
			ArrayList listNum = new ArrayList();
			int iLen = carriveorder_bids.length;
			for(int i=0; i<iLen; i++){
				if(mapNoWrite.containsKey(carriveorder_bids[i])){
					continue;
				}
				listBid.add(carriveorder_bids[i]);
				listHid.add(carriveorderids[i]);
				listBts.add(saBts[i]);
				listHts.add(saHts[i]);
				listNum.add(aryNums.get(i));
			}
			rewriteNaccumchecknumMy(
					pk_corp,
					isCheck,
					listBid.toArray(new String[listBid.size()]),
					listHid.toArray(new String[listHid.size()]),
					listNum,
					coperatorid,
					listBts.toArray(new String[listBts.size()]),
					listHts.toArray(new String[listHts.size()]),
					isAgainCheck,
					isTsChanged);
		}
		//返回
		return strError;
	}
	/**
	 * 关闭消息(新增时才会关闭)
	 * @param vo
	 * @throws BusinessException
	 * @since v50
	 * @author czp
	 * @date 2006-08-17
	 */
	public void completeWorkitem(AggregatedValueObject voSrc) throws BusinessException {
		if(voSrc == null){
			return;
		}	
		ArriveorderVO vo = (ArriveorderVO) voSrc;
		if(vo.getBodyVo() == null || vo.getBodyVo().length == 0){
			return;
		}
		String billId = vo.getBodyVo()[0].getCarriveorderid();      //单据ID
		String checkman = vo.getHeadVO().getCoperator();    //操作员PK
		String billtype = BillTypeConst.PO_ARRIVE;    //单据类型
		String srcBilltype = BillTypeConst.PO_ORDER;//源单据类型
		int iLen = vo.getBodyVo().length;
		String[] saUpHid = new String[iLen];
		for(int i=0; i<iLen; i++){
			saUpHid[i] = vo.getBodyVo()[i].getCupsourcebillid();
		}
		IPFConfig ifpSrv = (IPFConfig) NCLocator.getInstance().lookup(IPFConfig.class.getName());
		ifpSrv.completeWorkitem(billId, saUpHid, checkman, billtype, srcBilltype);
	}
}